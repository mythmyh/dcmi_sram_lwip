
usbotg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001beb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003788  0801c040  0801c040  0002c040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f7c8  0801f7c8  00030710  2**0
                  CONTENTS
  4 .ARM          00000008  0801f7c8  0801f7c8  0002f7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f7d0  0801f7d0  00030710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f7d0  0801f7d0  0002f7d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f7d4  0801f7d4  0002f7d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000710  20000000  0801f7d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030710  2**0
                  CONTENTS
 10 .bss          0001a9a8  20000710  20000710  00030710  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  2001b0b8  2001b0b8  00030710  2**0
                  ALLOC
 12 .sram         00096000  68000000  0801fee8  00040000  2**2
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030710  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004beea  00000000  00000000  00030740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000093df  00000000  00000000  0007c62a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e40  00000000  00000000  00085a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001c70  00000000  00000000  00087850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00033421  00000000  00000000  000894c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00036e8c  00000000  00000000  000bc8e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e6d5e  00000000  00000000  000f376d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  001da4cb  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008924  00000000  00000000  001da520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000710 	.word	0x20000710
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801c028 	.word	0x0801c028

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000714 	.word	0x20000714
 80001cc:	0801c028 	.word	0x0801c028

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea6:	f001 fbd1 	bl	800264c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eaa:	f000 f875 	bl	8000f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eae:	f000 f965 	bl	800117c <MX_GPIO_Init>
  MX_FATFS_Init();
 8000eb2:	f009 fbd3 	bl	800a65c <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000eb6:	f017 ffb5 	bl	8018e24 <MX_USB_HOST_Init>
  MX_UART4_Init();
 8000eba:	f000 f915 	bl	80010e8 <MX_UART4_Init>
  MX_DMA_Init();
 8000ebe:	f000 f93d 	bl	800113c <MX_DMA_Init>
  MX_DCMI_Init();
 8000ec2:	f000 f8d9 	bl	8001078 <MX_DCMI_Init>
  MX_FSMC_Init();
 8000ec6:	f000 fa43 	bl	8001350 <MX_FSMC_Init>
  MX_LWIP_Init();
 8000eca:	f009 fd0f 	bl	800a8ec <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  while(APPLICATION_READY!=Appli_state)
 8000ece:	e001      	b.n	8000ed4 <main+0x34>
	  MX_USB_HOST_Process();
 8000ed0:	f017 ffce 	bl	8018e70 <MX_USB_HOST_Process>
  while(APPLICATION_READY!=Appli_state)
 8000ed4:	4b27      	ldr	r3, [pc, #156]	; (8000f74 <main+0xd4>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d1f9      	bne.n	8000ed0 <main+0x30>
//  printf("state %d\r\n",Appli_state);
//memset(testsram,0,10000);

 PY_OV2640_RGB565_CONFIG();
 8000edc:	f000 fa98 	bl	8001410 <PY_OV2640_RGB565_CONFIG>

 all_circle=(int)BUFFSIZE/MSS;
 8000ee0:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <main+0xd8>)
 8000ee2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000ee6:	601a      	str	r2, [r3, #0]
 left_bytes = BUFFSIZE%MSS;
 8000ee8:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <main+0xdc>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 if (left_bytes!=0)
 8000eee:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <main+0xdc>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d004      	beq.n	8000f00 <main+0x60>
	  all_circle++;
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <main+0xd8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	3301      	adds	r3, #1
 8000efc:	4a1e      	ldr	r2, [pc, #120]	; (8000f78 <main+0xd8>)
 8000efe:	6013      	str	r3, [r2, #0]
 tcp_client_init();
 8000f00:	f001 f9ea 	bl	80022d8 <tcp_client_init>
 	 HAL_Delay(10000);
 8000f04:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f08:	f001 fc12 	bl	8002730 <HAL_Delay>
	//__HAL_DCMI_ENABLE_IT(&hdcmi, DCMI_IT_FRAME);//使用帧中�????????????????????????????????
	 HAL_DCMI_DisableCrop (&hdcmi);
 8000f0c:	481c      	ldr	r0, [pc, #112]	; (8000f80 <main+0xe0>)
 8000f0e:	f001 feb4 	bl	8002c7a <HAL_DCMI_DisableCrop>
	 DCMI_RN = HEIGHT;
 8000f12:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <main+0xe4>)
 8000f14:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000f18:	601a      	str	r2, [r3, #0]
	 DCMI_CN = 1280;
 8000f1a:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <main+0xe8>)
 8000f1c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000f20:	601a      	str	r2, [r3, #0]
	 DCMI_RS =0;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <main+0xec>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
	 DCMI_CS = 0;
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <main+0xf0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
	 HAL_DCMI_ConfigCrop (&hdcmi, DCMI_CS, DCMI_RS, DCMI_CN , DCMI_RN);
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <main+0xf0>)
 8000f30:	6819      	ldr	r1, [r3, #0]
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <main+0xec>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <main+0xe8>)
 8000f38:	6818      	ldr	r0, [r3, #0]
 8000f3a:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <main+0xe4>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	4603      	mov	r3, r0
 8000f42:	480f      	ldr	r0, [pc, #60]	; (8000f80 <main+0xe0>)
 8000f44:	f001 fe66 	bl	8002c14 <HAL_DCMI_ConfigCrop>
	 HAL_Delay(1);
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f001 fbf1 	bl	8002730 <HAL_Delay>
	 HAL_DCMI_EnableCrop (&hdcmi);
 8000f4e:	480c      	ldr	r0, [pc, #48]	; (8000f80 <main+0xe0>)
 8000f50:	f001 febd 	bl	8002cce <HAL_DCMI_EnableCrop>
 	 HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)testsram,DCMI_CN*DCMI_RN/4);
 8000f54:	490f      	ldr	r1, [pc, #60]	; (8000f94 <main+0xf4>)
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <main+0xe8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <main+0xe4>)
 8000f5c:	6812      	ldr	r2, [r2, #0]
 8000f5e:	fb02 f303 	mul.w	r3, r2, r3
 8000f62:	089b      	lsrs	r3, r3, #2
 8000f64:	460a      	mov	r2, r1
 8000f66:	2100      	movs	r1, #0
 8000f68:	4805      	ldr	r0, [pc, #20]	; (8000f80 <main+0xe0>)
 8000f6a:	f001 fd17 	bl	800299c <HAL_DCMI_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8000f6e:	f009 fdef 	bl	800ab50 <MX_LWIP_Process>
 8000f72:	e7fc      	b.n	8000f6e <main+0xce>
 8000f74:	200008d6 	.word	0x200008d6
 8000f78:	2000072c 	.word	0x2000072c
 8000f7c:	20000730 	.word	0x20000730
 8000f80:	200029fc 	.word	0x200029fc
 8000f84:	20000738 	.word	0x20000738
 8000f88:	2000073c 	.word	0x2000073c
 8000f8c:	20000740 	.word	0x20000740
 8000f90:	20000744 	.word	0x20000744
 8000f94:	68000000 	.word	0x68000000

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b094      	sub	sp, #80	; 0x50
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 0320 	add.w	r3, r7, #32
 8000fa2:	2230      	movs	r2, #48	; 0x30
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f018 fac4 	bl	8019534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	4b2b      	ldr	r3, [pc, #172]	; (8001070 <SystemClock_Config+0xd8>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	4a2a      	ldr	r2, [pc, #168]	; (8001070 <SystemClock_Config+0xd8>)
 8000fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fca:	6413      	str	r3, [r2, #64]	; 0x40
 8000fcc:	4b28      	ldr	r3, [pc, #160]	; (8001070 <SystemClock_Config+0xd8>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	4b25      	ldr	r3, [pc, #148]	; (8001074 <SystemClock_Config+0xdc>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a24      	ldr	r2, [pc, #144]	; (8001074 <SystemClock_Config+0xdc>)
 8000fe2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	4b22      	ldr	r3, [pc, #136]	; (8001074 <SystemClock_Config+0xdc>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffe:	2302      	movs	r3, #2
 8001000:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001002:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001006:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001008:	2304      	movs	r3, #4
 800100a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800100c:	2360      	movs	r3, #96	; 0x60
 800100e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001010:	2302      	movs	r3, #2
 8001012:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001014:	2304      	movs	r3, #4
 8001016:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001018:	f107 0320 	add.w	r3, r7, #32
 800101c:	4618      	mov	r0, r3
 800101e:	f006 fe0d 	bl	8007c3c <HAL_RCC_OscConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001028:	f000 fa34 	bl	8001494 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102c:	230f      	movs	r3, #15
 800102e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001030:	2302      	movs	r3, #2
 8001032:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001038:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800103c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800103e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001042:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2103      	movs	r1, #3
 800104a:	4618      	mov	r0, r3
 800104c:	f007 f86e 	bl	800812c <HAL_RCC_ClockConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001056:	f000 fa1d 	bl	8001494 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 800105a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800105e:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 8001062:	2000      	movs	r0, #0
 8001064:	f007 f948 	bl	80082f8 <HAL_RCC_MCOConfig>
}
 8001068:	bf00      	nop
 800106a:	3750      	adds	r7, #80	; 0x50
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40023800 	.word	0x40023800
 8001074:	40007000 	.word	0x40007000

08001078 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <MX_DCMI_Init+0x68>)
 800107e:	4a19      	ldr	r2, [pc, #100]	; (80010e4 <MX_DCMI_Init+0x6c>)
 8001080:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <MX_DCMI_Init+0x68>)
 8001084:	2200      	movs	r2, #0
 8001086:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <MX_DCMI_Init+0x68>)
 800108a:	2220      	movs	r2, #32
 800108c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_DCMI_Init+0x68>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <MX_DCMI_Init+0x68>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_DCMI_Init+0x68>)
 800109c:	2200      	movs	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_DCMI_Init+0x68>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_DCMI_Init+0x68>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80010ac:	480c      	ldr	r0, [pc, #48]	; (80010e0 <MX_DCMI_Init+0x68>)
 80010ae:	f001 fee4 	bl	8002e7a <HAL_DCMI_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 80010b8:	f000 f9ec 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

	__HAL_DCMI_ENABLE_IT(&hdcmi,DCMI_IT_FRAME);
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <MX_DCMI_Init+0x68>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <MX_DCMI_Init+0x68>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 0201 	orr.w	r2, r2, #1
 80010ca:	60da      	str	r2, [r3, #12]
	__HAL_DCMI_ENABLE(&hdcmi);
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <MX_DCMI_Init+0x68>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <MX_DCMI_Init+0x68>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010da:	601a      	str	r2, [r3, #0]

  /* USER CODE END DCMI_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200029fc 	.word	0x200029fc
 80010e4:	50050000 	.word	0x50050000

080010e8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_UART4_Init+0x4c>)
 80010ee:	4a12      	ldr	r2, [pc, #72]	; (8001138 <MX_UART4_Init+0x50>)
 80010f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <MX_UART4_Init+0x4c>)
 80010f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_UART4_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_UART4_Init+0x4c>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <MX_UART4_Init+0x4c>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_UART4_Init+0x4c>)
 800110e:	220c      	movs	r2, #12
 8001110:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <MX_UART4_Init+0x4c>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_UART4_Init+0x4c>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <MX_UART4_Init+0x4c>)
 8001120:	f007 faac 	bl	800867c <HAL_UART_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800112a:	f000 f9b3 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20002a44 	.word	0x20002a44
 8001138:	40004c00 	.word	0x40004c00

0800113c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_DMA_Init+0x3c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <MX_DMA_Init+0x3c>)
 800114c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_DMA_Init+0x3c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 3, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2103      	movs	r1, #3
 8001162:	2039      	movs	r0, #57	; 0x39
 8001164:	f001 fbe3 	bl	800292e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001168:	2039      	movs	r0, #57	; 0x39
 800116a:	f001 fbfc 	bl	8002966 <HAL_NVIC_EnableIRQ>

}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800

0800117c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08e      	sub	sp, #56	; 0x38
 8001180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
 8001196:	4b69      	ldr	r3, [pc, #420]	; (800133c <MX_GPIO_Init+0x1c0>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a68      	ldr	r2, [pc, #416]	; (800133c <MX_GPIO_Init+0x1c0>)
 800119c:	f043 0310 	orr.w	r3, r3, #16
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b66      	ldr	r3, [pc, #408]	; (800133c <MX_GPIO_Init+0x1c0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0310 	and.w	r3, r3, #16
 80011aa:	623b      	str	r3, [r7, #32]
 80011ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
 80011b2:	4b62      	ldr	r3, [pc, #392]	; (800133c <MX_GPIO_Init+0x1c0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a61      	ldr	r2, [pc, #388]	; (800133c <MX_GPIO_Init+0x1c0>)
 80011b8:	f043 0320 	orr.w	r3, r3, #32
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b5f      	ldr	r3, [pc, #380]	; (800133c <MX_GPIO_Init+0x1c0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0320 	and.w	r3, r3, #32
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
 80011ce:	4b5b      	ldr	r3, [pc, #364]	; (800133c <MX_GPIO_Init+0x1c0>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a5a      	ldr	r2, [pc, #360]	; (800133c <MX_GPIO_Init+0x1c0>)
 80011d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b58      	ldr	r3, [pc, #352]	; (800133c <MX_GPIO_Init+0x1c0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e2:	61bb      	str	r3, [r7, #24]
 80011e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	4b54      	ldr	r3, [pc, #336]	; (800133c <MX_GPIO_Init+0x1c0>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a53      	ldr	r2, [pc, #332]	; (800133c <MX_GPIO_Init+0x1c0>)
 80011f0:	f043 0304 	orr.w	r3, r3, #4
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b51      	ldr	r3, [pc, #324]	; (800133c <MX_GPIO_Init+0x1c0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b4d      	ldr	r3, [pc, #308]	; (800133c <MX_GPIO_Init+0x1c0>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a4c      	ldr	r2, [pc, #304]	; (800133c <MX_GPIO_Init+0x1c0>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b4a      	ldr	r3, [pc, #296]	; (800133c <MX_GPIO_Init+0x1c0>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b46      	ldr	r3, [pc, #280]	; (800133c <MX_GPIO_Init+0x1c0>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a45      	ldr	r2, [pc, #276]	; (800133c <MX_GPIO_Init+0x1c0>)
 8001228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b43      	ldr	r3, [pc, #268]	; (800133c <MX_GPIO_Init+0x1c0>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b3f      	ldr	r3, [pc, #252]	; (800133c <MX_GPIO_Init+0x1c0>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a3e      	ldr	r2, [pc, #248]	; (800133c <MX_GPIO_Init+0x1c0>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b3c      	ldr	r3, [pc, #240]	; (800133c <MX_GPIO_Init+0x1c0>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b38      	ldr	r3, [pc, #224]	; (800133c <MX_GPIO_Init+0x1c0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a37      	ldr	r2, [pc, #220]	; (800133c <MX_GPIO_Init+0x1c0>)
 8001260:	f043 0308 	orr.w	r3, r3, #8
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b35      	ldr	r3, [pc, #212]	; (800133c <MX_GPIO_Init+0x1c0>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001272:	2201      	movs	r2, #1
 8001274:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001278:	4831      	ldr	r0, [pc, #196]	; (8001340 <MX_GPIO_Init+0x1c4>)
 800127a:	f004 ff55 	bl	8006128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2108      	movs	r1, #8
 8001282:	4830      	ldr	r0, [pc, #192]	; (8001344 <MX_GPIO_Init+0x1c8>)
 8001284:	f004 ff50 	bl	8006128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8001288:	2201      	movs	r2, #1
 800128a:	21c0      	movs	r1, #192	; 0xc0
 800128c:	482d      	ldr	r0, [pc, #180]	; (8001344 <MX_GPIO_Init+0x1c8>)
 800128e:	f004 ff4b 	bl	8006128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15, GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001298:	482b      	ldr	r0, [pc, #172]	; (8001348 <MX_GPIO_Init+0x1cc>)
 800129a:	f004 ff45 	bl	8006128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800129e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a4:	2301      	movs	r3, #1
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b4:	4619      	mov	r1, r3
 80012b6:	4822      	ldr	r0, [pc, #136]	; (8001340 <MX_GPIO_Init+0x1c4>)
 80012b8:	f004 fd82 	bl	8005dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80012ce:	2300      	movs	r3, #0
 80012d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d6:	4619      	mov	r1, r3
 80012d8:	481c      	ldr	r0, [pc, #112]	; (800134c <MX_GPIO_Init+0x1d0>)
 80012da:	f004 fd71 	bl	8005dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012de:	2308      	movs	r3, #8
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f2:	4619      	mov	r1, r3
 80012f4:	4813      	ldr	r0, [pc, #76]	; (8001344 <MX_GPIO_Init+0x1c8>)
 80012f6:	f004 fd63 	bl	8005dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012fa:	23c0      	movs	r3, #192	; 0xc0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fe:	2301      	movs	r3, #1
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001302:	2301      	movs	r3, #1
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130e:	4619      	mov	r1, r3
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <MX_GPIO_Init+0x1c8>)
 8001312:	f004 fd55 	bl	8005dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001320:	2301      	movs	r3, #1
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001324:	2302      	movs	r3, #2
 8001326:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132c:	4619      	mov	r1, r3
 800132e:	4806      	ldr	r0, [pc, #24]	; (8001348 <MX_GPIO_Init+0x1cc>)
 8001330:	f004 fd46 	bl	8005dc0 <HAL_GPIO_Init>

}
 8001334:	bf00      	nop
 8001336:	3738      	adds	r7, #56	; 0x38
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	40020400 	.word	0x40020400
 8001344:	40020c00 	.word	0x40020c00
 8001348:	40021800 	.word	0x40021800
 800134c:	40020000 	.word	0x40020000

08001350 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
 8001364:	615a      	str	r2, [r3, #20]
 8001366:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM3 memory initialization sequence
  */
  hsram3.Instance = FSMC_NORSRAM_DEVICE;
 8001368:	4b27      	ldr	r3, [pc, #156]	; (8001408 <MX_FSMC_Init+0xb8>)
 800136a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800136e:	601a      	str	r2, [r3, #0]
  hsram3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001370:	4b25      	ldr	r3, [pc, #148]	; (8001408 <MX_FSMC_Init+0xb8>)
 8001372:	4a26      	ldr	r2, [pc, #152]	; (800140c <MX_FSMC_Init+0xbc>)
 8001374:	605a      	str	r2, [r3, #4]
  /* hsram3.Init */
  hsram3.Init.NSBank = FSMC_NORSRAM_BANK3;
 8001376:	4b24      	ldr	r3, [pc, #144]	; (8001408 <MX_FSMC_Init+0xb8>)
 8001378:	2204      	movs	r2, #4
 800137a:	609a      	str	r2, [r3, #8]
  hsram3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800137c:	4b22      	ldr	r3, [pc, #136]	; (8001408 <MX_FSMC_Init+0xb8>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  hsram3.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001382:	4b21      	ldr	r3, [pc, #132]	; (8001408 <MX_FSMC_Init+0xb8>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  hsram3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001388:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <MX_FSMC_Init+0xb8>)
 800138a:	2210      	movs	r2, #16
 800138c:	615a      	str	r2, [r3, #20]
  hsram3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800138e:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <MX_FSMC_Init+0xb8>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  hsram3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001394:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <MX_FSMC_Init+0xb8>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  hsram3.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800139a:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <MX_FSMC_Init+0xb8>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
  hsram3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80013a0:	4b19      	ldr	r3, [pc, #100]	; (8001408 <MX_FSMC_Init+0xb8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram3.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <MX_FSMC_Init+0xb8>)
 80013a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28
  hsram3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <MX_FSMC_Init+0xb8>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram3.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <MX_FSMC_Init+0xb8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <MX_FSMC_Init+0xb8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	635a      	str	r2, [r3, #52]	; 0x34
  hsram3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <MX_FSMC_Init+0xb8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	639a      	str	r2, [r3, #56]	; 0x38
  hsram3.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <MX_FSMC_Init+0xb8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80013d0:	230f      	movs	r3, #15
 80013d2:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 4;
 80013d4:	2304      	movs	r3, #4
 80013d6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80013dc:	2310      	movs	r3, #16
 80013de:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80013e0:	2311      	movs	r3, #17
 80013e2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram3, &Timing, NULL) != HAL_OK)
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2200      	movs	r2, #0
 80013ec:	4619      	mov	r1, r3
 80013ee:	4806      	ldr	r0, [pc, #24]	; (8001408 <MX_FSMC_Init+0xb8>)
 80013f0:	f007 f900 	bl	80085f4 <HAL_SRAM_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 80013fa:	f000 f84b 	bl	8001494 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80013fe:	bf00      	nop
 8001400:	3720      	adds	r7, #32
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20001910 	.word	0x20001910
 800140c:	a0000104 	.word	0xa0000104

08001410 <PY_OV2640_RGB565_CONFIG>:
	if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK) {
		Error_Handler();
	}
}

void PY_OV2640_RGB565_CONFIG(void) {
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	/*Camera Interface*/
	SCCB_Rst();     //hard reset
 8001414:	f000 faa6 	bl	8001964 <SCCB_Rst>
	HAL_Delay(100);
 8001418:	2064      	movs	r0, #100	; 0x64
 800141a:	f001 f989 	bl	8002730 <HAL_Delay>

	//SCCB_WR_Reg(0xff, 0x01);   //soft reset
	//SCCB_WR_Reg(0x12, 0x80);
	HAL_Delay(100);
 800141e:	2064      	movs	r0, #100	; 0x64
 8001420:	f001 f986 	bl	8002730 <HAL_Delay>

	ov2640_verh = SCCB_RD_Reg(0x1c);
 8001424:	201c      	movs	r0, #28
 8001426:	f000 f9f1 	bl	800180c <SCCB_RD_Reg>
 800142a:	4603      	mov	r3, r0
 800142c:	461a      	mov	r2, r3
 800142e:	4b17      	ldr	r3, [pc, #92]	; (800148c <PY_OV2640_RGB565_CONFIG+0x7c>)
 8001430:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 8001432:	2032      	movs	r0, #50	; 0x32
 8001434:	f001 f97c 	bl	8002730 <HAL_Delay>
	ov2640_verl = SCCB_RD_Reg(0x1d);
 8001438:	201d      	movs	r0, #29
 800143a:	f000 f9e7 	bl	800180c <SCCB_RD_Reg>
 800143e:	4603      	mov	r3, r0
 8001440:	461a      	mov	r2, r3
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <PY_OV2640_RGB565_CONFIG+0x80>)
 8001444:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 8001446:	2032      	movs	r0, #50	; 0x32
 8001448:	f001 f972 	bl	8002730 <HAL_Delay>

	while ((ov2640_verh == 0xff) || (ov2640_verl == 0xff)) {
 800144c:	e007      	b.n	800145e <PY_OV2640_RGB565_CONFIG+0x4e>
		//HAL_UART_Transmit(&huart1, &ov2640_verh, 1, 0xFFFFFF);
		HAL_Delay(500);
 800144e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001452:	f001 f96d 	bl	8002730 <HAL_Delay>
		//HAL_UART_Transmit(&huart1, &ov2640_verl, 1, 0xFFFFFF);
		HAL_Delay(500);
 8001456:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800145a:	f001 f969 	bl	8002730 <HAL_Delay>
	while ((ov2640_verh == 0xff) || (ov2640_verl == 0xff)) {
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <PY_OV2640_RGB565_CONFIG+0x7c>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2bff      	cmp	r3, #255	; 0xff
 8001464:	d0f3      	beq.n	800144e <PY_OV2640_RGB565_CONFIG+0x3e>
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <PY_OV2640_RGB565_CONFIG+0x80>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2bff      	cmp	r3, #255	; 0xff
 800146c:	d0ef      	beq.n	800144e <PY_OV2640_RGB565_CONFIG+0x3e>
	}

	OV2640_UXGA_Init();
 800146e:	f000 fa99 	bl	80019a4 <OV2640_UXGA_Init>

	//pix speed adjustment

	OV2640_RGB565_Mode();
 8001472:	f000 fabd 	bl	80019f0 <OV2640_RGB565_Mode>
	OV2640_OutSize_Set(640, 480);
 8001476:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800147a:	f44f 7020 	mov.w	r0, #640	; 0x280
 800147e:	f000 fad9 	bl	8001a34 <OV2640_OutSize_Set>
	HAL_Delay(200);
 8001482:	20c8      	movs	r0, #200	; 0xc8
 8001484:	f001 f954 	bl	8002730 <HAL_Delay>

}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000504 	.word	0x20000504
 8001490:	20000505 	.word	0x20000505

08001494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001498:	b672      	cpsid	i
}
 800149a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800149c:	e7fe      	b.n	800149c <Error_Handler+0x8>
	...

080014a0 <SCCB_Start>:
#include <ov2640.h>

//for not open-drain bus

void SCCB_Start(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
    SCCB_SDA_H;
 80014a4:	2201      	movs	r2, #1
 80014a6:	2180      	movs	r1, #128	; 0x80
 80014a8:	4814      	ldr	r0, [pc, #80]	; (80014fc <SCCB_Start+0x5c>)
 80014aa:	f004 fe3d 	bl	8006128 <HAL_GPIO_WritePin>
    SCCB_SCL_H;
 80014ae:	2201      	movs	r2, #1
 80014b0:	2140      	movs	r1, #64	; 0x40
 80014b2:	4812      	ldr	r0, [pc, #72]	; (80014fc <SCCB_Start+0x5c>)
 80014b4:	f004 fe38 	bl	8006128 <HAL_GPIO_WritePin>

    tickdelay = ticknumber;while(tickdelay--);
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <SCCB_Start+0x60>)
 80014ba:	2278      	movs	r2, #120	; 0x78
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	bf00      	nop
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <SCCB_Start+0x60>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	1e5a      	subs	r2, r3, #1
 80014c6:	490e      	ldr	r1, [pc, #56]	; (8001500 <SCCB_Start+0x60>)
 80014c8:	600a      	str	r2, [r1, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f8      	bne.n	80014c0 <SCCB_Start+0x20>
    SCCB_SDA_L;
 80014ce:	2200      	movs	r2, #0
 80014d0:	2180      	movs	r1, #128	; 0x80
 80014d2:	480a      	ldr	r0, [pc, #40]	; (80014fc <SCCB_Start+0x5c>)
 80014d4:	f004 fe28 	bl	8006128 <HAL_GPIO_WritePin>

    tickdelay = ticknumber;while(tickdelay--);
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <SCCB_Start+0x60>)
 80014da:	2278      	movs	r2, #120	; 0x78
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	bf00      	nop
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <SCCB_Start+0x60>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	1e5a      	subs	r2, r3, #1
 80014e6:	4906      	ldr	r1, [pc, #24]	; (8001500 <SCCB_Start+0x60>)
 80014e8:	600a      	str	r2, [r1, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f8      	bne.n	80014e0 <SCCB_Start+0x40>
    SCCB_SCL_L;
 80014ee:	2200      	movs	r2, #0
 80014f0:	2140      	movs	r1, #64	; 0x40
 80014f2:	4802      	ldr	r0, [pc, #8]	; (80014fc <SCCB_Start+0x5c>)
 80014f4:	f004 fe18 	bl	8006128 <HAL_GPIO_WritePin>
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40020c00 	.word	0x40020c00
 8001500:	20002a40 	.word	0x20002a40

08001504 <SCCB_Stop>:


void SCCB_Stop(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
    SCCB_SDA_L;
 8001508:	2200      	movs	r2, #0
 800150a:	2180      	movs	r1, #128	; 0x80
 800150c:	4818      	ldr	r0, [pc, #96]	; (8001570 <SCCB_Stop+0x6c>)
 800150e:	f004 fe0b 	bl	8006128 <HAL_GPIO_WritePin>

    tickdelay = ticknumber;while(tickdelay--);
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <SCCB_Stop+0x70>)
 8001514:	2278      	movs	r2, #120	; 0x78
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	bf00      	nop
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <SCCB_Stop+0x70>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	1e5a      	subs	r2, r3, #1
 8001520:	4914      	ldr	r1, [pc, #80]	; (8001574 <SCCB_Stop+0x70>)
 8001522:	600a      	str	r2, [r1, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1f8      	bne.n	800151a <SCCB_Stop+0x16>
    SCCB_SCL_H;
 8001528:	2201      	movs	r2, #1
 800152a:	2140      	movs	r1, #64	; 0x40
 800152c:	4810      	ldr	r0, [pc, #64]	; (8001570 <SCCB_Stop+0x6c>)
 800152e:	f004 fdfb 	bl	8006128 <HAL_GPIO_WritePin>

    tickdelay = ticknumber;while(tickdelay--);
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <SCCB_Stop+0x70>)
 8001534:	2278      	movs	r2, #120	; 0x78
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	bf00      	nop
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <SCCB_Stop+0x70>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	1e5a      	subs	r2, r3, #1
 8001540:	490c      	ldr	r1, [pc, #48]	; (8001574 <SCCB_Stop+0x70>)
 8001542:	600a      	str	r2, [r1, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1f8      	bne.n	800153a <SCCB_Stop+0x36>
    SCCB_SDA_H;
 8001548:	2201      	movs	r2, #1
 800154a:	2180      	movs	r1, #128	; 0x80
 800154c:	4808      	ldr	r0, [pc, #32]	; (8001570 <SCCB_Stop+0x6c>)
 800154e:	f004 fdeb 	bl	8006128 <HAL_GPIO_WritePin>

    tickdelay = ticknumber;while(tickdelay--);
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <SCCB_Stop+0x70>)
 8001554:	2278      	movs	r2, #120	; 0x78
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	bf00      	nop
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <SCCB_Stop+0x70>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	1e5a      	subs	r2, r3, #1
 8001560:	4904      	ldr	r1, [pc, #16]	; (8001574 <SCCB_Stop+0x70>)
 8001562:	600a      	str	r2, [r1, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f8      	bne.n	800155a <SCCB_Stop+0x56>
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40020c00 	.word	0x40020c00
 8001574:	20002a40 	.word	0x20002a40

08001578 <SCCB_No_Ack>:

void SCCB_No_Ack(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 800157c:	2001      	movs	r0, #1
 800157e:	f001 f8d7 	bl	8002730 <HAL_Delay>
	SCCB_SDA_H;
 8001582:	2201      	movs	r2, #1
 8001584:	2180      	movs	r1, #128	; 0x80
 8001586:	481b      	ldr	r0, [pc, #108]	; (80015f4 <SCCB_No_Ack+0x7c>)
 8001588:	f004 fdce 	bl	8006128 <HAL_GPIO_WritePin>
	SCCB_SCL_H;
 800158c:	2201      	movs	r2, #1
 800158e:	2140      	movs	r1, #64	; 0x40
 8001590:	4818      	ldr	r0, [pc, #96]	; (80015f4 <SCCB_No_Ack+0x7c>)
 8001592:	f004 fdc9 	bl	8006128 <HAL_GPIO_WritePin>

	tickdelay = ticknumber;while(tickdelay--);
 8001596:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <SCCB_No_Ack+0x80>)
 8001598:	2278      	movs	r2, #120	; 0x78
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	bf00      	nop
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <SCCB_No_Ack+0x80>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	1e5a      	subs	r2, r3, #1
 80015a4:	4914      	ldr	r1, [pc, #80]	; (80015f8 <SCCB_No_Ack+0x80>)
 80015a6:	600a      	str	r2, [r1, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f8      	bne.n	800159e <SCCB_No_Ack+0x26>
	SCCB_SCL_L;
 80015ac:	2200      	movs	r2, #0
 80015ae:	2140      	movs	r1, #64	; 0x40
 80015b0:	4810      	ldr	r0, [pc, #64]	; (80015f4 <SCCB_No_Ack+0x7c>)
 80015b2:	f004 fdb9 	bl	8006128 <HAL_GPIO_WritePin>

	tickdelay = ticknumber;while(tickdelay--);
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <SCCB_No_Ack+0x80>)
 80015b8:	2278      	movs	r2, #120	; 0x78
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	bf00      	nop
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <SCCB_No_Ack+0x80>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	1e5a      	subs	r2, r3, #1
 80015c4:	490c      	ldr	r1, [pc, #48]	; (80015f8 <SCCB_No_Ack+0x80>)
 80015c6:	600a      	str	r2, [r1, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1f8      	bne.n	80015be <SCCB_No_Ack+0x46>
	SCCB_SDA_L;
 80015cc:	2200      	movs	r2, #0
 80015ce:	2180      	movs	r1, #128	; 0x80
 80015d0:	4808      	ldr	r0, [pc, #32]	; (80015f4 <SCCB_No_Ack+0x7c>)
 80015d2:	f004 fda9 	bl	8006128 <HAL_GPIO_WritePin>

	tickdelay = ticknumber;while(tickdelay--);
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <SCCB_No_Ack+0x80>)
 80015d8:	2278      	movs	r2, #120	; 0x78
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	bf00      	nop
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <SCCB_No_Ack+0x80>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	1e5a      	subs	r2, r3, #1
 80015e4:	4904      	ldr	r1, [pc, #16]	; (80015f8 <SCCB_No_Ack+0x80>)
 80015e6:	600a      	str	r2, [r1, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1f8      	bne.n	80015de <SCCB_No_Ack+0x66>
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40020c00 	.word	0x40020c00
 80015f8:	20002a40 	.word	0x20002a40

080015fc <SCCB_WR_Byte>:

uint8_t SCCB_WR_Byte(uint8_t dat)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
	uint8_t j,res;
	for(j=0;j<8;j++)
 8001606:	2300      	movs	r3, #0
 8001608:	73fb      	strb	r3, [r7, #15]
 800160a:	e034      	b.n	8001676 <SCCB_WR_Byte+0x7a>
	{
		if(dat&0x80)SCCB_SDA_H;
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	2b00      	cmp	r3, #0
 8001612:	da05      	bge.n	8001620 <SCCB_WR_Byte+0x24>
 8001614:	2201      	movs	r2, #1
 8001616:	2180      	movs	r1, #128	; 0x80
 8001618:	4833      	ldr	r0, [pc, #204]	; (80016e8 <SCCB_WR_Byte+0xec>)
 800161a:	f004 fd85 	bl	8006128 <HAL_GPIO_WritePin>
 800161e:	e004      	b.n	800162a <SCCB_WR_Byte+0x2e>
		else SCCB_SDA_L;
 8001620:	2200      	movs	r2, #0
 8001622:	2180      	movs	r1, #128	; 0x80
 8001624:	4830      	ldr	r0, [pc, #192]	; (80016e8 <SCCB_WR_Byte+0xec>)
 8001626:	f004 fd7f 	bl	8006128 <HAL_GPIO_WritePin>
		dat<<=1;
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	71fb      	strb	r3, [r7, #7]

		tickdelay = ticknumber;while(tickdelay--);
 8001630:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <SCCB_WR_Byte+0xf0>)
 8001632:	2278      	movs	r2, #120	; 0x78
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	bf00      	nop
 8001638:	4b2c      	ldr	r3, [pc, #176]	; (80016ec <SCCB_WR_Byte+0xf0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	1e5a      	subs	r2, r3, #1
 800163e:	492b      	ldr	r1, [pc, #172]	; (80016ec <SCCB_WR_Byte+0xf0>)
 8001640:	600a      	str	r2, [r1, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f8      	bne.n	8001638 <SCCB_WR_Byte+0x3c>
		SCCB_SCL_H;
 8001646:	2201      	movs	r2, #1
 8001648:	2140      	movs	r1, #64	; 0x40
 800164a:	4827      	ldr	r0, [pc, #156]	; (80016e8 <SCCB_WR_Byte+0xec>)
 800164c:	f004 fd6c 	bl	8006128 <HAL_GPIO_WritePin>

		tickdelay = ticknumber;while(tickdelay--);
 8001650:	4b26      	ldr	r3, [pc, #152]	; (80016ec <SCCB_WR_Byte+0xf0>)
 8001652:	2278      	movs	r2, #120	; 0x78
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	bf00      	nop
 8001658:	4b24      	ldr	r3, [pc, #144]	; (80016ec <SCCB_WR_Byte+0xf0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	1e5a      	subs	r2, r3, #1
 800165e:	4923      	ldr	r1, [pc, #140]	; (80016ec <SCCB_WR_Byte+0xf0>)
 8001660:	600a      	str	r2, [r1, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f8      	bne.n	8001658 <SCCB_WR_Byte+0x5c>
		SCCB_SCL_L;
 8001666:	2200      	movs	r2, #0
 8001668:	2140      	movs	r1, #64	; 0x40
 800166a:	481f      	ldr	r0, [pc, #124]	; (80016e8 <SCCB_WR_Byte+0xec>)
 800166c:	f004 fd5c 	bl	8006128 <HAL_GPIO_WritePin>
	for(j=0;j<8;j++)
 8001670:	7bfb      	ldrb	r3, [r7, #15]
 8001672:	3301      	adds	r3, #1
 8001674:	73fb      	strb	r3, [r7, #15]
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	2b07      	cmp	r3, #7
 800167a:	d9c7      	bls.n	800160c <SCCB_WR_Byte+0x10>
	}
	SCCB_SDA_IN();
 800167c:	f000 f918 	bl	80018b0 <SCCB_SDA_IN>

	tickdelay = ticknumber;while(tickdelay--);
 8001680:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <SCCB_WR_Byte+0xf0>)
 8001682:	2278      	movs	r2, #120	; 0x78
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	bf00      	nop
 8001688:	4b18      	ldr	r3, [pc, #96]	; (80016ec <SCCB_WR_Byte+0xf0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	1e5a      	subs	r2, r3, #1
 800168e:	4917      	ldr	r1, [pc, #92]	; (80016ec <SCCB_WR_Byte+0xf0>)
 8001690:	600a      	str	r2, [r1, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f8      	bne.n	8001688 <SCCB_WR_Byte+0x8c>
	SCCB_SCL_H;
 8001696:	2201      	movs	r2, #1
 8001698:	2140      	movs	r1, #64	; 0x40
 800169a:	4813      	ldr	r0, [pc, #76]	; (80016e8 <SCCB_WR_Byte+0xec>)
 800169c:	f004 fd44 	bl	8006128 <HAL_GPIO_WritePin>

	tickdelay = ticknumber;while(tickdelay--);
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <SCCB_WR_Byte+0xf0>)
 80016a2:	2278      	movs	r2, #120	; 0x78
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	bf00      	nop
 80016a8:	4b10      	ldr	r3, [pc, #64]	; (80016ec <SCCB_WR_Byte+0xf0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	1e5a      	subs	r2, r3, #1
 80016ae:	490f      	ldr	r1, [pc, #60]	; (80016ec <SCCB_WR_Byte+0xf0>)
 80016b0:	600a      	str	r2, [r1, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f8      	bne.n	80016a8 <SCCB_WR_Byte+0xac>
	if(SCCB_READ_SDA)res=1;
 80016b6:	2180      	movs	r1, #128	; 0x80
 80016b8:	480b      	ldr	r0, [pc, #44]	; (80016e8 <SCCB_WR_Byte+0xec>)
 80016ba:	f004 fd1d 	bl	80060f8 <HAL_GPIO_ReadPin>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d002      	beq.n	80016ca <SCCB_WR_Byte+0xce>
 80016c4:	2301      	movs	r3, #1
 80016c6:	73bb      	strb	r3, [r7, #14]
 80016c8:	e001      	b.n	80016ce <SCCB_WR_Byte+0xd2>
	else res=0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	73bb      	strb	r3, [r7, #14]
	SCCB_SCL_L;
 80016ce:	2200      	movs	r2, #0
 80016d0:	2140      	movs	r1, #64	; 0x40
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <SCCB_WR_Byte+0xec>)
 80016d4:	f004 fd28 	bl	8006128 <HAL_GPIO_WritePin>
	SCCB_SDA_OUT();
 80016d8:	f000 f918 	bl	800190c <SCCB_SDA_OUT>
	return res;
 80016dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40020c00 	.word	0x40020c00
 80016ec:	20002a40 	.word	0x20002a40

080016f0 <SCCB_RD_Byte>:

uint8_t SCCB_RD_Byte(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
	uint8_t temp=0,j;
 80016f6:	2300      	movs	r3, #0
 80016f8:	71fb      	strb	r3, [r7, #7]
	SCCB_SDA_IN();
 80016fa:	f000 f8d9 	bl	80018b0 <SCCB_SDA_IN>
	for(j=8;j>0;j--)
 80016fe:	2308      	movs	r3, #8
 8001700:	71bb      	strb	r3, [r7, #6]
 8001702:	e02f      	b.n	8001764 <SCCB_RD_Byte+0x74>
	{

		tickdelay = ticknumber;while(tickdelay--);
 8001704:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <SCCB_RD_Byte+0x88>)
 8001706:	2278      	movs	r2, #120	; 0x78
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	bf00      	nop
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <SCCB_RD_Byte+0x88>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	1e5a      	subs	r2, r3, #1
 8001712:	4919      	ldr	r1, [pc, #100]	; (8001778 <SCCB_RD_Byte+0x88>)
 8001714:	600a      	str	r2, [r1, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f8      	bne.n	800170c <SCCB_RD_Byte+0x1c>
	    SCCB_SCL_H;
 800171a:	2201      	movs	r2, #1
 800171c:	2140      	movs	r1, #64	; 0x40
 800171e:	4817      	ldr	r0, [pc, #92]	; (800177c <SCCB_RD_Byte+0x8c>)
 8001720:	f004 fd02 	bl	8006128 <HAL_GPIO_WritePin>
		temp=temp<<1;
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	71fb      	strb	r3, [r7, #7]
		if(SCCB_READ_SDA)temp++;
 800172a:	2180      	movs	r1, #128	; 0x80
 800172c:	4813      	ldr	r0, [pc, #76]	; (800177c <SCCB_RD_Byte+0x8c>)
 800172e:	f004 fce3 	bl	80060f8 <HAL_GPIO_ReadPin>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d002      	beq.n	800173e <SCCB_RD_Byte+0x4e>
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	3301      	adds	r3, #1
 800173c:	71fb      	strb	r3, [r7, #7]

		tickdelay = ticknumber;while(tickdelay--);
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <SCCB_RD_Byte+0x88>)
 8001740:	2278      	movs	r2, #120	; 0x78
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	bf00      	nop
 8001746:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <SCCB_RD_Byte+0x88>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	1e5a      	subs	r2, r3, #1
 800174c:	490a      	ldr	r1, [pc, #40]	; (8001778 <SCCB_RD_Byte+0x88>)
 800174e:	600a      	str	r2, [r1, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1f8      	bne.n	8001746 <SCCB_RD_Byte+0x56>
		SCCB_SCL_L;
 8001754:	2200      	movs	r2, #0
 8001756:	2140      	movs	r1, #64	; 0x40
 8001758:	4808      	ldr	r0, [pc, #32]	; (800177c <SCCB_RD_Byte+0x8c>)
 800175a:	f004 fce5 	bl	8006128 <HAL_GPIO_WritePin>
	for(j=8;j>0;j--)
 800175e:	79bb      	ldrb	r3, [r7, #6]
 8001760:	3b01      	subs	r3, #1
 8001762:	71bb      	strb	r3, [r7, #6]
 8001764:	79bb      	ldrb	r3, [r7, #6]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1cc      	bne.n	8001704 <SCCB_RD_Byte+0x14>
	}
	SCCB_SDA_OUT();
 800176a:	f000 f8cf 	bl	800190c <SCCB_SDA_OUT>
	return temp;
 800176e:	79fb      	ldrb	r3, [r7, #7]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20002a40 	.word	0x20002a40
 800177c:	40020c00 	.word	0x40020c00

08001780 <SCCB_WR_Reg>:

uint8_t SCCB_WR_Reg(uint8_t reg,uint8_t data)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	460a      	mov	r2, r1
 800178a:	71fb      	strb	r3, [r7, #7]
 800178c:	4613      	mov	r3, r2
 800178e:	71bb      	strb	r3, [r7, #6]
	uint8_t res=0;
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]
	SCCB_Start();
 8001794:	f7ff fe84 	bl	80014a0 <SCCB_Start>
	if(SCCB_WR_Byte(SCCB_ID_W))res=1;
 8001798:	2060      	movs	r0, #96	; 0x60
 800179a:	f7ff ff2f 	bl	80015fc <SCCB_WR_Byte>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <SCCB_WR_Reg+0x28>
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]

	tickdelay = ticknumber;while(tickdelay--);
 80017a8:	4b17      	ldr	r3, [pc, #92]	; (8001808 <SCCB_WR_Reg+0x88>)
 80017aa:	2278      	movs	r2, #120	; 0x78
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	bf00      	nop
 80017b0:	4b15      	ldr	r3, [pc, #84]	; (8001808 <SCCB_WR_Reg+0x88>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	1e5a      	subs	r2, r3, #1
 80017b6:	4914      	ldr	r1, [pc, #80]	; (8001808 <SCCB_WR_Reg+0x88>)
 80017b8:	600a      	str	r2, [r1, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f8      	bne.n	80017b0 <SCCB_WR_Reg+0x30>
	if(SCCB_WR_Byte(reg))res=1;
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff1b 	bl	80015fc <SCCB_WR_Byte>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <SCCB_WR_Reg+0x50>
 80017cc:	2301      	movs	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]

	tickdelay = ticknumber;while(tickdelay--);
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <SCCB_WR_Reg+0x88>)
 80017d2:	2278      	movs	r2, #120	; 0x78
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	bf00      	nop
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <SCCB_WR_Reg+0x88>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	1e5a      	subs	r2, r3, #1
 80017de:	490a      	ldr	r1, [pc, #40]	; (8001808 <SCCB_WR_Reg+0x88>)
 80017e0:	600a      	str	r2, [r1, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f8      	bne.n	80017d8 <SCCB_WR_Reg+0x58>
  	if(SCCB_WR_Byte(data))res=1;
 80017e6:	79bb      	ldrb	r3, [r7, #6]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff07 	bl	80015fc <SCCB_WR_Byte>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <SCCB_WR_Reg+0x78>
 80017f4:	2301      	movs	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
  	SCCB_Stop();
 80017f8:	f7ff fe84 	bl	8001504 <SCCB_Stop>
  	return	res;
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20002a40 	.word	0x20002a40

0800180c <SCCB_RD_Reg>:

uint8_t SCCB_RD_Reg(uint8_t reg)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
	uint8_t val=0;
 8001816:	2300      	movs	r3, #0
 8001818:	73fb      	strb	r3, [r7, #15]
	SCCB_Start();
 800181a:	f7ff fe41 	bl	80014a0 <SCCB_Start>
	SCCB_WR_Byte(SCCB_ID_W);
 800181e:	2060      	movs	r0, #96	; 0x60
 8001820:	f7ff feec 	bl	80015fc <SCCB_WR_Byte>

	tickdelay = ticknumber;while(tickdelay--);
 8001824:	4b21      	ldr	r3, [pc, #132]	; (80018ac <SCCB_RD_Reg+0xa0>)
 8001826:	2278      	movs	r2, #120	; 0x78
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	bf00      	nop
 800182c:	4b1f      	ldr	r3, [pc, #124]	; (80018ac <SCCB_RD_Reg+0xa0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	1e5a      	subs	r2, r3, #1
 8001832:	491e      	ldr	r1, [pc, #120]	; (80018ac <SCCB_RD_Reg+0xa0>)
 8001834:	600a      	str	r2, [r1, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f8      	bne.n	800182c <SCCB_RD_Reg+0x20>
  	SCCB_WR_Byte(reg);
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fedd 	bl	80015fc <SCCB_WR_Byte>

  	tickdelay = ticknumber;while(tickdelay--);
 8001842:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <SCCB_RD_Reg+0xa0>)
 8001844:	2278      	movs	r2, #120	; 0x78
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	bf00      	nop
 800184a:	4b18      	ldr	r3, [pc, #96]	; (80018ac <SCCB_RD_Reg+0xa0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	1e5a      	subs	r2, r3, #1
 8001850:	4916      	ldr	r1, [pc, #88]	; (80018ac <SCCB_RD_Reg+0xa0>)
 8001852:	600a      	str	r2, [r1, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f8      	bne.n	800184a <SCCB_RD_Reg+0x3e>
	SCCB_Stop();
 8001858:	f7ff fe54 	bl	8001504 <SCCB_Stop>

	tickdelay = ticknumber;while(tickdelay--);
 800185c:	4b13      	ldr	r3, [pc, #76]	; (80018ac <SCCB_RD_Reg+0xa0>)
 800185e:	2278      	movs	r2, #120	; 0x78
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	bf00      	nop
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <SCCB_RD_Reg+0xa0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	1e5a      	subs	r2, r3, #1
 800186a:	4910      	ldr	r1, [pc, #64]	; (80018ac <SCCB_RD_Reg+0xa0>)
 800186c:	600a      	str	r2, [r1, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f8      	bne.n	8001864 <SCCB_RD_Reg+0x58>

	SCCB_Start();
 8001872:	f7ff fe15 	bl	80014a0 <SCCB_Start>
	SCCB_WR_Byte(SCCB_ID_R);
 8001876:	2061      	movs	r0, #97	; 0x61
 8001878:	f7ff fec0 	bl	80015fc <SCCB_WR_Byte>

	tickdelay = ticknumber;while(tickdelay--);
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <SCCB_RD_Reg+0xa0>)
 800187e:	2278      	movs	r2, #120	; 0x78
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	bf00      	nop
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <SCCB_RD_Reg+0xa0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	1e5a      	subs	r2, r3, #1
 800188a:	4908      	ldr	r1, [pc, #32]	; (80018ac <SCCB_RD_Reg+0xa0>)
 800188c:	600a      	str	r2, [r1, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f8      	bne.n	8001884 <SCCB_RD_Reg+0x78>
  	val=SCCB_RD_Byte();
 8001892:	f7ff ff2d 	bl	80016f0 <SCCB_RD_Byte>
 8001896:	4603      	mov	r3, r0
 8001898:	73fb      	strb	r3, [r7, #15]
  	SCCB_No_Ack();
 800189a:	f7ff fe6d 	bl	8001578 <SCCB_No_Ack>
  	SCCB_Stop();
 800189e:	f7ff fe31 	bl	8001504 <SCCB_Stop>
  	return val;
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20002a40 	.word	0x20002a40

080018b0 <SCCB_SDA_IN>:


void SCCB_SDA_IN(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c4:	2300      	movs	r3, #0
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <SCCB_SDA_IN+0x54>)
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	4a0d      	ldr	r2, [pc, #52]	; (8001904 <SCCB_SDA_IN+0x54>)
 80018ce:	f043 0308 	orr.w	r3, r3, #8
 80018d2:	6313      	str	r3, [r2, #48]	; 0x30
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <SCCB_SDA_IN+0x54>)
 80018d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	603b      	str	r3, [r7, #0]
 80018de:	683b      	ldr	r3, [r7, #0]
	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e8:	2301      	movs	r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ec:	2302      	movs	r3, #2
 80018ee:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	4619      	mov	r1, r3
 80018f4:	4804      	ldr	r0, [pc, #16]	; (8001908 <SCCB_SDA_IN+0x58>)
 80018f6:	f004 fa63 	bl	8005dc0 <HAL_GPIO_Init>
}
 80018fa:	bf00      	nop
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	40020c00 	.word	0x40020c00

0800190c <SCCB_SDA_OUT>:

void SCCB_SDA_OUT(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001920:	2300      	movs	r3, #0
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	4b0d      	ldr	r3, [pc, #52]	; (800195c <SCCB_SDA_OUT+0x50>)
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	4a0c      	ldr	r2, [pc, #48]	; (800195c <SCCB_SDA_OUT+0x50>)
 800192a:	f043 0308 	orr.w	r3, r3, #8
 800192e:	6313      	str	r3, [r2, #48]	; 0x30
 8001930:	4b0a      	ldr	r3, [pc, #40]	; (800195c <SCCB_SDA_OUT+0x50>)
 8001932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	683b      	ldr	r3, [r7, #0]
	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001940:	2301      	movs	r3, #1
 8001942:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001944:	2302      	movs	r3, #2
 8001946:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	4619      	mov	r1, r3
 800194c:	4804      	ldr	r0, [pc, #16]	; (8001960 <SCCB_SDA_OUT+0x54>)
 800194e:	f004 fa37 	bl	8005dc0 <HAL_GPIO_Init>
}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800
 8001960:	40020c00 	.word	0x40020c00

08001964 <SCCB_Rst>:

void SCCB_Rst(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,GPIO_PIN_RESET)	;
 8001968:	2200      	movs	r2, #0
 800196a:	2108      	movs	r1, #8
 800196c:	480b      	ldr	r0, [pc, #44]	; (800199c <SCCB_Rst+0x38>)
 800196e:	f004 fbdb 	bl	8006128 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_15,GPIO_PIN_RESET)	;
 8001972:	2200      	movs	r2, #0
 8001974:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001978:	4809      	ldr	r0, [pc, #36]	; (80019a0 <SCCB_Rst+0x3c>)
 800197a:	f004 fbd5 	bl	8006128 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800197e:	2064      	movs	r0, #100	; 0x64
 8001980:	f000 fed6 	bl	8002730 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_15,GPIO_PIN_SET)	;
 8001984:	2201      	movs	r2, #1
 8001986:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <SCCB_Rst+0x3c>)
 800198c:	f004 fbcc 	bl	8006128 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001990:	2064      	movs	r0, #100	; 0x64
 8001992:	f000 fecd 	bl	8002730 <HAL_Delay>
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40020c00 	.word	0x40020c00
 80019a0:	40021800 	.word	0x40021800

080019a4 <OV2640_UXGA_Init>:
	0xe0, 0x00,
	0xdd, 0x7f,
	0x05, 0x00,
};
void OV2640_UXGA_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<sizeof(ov2640_uxga_init_reg_tbl)/2 ; i++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	e015      	b.n	80019dc <OV2640_UXGA_Init+0x38>
 {
   SCCB_WR_Reg(ov2640_uxga_init_reg_tbl[i][0],ov2640_uxga_init_reg_tbl[i][1]);
 80019b0:	4a0e      	ldr	r2, [pc, #56]	; (80019ec <OV2640_UXGA_Init+0x48>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80019b8:	490c      	ldr	r1, [pc, #48]	; (80019ec <OV2640_UXGA_Init+0x48>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	440b      	add	r3, r1
 80019c0:	785b      	ldrb	r3, [r3, #1]
 80019c2:	4619      	mov	r1, r3
 80019c4:	4610      	mov	r0, r2
 80019c6:	f7ff fedb 	bl	8001780 <SCCB_WR_Reg>
   if(i<10) HAL_Delay(5);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b09      	cmp	r3, #9
 80019ce:	d802      	bhi.n	80019d6 <OV2640_UXGA_Init+0x32>
 80019d0:	2005      	movs	r0, #5
 80019d2:	f000 fead 	bl	8002730 <HAL_Delay>
	for(uint32_t i=0; i<sizeof(ov2640_uxga_init_reg_tbl)/2 ; i++)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3301      	adds	r3, #1
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2bb1      	cmp	r3, #177	; 0xb1
 80019e0:	d9e6      	bls.n	80019b0 <OV2640_UXGA_Init+0xc>
 }

}
 80019e2:	bf00      	nop
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	0801f0f8 	.word	0x0801f0f8

080019f0 <OV2640_RGB565_Mode>:
		0xe1, 0x67
};

//OV2640 mode: RGB565
void OV2640_RGB565_Mode(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
	uint16_t i=0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	80fb      	strh	r3, [r7, #6]

	for(i=0;i<(sizeof(ov2640_rgb565_reg_tbl)/2);i++)
 80019fa:	2300      	movs	r3, #0
 80019fc:	80fb      	strh	r3, [r7, #6]
 80019fe:	e00f      	b.n	8001a20 <OV2640_RGB565_Mode+0x30>
	{
		SCCB_WR_Reg(ov2640_rgb565_reg_tbl[i][0],ov2640_rgb565_reg_tbl[i][1]);
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <OV2640_RGB565_Mode+0x40>)
 8001a04:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	4909      	ldr	r1, [pc, #36]	; (8001a30 <OV2640_RGB565_Mode+0x40>)
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	440b      	add	r3, r1
 8001a10:	785b      	ldrb	r3, [r3, #1]
 8001a12:	4619      	mov	r1, r3
 8001a14:	4610      	mov	r0, r2
 8001a16:	f7ff feb3 	bl	8001780 <SCCB_WR_Reg>
	for(i=0;i<(sizeof(ov2640_rgb565_reg_tbl)/2);i++)
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	80fb      	strh	r3, [r7, #6]
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	2b06      	cmp	r3, #6
 8001a24:	d9ec      	bls.n	8001a00 <OV2640_RGB565_Mode+0x10>
	}
}
 8001a26:	bf00      	nop
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	0801f25c 	.word	0x0801f25c

08001a34 <OV2640_OutSize_Set>:
    SCCB_WR_Reg(0X17,sx>>3);
    SCCB_WR_Reg(0X18,endx>>3);
}

uint8_t OV2640_OutSize_Set(uint16_t width,uint16_t height)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	460a      	mov	r2, r1
 8001a3e:	80fb      	strh	r3, [r7, #6]
 8001a40:	4613      	mov	r3, r2
 8001a42:	80bb      	strh	r3, [r7, #4]
    uint16_t outh;
    uint16_t outw;
    uint8_t temp;
    if(width%4)return 1;
 8001a44:	88fb      	ldrh	r3, [r7, #6]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <OV2640_OutSize_Set+0x20>
 8001a50:	2301      	movs	r3, #1
 8001a52:	e03e      	b.n	8001ad2 <OV2640_OutSize_Set+0x9e>
    if(height%4)return 2;
 8001a54:	88bb      	ldrh	r3, [r7, #4]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <OV2640_OutSize_Set+0x30>
 8001a60:	2302      	movs	r3, #2
 8001a62:	e036      	b.n	8001ad2 <OV2640_OutSize_Set+0x9e>
    outw=width/4;
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	089b      	lsrs	r3, r3, #2
 8001a68:	81fb      	strh	r3, [r7, #14]
    outh=height/4;
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	089b      	lsrs	r3, r3, #2
 8001a6e:	81bb      	strh	r3, [r7, #12]
    SCCB_WR_Reg(0XFF,0X00);
 8001a70:	2100      	movs	r1, #0
 8001a72:	20ff      	movs	r0, #255	; 0xff
 8001a74:	f7ff fe84 	bl	8001780 <SCCB_WR_Reg>
    SCCB_WR_Reg(0XE0,0X04);
 8001a78:	2104      	movs	r1, #4
 8001a7a:	20e0      	movs	r0, #224	; 0xe0
 8001a7c:	f7ff fe80 	bl	8001780 <SCCB_WR_Reg>
    SCCB_WR_Reg(0X5A,outw&0XFF);
 8001a80:	89fb      	ldrh	r3, [r7, #14]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	4619      	mov	r1, r3
 8001a86:	205a      	movs	r0, #90	; 0x5a
 8001a88:	f7ff fe7a 	bl	8001780 <SCCB_WR_Reg>
    SCCB_WR_Reg(0X5B,outh&0XFF);
 8001a8c:	89bb      	ldrh	r3, [r7, #12]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	4619      	mov	r1, r3
 8001a92:	205b      	movs	r0, #91	; 0x5b
 8001a94:	f7ff fe74 	bl	8001780 <SCCB_WR_Reg>
    temp=(outw>>8)&0X03;
 8001a98:	89fb      	ldrh	r3, [r7, #14]
 8001a9a:	0a1b      	lsrs	r3, r3, #8
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	72fb      	strb	r3, [r7, #11]
    temp|=(outh>>6)&0X04;
 8001aa6:	89bb      	ldrh	r3, [r7, #12]
 8001aa8:	099b      	lsrs	r3, r3, #6
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b25b      	sxtb	r3, r3
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	b25a      	sxtb	r2, r3
 8001ab4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	b25b      	sxtb	r3, r3
 8001abc:	72fb      	strb	r3, [r7, #11]
    SCCB_WR_Reg(0X5C,temp);
 8001abe:	7afb      	ldrb	r3, [r7, #11]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	205c      	movs	r0, #92	; 0x5c
 8001ac4:	f7ff fe5c 	bl	8001780 <SCCB_WR_Reg>
    SCCB_WR_Reg(0XE0,0X00);
 8001ac8:	2100      	movs	r1, #0
 8001aca:	20e0      	movs	r0, #224	; 0xe0
 8001acc:	f7ff fe58 	bl	8001780 <SCCB_WR_Reg>
    return 0;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <HAL_MspInit+0x4c>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	4a0f      	ldr	r2, [pc, #60]	; (8001b28 <HAL_MspInit+0x4c>)
 8001aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af0:	6453      	str	r3, [r2, #68]	; 0x44
 8001af2:	4b0d      	ldr	r3, [pc, #52]	; (8001b28 <HAL_MspInit+0x4c>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_MspInit+0x4c>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	4a08      	ldr	r2, [pc, #32]	; (8001b28 <HAL_MspInit+0x4c>)
 8001b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_MspInit+0x4c>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800

08001b2c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08c      	sub	sp, #48	; 0x30
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a68      	ldr	r2, [pc, #416]	; (8001cec <HAL_DCMI_MspInit+0x1c0>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	f040 80ca 	bne.w	8001ce4 <HAL_DCMI_MspInit+0x1b8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001b50:	2300      	movs	r3, #0
 8001b52:	61bb      	str	r3, [r7, #24]
 8001b54:	4b66      	ldr	r3, [pc, #408]	; (8001cf0 <HAL_DCMI_MspInit+0x1c4>)
 8001b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b58:	4a65      	ldr	r2, [pc, #404]	; (8001cf0 <HAL_DCMI_MspInit+0x1c4>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6353      	str	r3, [r2, #52]	; 0x34
 8001b60:	4b63      	ldr	r3, [pc, #396]	; (8001cf0 <HAL_DCMI_MspInit+0x1c4>)
 8001b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	61bb      	str	r3, [r7, #24]
 8001b6a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	4b5f      	ldr	r3, [pc, #380]	; (8001cf0 <HAL_DCMI_MspInit+0x1c4>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	4a5e      	ldr	r2, [pc, #376]	; (8001cf0 <HAL_DCMI_MspInit+0x1c4>)
 8001b76:	f043 0310 	orr.w	r3, r3, #16
 8001b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7c:	4b5c      	ldr	r3, [pc, #368]	; (8001cf0 <HAL_DCMI_MspInit+0x1c4>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	f003 0310 	and.w	r3, r3, #16
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	4b58      	ldr	r3, [pc, #352]	; (8001cf0 <HAL_DCMI_MspInit+0x1c4>)
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b90:	4a57      	ldr	r2, [pc, #348]	; (8001cf0 <HAL_DCMI_MspInit+0x1c4>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	6313      	str	r3, [r2, #48]	; 0x30
 8001b98:	4b55      	ldr	r3, [pc, #340]	; (8001cf0 <HAL_DCMI_MspInit+0x1c4>)
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	4b51      	ldr	r3, [pc, #324]	; (8001cf0 <HAL_DCMI_MspInit+0x1c4>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	4a50      	ldr	r2, [pc, #320]	; (8001cf0 <HAL_DCMI_MspInit+0x1c4>)
 8001bae:	f043 0304 	orr.w	r3, r3, #4
 8001bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb4:	4b4e      	ldr	r3, [pc, #312]	; (8001cf0 <HAL_DCMI_MspInit+0x1c4>)
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	4b4a      	ldr	r3, [pc, #296]	; (8001cf0 <HAL_DCMI_MspInit+0x1c4>)
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	4a49      	ldr	r2, [pc, #292]	; (8001cf0 <HAL_DCMI_MspInit+0x1c4>)
 8001bca:	f043 0302 	orr.w	r3, r3, #2
 8001bce:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd0:	4b47      	ldr	r3, [pc, #284]	; (8001cf0 <HAL_DCMI_MspInit+0x1c4>)
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001bdc:	2370      	movs	r3, #112	; 0x70
 8001bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001bec:	230d      	movs	r3, #13
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bf0:	f107 031c 	add.w	r3, r7, #28
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	483f      	ldr	r0, [pc, #252]	; (8001cf4 <HAL_DCMI_MspInit+0x1c8>)
 8001bf8:	f004 f8e2 	bl	8005dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001bfc:	2350      	movs	r3, #80	; 0x50
 8001bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c0c:	230d      	movs	r3, #13
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c10:	f107 031c 	add.w	r3, r7, #28
 8001c14:	4619      	mov	r1, r3
 8001c16:	4838      	ldr	r0, [pc, #224]	; (8001cf8 <HAL_DCMI_MspInit+0x1cc>)
 8001c18:	f004 f8d2 	bl	8005dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001c1c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c2e:	230d      	movs	r3, #13
 8001c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c32:	f107 031c 	add.w	r3, r7, #28
 8001c36:	4619      	mov	r1, r3
 8001c38:	4830      	ldr	r0, [pc, #192]	; (8001cfc <HAL_DCMI_MspInit+0x1d0>)
 8001c3a:	f004 f8c1 	bl	8005dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c3e:	23c0      	movs	r3, #192	; 0xc0
 8001c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	2302      	movs	r3, #2
 8001c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c4e:	230d      	movs	r3, #13
 8001c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c52:	f107 031c 	add.w	r3, r7, #28
 8001c56:	4619      	mov	r1, r3
 8001c58:	4829      	ldr	r0, [pc, #164]	; (8001d00 <HAL_DCMI_MspInit+0x1d4>)
 8001c5a:	f004 f8b1 	bl	8005dc0 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8001c5e:	4b29      	ldr	r3, [pc, #164]	; (8001d04 <HAL_DCMI_MspInit+0x1d8>)
 8001c60:	4a29      	ldr	r2, [pc, #164]	; (8001d08 <HAL_DCMI_MspInit+0x1dc>)
 8001c62:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <HAL_DCMI_MspInit+0x1d8>)
 8001c66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c6a:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c6c:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <HAL_DCMI_MspInit+0x1d8>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c72:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <HAL_DCMI_MspInit+0x1d8>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001c78:	4b22      	ldr	r3, [pc, #136]	; (8001d04 <HAL_DCMI_MspInit+0x1d8>)
 8001c7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c7e:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c80:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <HAL_DCMI_MspInit+0x1d8>)
 8001c82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c86:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c88:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <HAL_DCMI_MspInit+0x1d8>)
 8001c8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c8e:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8001c90:	4b1c      	ldr	r3, [pc, #112]	; (8001d04 <HAL_DCMI_MspInit+0x1d8>)
 8001c92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c96:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8001c98:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <HAL_DCMI_MspInit+0x1d8>)
 8001c9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c9e:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001ca0:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <HAL_DCMI_MspInit+0x1d8>)
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <HAL_DCMI_MspInit+0x1d8>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_DCMI_MspInit+0x1d8>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001cb2:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <HAL_DCMI_MspInit+0x1d8>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001cb8:	4812      	ldr	r0, [pc, #72]	; (8001d04 <HAL_DCMI_MspInit+0x1d8>)
 8001cba:	f001 f94b 	bl	8002f54 <HAL_DMA_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_DCMI_MspInit+0x19c>
    {
      Error_Handler();
 8001cc4:	f7ff fbe6 	bl	8001494 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <HAL_DCMI_MspInit+0x1d8>)
 8001ccc:	639a      	str	r2, [r3, #56]	; 0x38
 8001cce:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <HAL_DCMI_MspInit+0x1d8>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 3, 0);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2103      	movs	r1, #3
 8001cd8:	204e      	movs	r0, #78	; 0x4e
 8001cda:	f000 fe28 	bl	800292e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001cde:	204e      	movs	r0, #78	; 0x4e
 8001ce0:	f000 fe41 	bl	8002966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001ce4:	bf00      	nop
 8001ce6:	3730      	adds	r7, #48	; 0x30
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	50050000 	.word	0x50050000
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	40020800 	.word	0x40020800
 8001d00:	40020400 	.word	0x40020400
 8001d04:	20001960 	.word	0x20001960
 8001d08:	40026428 	.word	0x40026428

08001d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a2c      	ldr	r2, [pc, #176]	; (8001ddc <HAL_UART_MspInit+0xd0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d152      	bne.n	8001dd4 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	4b2b      	ldr	r3, [pc, #172]	; (8001de0 <HAL_UART_MspInit+0xd4>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	4a2a      	ldr	r2, [pc, #168]	; (8001de0 <HAL_UART_MspInit+0xd4>)
 8001d38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3e:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <HAL_UART_MspInit+0xd4>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <HAL_UART_MspInit+0xd4>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a23      	ldr	r2, [pc, #140]	; (8001de0 <HAL_UART_MspInit+0xd4>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <HAL_UART_MspInit+0xd4>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_UART_MspInit+0xd4>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a1c      	ldr	r2, [pc, #112]	; (8001de0 <HAL_UART_MspInit+0xd4>)
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <HAL_UART_MspInit+0xd4>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d82:	2301      	movs	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d92:	2308      	movs	r3, #8
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4811      	ldr	r0, [pc, #68]	; (8001de4 <HAL_UART_MspInit+0xd8>)
 8001d9e:	f004 f80f 	bl	8005dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001da2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da8:	2302      	movs	r3, #2
 8001daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db0:	2303      	movs	r3, #3
 8001db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001db4:	2308      	movs	r3, #8
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480a      	ldr	r0, [pc, #40]	; (8001de8 <HAL_UART_MspInit+0xdc>)
 8001dc0:	f003 fffe 	bl	8005dc0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 4, 0);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2104      	movs	r1, #4
 8001dc8:	2034      	movs	r0, #52	; 0x34
 8001dca:	f000 fdb0 	bl	800292e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001dce:	2034      	movs	r0, #52	; 0x34
 8001dd0:	f000 fdc9 	bl	8002966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001dd4:	bf00      	nop
 8001dd6:	3728      	adds	r7, #40	; 0x28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40004c00 	.word	0x40004c00
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40020000 	.word	0x40020000
 8001de8:	40020800 	.word	0x40020800

08001dec <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001e00:	4b2c      	ldr	r3, [pc, #176]	; (8001eb4 <HAL_FSMC_MspInit+0xc8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d151      	bne.n	8001eac <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001e08:	4b2a      	ldr	r3, [pc, #168]	; (8001eb4 <HAL_FSMC_MspInit+0xc8>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	603b      	str	r3, [r7, #0]
 8001e12:	4b29      	ldr	r3, [pc, #164]	; (8001eb8 <HAL_FSMC_MspInit+0xcc>)
 8001e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e16:	4a28      	ldr	r2, [pc, #160]	; (8001eb8 <HAL_FSMC_MspInit+0xcc>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6393      	str	r3, [r2, #56]	; 0x38
 8001e1e:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <HAL_FSMC_MspInit+0xcc>)
 8001e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e2a:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001e2e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001e3c:	230c      	movs	r3, #12
 8001e3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	4619      	mov	r1, r3
 8001e44:	481d      	ldr	r0, [pc, #116]	; (8001ebc <HAL_FSMC_MspInit+0xd0>)
 8001e46:	f003 ffbb 	bl	8005dc0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e4a:	f240 433f 	movw	r3, #1087	; 0x43f
 8001e4e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001e5c:	230c      	movs	r3, #12
 8001e5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e60:	1d3b      	adds	r3, r7, #4
 8001e62:	4619      	mov	r1, r3
 8001e64:	4816      	ldr	r0, [pc, #88]	; (8001ec0 <HAL_FSMC_MspInit+0xd4>)
 8001e66:	f003 ffab 	bl	8005dc0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001e6a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001e6e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e70:	2302      	movs	r3, #2
 8001e72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001e7c:	230c      	movs	r3, #12
 8001e7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	4619      	mov	r1, r3
 8001e84:	480f      	ldr	r0, [pc, #60]	; (8001ec4 <HAL_FSMC_MspInit+0xd8>)
 8001e86:	f003 ff9b 	bl	8005dc0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001e8a:	f64f 7333 	movw	r3, #65331	; 0xff33
 8001e8e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001e9c:	230c      	movs	r3, #12
 8001e9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4808      	ldr	r0, [pc, #32]	; (8001ec8 <HAL_FSMC_MspInit+0xdc>)
 8001ea6:	f003 ff8b 	bl	8005dc0 <HAL_GPIO_Init>
 8001eaa:	e000      	b.n	8001eae <HAL_FSMC_MspInit+0xc2>
    return;
 8001eac:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20000748 	.word	0x20000748
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40021400 	.word	0x40021400
 8001ec0:	40021800 	.word	0x40021800
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40020c00 	.word	0x40020c00

08001ecc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001ed4:	f7ff ff8a 	bl	8001dec <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <NMI_Handler+0x4>

08001ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eea:	e7fe      	b.n	8001eea <HardFault_Handler+0x4>

08001eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <MemManage_Handler+0x4>

08001ef2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <BusFault_Handler+0x4>

08001ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <UsageFault_Handler+0x4>

08001efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f2c:	f000 fbe0 	bl	80026f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001f38:	4802      	ldr	r0, [pc, #8]	; (8001f44 <UART4_IRQHandler+0x10>)
 8001f3a:	f006 fc7f 	bl	800883c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20002a44 	.word	0x20002a44

08001f48 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001f4c:	4802      	ldr	r0, [pc, #8]	; (8001f58 <DMA2_Stream1_IRQHandler+0x10>)
 8001f4e:	f001 f999 	bl	8003284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20001960 	.word	0x20001960

08001f5c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001f60:	4802      	ldr	r0, [pc, #8]	; (8001f6c <ETH_IRQHandler+0x10>)
 8001f62:	f003 f961 	bl	8005228 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20006414 	.word	0x20006414

08001f70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <OTG_FS_IRQHandler+0x10>)
 8001f76:	f004 fb5b 	bl	8006630 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	2001ada4 	.word	0x2001ada4

08001f84 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001f88:	4802      	ldr	r0, [pc, #8]	; (8001f94 <DCMI_IRQHandler+0x10>)
 8001f8a:	f000 fda7 	bl	8002adc <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200029fc 	.word	0x200029fc

08001f98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
	return 1;
 8001f9c:	2301      	movs	r3, #1
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <_kill>:

int _kill(int pid, int sig)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fb2:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <_kill+0x20>)
 8001fb4:	2216      	movs	r2, #22
 8001fb6:	601a      	str	r2, [r3, #0]
	return -1;
 8001fb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	2001b0a8 	.word	0x2001b0a8

08001fcc <_exit>:

void _exit (int status)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ffe5 	bl	8001fa8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fde:	e7fe      	b.n	8001fde <_exit+0x12>

08001fe0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	e00a      	b.n	8002008 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ff2:	f3af 8000 	nop.w
 8001ff6:	4601      	mov	r1, r0
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	60ba      	str	r2, [r7, #8]
 8001ffe:	b2ca      	uxtb	r2, r1
 8002000:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	3301      	adds	r3, #1
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	429a      	cmp	r2, r3
 800200e:	dbf0      	blt.n	8001ff2 <_read+0x12>
	}

return len;
 8002010:	687b      	ldr	r3, [r7, #4]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e009      	b.n	8002040 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	60ba      	str	r2, [r7, #8]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f016 fee3 	bl	8018e00 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	dbf1      	blt.n	800202c <_write+0x12>
	}
	return len;
 8002048:	687b      	ldr	r3, [r7, #4]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <_close>:

int _close(int file)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
	return -1;
 800205a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800207a:	605a      	str	r2, [r3, #4]
	return 0;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <_isatty>:

int _isatty(int file)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
	return 1;
 8002092:	2301      	movs	r3, #1
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
	return 0;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020bc:	b480      	push	{r7}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c4:	4a14      	ldr	r2, [pc, #80]	; (8002118 <_sbrk+0x5c>)
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <_sbrk+0x60>)
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <_sbrk+0x64>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <_sbrk+0x64>)
 80020da:	4a12      	ldr	r2, [pc, #72]	; (8002124 <_sbrk+0x68>)
 80020dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <_sbrk+0x64>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d205      	bcs.n	80020f8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80020ec:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <_sbrk+0x6c>)
 80020ee:	220c      	movs	r2, #12
 80020f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
 80020f6:	e009      	b.n	800210c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f8:	4b09      	ldr	r3, [pc, #36]	; (8002120 <_sbrk+0x64>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020fe:	4b08      	ldr	r3, [pc, #32]	; (8002120 <_sbrk+0x64>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	4a06      	ldr	r2, [pc, #24]	; (8002120 <_sbrk+0x64>)
 8002108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800210a:	68fb      	ldr	r3, [r7, #12]
}
 800210c:	4618      	mov	r0, r3
 800210e:	371c      	adds	r7, #28
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	20020000 	.word	0x20020000
 800211c:	00001000 	.word	0x00001000
 8002120:	2000074c 	.word	0x2000074c
 8002124:	2001b0b8 	.word	0x2001b0b8
 8002128:	2001b0a8 	.word	0x2001b0a8

0800212c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <SystemInit+0x20>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002136:	4a05      	ldr	r2, [pc, #20]	; (800214c <SystemInit+0x20>)
 8002138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800213c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <tcp_err2>:
/* create a struct to store data */
 static struct tcp_client_struct *esTx = 0;
 static struct tcp_pcb *pcbTx = 0;
int numarr[2];

static void tcp_err2(void *arg,err_t err){
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	70fb      	strb	r3, [r7, #3]

printf("connect error,!closed by core ");
 800215c:	4803      	ldr	r0, [pc, #12]	; (800216c <tcp_err2+0x1c>)
 800215e:	f017 ff05 	bl	8019f6c <iprintf>


}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	0801c040 	.word	0x0801c040

08002170 <HAL_DCMI_FrameEventCallback>:


void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi2)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
//		printf("miss %d %d\r\n",send_all,echo_run);
//	}



}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <echo>:

void echo()
{
 8002184:	b598      	push	{r3, r4, r7, lr}
 8002186:	af00      	add	r7, sp, #0


		//if(total_time>0)


	if(echo_run==1){
 8002188:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <echo+0x64>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d129      	bne.n	80021e4 <echo+0x60>


	//	printf("start send %d.bmp,time\r\n",circle_time);
		echo_run=0;
 8002190:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <echo+0x64>)
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]

	esTx->p = pbuf_alloc(PBUF_RAW,3840, PBUF_POOL);
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <echo+0x68>)
 8002198:	681c      	ldr	r4, [r3, #0]
 800219a:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800219e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80021a2:	2000      	movs	r0, #0
 80021a4:	f00d faa4 	bl	800f6f0 <pbuf_alloc>
 80021a8:	4603      	mov	r3, r0
 80021aa:	60a3      	str	r3, [r4, #8]
	if(esTx->p!=NULL){
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <echo+0x68>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d016      	beq.n	80021e4 <echo+0x60>
	pbuf_take(esTx->p,abc,3840);
 80021b6:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <echo+0x68>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80021c0:	490b      	ldr	r1, [pc, #44]	; (80021f0 <echo+0x6c>)
 80021c2:	4618      	mov	r0, r3
 80021c4:	f00d ffd4 	bl	8010170 <pbuf_take>
	tcp_client_send(pcbTx, esTx);
 80021c8:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <echo+0x70>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a07      	ldr	r2, [pc, #28]	; (80021ec <echo+0x68>)
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	4611      	mov	r1, r2
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 f9bc 	bl	8002550 <tcp_client_send>
	pbuf_free(esTx->p);
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <echo+0x68>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	4618      	mov	r0, r3
 80021e0:	f00d fd6a 	bl	800fcb8 <pbuf_free>




}
}
 80021e4:	bf00      	nop
 80021e6:	bd98      	pop	{r3, r4, r7, pc}
 80021e8:	20000500 	.word	0x20000500
 80021ec:	20000754 	.word	0x20000754
 80021f0:	20000000 	.word	0x20000000
 80021f4:	20000758 	.word	0x20000758

080021f8 <send_poolsize>:


void send_poolsize(int counter) {
 80021f8:	b590      	push	{r4, r7, lr}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]


//	clock_t start, finish;

	int counter_end =counter+ 3;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3303      	adds	r3, #3
 8002204:	60fb      	str	r3, [r7, #12]

	if (counter_end>all_circle)
 8002206:	4b2d      	ldr	r3, [pc, #180]	; (80022bc <send_poolsize+0xc4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	429a      	cmp	r2, r3
 800220e:	dd02      	ble.n	8002216 <send_poolsize+0x1e>
		counter_end=all_circle;
 8002210:	4b2a      	ldr	r3, [pc, #168]	; (80022bc <send_poolsize+0xc4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]
	int persize=1280;
 8002216:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800221a:	60bb      	str	r3, [r7, #8]
	//printf("counter=%d,end=%d\r\n",counter,counter_end);

	while (counter < counter_end) {
 800221c:	e044      	b.n	80022a8 <send_poolsize+0xb0>

		//the last one of the circles
		if(counter==(all_circle-1)){
 800221e:	4b27      	ldr	r3, [pc, #156]	; (80022bc <send_poolsize+0xc4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	3b01      	subs	r3, #1
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	429a      	cmp	r2, r3
 8002228:	d10c      	bne.n	8002244 <send_poolsize+0x4c>

			if(left_bytes!=0){
 800222a:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <send_poolsize+0xc8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <send_poolsize+0x40>
				persize=left_bytes;
 8002232:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <send_poolsize+0xc8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	60bb      	str	r3, [r7, #8]

			//__HAL_DCMI_ENABLE_IT(&hdcmi, DCMI_IT_FRAME);//每次拍照前都要使能帧中断
		// 	HAL_DCMI_Resume(&hdcmi);

		 	// HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)testsram,DCMI_CN*DCMI_RN/4);
		 	 echo_run=1;
 8002238:	4b22      	ldr	r3, [pc, #136]	; (80022c4 <send_poolsize+0xcc>)
 800223a:	2201      	movs	r2, #1
 800223c:	601a      	str	r2, [r3, #0]
		 	 send_all=1;
 800223e:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <send_poolsize+0xd0>)
 8002240:	2201      	movs	r2, #1
 8002242:	601a      	str	r2, [r3, #0]

		}
		//printf("send buff \r\n");

		esTx->p = pbuf_alloc(PBUF_RAW, persize, PBUF_POOL);
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	b29b      	uxth	r3, r3
 8002248:	4a20      	ldr	r2, [pc, #128]	; (80022cc <send_poolsize+0xd4>)
 800224a:	6814      	ldr	r4, [r2, #0]
 800224c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8002250:	4619      	mov	r1, r3
 8002252:	2000      	movs	r0, #0
 8002254:	f00d fa4c 	bl	800f6f0 <pbuf_alloc>
 8002258:	4603      	mov	r3, r0
 800225a:	60a3      	str	r3, [r4, #8]
		if(esTx->p!=NULL){
 800225c:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <send_poolsize+0xd4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d020      	beq.n	80022a8 <send_poolsize+0xb0>

		pbuf_take(esTx->p,testsram+1280*counter, persize);
 8002266:	4b19      	ldr	r3, [pc, #100]	; (80022cc <send_poolsize+0xd4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6898      	ldr	r0, [r3, #8]
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	461a      	mov	r2, r3
 8002278:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <send_poolsize+0xd8>)
 800227a:	4413      	add	r3, r2
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	b292      	uxth	r2, r2
 8002280:	4619      	mov	r1, r3
 8002282:	f00d ff75 	bl	8010170 <pbuf_take>
		tcp_client_send(pcbTx, esTx);
 8002286:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <send_poolsize+0xdc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a10      	ldr	r2, [pc, #64]	; (80022cc <send_poolsize+0xd4>)
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f000 f95d 	bl	8002550 <tcp_client_send>
		counter++;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3301      	adds	r3, #1
 800229a:	607b      	str	r3, [r7, #4]
		pbuf_free(esTx->p);
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <send_poolsize+0xd4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f00d fd08 	bl	800fcb8 <pbuf_free>
	while (counter < counter_end) {
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	dbb6      	blt.n	800221e <send_poolsize+0x26>
//
//	finish=clock();
//	total_time=(int)(finish-start)/CLOCKS_PER_SEC;
//printf("send %d seconds\r\n",total_time);

}
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd90      	pop	{r4, r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000072c 	.word	0x2000072c
 80022c0:	20000730 	.word	0x20000730
 80022c4:	20000500 	.word	0x20000500
 80022c8:	20000750 	.word	0x20000750
 80022cc:	20000754 	.word	0x20000754
 80022d0:	68000000 	.word	0x68000000
 80022d4:	20000758 	.word	0x20000758

080022d8 <tcp_client_init>:
 1. Create TCP block.
 2. connect to the server
 3. start communicating
 */

void tcp_client_init(void) {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 80022de:	f00f fb3b 	bl	8011958 <tcp_new>
 80022e2:	60f8      	str	r0, [r7, #12]

	/* 2. Connect to the server */
	ip_addr_t destIPADDR;
	IP_ADDR4(&destIPADDR, 192, 168, 1, 7);
 80022e4:	4b10      	ldr	r3, [pc, #64]	; (8002328 <tcp_client_init+0x50>)
 80022e6:	607b      	str	r3, [r7, #4]
	err_t ok;
	//while(ok!= ERR_OK)
		ok=tcp_connect(tpcb, &destIPADDR, 12345, tcp_client_connected);
 80022e8:	1d39      	adds	r1, r7, #4
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <tcp_client_init+0x54>)
 80022ec:	f243 0239 	movw	r2, #12345	; 0x3039
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f00e fbf7 	bl	8010ae4 <tcp_connect>
 80022f6:	4603      	mov	r3, r0
 80022f8:	72fb      	strb	r3, [r7, #11]
		HAL_Delay(5000);
 80022fa:	f241 3088 	movw	r0, #5000	; 0x1388
 80022fe:	f000 fa17 	bl	8002730 <HAL_Delay>
		 printf("tpc address = %p\r\n,",tpcb);
 8002302:	68f9      	ldr	r1, [r7, #12]
 8002304:	480a      	ldr	r0, [pc, #40]	; (8002330 <tcp_client_init+0x58>)
 8002306:	f017 fe31 	bl	8019f6c <iprintf>

		printf("connection result = %d \r\n",ok);
 800230a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800230e:	4619      	mov	r1, r3
 8002310:	4808      	ldr	r0, [pc, #32]	; (8002334 <tcp_client_init+0x5c>)
 8002312:	f017 fe2b 	bl	8019f6c <iprintf>
		tcp_err(tpcb,tcp_err2);
 8002316:	4908      	ldr	r1, [pc, #32]	; (8002338 <tcp_client_init+0x60>)
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f00f fb7b 	bl	8011a14 <tcp_err>

}
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	0701a8c0 	.word	0x0701a8c0
 800232c:	0800233d 	.word	0x0800233d
 8002330:	0801c060 	.word	0x0801c060
 8002334:	0801c074 	.word	0x0801c074
 8002338:	08002151 	.word	0x08002151

0800233c <tcp_client_connected>:

/** This callback is called, when the client is connected to the server
 * Here we will initialise few other callbacks
 * and in the end, call the client handle function
 */
static err_t tcp_client_connected(void *arg, struct tcp_pcb *newpcb, err_t err) {
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	4613      	mov	r3, r2
 8002348:	71fb      	strb	r3, [r7, #7]

	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(err);

	/* allocate structure es to maintain tcp connection information */
	es = (struct tcp_client_struct*) mem_malloc(
 800234a:	200c      	movs	r0, #12
 800234c:	f00c fce8 	bl	800ed20 <mem_malloc>
 8002350:	6138      	str	r0, [r7, #16]
			sizeof(struct tcp_client_struct));
	if (es != NULL) {
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d01f      	beq.n	8002398 <tcp_client_connected+0x5c>
		es->state = ES_CONNECTED;
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
		es->pcb = newpcb;
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	605a      	str	r2, [r3, #4]
		es->retries = 0;
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	2200      	movs	r2, #0
 8002368:	705a      	strb	r2, [r3, #1]
		es->p = NULL;
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]

		/* pass newly allocated es structure as argument to newpcb */
		tcp_arg(newpcb, es);
 8002370:	6939      	ldr	r1, [r7, #16]
 8002372:	68b8      	ldr	r0, [r7, #8]
 8002374:	f00f faf8 	bl	8011968 <tcp_arg>

		/* initialize lwip tcp_recv callback function for newpcb  */
		tcp_recv(newpcb, tcp_client_recv);
 8002378:	490d      	ldr	r1, [pc, #52]	; (80023b0 <tcp_client_connected+0x74>)
 800237a:	68b8      	ldr	r0, [r7, #8]
 800237c:	f00f fb06 	bl	801198c <tcp_recv>

		/* initialize lwip tcp_poll callback function for newpcb */
		tcp_poll(newpcb, tcp_client_poll, 0);
 8002380:	2200      	movs	r2, #0
 8002382:	490c      	ldr	r1, [pc, #48]	; (80023b4 <tcp_client_connected+0x78>)
 8002384:	68b8      	ldr	r0, [r7, #8]
 8002386:	f00f fb67 	bl	8011a58 <tcp_poll>

		/* initialize LwIP tcp_sent callback function */
		//tcp_sent(newpcb, tcp_client_sent);

		/* handle the TCP data */
		tcp_client_handle(newpcb, es);
 800238a:	6939      	ldr	r1, [r7, #16]
 800238c:	68b8      	ldr	r0, [r7, #8]
 800238e:	f000 f91d 	bl	80025cc <tcp_client_handle>

		ret_err = ERR_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	75fb      	strb	r3, [r7, #23]
 8002396:	e005      	b.n	80023a4 <tcp_client_connected+0x68>
	} else {
		/*  close tcp connection */
		tcp_client_connection_close(newpcb, es);
 8002398:	6939      	ldr	r1, [r7, #16]
 800239a:	68b8      	ldr	r0, [r7, #8]
 800239c:	f000 f8ef 	bl	800257e <tcp_client_connection_close>
		/* return memory error */
		ret_err = ERR_MEM;
 80023a0:	23ff      	movs	r3, #255	; 0xff
 80023a2:	75fb      	strb	r3, [r7, #23]
	}
	return ret_err;
 80023a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	080023b9 	.word	0x080023b9
 80023b4:	08002509 	.word	0x08002509

080023b8 <tcp_client_recv>:

/** This callback is called, when the client receives some data from the server
 * if the data received is valid, we will handle the data in the client handle function
 */
static err_t tcp_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p,
		err_t err) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	70fb      	strb	r3, [r7, #3]
	struct tcp_client_struct *es;
	err_t ret_err;

	LWIP_ASSERT("arg != NULL", arg != NULL);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d106      	bne.n	80023da <tcp_client_recv+0x22>
 80023cc:	4b49      	ldr	r3, [pc, #292]	; (80024f4 <tcp_client_recv+0x13c>)
 80023ce:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 80023d2:	4949      	ldr	r1, [pc, #292]	; (80024f8 <tcp_client_recv+0x140>)
 80023d4:	4849      	ldr	r0, [pc, #292]	; (80024fc <tcp_client_recv+0x144>)
 80023d6:	f017 fdc9 	bl	8019f6c <iprintf>

	es = (struct tcp_client_struct*) arg;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	617b      	str	r3, [r7, #20]

	/* if we receive an empty tcp frame from server => close connection */
	if (p == NULL) {
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10d      	bne.n	8002400 <tcp_client_recv+0x48>
		/* remote host closed connection */
		es->state = ES_CLOSING;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	2203      	movs	r2, #3
 80023e8:	701a      	strb	r2, [r3, #0]
		if (es->p == NULL) {
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d103      	bne.n	80023fa <tcp_client_recv+0x42>
			/* we're done sending, close connection */
			tcp_client_connection_close(tpcb, es);
 80023f2:	6979      	ldr	r1, [r7, #20]
 80023f4:	68b8      	ldr	r0, [r7, #8]
 80023f6:	f000 f8c2 	bl	800257e <tcp_client_connection_close>
//      /* acknowledge received packet */
//      tcp_sent(tpcb, tcp_client_sent);
			/* send remaining data*/
//      tcp_client_send(tpcb, es);
		}
		ret_err = ERR_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	77fb      	strb	r3, [r7, #31]
 80023fe:	e073      	b.n	80024e8 <tcp_client_recv+0x130>
	}
	/* else : a non empty frame was received from server but for some reason err != ERR_OK */
	else if (err != ERR_OK) {
 8002400:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00b      	beq.n	8002420 <tcp_client_recv+0x68>
		/* free received pbuf*/
		if (p != NULL) {
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d005      	beq.n	800241a <tcp_client_recv+0x62>
			es->p = NULL;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
			pbuf_free(p);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f00d fc4f 	bl	800fcb8 <pbuf_free>
		}
		ret_err = err;
 800241a:	78fb      	ldrb	r3, [r7, #3]
 800241c:	77fb      	strb	r3, [r7, #31]
 800241e:	e063      	b.n	80024e8 <tcp_client_recv+0x130>
	} else if (es->state == ES_CONNECTED) {
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d13e      	bne.n	80024a6 <tcp_client_recv+0xee>
		/* store reference to incoming pbuf (chain) */
		//es->p = p;
		uint8_t num[4];
		//while(ptmp!=NULL){
			for(int i=0;i<4;i++){
 8002428:	2300      	movs	r3, #0
 800242a:	61bb      	str	r3, [r7, #24]
 800242c:	e00d      	b.n	800244a <tcp_client_recv+0x92>
				//printf("%c",*((char *)p->payload+i));
				num[i]=*((char *)p->payload+i);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	4413      	add	r3, r2
 8002436:	7819      	ldrb	r1, [r3, #0]
 8002438:	f107 0210 	add.w	r2, r7, #16
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	4413      	add	r3, r2
 8002440:	460a      	mov	r2, r1
 8002442:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<4;i++){
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	3301      	adds	r3, #1
 8002448:	61bb      	str	r3, [r7, #24]
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	2b03      	cmp	r3, #3
 800244e:	ddee      	ble.n	800242e <tcp_client_recv+0x76>
			//}
			//ptmp=p->next;
		}
		resend_no=num[0]+num[1]+num[2]+num[3];
 8002450:	7c3b      	ldrb	r3, [r7, #16]
 8002452:	461a      	mov	r2, r3
 8002454:	7c7b      	ldrb	r3, [r7, #17]
 8002456:	4413      	add	r3, r2
 8002458:	7cba      	ldrb	r2, [r7, #18]
 800245a:	4413      	add	r3, r2
 800245c:	7cfa      	ldrb	r2, [r7, #19]
 800245e:	4413      	add	r3, r2
 8002460:	4a27      	ldr	r2, [pc, #156]	; (8002500 <tcp_client_recv+0x148>)
 8002462:	6013      	str	r3, [r2, #0]
//
			if(resend_no==1000){
 8002464:	4b26      	ldr	r3, [pc, #152]	; (8002500 <tcp_client_recv+0x148>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800246c:	d102      	bne.n	8002474 <tcp_client_recv+0xbc>
				echo();
 800246e:	f7ff fe89 	bl	8002184 <echo>
 8002472:	e007      	b.n	8002484 <tcp_client_recv+0xcc>
			}else{
			resend_no-=all_circle+1;
 8002474:	4b22      	ldr	r3, [pc, #136]	; (8002500 <tcp_client_recv+0x148>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b22      	ldr	r3, [pc, #136]	; (8002504 <tcp_client_recv+0x14c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3301      	adds	r3, #1
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	4a1f      	ldr	r2, [pc, #124]	; (8002500 <tcp_client_recv+0x148>)
 8002482:	6013      	str	r3, [r2, #0]
		// tcp_sent has already been initialized in the beginning.
//    /* initialize LwIP tcp_sent callback function */
//    tcp_sent(tpcb, tcp_client_sent);


			send_poolsize(resend_no);
 8002484:	4b1e      	ldr	r3, [pc, #120]	; (8002500 <tcp_client_recv+0x148>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff feb5 	bl	80021f8 <send_poolsize>

		/* Acknowledge the received data */
		tcp_recved(tpcb, p->tot_len);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	891b      	ldrh	r3, [r3, #8]
 8002492:	4619      	mov	r1, r3
 8002494:	68b8      	ldr	r0, [r7, #8]
 8002496:	f00e fa8f 	bl	80109b8 <tcp_recved>

		/* handle the received data */
		pbuf_free(p);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f00d fc0c 	bl	800fcb8 <pbuf_free>


		ret_err = ERR_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	77fb      	strb	r3, [r7, #31]
 80024a4:	e020      	b.n	80024e8 <tcp_client_recv+0x130>
	} else if (es->state == ES_CLOSING) {
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d10e      	bne.n	80024cc <tcp_client_recv+0x114>
		/* odd case, remote side closing twice, trash data */
		tcp_recved(tpcb, p->tot_len);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	891b      	ldrh	r3, [r3, #8]
 80024b2:	4619      	mov	r1, r3
 80024b4:	68b8      	ldr	r0, [r7, #8]
 80024b6:	f00e fa7f 	bl	80109b8 <tcp_recved>
		es->p = NULL;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2200      	movs	r2, #0
 80024be:	609a      	str	r2, [r3, #8]
		pbuf_free(p);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f00d fbf9 	bl	800fcb8 <pbuf_free>
		ret_err = ERR_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	77fb      	strb	r3, [r7, #31]
 80024ca:	e00d      	b.n	80024e8 <tcp_client_recv+0x130>
	} else {
		/* unknown es->state, trash data  */
		tcp_recved(tpcb, p->tot_len);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	891b      	ldrh	r3, [r3, #8]
 80024d0:	4619      	mov	r1, r3
 80024d2:	68b8      	ldr	r0, [r7, #8]
 80024d4:	f00e fa70 	bl	80109b8 <tcp_recved>
		es->p = NULL;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
		pbuf_free(p);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f00d fbea 	bl	800fcb8 <pbuf_free>
		ret_err = ERR_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	77fb      	strb	r3, [r7, #31]
	}
	return ret_err;
 80024e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3720      	adds	r7, #32
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	0801c090 	.word	0x0801c090
 80024f8:	0801c0ac 	.word	0x0801c0ac
 80024fc:	0801c0b8 	.word	0x0801c0b8
 8002500:	20000734 	.word	0x20000734
 8002504:	2000072c 	.word	0x2000072c

08002508 <tcp_client_poll>:

static err_t tcp_client_poll(void *arg, struct tcp_pcb *tpcb) {
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
	err_t ret_err;
	struct tcp_client_struct *es;

	es = (struct tcp_client_struct*) arg;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	60bb      	str	r3, [r7, #8]
	if (es != NULL) {
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00e      	beq.n	800253a <tcp_client_poll+0x32>
		if (es->p != NULL) {
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d107      	bne.n	8002534 <tcp_client_poll+0x2c>
//      tcp_sent(tpcb, tcp_client_sent);
			/* there is a remaining pbuf (chain) , try to send data */
//      tcp_client_send(tpcb, es);
		} else {
			/* no remaining pbuf (chain)  */
			if (es->state == ES_CLOSING) {
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b03      	cmp	r3, #3
 800252a:	d103      	bne.n	8002534 <tcp_client_poll+0x2c>
				/*  close tcp connection */
				tcp_client_connection_close(tpcb, es);
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	6838      	ldr	r0, [r7, #0]
 8002530:	f000 f825 	bl	800257e <tcp_client_connection_close>
			}
		}
		ret_err = ERR_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	73fb      	strb	r3, [r7, #15]
 8002538:	e004      	b.n	8002544 <tcp_client_poll+0x3c>
	} else {
		/* nothing to be done */
		tcp_abort(tpcb);
 800253a:	6838      	ldr	r0, [r7, #0]
 800253c:	f00e f9d6 	bl	80108ec <tcp_abort>
		ret_err = ERR_ABRT;
 8002540:	23f3      	movs	r3, #243	; 0xf3
 8002542:	73fb      	strb	r3, [r7, #15]
	}
	return ret_err;
 8002544:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <tcp_client_send>:
	return ERR_OK;
}

/** A function to send the data to the server
 */
static void tcp_client_send(struct tcp_pcb *tpcb,struct tcp_client_struct*es) {
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
	  struct pbuf *ptr;


	    /* get pointer on pbuf from es structure */
	    ptr = es->p;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	60fb      	str	r3, [r7, #12]


	tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6859      	ldr	r1, [r3, #4]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	895a      	ldrh	r2, [r3, #10]
 8002568:	2301      	movs	r3, #1
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f012 f924 	bl	80147b8 <tcp_write>


	tcp_output(tpcb);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f012 ff0d 	bl	8015390 <tcp_output>



}
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <tcp_client_connection_close>:


static void tcp_client_connection_close(struct tcp_pcb *tpcb,
		struct tcp_client_struct *es) {
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]

	/* remove all callbacks */
	tcp_arg(tpcb, NULL);
 8002588:	2100      	movs	r1, #0
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f00f f9ec 	bl	8011968 <tcp_arg>
	tcp_sent(tpcb, NULL);
 8002590:	2100      	movs	r1, #0
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f00f fa1c 	bl	80119d0 <tcp_sent>
	tcp_recv(tpcb, NULL);
 8002598:	2100      	movs	r1, #0
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f00f f9f6 	bl	801198c <tcp_recv>
	tcp_err(tpcb, NULL);
 80025a0:	2100      	movs	r1, #0
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f00f fa36 	bl	8011a14 <tcp_err>
	tcp_poll(tpcb, NULL, 0);
 80025a8:	2200      	movs	r2, #0
 80025aa:	2100      	movs	r1, #0
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f00f fa53 	bl	8011a58 <tcp_poll>

	/* delete es structure */
	if (es != NULL) {
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <tcp_client_connection_close+0x40>
		mem_free(es);
 80025b8:	6838      	ldr	r0, [r7, #0]
 80025ba:	f00c fa4b 	bl	800ea54 <mem_free>
	}

	/* close tcp connection */
	tcp_close(tpcb);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f00e f8aa 	bl	8010718 <tcp_close>
}
 80025c4:	bf00      	nop
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <tcp_client_handle>:

/* Handle the incoming TCP Data */

static void tcp_client_handle(struct tcp_pcb *tpcb,
		struct tcp_client_struct *es) {
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
	/* Extract the IP */

//	esTx->state = es->state;
//	esTx->pcb = es->pcb;
//	esTx->p = es->p;
	esTx = es;
 80025d6:	4a06      	ldr	r2, [pc, #24]	; (80025f0 <tcp_client_handle+0x24>)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	6013      	str	r3, [r2, #0]
	pcbTx = tpcb;
 80025dc:	4a05      	ldr	r2, [pc, #20]	; (80025f4 <tcp_client_handle+0x28>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6013      	str	r3, [r2, #0]

}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000754 	.word	0x20000754
 80025f4:	20000758 	.word	0x20000758

080025f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80025f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002630 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025fc:	480d      	ldr	r0, [pc, #52]	; (8002634 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025fe:	490e      	ldr	r1, [pc, #56]	; (8002638 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002600:	4a0e      	ldr	r2, [pc, #56]	; (800263c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002604:	e002      	b.n	800260c <LoopCopyDataInit>

08002606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800260a:	3304      	adds	r3, #4

0800260c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800260c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800260e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002610:	d3f9      	bcc.n	8002606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002612:	4a0b      	ldr	r2, [pc, #44]	; (8002640 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002614:	4c0b      	ldr	r4, [pc, #44]	; (8002644 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002618:	e001      	b.n	800261e <LoopFillZerobss>

0800261a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800261a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800261c:	3204      	adds	r2, #4

0800261e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800261e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002620:	d3fb      	bcc.n	800261a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002622:	f7ff fd83 	bl	800212c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002626:	f016 ff35 	bl	8019494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800262a:	f7fe fc39 	bl	8000ea0 <main>
  bx  lr    
 800262e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002630:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002638:	20000710 	.word	0x20000710
  ldr r2, =_sidata
 800263c:	0801f7d8 	.word	0x0801f7d8
  ldr r2, =_sbss
 8002640:	20000710 	.word	0x20000710
  ldr r4, =_ebss
 8002644:	2001b0b8 	.word	0x2001b0b8

08002648 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002648:	e7fe      	b.n	8002648 <ADC_IRQHandler>
	...

0800264c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002650:	4b0e      	ldr	r3, [pc, #56]	; (800268c <HAL_Init+0x40>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a0d      	ldr	r2, [pc, #52]	; (800268c <HAL_Init+0x40>)
 8002656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800265a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_Init+0x40>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a0a      	ldr	r2, [pc, #40]	; (800268c <HAL_Init+0x40>)
 8002662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002666:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002668:	4b08      	ldr	r3, [pc, #32]	; (800268c <HAL_Init+0x40>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a07      	ldr	r2, [pc, #28]	; (800268c <HAL_Init+0x40>)
 800266e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002672:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002674:	2003      	movs	r0, #3
 8002676:	f000 f94f 	bl	8002918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800267a:	200f      	movs	r0, #15
 800267c:	f000 f808 	bl	8002690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002680:	f7ff fa2c 	bl	8001adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40023c00 	.word	0x40023c00

08002690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002698:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <HAL_InitTick+0x54>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <HAL_InitTick+0x58>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	4619      	mov	r1, r3
 80026a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 f967 	bl	8002982 <HAL_SYSTICK_Config>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e00e      	b.n	80026dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b0f      	cmp	r3, #15
 80026c2:	d80a      	bhi.n	80026da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c4:	2200      	movs	r2, #0
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	f04f 30ff 	mov.w	r0, #4294967295
 80026cc:	f000 f92f 	bl	800292e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026d0:	4a06      	ldr	r2, [pc, #24]	; (80026ec <HAL_InitTick+0x5c>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e000      	b.n	80026dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000508 	.word	0x20000508
 80026e8:	20000510 	.word	0x20000510
 80026ec:	2000050c 	.word	0x2000050c

080026f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_IncTick+0x20>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	461a      	mov	r2, r3
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_IncTick+0x24>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4413      	add	r3, r2
 8002700:	4a04      	ldr	r2, [pc, #16]	; (8002714 <HAL_IncTick+0x24>)
 8002702:	6013      	str	r3, [r2, #0]
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	20000510 	.word	0x20000510
 8002714:	20002a88 	.word	0x20002a88

08002718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return uwTick;
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <HAL_GetTick+0x14>)
 800271e:	681b      	ldr	r3, [r3, #0]
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20002a88 	.word	0x20002a88

08002730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002738:	f7ff ffee 	bl	8002718 <HAL_GetTick>
 800273c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002748:	d005      	beq.n	8002756 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800274a:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <HAL_Delay+0x44>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4413      	add	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002756:	bf00      	nop
 8002758:	f7ff ffde 	bl	8002718 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	429a      	cmp	r2, r3
 8002766:	d8f7      	bhi.n	8002758 <HAL_Delay+0x28>
  {
  }
}
 8002768:	bf00      	nop
 800276a:	bf00      	nop
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000510 	.word	0x20000510

08002778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <__NVIC_SetPriorityGrouping+0x44>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002794:	4013      	ands	r3, r2
 8002796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027aa:	4a04      	ldr	r2, [pc, #16]	; (80027bc <__NVIC_SetPriorityGrouping+0x44>)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	60d3      	str	r3, [r2, #12]
}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c4:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <__NVIC_GetPriorityGrouping+0x18>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	0a1b      	lsrs	r3, r3, #8
 80027ca:	f003 0307 	and.w	r3, r3, #7
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	db0b      	blt.n	8002806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	f003 021f 	and.w	r2, r3, #31
 80027f4:	4907      	ldr	r1, [pc, #28]	; (8002814 <__NVIC_EnableIRQ+0x38>)
 80027f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	2001      	movs	r0, #1
 80027fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	e000e100 	.word	0xe000e100

08002818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	6039      	str	r1, [r7, #0]
 8002822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002828:	2b00      	cmp	r3, #0
 800282a:	db0a      	blt.n	8002842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	b2da      	uxtb	r2, r3
 8002830:	490c      	ldr	r1, [pc, #48]	; (8002864 <__NVIC_SetPriority+0x4c>)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	0112      	lsls	r2, r2, #4
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	440b      	add	r3, r1
 800283c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002840:	e00a      	b.n	8002858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	b2da      	uxtb	r2, r3
 8002846:	4908      	ldr	r1, [pc, #32]	; (8002868 <__NVIC_SetPriority+0x50>)
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	3b04      	subs	r3, #4
 8002850:	0112      	lsls	r2, r2, #4
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	440b      	add	r3, r1
 8002856:	761a      	strb	r2, [r3, #24]
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000e100 	.word	0xe000e100
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800286c:	b480      	push	{r7}
 800286e:	b089      	sub	sp, #36	; 0x24
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f1c3 0307 	rsb	r3, r3, #7
 8002886:	2b04      	cmp	r3, #4
 8002888:	bf28      	it	cs
 800288a:	2304      	movcs	r3, #4
 800288c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	3304      	adds	r3, #4
 8002892:	2b06      	cmp	r3, #6
 8002894:	d902      	bls.n	800289c <NVIC_EncodePriority+0x30>
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3b03      	subs	r3, #3
 800289a:	e000      	b.n	800289e <NVIC_EncodePriority+0x32>
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a0:	f04f 32ff 	mov.w	r2, #4294967295
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43da      	mvns	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	401a      	ands	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b4:	f04f 31ff 	mov.w	r1, #4294967295
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	fa01 f303 	lsl.w	r3, r1, r3
 80028be:	43d9      	mvns	r1, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c4:	4313      	orrs	r3, r2
         );
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3724      	adds	r7, #36	; 0x24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
	...

080028d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3b01      	subs	r3, #1
 80028e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028e4:	d301      	bcc.n	80028ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028e6:	2301      	movs	r3, #1
 80028e8:	e00f      	b.n	800290a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ea:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <SysTick_Config+0x40>)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028f2:	210f      	movs	r1, #15
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295
 80028f8:	f7ff ff8e 	bl	8002818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <SysTick_Config+0x40>)
 80028fe:	2200      	movs	r2, #0
 8002900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002902:	4b04      	ldr	r3, [pc, #16]	; (8002914 <SysTick_Config+0x40>)
 8002904:	2207      	movs	r2, #7
 8002906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	e000e010 	.word	0xe000e010

08002918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff ff29 	bl	8002778 <__NVIC_SetPriorityGrouping>
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800292e:	b580      	push	{r7, lr}
 8002930:	b086      	sub	sp, #24
 8002932:	af00      	add	r7, sp, #0
 8002934:	4603      	mov	r3, r0
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	607a      	str	r2, [r7, #4]
 800293a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002940:	f7ff ff3e 	bl	80027c0 <__NVIC_GetPriorityGrouping>
 8002944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	68b9      	ldr	r1, [r7, #8]
 800294a:	6978      	ldr	r0, [r7, #20]
 800294c:	f7ff ff8e 	bl	800286c <NVIC_EncodePriority>
 8002950:	4602      	mov	r2, r0
 8002952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002956:	4611      	mov	r1, r2
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff5d 	bl	8002818 <__NVIC_SetPriority>
}
 800295e:	bf00      	nop
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	4603      	mov	r3, r0
 800296e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff31 	bl	80027dc <__NVIC_EnableIRQ>
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ffa2 	bl	80028d4 <SysTick_Config>
 8002990:	4603      	mov	r3, r0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_DCMI_Start_DMA+0x20>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e086      	b.n	8002aca <HAL_DCMI_Start_DMA+0x12e>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2202      	movs	r2, #2
 80029c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029da:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0202 	bic.w	r2, r2, #2
 80029ea:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6819      	ldr	r1, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a00:	4a34      	ldr	r2, [pc, #208]	; (8002ad4 <HAL_DCMI_Start_DMA+0x138>)
 8002a02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a08:	4a33      	ldr	r2, [pc, #204]	; (8002ad8 <HAL_DCMI_Start_DMA+0x13c>)
 8002a0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a10:	2200      	movs	r2, #0
 8002a12:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a26:	d20a      	bcs.n	8002a3e <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	3328      	adds	r3, #40	; 0x28
 8002a32:	4619      	mov	r1, r3
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	f000 fb3a 	bl	80030b0 <HAL_DMA_Start_IT>
 8002a3c:	e038      	b.n	8002ab0 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a42:	4a24      	ldr	r2, [pc, #144]	; (8002ad4 <HAL_DCMI_Start_DMA+0x138>)
 8002a44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8002a58:	e009      	b.n	8002a6e <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	085a      	lsrs	r2, r3, #1
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	005a      	lsls	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a76:	d2f0      	bcs.n	8002a5a <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	1e9a      	subs	r2, r3, #2
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	3328      	adds	r3, #40	; 0x28
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	f000 fe54 	bl	8003758 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0201 	orr.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	08002d23 	.word	0x08002d23
 8002ad8:	08002e4d 	.word	0x08002e4d

08002adc <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d016      	beq.n	8002b24 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2204      	movs	r2, #4
 8002afc:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b02:	f043 0202 	orr.w	r2, r3, #2
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b16:	4a2f      	ldr	r2, [pc, #188]	; (8002bd4 <HAL_DCMI_IRQHandler+0xf8>)
 8002b18:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 fb8e 	bl	8003240 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d016      	beq.n	8002b5c <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2202      	movs	r2, #2
 8002b34:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3a:	f043 0201 	orr.w	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2204      	movs	r2, #4
 8002b46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4e:	4a21      	ldr	r2, [pc, #132]	; (8002bd4 <HAL_DCMI_IRQHandler+0xf8>)
 8002b50:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fb72 	bl	8003240 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d006      	beq.n	8002b74 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2210      	movs	r2, #16
 8002b6c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f83c 	bl	8002bec <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d006      	beq.n	8002b8c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2208      	movs	r2, #8
 8002b84:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f83a 	bl	8002c00 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d019      	beq.n	8002bca <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d107      	bne.n	8002bb4 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 021e 	bic.w	r2, r2, #30
 8002bb2:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7ff fad3 	bl	8002170 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	08002e4d 	.word	0x08002e4d

08002bd8 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_DCMI_ConfigCrop>:
  * @param  XSize DCMI Pixel per line
  * @param  YSize DCMI Line number
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_ConfigCrop(DCMI_HandleTypeDef *hdcmi, uint32_t X0, uint32_t Y0, uint32_t XSize, uint32_t YSize)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
 8002c20:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_DCMI_ConfigCrop+0x1c>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e01e      	b.n	8002c6e <HAL_DCMI_ConfigCrop+0x5a>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  assert_param(IS_DCMI_WINDOW_COORDINATE(YSize));
  assert_param(IS_DCMI_WINDOW_COORDINATE(XSize));
  assert_param(IS_DCMI_WINDOW_HEIGHT(Y0));

  /* Configure CROP */
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_POSITION_CWSIZE_VLINE));
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	0419      	lsls	r1, r3, #16
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_POSITION_CWSTRT_VST));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	0419      	lsls	r1, r3, #16
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	621a      	str	r2, [r3, #32]

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <HAL_DCMI_DisableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_DisableCrop(DCMI_HandleTypeDef *hdcmi)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_DCMI_DisableCrop+0x16>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e018      	b.n	8002cc2 <HAL_DCMI_DisableCrop+0x48>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable DCMI Crop feature */
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0204 	bic.w	r2, r2, #4
 8002cae:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_DCMI_EnableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_EnableCrop(DCMI_HandleTypeDef *hdcmi)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_DCMI_EnableCrop+0x16>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e018      	b.n	8002d16 <HAL_DCMI_EnableCrop+0x48>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Enable DCMI Crop feature */
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0204 	orr.w	r2, r2, #4
 8002d02:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b084      	sub	sp, #16
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d32:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d043      	beq.n	8002dc4 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d48:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d118      	bne.n	8002d88 <DCMI_DMAXferCplt+0x66>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d015      	beq.n	8002d88 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	00da      	lsls	r2, r3, #3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4413      	add	r3, r2
 8002d74:	2200      	movs	r2, #0
 8002d76:	4619      	mov	r1, r3
 8002d78:	f001 fe36 	bl	80049e8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	1e5a      	subs	r2, r3, #1
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	629a      	str	r2, [r3, #40]	; 0x28
 8002d86:	e044      	b.n	8002e12 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d13c      	bne.n	8002e12 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002daa:	00da      	lsls	r2, r3, #3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4413      	add	r3, r2
 8002db0:	2201      	movs	r2, #1
 8002db2:	4619      	mov	r1, r3
 8002db4:	f001 fe18 	bl	80049e8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbc:	1e5a      	subs	r2, r3, #1
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	629a      	str	r2, [r3, #40]	; 0x28
 8002dc2:	e026      	b.n	8002e12 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d006      	beq.n	8002de2 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dde:	60da      	str	r2, [r3, #12]
 8002de0:	e017      	b.n	8002e12 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10f      	bne.n	8002e12 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df6:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfc:	0099      	lsls	r1, r3, #2
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	440a      	add	r2, r1
 8002e08:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d112      	bne.n	8002e44 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0201 	orr.w	r2, r2, #1
 8002e2c:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d103      	bne.n	8002e44 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d003      	beq.n	8002e6c <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f7ff feb3 	bl	8002bd8 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8002e72:	bf00      	nop
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e05f      	b.n	8002f4c <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d109      	bne.n	8002eac <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7fe fe43 	bl	8001b2c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7fe fe40 	bl	8001b2c <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002ec2:	f023 0308 	bic.w	r3, r3, #8
 8002ec6:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6819      	ldr	r1, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002edc:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002ee8:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002ef4:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b10      	cmp	r3, #16
 8002f04:	d112      	bne.n	8002f2c <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	7f1b      	ldrb	r3, [r3, #28]
 8002f0a:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	7f5b      	ldrb	r3, [r3, #29]
 8002f10:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002f12:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	7f9b      	ldrb	r3, [r3, #30]
 8002f18:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002f1a:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	7fdb      	ldrb	r3, [r3, #31]
 8002f22:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002f28:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002f2a:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 021e 	orr.w	r2, r2, #30
 8002f3a:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f60:	f7ff fbda 	bl	8002718 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e099      	b.n	80030a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0201 	bic.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f90:	e00f      	b.n	8002fb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f92:	f7ff fbc1 	bl	8002718 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b05      	cmp	r3, #5
 8002f9e:	d908      	bls.n	8002fb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2203      	movs	r2, #3
 8002faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e078      	b.n	80030a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1e8      	bne.n	8002f92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	4b38      	ldr	r3, [pc, #224]	; (80030ac <HAL_DMA_Init+0x158>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ff6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	4313      	orrs	r3, r2
 8003002:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	2b04      	cmp	r3, #4
 800300a:	d107      	bne.n	800301c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	4313      	orrs	r3, r2
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4313      	orrs	r3, r2
 800301a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f023 0307 	bic.w	r3, r3, #7
 8003032:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	2b04      	cmp	r3, #4
 8003044:	d117      	bne.n	8003076 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4313      	orrs	r3, r2
 800304e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00e      	beq.n	8003076 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fb01 	bl	8003660 <DMA_CheckFifoParam>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d008      	beq.n	8003076 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2240      	movs	r2, #64	; 0x40
 8003068:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003072:	2301      	movs	r3, #1
 8003074:	e016      	b.n	80030a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fab8 	bl	80035f4 <DMA_CalcBaseAndBitshift>
 8003084:	4603      	mov	r3, r0
 8003086:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308c:	223f      	movs	r2, #63	; 0x3f
 800308e:	409a      	lsls	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	f010803f 	.word	0xf010803f

080030b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_DMA_Start_IT+0x26>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e040      	b.n	8003158 <HAL_DMA_Start_IT+0xa8>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d12f      	bne.n	800314a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2202      	movs	r2, #2
 80030ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	68b9      	ldr	r1, [r7, #8]
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 fa4a 	bl	8003598 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003108:	223f      	movs	r2, #63	; 0x3f
 800310a:	409a      	lsls	r2, r3
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0216 	orr.w	r2, r2, #22
 800311e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	2b00      	cmp	r3, #0
 8003126:	d007      	beq.n	8003138 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0208 	orr.w	r2, r2, #8
 8003136:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	e005      	b.n	8003156 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003152:	2302      	movs	r3, #2
 8003154:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003156:	7dfb      	ldrb	r3, [r7, #23]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800316e:	f7ff fad3 	bl	8002718 <HAL_GetTick>
 8003172:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d008      	beq.n	8003192 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2280      	movs	r2, #128	; 0x80
 8003184:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e052      	b.n	8003238 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0216 	bic.w	r2, r2, #22
 80031a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d103      	bne.n	80031c2 <HAL_DMA_Abort+0x62>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d007      	beq.n	80031d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0208 	bic.w	r2, r2, #8
 80031d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0201 	bic.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031e2:	e013      	b.n	800320c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031e4:	f7ff fa98 	bl	8002718 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b05      	cmp	r3, #5
 80031f0:	d90c      	bls.n	800320c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2220      	movs	r2, #32
 80031f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2203      	movs	r2, #3
 80031fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e015      	b.n	8003238 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1e4      	bne.n	80031e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321e:	223f      	movs	r2, #63	; 0x3f
 8003220:	409a      	lsls	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d004      	beq.n	800325e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2280      	movs	r2, #128	; 0x80
 8003258:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e00c      	b.n	8003278 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2205      	movs	r2, #5
 8003262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0201 	bic.w	r2, r2, #1
 8003274:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003290:	4b92      	ldr	r3, [pc, #584]	; (80034dc <HAL_DMA_IRQHandler+0x258>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a92      	ldr	r2, [pc, #584]	; (80034e0 <HAL_DMA_IRQHandler+0x25c>)
 8003296:	fba2 2303 	umull	r2, r3, r2, r3
 800329a:	0a9b      	lsrs	r3, r3, #10
 800329c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ae:	2208      	movs	r2, #8
 80032b0:	409a      	lsls	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d01a      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d013      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0204 	bic.w	r2, r2, #4
 80032d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032dc:	2208      	movs	r2, #8
 80032de:	409a      	lsls	r2, r3
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e8:	f043 0201 	orr.w	r2, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f4:	2201      	movs	r2, #1
 80032f6:	409a      	lsls	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d012      	beq.n	8003326 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00b      	beq.n	8003326 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003312:	2201      	movs	r2, #1
 8003314:	409a      	lsls	r2, r3
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331e:	f043 0202 	orr.w	r2, r3, #2
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332a:	2204      	movs	r2, #4
 800332c:	409a      	lsls	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4013      	ands	r3, r2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d012      	beq.n	800335c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00b      	beq.n	800335c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003348:	2204      	movs	r2, #4
 800334a:	409a      	lsls	r2, r3
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003354:	f043 0204 	orr.w	r2, r3, #4
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003360:	2210      	movs	r2, #16
 8003362:	409a      	lsls	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4013      	ands	r3, r2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d043      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d03c      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337e:	2210      	movs	r2, #16
 8003380:	409a      	lsls	r2, r3
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d018      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d108      	bne.n	80033b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d024      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	4798      	blx	r3
 80033b2:	e01f      	b.n	80033f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01b      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	4798      	blx	r3
 80033c4:	e016      	b.n	80033f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d107      	bne.n	80033e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0208 	bic.w	r2, r2, #8
 80033e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f8:	2220      	movs	r2, #32
 80033fa:	409a      	lsls	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 808e 	beq.w	8003522 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 8086 	beq.w	8003522 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341a:	2220      	movs	r2, #32
 800341c:	409a      	lsls	r2, r3
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b05      	cmp	r3, #5
 800342c:	d136      	bne.n	800349c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0216 	bic.w	r2, r2, #22
 800343c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695a      	ldr	r2, [r3, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800344c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	d103      	bne.n	800345e <HAL_DMA_IRQHandler+0x1da>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800345a:	2b00      	cmp	r3, #0
 800345c:	d007      	beq.n	800346e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0208 	bic.w	r2, r2, #8
 800346c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003472:	223f      	movs	r2, #63	; 0x3f
 8003474:	409a      	lsls	r2, r3
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800348e:	2b00      	cmp	r3, #0
 8003490:	d07d      	beq.n	800358e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4798      	blx	r3
        }
        return;
 800349a:	e078      	b.n	800358e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d01c      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d108      	bne.n	80034ca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d030      	beq.n	8003522 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	4798      	blx	r3
 80034c8:	e02b      	b.n	8003522 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d027      	beq.n	8003522 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	4798      	blx	r3
 80034da:	e022      	b.n	8003522 <HAL_DMA_IRQHandler+0x29e>
 80034dc:	20000508 	.word	0x20000508
 80034e0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10f      	bne.n	8003512 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0210 	bic.w	r2, r2, #16
 8003500:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003526:	2b00      	cmp	r3, #0
 8003528:	d032      	beq.n	8003590 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d022      	beq.n	800357c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2205      	movs	r2, #5
 800353a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0201 	bic.w	r2, r2, #1
 800354c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	3301      	adds	r3, #1
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	429a      	cmp	r2, r3
 8003558:	d307      	bcc.n	800356a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1f2      	bne.n	800354e <HAL_DMA_IRQHandler+0x2ca>
 8003568:	e000      	b.n	800356c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800356a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	4798      	blx	r3
 800358c:	e000      	b.n	8003590 <HAL_DMA_IRQHandler+0x30c>
        return;
 800358e:	bf00      	nop
    }
  }
}
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop

08003598 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
 80035a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b40      	cmp	r3, #64	; 0x40
 80035c4:	d108      	bne.n	80035d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035d6:	e007      	b.n	80035e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	60da      	str	r2, [r3, #12]
}
 80035e8:	bf00      	nop
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	3b10      	subs	r3, #16
 8003604:	4a14      	ldr	r2, [pc, #80]	; (8003658 <DMA_CalcBaseAndBitshift+0x64>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	091b      	lsrs	r3, r3, #4
 800360c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800360e:	4a13      	ldr	r2, [pc, #76]	; (800365c <DMA_CalcBaseAndBitshift+0x68>)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4413      	add	r3, r2
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b03      	cmp	r3, #3
 8003620:	d909      	bls.n	8003636 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800362a:	f023 0303 	bic.w	r3, r3, #3
 800362e:	1d1a      	adds	r2, r3, #4
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	659a      	str	r2, [r3, #88]	; 0x58
 8003634:	e007      	b.n	8003646 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800363e:	f023 0303 	bic.w	r3, r3, #3
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800364a:	4618      	mov	r0, r3
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	aaaaaaab 	.word	0xaaaaaaab
 800365c:	0801f284 	.word	0x0801f284

08003660 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003670:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d11f      	bne.n	80036ba <DMA_CheckFifoParam+0x5a>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b03      	cmp	r3, #3
 800367e:	d856      	bhi.n	800372e <DMA_CheckFifoParam+0xce>
 8003680:	a201      	add	r2, pc, #4	; (adr r2, 8003688 <DMA_CheckFifoParam+0x28>)
 8003682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003686:	bf00      	nop
 8003688:	08003699 	.word	0x08003699
 800368c:	080036ab 	.word	0x080036ab
 8003690:	08003699 	.word	0x08003699
 8003694:	0800372f 	.word	0x0800372f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d046      	beq.n	8003732 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a8:	e043      	b.n	8003732 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036b2:	d140      	bne.n	8003736 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b8:	e03d      	b.n	8003736 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c2:	d121      	bne.n	8003708 <DMA_CheckFifoParam+0xa8>
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d837      	bhi.n	800373a <DMA_CheckFifoParam+0xda>
 80036ca:	a201      	add	r2, pc, #4	; (adr r2, 80036d0 <DMA_CheckFifoParam+0x70>)
 80036cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d0:	080036e1 	.word	0x080036e1
 80036d4:	080036e7 	.word	0x080036e7
 80036d8:	080036e1 	.word	0x080036e1
 80036dc:	080036f9 	.word	0x080036f9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	73fb      	strb	r3, [r7, #15]
      break;
 80036e4:	e030      	b.n	8003748 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d025      	beq.n	800373e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f6:	e022      	b.n	800373e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003700:	d11f      	bne.n	8003742 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003706:	e01c      	b.n	8003742 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d903      	bls.n	8003716 <DMA_CheckFifoParam+0xb6>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b03      	cmp	r3, #3
 8003712:	d003      	beq.n	800371c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003714:	e018      	b.n	8003748 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	73fb      	strb	r3, [r7, #15]
      break;
 800371a:	e015      	b.n	8003748 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00e      	beq.n	8003746 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
      break;
 800372c:	e00b      	b.n	8003746 <DMA_CheckFifoParam+0xe6>
      break;
 800372e:	bf00      	nop
 8003730:	e00a      	b.n	8003748 <DMA_CheckFifoParam+0xe8>
      break;
 8003732:	bf00      	nop
 8003734:	e008      	b.n	8003748 <DMA_CheckFifoParam+0xe8>
      break;
 8003736:	bf00      	nop
 8003738:	e006      	b.n	8003748 <DMA_CheckFifoParam+0xe8>
      break;
 800373a:	bf00      	nop
 800373c:	e004      	b.n	8003748 <DMA_CheckFifoParam+0xe8>
      break;
 800373e:	bf00      	nop
 8003740:	e002      	b.n	8003748 <DMA_CheckFifoParam+0xe8>
      break;   
 8003742:	bf00      	nop
 8003744:	e000      	b.n	8003748 <DMA_CheckFifoParam+0xe8>
      break;
 8003746:	bf00      	nop
    }
  } 
  
  return status; 
 8003748:	7bfb      	ldrb	r3, [r7, #15]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop

08003758 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2b80      	cmp	r3, #128	; 0x80
 8003770:	d106      	bne.n	8003780 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003778:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	f001 b913 	b.w	80049a6 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003784:	2b00      	cmp	r3, #0
 8003786:	d007      	beq.n	8003798 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003794:	2b00      	cmp	r3, #0
 8003796:	d105      	bne.n	80037a4 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2240      	movs	r2, #64	; 0x40
 800379c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	f001 b901 	b.w	80049a6 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d102      	bne.n	80037b4 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 80037ae:	2302      	movs	r3, #2
 80037b0:	f001 b8f9 	b.w	80049a6 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	f041 80e7 	bne.w	8004998 <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2202      	movs	r2, #2
 80037ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80037e6:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	68b9      	ldr	r1, [r7, #8]
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f001 f910 	bl	8004a1c <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	461a      	mov	r2, r3
 8003802:	4b99      	ldr	r3, [pc, #612]	; (8003a68 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8003804:	429a      	cmp	r2, r3
 8003806:	d960      	bls.n	80038ca <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a97      	ldr	r2, [pc, #604]	; (8003a6c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d057      	beq.n	80038c2 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a96      	ldr	r2, [pc, #600]	; (8003a70 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d050      	beq.n	80038be <HAL_DMAEx_MultiBufferStart_IT+0x166>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a94      	ldr	r2, [pc, #592]	; (8003a74 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d049      	beq.n	80038ba <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a93      	ldr	r2, [pc, #588]	; (8003a78 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d042      	beq.n	80038b6 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a91      	ldr	r2, [pc, #580]	; (8003a7c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d03a      	beq.n	80038b0 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a90      	ldr	r2, [pc, #576]	; (8003a80 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d032      	beq.n	80038aa <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a8e      	ldr	r2, [pc, #568]	; (8003a84 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d02a      	beq.n	80038a4 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a8d      	ldr	r2, [pc, #564]	; (8003a88 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d022      	beq.n	800389e <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a8b      	ldr	r2, [pc, #556]	; (8003a8c <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d01a      	beq.n	8003898 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a8a      	ldr	r2, [pc, #552]	; (8003a90 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d012      	beq.n	8003892 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a88      	ldr	r2, [pc, #544]	; (8003a94 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00a      	beq.n	800388c <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a87      	ldr	r2, [pc, #540]	; (8003a98 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d102      	bne.n	8003886 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8003880:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003884:	e01e      	b.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003886:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800388a:	e01b      	b.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800388c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003890:	e018      	b.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003892:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003896:	e015      	b.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003898:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800389c:	e012      	b.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800389e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038a2:	e00f      	b.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80038a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038a8:	e00c      	b.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80038aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038ae:	e009      	b.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80038b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038b4:	e006      	b.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80038b6:	2320      	movs	r3, #32
 80038b8:	e004      	b.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80038ba:	2320      	movs	r3, #32
 80038bc:	e002      	b.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80038be:	2320      	movs	r3, #32
 80038c0:	e000      	b.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80038c2:	2320      	movs	r3, #32
 80038c4:	4a75      	ldr	r2, [pc, #468]	; (8003a9c <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 80038c6:	60d3      	str	r3, [r2, #12]
 80038c8:	e150      	b.n	8003b6c <HAL_DMAEx_MultiBufferStart_IT+0x414>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	4b73      	ldr	r3, [pc, #460]	; (8003aa0 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d960      	bls.n	8003998 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a64      	ldr	r2, [pc, #400]	; (8003a6c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d057      	beq.n	8003990 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a62      	ldr	r2, [pc, #392]	; (8003a70 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d050      	beq.n	800398c <HAL_DMAEx_MultiBufferStart_IT+0x234>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a61      	ldr	r2, [pc, #388]	; (8003a74 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d049      	beq.n	8003988 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a5f      	ldr	r2, [pc, #380]	; (8003a78 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d042      	beq.n	8003984 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a5e      	ldr	r2, [pc, #376]	; (8003a7c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d03a      	beq.n	800397e <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a5c      	ldr	r2, [pc, #368]	; (8003a80 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d032      	beq.n	8003978 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a5b      	ldr	r2, [pc, #364]	; (8003a84 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d02a      	beq.n	8003972 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a59      	ldr	r2, [pc, #356]	; (8003a88 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d022      	beq.n	800396c <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a58      	ldr	r2, [pc, #352]	; (8003a8c <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d01a      	beq.n	8003966 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a56      	ldr	r2, [pc, #344]	; (8003a90 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d012      	beq.n	8003960 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a55      	ldr	r2, [pc, #340]	; (8003a94 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00a      	beq.n	800395a <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a53      	ldr	r2, [pc, #332]	; (8003a98 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d102      	bne.n	8003954 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800394e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003952:	e01e      	b.n	8003992 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003954:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003958:	e01b      	b.n	8003992 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800395a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800395e:	e018      	b.n	8003992 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003960:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003964:	e015      	b.n	8003992 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003966:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800396a:	e012      	b.n	8003992 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800396c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003970:	e00f      	b.n	8003992 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003972:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003976:	e00c      	b.n	8003992 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003978:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800397c:	e009      	b.n	8003992 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800397e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003982:	e006      	b.n	8003992 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003984:	2320      	movs	r3, #32
 8003986:	e004      	b.n	8003992 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003988:	2320      	movs	r3, #32
 800398a:	e002      	b.n	8003992 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800398c:	2320      	movs	r3, #32
 800398e:	e000      	b.n	8003992 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003990:	2320      	movs	r3, #32
 8003992:	4a42      	ldr	r2, [pc, #264]	; (8003a9c <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8003994:	6093      	str	r3, [r2, #8]
 8003996:	e0e9      	b.n	8003b6c <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	461a      	mov	r2, r3
 800399e:	4b41      	ldr	r3, [pc, #260]	; (8003aa4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 80039a0:	429a      	cmp	r2, r3
 80039a2:	f240 8083 	bls.w	8003aac <HAL_DMAEx_MultiBufferStart_IT+0x354>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a30      	ldr	r2, [pc, #192]	; (8003a6c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d057      	beq.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a2e      	ldr	r2, [pc, #184]	; (8003a70 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d050      	beq.n	8003a5c <HAL_DMAEx_MultiBufferStart_IT+0x304>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a2d      	ldr	r2, [pc, #180]	; (8003a74 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d049      	beq.n	8003a58 <HAL_DMAEx_MultiBufferStart_IT+0x300>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a2b      	ldr	r2, [pc, #172]	; (8003a78 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d042      	beq.n	8003a54 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a2a      	ldr	r2, [pc, #168]	; (8003a7c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d03a      	beq.n	8003a4e <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a28      	ldr	r2, [pc, #160]	; (8003a80 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d032      	beq.n	8003a48 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a27      	ldr	r2, [pc, #156]	; (8003a84 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d02a      	beq.n	8003a42 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a25      	ldr	r2, [pc, #148]	; (8003a88 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d022      	beq.n	8003a3c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a24      	ldr	r2, [pc, #144]	; (8003a8c <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d01a      	beq.n	8003a36 <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a22      	ldr	r2, [pc, #136]	; (8003a90 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d012      	beq.n	8003a30 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a21      	ldr	r2, [pc, #132]	; (8003a94 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d00a      	beq.n	8003a2a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a1f      	ldr	r2, [pc, #124]	; (8003a98 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d102      	bne.n	8003a24 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8003a1e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a22:	e01e      	b.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003a24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a28:	e01b      	b.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003a2a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a2e:	e018      	b.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003a30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a34:	e015      	b.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003a36:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a3a:	e012      	b.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003a3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a40:	e00f      	b.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003a42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a46:	e00c      	b.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003a48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a4c:	e009      	b.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003a4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a52:	e006      	b.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003a54:	2320      	movs	r3, #32
 8003a56:	e004      	b.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003a58:	2320      	movs	r3, #32
 8003a5a:	e002      	b.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003a5c:	2320      	movs	r3, #32
 8003a5e:	e000      	b.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003a60:	2320      	movs	r3, #32
 8003a62:	4a11      	ldr	r2, [pc, #68]	; (8003aa8 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8003a64:	60d3      	str	r3, [r2, #12]
 8003a66:	e081      	b.n	8003b6c <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8003a68:	40026458 	.word	0x40026458
 8003a6c:	40026010 	.word	0x40026010
 8003a70:	40026410 	.word	0x40026410
 8003a74:	40026070 	.word	0x40026070
 8003a78:	40026470 	.word	0x40026470
 8003a7c:	40026028 	.word	0x40026028
 8003a80:	40026428 	.word	0x40026428
 8003a84:	40026088 	.word	0x40026088
 8003a88:	40026488 	.word	0x40026488
 8003a8c:	40026040 	.word	0x40026040
 8003a90:	40026440 	.word	0x40026440
 8003a94:	400260a0 	.word	0x400260a0
 8003a98:	400264a0 	.word	0x400264a0
 8003a9c:	40026400 	.word	0x40026400
 8003aa0:	400260b8 	.word	0x400260b8
 8003aa4:	40026058 	.word	0x40026058
 8003aa8:	40026000 	.word	0x40026000
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a96      	ldr	r2, [pc, #600]	; (8003d0c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d057      	beq.n	8003b66 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a95      	ldr	r2, [pc, #596]	; (8003d10 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d050      	beq.n	8003b62 <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a93      	ldr	r2, [pc, #588]	; (8003d14 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d049      	beq.n	8003b5e <HAL_DMAEx_MultiBufferStart_IT+0x406>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a92      	ldr	r2, [pc, #584]	; (8003d18 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d042      	beq.n	8003b5a <HAL_DMAEx_MultiBufferStart_IT+0x402>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a90      	ldr	r2, [pc, #576]	; (8003d1c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d03a      	beq.n	8003b54 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a8f      	ldr	r2, [pc, #572]	; (8003d20 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d032      	beq.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a8d      	ldr	r2, [pc, #564]	; (8003d24 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d02a      	beq.n	8003b48 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a8c      	ldr	r2, [pc, #560]	; (8003d28 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d022      	beq.n	8003b42 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a8a      	ldr	r2, [pc, #552]	; (8003d2c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d01a      	beq.n	8003b3c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a89      	ldr	r2, [pc, #548]	; (8003d30 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d012      	beq.n	8003b36 <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a87      	ldr	r2, [pc, #540]	; (8003d34 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00a      	beq.n	8003b30 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a86      	ldr	r2, [pc, #536]	; (8003d38 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d102      	bne.n	8003b2a <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8003b24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b28:	e01e      	b.n	8003b68 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003b2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b2e:	e01b      	b.n	8003b68 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003b30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b34:	e018      	b.n	8003b68 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003b36:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b3a:	e015      	b.n	8003b68 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003b3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b40:	e012      	b.n	8003b68 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003b42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b46:	e00f      	b.n	8003b68 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003b48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b4c:	e00c      	b.n	8003b68 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003b4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b52:	e009      	b.n	8003b68 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003b54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b58:	e006      	b.n	8003b68 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003b5a:	2320      	movs	r3, #32
 8003b5c:	e004      	b.n	8003b68 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003b5e:	2320      	movs	r3, #32
 8003b60:	e002      	b.n	8003b68 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003b62:	2320      	movs	r3, #32
 8003b64:	e000      	b.n	8003b68 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003b66:	2320      	movs	r3, #32
 8003b68:	4a74      	ldr	r2, [pc, #464]	; (8003d3c <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 8003b6a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	4b73      	ldr	r3, [pc, #460]	; (8003d40 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d960      	bls.n	8003c3a <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a63      	ldr	r2, [pc, #396]	; (8003d0c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d057      	beq.n	8003c32 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a62      	ldr	r2, [pc, #392]	; (8003d10 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d050      	beq.n	8003c2e <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a60      	ldr	r2, [pc, #384]	; (8003d14 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d049      	beq.n	8003c2a <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a5f      	ldr	r2, [pc, #380]	; (8003d18 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d042      	beq.n	8003c26 <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a5d      	ldr	r2, [pc, #372]	; (8003d1c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d03a      	beq.n	8003c20 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a5c      	ldr	r2, [pc, #368]	; (8003d20 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d032      	beq.n	8003c1a <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a5a      	ldr	r2, [pc, #360]	; (8003d24 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d02a      	beq.n	8003c14 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a59      	ldr	r2, [pc, #356]	; (8003d28 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d022      	beq.n	8003c0e <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a57      	ldr	r2, [pc, #348]	; (8003d2c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d01a      	beq.n	8003c08 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a56      	ldr	r2, [pc, #344]	; (8003d30 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d012      	beq.n	8003c02 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a54      	ldr	r2, [pc, #336]	; (8003d34 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00a      	beq.n	8003bfc <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a53      	ldr	r2, [pc, #332]	; (8003d38 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d102      	bne.n	8003bf6 <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8003bf0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003bf4:	e01e      	b.n	8003c34 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003bf6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003bfa:	e01b      	b.n	8003c34 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003bfc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003c00:	e018      	b.n	8003c34 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003c02:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003c06:	e015      	b.n	8003c34 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003c08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003c0c:	e012      	b.n	8003c34 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c12:	e00f      	b.n	8003c34 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003c14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c18:	e00c      	b.n	8003c34 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c1e:	e009      	b.n	8003c34 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c24:	e006      	b.n	8003c34 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003c26:	2310      	movs	r3, #16
 8003c28:	e004      	b.n	8003c34 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003c2a:	2310      	movs	r3, #16
 8003c2c:	e002      	b.n	8003c34 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003c2e:	2310      	movs	r3, #16
 8003c30:	e000      	b.n	8003c34 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003c32:	2310      	movs	r3, #16
 8003c34:	4a43      	ldr	r2, [pc, #268]	; (8003d44 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8003c36:	60d3      	str	r3, [r2, #12]
 8003c38:	e14f      	b.n	8003eda <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	4b41      	ldr	r3, [pc, #260]	; (8003d48 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 8003c42:	429a      	cmp	r2, r3
 8003c44:	f240 8082 	bls.w	8003d4c <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a2f      	ldr	r2, [pc, #188]	; (8003d0c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d057      	beq.n	8003d02 <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a2e      	ldr	r2, [pc, #184]	; (8003d10 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d050      	beq.n	8003cfe <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a2c      	ldr	r2, [pc, #176]	; (8003d14 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d049      	beq.n	8003cfa <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a2b      	ldr	r2, [pc, #172]	; (8003d18 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d042      	beq.n	8003cf6 <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a29      	ldr	r2, [pc, #164]	; (8003d1c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d03a      	beq.n	8003cf0 <HAL_DMAEx_MultiBufferStart_IT+0x598>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a28      	ldr	r2, [pc, #160]	; (8003d20 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d032      	beq.n	8003cea <HAL_DMAEx_MultiBufferStart_IT+0x592>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a26      	ldr	r2, [pc, #152]	; (8003d24 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d02a      	beq.n	8003ce4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a25      	ldr	r2, [pc, #148]	; (8003d28 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d022      	beq.n	8003cde <HAL_DMAEx_MultiBufferStart_IT+0x586>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a23      	ldr	r2, [pc, #140]	; (8003d2c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d01a      	beq.n	8003cd8 <HAL_DMAEx_MultiBufferStart_IT+0x580>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a22      	ldr	r2, [pc, #136]	; (8003d30 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d012      	beq.n	8003cd2 <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a20      	ldr	r2, [pc, #128]	; (8003d34 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00a      	beq.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0x574>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a1f      	ldr	r2, [pc, #124]	; (8003d38 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d102      	bne.n	8003cc6 <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 8003cc0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003cc4:	e01e      	b.n	8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003cc6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003cca:	e01b      	b.n	8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003ccc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003cd0:	e018      	b.n	8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003cd2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003cd6:	e015      	b.n	8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003cd8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003cdc:	e012      	b.n	8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ce2:	e00f      	b.n	8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ce8:	e00c      	b.n	8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cee:	e009      	b.n	8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cf4:	e006      	b.n	8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003cf6:	2310      	movs	r3, #16
 8003cf8:	e004      	b.n	8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003cfa:	2310      	movs	r3, #16
 8003cfc:	e002      	b.n	8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003cfe:	2310      	movs	r3, #16
 8003d00:	e000      	b.n	8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003d02:	2310      	movs	r3, #16
 8003d04:	4a0f      	ldr	r2, [pc, #60]	; (8003d44 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8003d06:	6093      	str	r3, [r2, #8]
 8003d08:	e0e7      	b.n	8003eda <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8003d0a:	bf00      	nop
 8003d0c:	40026010 	.word	0x40026010
 8003d10:	40026410 	.word	0x40026410
 8003d14:	40026070 	.word	0x40026070
 8003d18:	40026470 	.word	0x40026470
 8003d1c:	40026028 	.word	0x40026028
 8003d20:	40026428 	.word	0x40026428
 8003d24:	40026088 	.word	0x40026088
 8003d28:	40026488 	.word	0x40026488
 8003d2c:	40026040 	.word	0x40026040
 8003d30:	40026440 	.word	0x40026440
 8003d34:	400260a0 	.word	0x400260a0
 8003d38:	400264a0 	.word	0x400264a0
 8003d3c:	40026000 	.word	0x40026000
 8003d40:	40026458 	.word	0x40026458
 8003d44:	40026400 	.word	0x40026400
 8003d48:	400260b8 	.word	0x400260b8
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	4b96      	ldr	r3, [pc, #600]	; (8003fac <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d960      	bls.n	8003e1a <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a94      	ldr	r2, [pc, #592]	; (8003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d057      	beq.n	8003e12 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a93      	ldr	r2, [pc, #588]	; (8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d050      	beq.n	8003e0e <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a91      	ldr	r2, [pc, #580]	; (8003fb8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d049      	beq.n	8003e0a <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a90      	ldr	r2, [pc, #576]	; (8003fbc <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d042      	beq.n	8003e06 <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a8e      	ldr	r2, [pc, #568]	; (8003fc0 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d03a      	beq.n	8003e00 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a8d      	ldr	r2, [pc, #564]	; (8003fc4 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d032      	beq.n	8003dfa <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a8b      	ldr	r2, [pc, #556]	; (8003fc8 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d02a      	beq.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a8a      	ldr	r2, [pc, #552]	; (8003fcc <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d022      	beq.n	8003dee <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a88      	ldr	r2, [pc, #544]	; (8003fd0 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d01a      	beq.n	8003de8 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a87      	ldr	r2, [pc, #540]	; (8003fd4 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d012      	beq.n	8003de2 <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a85      	ldr	r2, [pc, #532]	; (8003fd8 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00a      	beq.n	8003ddc <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a84      	ldr	r2, [pc, #528]	; (8003fdc <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d102      	bne.n	8003dd6 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8003dd0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003dd4:	e01e      	b.n	8003e14 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003dd6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003dda:	e01b      	b.n	8003e14 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003ddc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003de0:	e018      	b.n	8003e14 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003de2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003de6:	e015      	b.n	8003e14 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003de8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003dec:	e012      	b.n	8003e14 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003df2:	e00f      	b.n	8003e14 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003df8:	e00c      	b.n	8003e14 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dfe:	e009      	b.n	8003e14 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e04:	e006      	b.n	8003e14 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003e06:	2310      	movs	r3, #16
 8003e08:	e004      	b.n	8003e14 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003e0a:	2310      	movs	r3, #16
 8003e0c:	e002      	b.n	8003e14 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003e0e:	2310      	movs	r3, #16
 8003e10:	e000      	b.n	8003e14 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003e12:	2310      	movs	r3, #16
 8003e14:	4a72      	ldr	r2, [pc, #456]	; (8003fe0 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8003e16:	60d3      	str	r3, [r2, #12]
 8003e18:	e05f      	b.n	8003eda <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a64      	ldr	r2, [pc, #400]	; (8003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d057      	beq.n	8003ed4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a62      	ldr	r2, [pc, #392]	; (8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d050      	beq.n	8003ed0 <HAL_DMAEx_MultiBufferStart_IT+0x778>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a61      	ldr	r2, [pc, #388]	; (8003fb8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d049      	beq.n	8003ecc <HAL_DMAEx_MultiBufferStart_IT+0x774>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a5f      	ldr	r2, [pc, #380]	; (8003fbc <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d042      	beq.n	8003ec8 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a5e      	ldr	r2, [pc, #376]	; (8003fc0 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d03a      	beq.n	8003ec2 <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a5c      	ldr	r2, [pc, #368]	; (8003fc4 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d032      	beq.n	8003ebc <HAL_DMAEx_MultiBufferStart_IT+0x764>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a5b      	ldr	r2, [pc, #364]	; (8003fc8 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d02a      	beq.n	8003eb6 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a59      	ldr	r2, [pc, #356]	; (8003fcc <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d022      	beq.n	8003eb0 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a58      	ldr	r2, [pc, #352]	; (8003fd0 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d01a      	beq.n	8003eaa <HAL_DMAEx_MultiBufferStart_IT+0x752>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a56      	ldr	r2, [pc, #344]	; (8003fd4 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d012      	beq.n	8003ea4 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a55      	ldr	r2, [pc, #340]	; (8003fd8 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d00a      	beq.n	8003e9e <HAL_DMAEx_MultiBufferStart_IT+0x746>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a53      	ldr	r2, [pc, #332]	; (8003fdc <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d102      	bne.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 8003e92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003e96:	e01e      	b.n	8003ed6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003e98:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003e9c:	e01b      	b.n	8003ed6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003e9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ea2:	e018      	b.n	8003ed6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003ea4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ea8:	e015      	b.n	8003ed6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003eaa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003eae:	e012      	b.n	8003ed6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eb4:	e00f      	b.n	8003ed6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003eb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eba:	e00c      	b.n	8003ed6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ec0:	e009      	b.n	8003ed6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ec6:	e006      	b.n	8003ed6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003ec8:	2310      	movs	r3, #16
 8003eca:	e004      	b.n	8003ed6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003ecc:	2310      	movs	r3, #16
 8003ece:	e002      	b.n	8003ed6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003ed0:	2310      	movs	r3, #16
 8003ed2:	e000      	b.n	8003ed6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003ed4:	2310      	movs	r3, #16
 8003ed6:	4a42      	ldr	r2, [pc, #264]	; (8003fe0 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8003ed8:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	4b40      	ldr	r3, [pc, #256]	; (8003fe4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	f240 8082 	bls.w	8003fec <HAL_DMAEx_MultiBufferStart_IT+0x894>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a30      	ldr	r2, [pc, #192]	; (8003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d057      	beq.n	8003fa2 <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a2f      	ldr	r2, [pc, #188]	; (8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d050      	beq.n	8003f9e <HAL_DMAEx_MultiBufferStart_IT+0x846>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a2d      	ldr	r2, [pc, #180]	; (8003fb8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d049      	beq.n	8003f9a <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a2c      	ldr	r2, [pc, #176]	; (8003fbc <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d042      	beq.n	8003f96 <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a2a      	ldr	r2, [pc, #168]	; (8003fc0 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d03a      	beq.n	8003f90 <HAL_DMAEx_MultiBufferStart_IT+0x838>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a29      	ldr	r2, [pc, #164]	; (8003fc4 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d032      	beq.n	8003f8a <HAL_DMAEx_MultiBufferStart_IT+0x832>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a27      	ldr	r2, [pc, #156]	; (8003fc8 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d02a      	beq.n	8003f84 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a26      	ldr	r2, [pc, #152]	; (8003fcc <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d022      	beq.n	8003f7e <HAL_DMAEx_MultiBufferStart_IT+0x826>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a24      	ldr	r2, [pc, #144]	; (8003fd0 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d01a      	beq.n	8003f78 <HAL_DMAEx_MultiBufferStart_IT+0x820>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a23      	ldr	r2, [pc, #140]	; (8003fd4 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d012      	beq.n	8003f72 <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a21      	ldr	r2, [pc, #132]	; (8003fd8 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00a      	beq.n	8003f6c <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a20      	ldr	r2, [pc, #128]	; (8003fdc <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d102      	bne.n	8003f66 <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 8003f60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003f64:	e01e      	b.n	8003fa4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003f66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f6a:	e01b      	b.n	8003fa4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003f6c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003f70:	e018      	b.n	8003fa4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003f72:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003f76:	e015      	b.n	8003fa4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003f78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003f7c:	e012      	b.n	8003fa4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003f7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f82:	e00f      	b.n	8003fa4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003f84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f88:	e00c      	b.n	8003fa4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003f8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f8e:	e009      	b.n	8003fa4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003f90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f94:	e006      	b.n	8003fa4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003f96:	2308      	movs	r3, #8
 8003f98:	e004      	b.n	8003fa4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003f9a:	2308      	movs	r3, #8
 8003f9c:	e002      	b.n	8003fa4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003f9e:	2308      	movs	r3, #8
 8003fa0:	e000      	b.n	8003fa4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003fa2:	2308      	movs	r3, #8
 8003fa4:	4a10      	ldr	r2, [pc, #64]	; (8003fe8 <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 8003fa6:	60d3      	str	r3, [r2, #12]
 8003fa8:	e16f      	b.n	800428a <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8003faa:	bf00      	nop
 8003fac:	40026058 	.word	0x40026058
 8003fb0:	40026010 	.word	0x40026010
 8003fb4:	40026410 	.word	0x40026410
 8003fb8:	40026070 	.word	0x40026070
 8003fbc:	40026470 	.word	0x40026470
 8003fc0:	40026028 	.word	0x40026028
 8003fc4:	40026428 	.word	0x40026428
 8003fc8:	40026088 	.word	0x40026088
 8003fcc:	40026488 	.word	0x40026488
 8003fd0:	40026040 	.word	0x40026040
 8003fd4:	40026440 	.word	0x40026440
 8003fd8:	400260a0 	.word	0x400260a0
 8003fdc:	400264a0 	.word	0x400264a0
 8003fe0:	40026000 	.word	0x40026000
 8003fe4:	40026458 	.word	0x40026458
 8003fe8:	40026400 	.word	0x40026400
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	4b94      	ldr	r3, [pc, #592]	; (8004244 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d960      	bls.n	80040ba <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a92      	ldr	r2, [pc, #584]	; (8004248 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d057      	beq.n	80040b2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a91      	ldr	r2, [pc, #580]	; (800424c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d050      	beq.n	80040ae <HAL_DMAEx_MultiBufferStart_IT+0x956>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a8f      	ldr	r2, [pc, #572]	; (8004250 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d049      	beq.n	80040aa <HAL_DMAEx_MultiBufferStart_IT+0x952>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a8e      	ldr	r2, [pc, #568]	; (8004254 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d042      	beq.n	80040a6 <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a8c      	ldr	r2, [pc, #560]	; (8004258 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d03a      	beq.n	80040a0 <HAL_DMAEx_MultiBufferStart_IT+0x948>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a8b      	ldr	r2, [pc, #556]	; (800425c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d032      	beq.n	800409a <HAL_DMAEx_MultiBufferStart_IT+0x942>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a89      	ldr	r2, [pc, #548]	; (8004260 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d02a      	beq.n	8004094 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a88      	ldr	r2, [pc, #544]	; (8004264 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d022      	beq.n	800408e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a86      	ldr	r2, [pc, #536]	; (8004268 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d01a      	beq.n	8004088 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a85      	ldr	r2, [pc, #532]	; (800426c <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d012      	beq.n	8004082 <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a83      	ldr	r2, [pc, #524]	; (8004270 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00a      	beq.n	800407c <HAL_DMAEx_MultiBufferStart_IT+0x924>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a82      	ldr	r2, [pc, #520]	; (8004274 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d102      	bne.n	8004076 <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 8004070:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004074:	e01e      	b.n	80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8004076:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800407a:	e01b      	b.n	80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800407c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004080:	e018      	b.n	80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8004082:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004086:	e015      	b.n	80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8004088:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800408c:	e012      	b.n	80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800408e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004092:	e00f      	b.n	80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8004094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004098:	e00c      	b.n	80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800409a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800409e:	e009      	b.n	80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80040a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040a4:	e006      	b.n	80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80040a6:	2308      	movs	r3, #8
 80040a8:	e004      	b.n	80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80040aa:	2308      	movs	r3, #8
 80040ac:	e002      	b.n	80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80040ae:	2308      	movs	r3, #8
 80040b0:	e000      	b.n	80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80040b2:	2308      	movs	r3, #8
 80040b4:	4a70      	ldr	r2, [pc, #448]	; (8004278 <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 80040b6:	6093      	str	r3, [r2, #8]
 80040b8:	e0e7      	b.n	800428a <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	4b6e      	ldr	r3, [pc, #440]	; (800427c <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d960      	bls.n	8004188 <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a5f      	ldr	r2, [pc, #380]	; (8004248 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d057      	beq.n	8004180 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a5d      	ldr	r2, [pc, #372]	; (800424c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d050      	beq.n	800417c <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a5c      	ldr	r2, [pc, #368]	; (8004250 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d049      	beq.n	8004178 <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a5a      	ldr	r2, [pc, #360]	; (8004254 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d042      	beq.n	8004174 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a59      	ldr	r2, [pc, #356]	; (8004258 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d03a      	beq.n	800416e <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a57      	ldr	r2, [pc, #348]	; (800425c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d032      	beq.n	8004168 <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a56      	ldr	r2, [pc, #344]	; (8004260 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d02a      	beq.n	8004162 <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a54      	ldr	r2, [pc, #336]	; (8004264 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d022      	beq.n	800415c <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a53      	ldr	r2, [pc, #332]	; (8004268 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d01a      	beq.n	8004156 <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a51      	ldr	r2, [pc, #324]	; (800426c <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d012      	beq.n	8004150 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a50      	ldr	r2, [pc, #320]	; (8004270 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d00a      	beq.n	800414a <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a4e      	ldr	r2, [pc, #312]	; (8004274 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d102      	bne.n	8004144 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 800413e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004142:	e01e      	b.n	8004182 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8004144:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004148:	e01b      	b.n	8004182 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800414a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800414e:	e018      	b.n	8004182 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8004150:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004154:	e015      	b.n	8004182 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8004156:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800415a:	e012      	b.n	8004182 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800415c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004160:	e00f      	b.n	8004182 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8004162:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004166:	e00c      	b.n	8004182 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8004168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800416c:	e009      	b.n	8004182 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800416e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004172:	e006      	b.n	8004182 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8004174:	2308      	movs	r3, #8
 8004176:	e004      	b.n	8004182 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8004178:	2308      	movs	r3, #8
 800417a:	e002      	b.n	8004182 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800417c:	2308      	movs	r3, #8
 800417e:	e000      	b.n	8004182 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8004180:	2308      	movs	r3, #8
 8004182:	4a3f      	ldr	r2, [pc, #252]	; (8004280 <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 8004184:	60d3      	str	r3, [r2, #12]
 8004186:	e080      	b.n	800428a <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a2e      	ldr	r2, [pc, #184]	; (8004248 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d078      	beq.n	8004284 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a2d      	ldr	r2, [pc, #180]	; (800424c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d050      	beq.n	800423e <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a2b      	ldr	r2, [pc, #172]	; (8004250 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d049      	beq.n	800423a <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a2a      	ldr	r2, [pc, #168]	; (8004254 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d042      	beq.n	8004236 <HAL_DMAEx_MultiBufferStart_IT+0xade>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a28      	ldr	r2, [pc, #160]	; (8004258 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d03a      	beq.n	8004230 <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a27      	ldr	r2, [pc, #156]	; (800425c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d032      	beq.n	800422a <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a25      	ldr	r2, [pc, #148]	; (8004260 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d02a      	beq.n	8004224 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a24      	ldr	r2, [pc, #144]	; (8004264 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d022      	beq.n	800421e <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a22      	ldr	r2, [pc, #136]	; (8004268 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01a      	beq.n	8004218 <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a21      	ldr	r2, [pc, #132]	; (800426c <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d012      	beq.n	8004212 <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1f      	ldr	r2, [pc, #124]	; (8004270 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d00a      	beq.n	800420c <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a1e      	ldr	r2, [pc, #120]	; (8004274 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d102      	bne.n	8004206 <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 8004200:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004204:	e03f      	b.n	8004286 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8004206:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800420a:	e03c      	b.n	8004286 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800420c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004210:	e039      	b.n	8004286 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8004212:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004216:	e036      	b.n	8004286 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8004218:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800421c:	e033      	b.n	8004286 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800421e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004222:	e030      	b.n	8004286 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8004224:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004228:	e02d      	b.n	8004286 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800422a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800422e:	e02a      	b.n	8004286 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8004230:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004234:	e027      	b.n	8004286 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8004236:	2308      	movs	r3, #8
 8004238:	e025      	b.n	8004286 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800423a:	2308      	movs	r3, #8
 800423c:	e023      	b.n	8004286 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800423e:	2308      	movs	r3, #8
 8004240:	e021      	b.n	8004286 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8004242:	bf00      	nop
 8004244:	400260b8 	.word	0x400260b8
 8004248:	40026010 	.word	0x40026010
 800424c:	40026410 	.word	0x40026410
 8004250:	40026070 	.word	0x40026070
 8004254:	40026470 	.word	0x40026470
 8004258:	40026028 	.word	0x40026028
 800425c:	40026428 	.word	0x40026428
 8004260:	40026088 	.word	0x40026088
 8004264:	40026488 	.word	0x40026488
 8004268:	40026040 	.word	0x40026040
 800426c:	40026440 	.word	0x40026440
 8004270:	400260a0 	.word	0x400260a0
 8004274:	400264a0 	.word	0x400264a0
 8004278:	40026400 	.word	0x40026400
 800427c:	40026058 	.word	0x40026058
 8004280:	40026000 	.word	0x40026000
 8004284:	2308      	movs	r3, #8
 8004286:	4a9a      	ldr	r2, [pc, #616]	; (80044f0 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8004288:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	4b98      	ldr	r3, [pc, #608]	; (80044f4 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8004292:	429a      	cmp	r2, r3
 8004294:	d960      	bls.n	8004358 <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a97      	ldr	r2, [pc, #604]	; (80044f8 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d057      	beq.n	8004350 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a95      	ldr	r2, [pc, #596]	; (80044fc <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d050      	beq.n	800434c <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a94      	ldr	r2, [pc, #592]	; (8004500 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d049      	beq.n	8004348 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a92      	ldr	r2, [pc, #584]	; (8004504 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d042      	beq.n	8004344 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a91      	ldr	r2, [pc, #580]	; (8004508 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d03a      	beq.n	800433e <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a8f      	ldr	r2, [pc, #572]	; (800450c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d032      	beq.n	8004338 <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a8e      	ldr	r2, [pc, #568]	; (8004510 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d02a      	beq.n	8004332 <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a8c      	ldr	r2, [pc, #560]	; (8004514 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d022      	beq.n	800432c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a8b      	ldr	r2, [pc, #556]	; (8004518 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d01a      	beq.n	8004326 <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a89      	ldr	r2, [pc, #548]	; (800451c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d012      	beq.n	8004320 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a88      	ldr	r2, [pc, #544]	; (8004520 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d00a      	beq.n	800431a <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a86      	ldr	r2, [pc, #536]	; (8004524 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d102      	bne.n	8004314 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 800430e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004312:	e01e      	b.n	8004352 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8004314:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004318:	e01b      	b.n	8004352 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800431a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800431e:	e018      	b.n	8004352 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8004320:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004324:	e015      	b.n	8004352 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8004326:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800432a:	e012      	b.n	8004352 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800432c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004330:	e00f      	b.n	8004352 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8004332:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004336:	e00c      	b.n	8004352 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8004338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800433c:	e009      	b.n	8004352 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800433e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004342:	e006      	b.n	8004352 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8004344:	2304      	movs	r3, #4
 8004346:	e004      	b.n	8004352 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8004348:	2304      	movs	r3, #4
 800434a:	e002      	b.n	8004352 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800434c:	2304      	movs	r3, #4
 800434e:	e000      	b.n	8004352 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8004350:	2304      	movs	r3, #4
 8004352:	4a75      	ldr	r2, [pc, #468]	; (8004528 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8004354:	60d3      	str	r3, [r2, #12]
 8004356:	e151      	b.n	80045fc <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	461a      	mov	r2, r3
 800435e:	4b73      	ldr	r3, [pc, #460]	; (800452c <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 8004360:	429a      	cmp	r2, r3
 8004362:	d960      	bls.n	8004426 <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a63      	ldr	r2, [pc, #396]	; (80044f8 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d057      	beq.n	800441e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a62      	ldr	r2, [pc, #392]	; (80044fc <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d050      	beq.n	800441a <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a60      	ldr	r2, [pc, #384]	; (8004500 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d049      	beq.n	8004416 <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a5f      	ldr	r2, [pc, #380]	; (8004504 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d042      	beq.n	8004412 <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a5d      	ldr	r2, [pc, #372]	; (8004508 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d03a      	beq.n	800440c <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a5c      	ldr	r2, [pc, #368]	; (800450c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d032      	beq.n	8004406 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a5a      	ldr	r2, [pc, #360]	; (8004510 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d02a      	beq.n	8004400 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a59      	ldr	r2, [pc, #356]	; (8004514 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d022      	beq.n	80043fa <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a57      	ldr	r2, [pc, #348]	; (8004518 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d01a      	beq.n	80043f4 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a56      	ldr	r2, [pc, #344]	; (800451c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d012      	beq.n	80043ee <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a54      	ldr	r2, [pc, #336]	; (8004520 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00a      	beq.n	80043e8 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a53      	ldr	r2, [pc, #332]	; (8004524 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d102      	bne.n	80043e2 <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 80043dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80043e0:	e01e      	b.n	8004420 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80043e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043e6:	e01b      	b.n	8004420 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80043e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80043ec:	e018      	b.n	8004420 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80043ee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80043f2:	e015      	b.n	8004420 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80043f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80043f8:	e012      	b.n	8004420 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80043fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043fe:	e00f      	b.n	8004420 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8004400:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004404:	e00c      	b.n	8004420 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8004406:	f44f 7380 	mov.w	r3, #256	; 0x100
 800440a:	e009      	b.n	8004420 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800440c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004410:	e006      	b.n	8004420 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8004412:	2304      	movs	r3, #4
 8004414:	e004      	b.n	8004420 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8004416:	2304      	movs	r3, #4
 8004418:	e002      	b.n	8004420 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800441a:	2304      	movs	r3, #4
 800441c:	e000      	b.n	8004420 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800441e:	2304      	movs	r3, #4
 8004420:	4a41      	ldr	r2, [pc, #260]	; (8004528 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8004422:	6093      	str	r3, [r2, #8]
 8004424:	e0ea      	b.n	80045fc <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	4b40      	ldr	r3, [pc, #256]	; (8004530 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 800442e:	429a      	cmp	r2, r3
 8004430:	f240 8084 	bls.w	800453c <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a2f      	ldr	r2, [pc, #188]	; (80044f8 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d07a      	beq.n	8004534 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a2e      	ldr	r2, [pc, #184]	; (80044fc <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d050      	beq.n	80044ea <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a2c      	ldr	r2, [pc, #176]	; (8004500 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d049      	beq.n	80044e6 <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a2b      	ldr	r2, [pc, #172]	; (8004504 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d042      	beq.n	80044e2 <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a29      	ldr	r2, [pc, #164]	; (8004508 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d03a      	beq.n	80044dc <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a28      	ldr	r2, [pc, #160]	; (800450c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d032      	beq.n	80044d6 <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a26      	ldr	r2, [pc, #152]	; (8004510 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d02a      	beq.n	80044d0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a25      	ldr	r2, [pc, #148]	; (8004514 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d022      	beq.n	80044ca <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a23      	ldr	r2, [pc, #140]	; (8004518 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d01a      	beq.n	80044c4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a22      	ldr	r2, [pc, #136]	; (800451c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d012      	beq.n	80044be <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a20      	ldr	r2, [pc, #128]	; (8004520 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00a      	beq.n	80044b8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1f      	ldr	r2, [pc, #124]	; (8004524 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d102      	bne.n	80044b2 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 80044ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80044b0:	e041      	b.n	8004536 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80044b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044b6:	e03e      	b.n	8004536 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80044b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80044bc:	e03b      	b.n	8004536 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80044be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80044c2:	e038      	b.n	8004536 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80044c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80044c8:	e035      	b.n	8004536 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80044ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044ce:	e032      	b.n	8004536 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80044d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044d4:	e02f      	b.n	8004536 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80044d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044da:	e02c      	b.n	8004536 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80044dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044e0:	e029      	b.n	8004536 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80044e2:	2304      	movs	r3, #4
 80044e4:	e027      	b.n	8004536 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80044e6:	2304      	movs	r3, #4
 80044e8:	e025      	b.n	8004536 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80044ea:	2304      	movs	r3, #4
 80044ec:	e023      	b.n	8004536 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80044ee:	bf00      	nop
 80044f0:	40026000 	.word	0x40026000
 80044f4:	40026458 	.word	0x40026458
 80044f8:	40026010 	.word	0x40026010
 80044fc:	40026410 	.word	0x40026410
 8004500:	40026070 	.word	0x40026070
 8004504:	40026470 	.word	0x40026470
 8004508:	40026028 	.word	0x40026028
 800450c:	40026428 	.word	0x40026428
 8004510:	40026088 	.word	0x40026088
 8004514:	40026488 	.word	0x40026488
 8004518:	40026040 	.word	0x40026040
 800451c:	40026440 	.word	0x40026440
 8004520:	400260a0 	.word	0x400260a0
 8004524:	400264a0 	.word	0x400264a0
 8004528:	40026400 	.word	0x40026400
 800452c:	400260b8 	.word	0x400260b8
 8004530:	40026058 	.word	0x40026058
 8004534:	2304      	movs	r3, #4
 8004536:	4a94      	ldr	r2, [pc, #592]	; (8004788 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8004538:	60d3      	str	r3, [r2, #12]
 800453a:	e05f      	b.n	80045fc <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a92      	ldr	r2, [pc, #584]	; (800478c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d057      	beq.n	80045f6 <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a91      	ldr	r2, [pc, #580]	; (8004790 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d050      	beq.n	80045f2 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a8f      	ldr	r2, [pc, #572]	; (8004794 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d049      	beq.n	80045ee <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a8e      	ldr	r2, [pc, #568]	; (8004798 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d042      	beq.n	80045ea <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a8c      	ldr	r2, [pc, #560]	; (800479c <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d03a      	beq.n	80045e4 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a8b      	ldr	r2, [pc, #556]	; (80047a0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d032      	beq.n	80045de <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a89      	ldr	r2, [pc, #548]	; (80047a4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d02a      	beq.n	80045d8 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a88      	ldr	r2, [pc, #544]	; (80047a8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d022      	beq.n	80045d2 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a86      	ldr	r2, [pc, #536]	; (80047ac <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d01a      	beq.n	80045cc <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a85      	ldr	r2, [pc, #532]	; (80047b0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d012      	beq.n	80045c6 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a83      	ldr	r2, [pc, #524]	; (80047b4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00a      	beq.n	80045c0 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a82      	ldr	r2, [pc, #520]	; (80047b8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d102      	bne.n	80045ba <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 80045b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80045b8:	e01e      	b.n	80045f8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80045ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045be:	e01b      	b.n	80045f8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80045c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80045c4:	e018      	b.n	80045f8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80045c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80045ca:	e015      	b.n	80045f8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80045cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80045d0:	e012      	b.n	80045f8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80045d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045d6:	e00f      	b.n	80045f8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80045d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045dc:	e00c      	b.n	80045f8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80045de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045e2:	e009      	b.n	80045f8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80045e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045e8:	e006      	b.n	80045f8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80045ea:	2304      	movs	r3, #4
 80045ec:	e004      	b.n	80045f8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80045ee:	2304      	movs	r3, #4
 80045f0:	e002      	b.n	80045f8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80045f2:	2304      	movs	r3, #4
 80045f4:	e000      	b.n	80045f8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80045f6:	2304      	movs	r3, #4
 80045f8:	4a63      	ldr	r2, [pc, #396]	; (8004788 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80045fa:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	461a      	mov	r2, r3
 8004602:	4b6e      	ldr	r3, [pc, #440]	; (80047bc <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 8004604:	429a      	cmp	r2, r3
 8004606:	d95c      	bls.n	80046c2 <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a5f      	ldr	r2, [pc, #380]	; (800478c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d053      	beq.n	80046ba <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a5e      	ldr	r2, [pc, #376]	; (8004790 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d04c      	beq.n	80046b6 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a5c      	ldr	r2, [pc, #368]	; (8004794 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d045      	beq.n	80046b2 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a5b      	ldr	r2, [pc, #364]	; (8004798 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d03e      	beq.n	80046ae <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a59      	ldr	r2, [pc, #356]	; (800479c <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d037      	beq.n	80046aa <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a58      	ldr	r2, [pc, #352]	; (80047a0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d030      	beq.n	80046a6 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a56      	ldr	r2, [pc, #344]	; (80047a4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d029      	beq.n	80046a2 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a55      	ldr	r2, [pc, #340]	; (80047a8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d022      	beq.n	800469e <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a53      	ldr	r2, [pc, #332]	; (80047ac <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d01a      	beq.n	8004698 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a52      	ldr	r2, [pc, #328]	; (80047b0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d012      	beq.n	8004692 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a50      	ldr	r2, [pc, #320]	; (80047b4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d00a      	beq.n	800468c <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a4f      	ldr	r2, [pc, #316]	; (80047b8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d102      	bne.n	8004686 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8004680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004684:	e01a      	b.n	80046bc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8004686:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800468a:	e017      	b.n	80046bc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800468c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004690:	e014      	b.n	80046bc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8004692:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004696:	e011      	b.n	80046bc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8004698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800469c:	e00e      	b.n	80046bc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800469e:	2340      	movs	r3, #64	; 0x40
 80046a0:	e00c      	b.n	80046bc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80046a2:	2340      	movs	r3, #64	; 0x40
 80046a4:	e00a      	b.n	80046bc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80046a6:	2340      	movs	r3, #64	; 0x40
 80046a8:	e008      	b.n	80046bc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80046aa:	2340      	movs	r3, #64	; 0x40
 80046ac:	e006      	b.n	80046bc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e004      	b.n	80046bc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e002      	b.n	80046bc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80046b6:	2301      	movs	r3, #1
 80046b8:	e000      	b.n	80046bc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80046ba:	2301      	movs	r3, #1
 80046bc:	4a40      	ldr	r2, [pc, #256]	; (80047c0 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 80046be:	60d3      	str	r3, [r2, #12]
 80046c0:	e141      	b.n	8004946 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	4b3e      	ldr	r3, [pc, #248]	; (80047c4 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d97c      	bls.n	80047c8 <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a2e      	ldr	r2, [pc, #184]	; (800478c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d053      	beq.n	8004780 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a2c      	ldr	r2, [pc, #176]	; (8004790 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d04c      	beq.n	800477c <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a2b      	ldr	r2, [pc, #172]	; (8004794 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d045      	beq.n	8004778 <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a29      	ldr	r2, [pc, #164]	; (8004798 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d03e      	beq.n	8004774 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a28      	ldr	r2, [pc, #160]	; (800479c <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d037      	beq.n	8004770 <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a26      	ldr	r2, [pc, #152]	; (80047a0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d030      	beq.n	800476c <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a25      	ldr	r2, [pc, #148]	; (80047a4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d029      	beq.n	8004768 <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a23      	ldr	r2, [pc, #140]	; (80047a8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d022      	beq.n	8004764 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a22      	ldr	r2, [pc, #136]	; (80047ac <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d01a      	beq.n	800475e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a20      	ldr	r2, [pc, #128]	; (80047b0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d012      	beq.n	8004758 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a1f      	ldr	r2, [pc, #124]	; (80047b4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d00a      	beq.n	8004752 <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a1d      	ldr	r2, [pc, #116]	; (80047b8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d102      	bne.n	800474c <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8004746:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800474a:	e01a      	b.n	8004782 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800474c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004750:	e017      	b.n	8004782 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004752:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004756:	e014      	b.n	8004782 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004758:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800475c:	e011      	b.n	8004782 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800475e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004762:	e00e      	b.n	8004782 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004764:	2340      	movs	r3, #64	; 0x40
 8004766:	e00c      	b.n	8004782 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004768:	2340      	movs	r3, #64	; 0x40
 800476a:	e00a      	b.n	8004782 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800476c:	2340      	movs	r3, #64	; 0x40
 800476e:	e008      	b.n	8004782 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004770:	2340      	movs	r3, #64	; 0x40
 8004772:	e006      	b.n	8004782 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004774:	2301      	movs	r3, #1
 8004776:	e004      	b.n	8004782 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004778:	2301      	movs	r3, #1
 800477a:	e002      	b.n	8004782 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004780:	2301      	movs	r3, #1
 8004782:	4a0f      	ldr	r2, [pc, #60]	; (80047c0 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8004784:	6093      	str	r3, [r2, #8]
 8004786:	e0de      	b.n	8004946 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8004788:	40026000 	.word	0x40026000
 800478c:	40026010 	.word	0x40026010
 8004790:	40026410 	.word	0x40026410
 8004794:	40026070 	.word	0x40026070
 8004798:	40026470 	.word	0x40026470
 800479c:	40026028 	.word	0x40026028
 80047a0:	40026428 	.word	0x40026428
 80047a4:	40026088 	.word	0x40026088
 80047a8:	40026488 	.word	0x40026488
 80047ac:	40026040 	.word	0x40026040
 80047b0:	40026440 	.word	0x40026440
 80047b4:	400260a0 	.word	0x400260a0
 80047b8:	400264a0 	.word	0x400264a0
 80047bc:	40026458 	.word	0x40026458
 80047c0:	40026400 	.word	0x40026400
 80047c4:	400260b8 	.word	0x400260b8
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	461a      	mov	r2, r3
 80047ce:	4b78      	ldr	r3, [pc, #480]	; (80049b0 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d95c      	bls.n	800488e <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a76      	ldr	r2, [pc, #472]	; (80049b4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d053      	beq.n	8004886 <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a75      	ldr	r2, [pc, #468]	; (80049b8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d04c      	beq.n	8004882 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a73      	ldr	r2, [pc, #460]	; (80049bc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d045      	beq.n	800487e <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a72      	ldr	r2, [pc, #456]	; (80049c0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d03e      	beq.n	800487a <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a70      	ldr	r2, [pc, #448]	; (80049c4 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d037      	beq.n	8004876 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a6f      	ldr	r2, [pc, #444]	; (80049c8 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d030      	beq.n	8004872 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a6d      	ldr	r2, [pc, #436]	; (80049cc <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d029      	beq.n	800486e <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a6c      	ldr	r2, [pc, #432]	; (80049d0 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d022      	beq.n	800486a <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a6a      	ldr	r2, [pc, #424]	; (80049d4 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d01a      	beq.n	8004864 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a69      	ldr	r2, [pc, #420]	; (80049d8 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d012      	beq.n	800485e <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a67      	ldr	r2, [pc, #412]	; (80049dc <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00a      	beq.n	8004858 <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a66      	ldr	r2, [pc, #408]	; (80049e0 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d102      	bne.n	8004852 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 800484c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004850:	e01a      	b.n	8004888 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004852:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004856:	e017      	b.n	8004888 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004858:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800485c:	e014      	b.n	8004888 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800485e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004862:	e011      	b.n	8004888 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004864:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004868:	e00e      	b.n	8004888 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800486a:	2340      	movs	r3, #64	; 0x40
 800486c:	e00c      	b.n	8004888 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800486e:	2340      	movs	r3, #64	; 0x40
 8004870:	e00a      	b.n	8004888 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004872:	2340      	movs	r3, #64	; 0x40
 8004874:	e008      	b.n	8004888 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004876:	2340      	movs	r3, #64	; 0x40
 8004878:	e006      	b.n	8004888 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800487a:	2301      	movs	r3, #1
 800487c:	e004      	b.n	8004888 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800487e:	2301      	movs	r3, #1
 8004880:	e002      	b.n	8004888 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004882:	2301      	movs	r3, #1
 8004884:	e000      	b.n	8004888 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004886:	2301      	movs	r3, #1
 8004888:	4a56      	ldr	r2, [pc, #344]	; (80049e4 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800488a:	60d3      	str	r3, [r2, #12]
 800488c:	e05b      	b.n	8004946 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a48      	ldr	r2, [pc, #288]	; (80049b4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d053      	beq.n	8004940 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a46      	ldr	r2, [pc, #280]	; (80049b8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d04c      	beq.n	800493c <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a45      	ldr	r2, [pc, #276]	; (80049bc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d045      	beq.n	8004938 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a43      	ldr	r2, [pc, #268]	; (80049c0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d03e      	beq.n	8004934 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a42      	ldr	r2, [pc, #264]	; (80049c4 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d037      	beq.n	8004930 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a40      	ldr	r2, [pc, #256]	; (80049c8 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d030      	beq.n	800492c <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a3f      	ldr	r2, [pc, #252]	; (80049cc <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d029      	beq.n	8004928 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a3d      	ldr	r2, [pc, #244]	; (80049d0 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d022      	beq.n	8004924 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a3c      	ldr	r2, [pc, #240]	; (80049d4 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d01a      	beq.n	800491e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a3a      	ldr	r2, [pc, #232]	; (80049d8 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d012      	beq.n	8004918 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a39      	ldr	r2, [pc, #228]	; (80049dc <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d00a      	beq.n	8004912 <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a37      	ldr	r2, [pc, #220]	; (80049e0 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d102      	bne.n	800490c <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 8004906:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800490a:	e01a      	b.n	8004942 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800490c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004910:	e017      	b.n	8004942 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004912:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004916:	e014      	b.n	8004942 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004918:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800491c:	e011      	b.n	8004942 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800491e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004922:	e00e      	b.n	8004942 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004924:	2340      	movs	r3, #64	; 0x40
 8004926:	e00c      	b.n	8004942 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004928:	2340      	movs	r3, #64	; 0x40
 800492a:	e00a      	b.n	8004942 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800492c:	2340      	movs	r3, #64	; 0x40
 800492e:	e008      	b.n	8004942 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004930:	2340      	movs	r3, #64	; 0x40
 8004932:	e006      	b.n	8004942 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004934:	2301      	movs	r3, #1
 8004936:	e004      	b.n	8004942 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004938:	2301      	movs	r3, #1
 800493a:	e002      	b.n	8004942 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800493c:	2301      	movs	r3, #1
 800493e:	e000      	b.n	8004942 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004940:	2301      	movs	r3, #1
 8004942:	4a28      	ldr	r2, [pc, #160]	; (80049e4 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8004944:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f042 0216 	orr.w	r2, r2, #22
 8004954:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695a      	ldr	r2, [r3, #20]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004964:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	2b00      	cmp	r3, #0
 800496c:	d103      	bne.n	8004976 <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 0208 	orr.w	r2, r2, #8
 8004984:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f042 0201 	orr.w	r2, r2, #1
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	e005      	b.n	80049a4 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80049a0:	2302      	movs	r3, #2
 80049a2:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80049a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40026058 	.word	0x40026058
 80049b4:	40026010 	.word	0x40026010
 80049b8:	40026410 	.word	0x40026410
 80049bc:	40026070 	.word	0x40026070
 80049c0:	40026470 	.word	0x40026470
 80049c4:	40026028 	.word	0x40026028
 80049c8:	40026428 	.word	0x40026428
 80049cc:	40026088 	.word	0x40026088
 80049d0:	40026488 	.word	0x40026488
 80049d4:	40026040 	.word	0x40026040
 80049d8:	40026440 	.word	0x40026440
 80049dc:	400260a0 	.word	0x400260a0
 80049e0:	400264a0 	.word	0x400264a0
 80049e4:	40026000 	.word	0x40026000

080049e8 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	4613      	mov	r3, r2
 80049f4:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 80049f6:	79fb      	ldrb	r3, [r7, #7]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d104      	bne.n	8004a06 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	60da      	str	r2, [r3, #12]
 8004a04:	e003      	b.n	8004a0e <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	2b40      	cmp	r3, #64	; 0x40
 8004a38:	d108      	bne.n	8004a4c <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a4a:	e007      	b.n	8004a5c <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	60da      	str	r2, [r3, #12]
}
 8004a5c:	bf00      	nop
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	61fb      	str	r3, [r7, #28]
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8004a78:	4baa      	ldr	r3, [pc, #680]	; (8004d24 <HAL_ETH_Init+0x2bc>)
 8004a7a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004a80:	2300      	movs	r3, #0
 8004a82:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e183      	b.n	8004d96 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f006 f860 	bl	800ab68 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60bb      	str	r3, [r7, #8]
 8004aac:	4b9e      	ldr	r3, [pc, #632]	; (8004d28 <HAL_ETH_Init+0x2c0>)
 8004aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab0:	4a9d      	ldr	r2, [pc, #628]	; (8004d28 <HAL_ETH_Init+0x2c0>)
 8004ab2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ab6:	6453      	str	r3, [r2, #68]	; 0x44
 8004ab8:	4b9b      	ldr	r3, [pc, #620]	; (8004d28 <HAL_ETH_Init+0x2c0>)
 8004aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ac0:	60bb      	str	r3, [r7, #8]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004ac4:	4b99      	ldr	r3, [pc, #612]	; (8004d2c <HAL_ETH_Init+0x2c4>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	4a98      	ldr	r2, [pc, #608]	; (8004d2c <HAL_ETH_Init+0x2c4>)
 8004aca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004ace:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004ad0:	4b96      	ldr	r3, [pc, #600]	; (8004d2c <HAL_ETH_Init+0x2c4>)
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	4994      	ldr	r1, [pc, #592]	; (8004d2c <HAL_ETH_Init+0x2c4>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0201 	orr.w	r2, r2, #1
 8004af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004af4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004af6:	f7fd fe0f 	bl	8002718 <HAL_GetTick>
 8004afa:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004afc:	e011      	b.n	8004b22 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8004afe:	f7fd fe0b 	bl	8002718 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004b0c:	d909      	bls.n	8004b22 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2203      	movs	r2, #3
 8004b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e139      	b.n	8004d96 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e4      	bne.n	8004afe <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	f023 031c 	bic.w	r3, r3, #28
 8004b42:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004b44:	f003 fd22 	bl	800858c <HAL_RCC_GetHCLKFreq>
 8004b48:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	4a78      	ldr	r2, [pc, #480]	; (8004d30 <HAL_ETH_Init+0x2c8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d908      	bls.n	8004b64 <HAL_ETH_Init+0xfc>
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	4a77      	ldr	r2, [pc, #476]	; (8004d34 <HAL_ETH_Init+0x2cc>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d804      	bhi.n	8004b64 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	f043 0308 	orr.w	r3, r3, #8
 8004b60:	61fb      	str	r3, [r7, #28]
 8004b62:	e027      	b.n	8004bb4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	4a73      	ldr	r2, [pc, #460]	; (8004d34 <HAL_ETH_Init+0x2cc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d908      	bls.n	8004b7e <HAL_ETH_Init+0x116>
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	4a6d      	ldr	r2, [pc, #436]	; (8004d24 <HAL_ETH_Init+0x2bc>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d204      	bcs.n	8004b7e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	f043 030c 	orr.w	r3, r3, #12
 8004b7a:	61fb      	str	r3, [r7, #28]
 8004b7c:	e01a      	b.n	8004bb4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	4a68      	ldr	r2, [pc, #416]	; (8004d24 <HAL_ETH_Init+0x2bc>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d303      	bcc.n	8004b8e <HAL_ETH_Init+0x126>
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	4a6b      	ldr	r2, [pc, #428]	; (8004d38 <HAL_ETH_Init+0x2d0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d911      	bls.n	8004bb2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	4a69      	ldr	r2, [pc, #420]	; (8004d38 <HAL_ETH_Init+0x2d0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d908      	bls.n	8004ba8 <HAL_ETH_Init+0x140>
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	4a68      	ldr	r2, [pc, #416]	; (8004d3c <HAL_ETH_Init+0x2d4>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d804      	bhi.n	8004ba8 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	f043 0304 	orr.w	r3, r3, #4
 8004ba4:	61fb      	str	r3, [r7, #28]
 8004ba6:	e005      	b.n	8004bb4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	f043 0310 	orr.w	r3, r3, #16
 8004bae:	61fb      	str	r3, [r7, #28]
 8004bb0:	e000      	b.n	8004bb4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004bb2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69fa      	ldr	r2, [r7, #28]
 8004bba:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004bbc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fc1d 	bl	8005402 <HAL_ETH_WritePHYRegister>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00b      	beq.n	8004be6 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8004bd2:	6939      	ldr	r1, [r7, #16]
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fdd3 	bl	8005780 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e0d7      	b.n	8004d96 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8004be6:	20ff      	movs	r0, #255	; 0xff
 8004be8:	f7fd fda2 	bl	8002730 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 80a5 	beq.w	8004d40 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bf6:	f7fd fd8f 	bl	8002718 <HAL_GetTick>
 8004bfa:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004bfc:	f107 030c 	add.w	r3, r7, #12
 8004c00:	461a      	mov	r2, r3
 8004c02:	2101      	movs	r1, #1
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fb94 	bl	8005332 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8004c0a:	f7fd fd85 	bl	8002718 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d90f      	bls.n	8004c3c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004c20:	6939      	ldr	r1, [r7, #16]
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fdac 	bl	8005780 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e0ac      	b.n	8004d96 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0da      	beq.n	8004bfc <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8004c46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 fbd8 	bl	8005402 <HAL_ETH_WritePHYRegister>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00b      	beq.n	8004c70 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004c5c:	6939      	ldr	r1, [r7, #16]
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fd8e 	bl	8005780 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e092      	b.n	8004d96 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c70:	f7fd fd52 	bl	8002718 <HAL_GetTick>
 8004c74:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004c76:	f107 030c 	add.w	r3, r7, #12
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fb57 	bl	8005332 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004c84:	f7fd fd48 	bl	8002718 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d90f      	bls.n	8004cb6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004c9a:	6939      	ldr	r1, [r7, #16]
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fd6f 	bl	8005780 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e06f      	b.n	8004d96 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f003 0320 	and.w	r3, r3, #32
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0da      	beq.n	8004c76 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8004cc0:	f107 030c 	add.w	r3, r7, #12
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	2131      	movs	r1, #49	; 0x31
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 fb32 	bl	8005332 <HAL_ETH_ReadPHYRegister>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00b      	beq.n	8004cec <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004cd8:	6939      	ldr	r1, [r7, #16]
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fd50 	bl	8005780 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e054      	b.n	8004d96 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f003 0310 	and.w	r3, r3, #16
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d004      	beq.n	8004d00 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cfc:	60da      	str	r2, [r3, #12]
 8004cfe:	e002      	b.n	8004d06 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	609a      	str	r2, [r3, #8]
 8004d16:	e035      	b.n	8004d84 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d1e:	609a      	str	r2, [r3, #8]
 8004d20:	e030      	b.n	8004d84 <HAL_ETH_Init+0x31c>
 8004d22:	bf00      	nop
 8004d24:	03938700 	.word	0x03938700
 8004d28:	40023800 	.word	0x40023800
 8004d2c:	40013800 	.word	0x40013800
 8004d30:	01312cff 	.word	0x01312cff
 8004d34:	02160ebf 	.word	0x02160ebf
 8004d38:	05f5e0ff 	.word	0x05f5e0ff
 8004d3c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	08db      	lsrs	r3, r3, #3
 8004d46:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	085b      	lsrs	r3, r3, #1
 8004d4e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004d50:	4313      	orrs	r3, r2
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	461a      	mov	r2, r3
 8004d56:	2100      	movs	r1, #0
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 fb52 	bl	8005402 <HAL_ETH_WritePHYRegister>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00b      	beq.n	8004d7c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004d68:	6939      	ldr	r1, [r7, #16]
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fd08 	bl	8005780 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e00c      	b.n	8004d96 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8004d7c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004d80:	f7fd fcd6 	bl	8002730 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8004d84:	6939      	ldr	r1, [r7, #16]
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 fcfa 	bl	8005780 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3720      	adds	r7, #32
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop

08004da0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
 8004dac:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_ETH_DMATxDescListInit+0x20>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e052      	b.n	8004e66 <HAL_ETH_DMATxDescListInit+0xc6>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	e030      	b.n	8004e3e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	015b      	lsls	r3, r3, #5
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	4413      	add	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004dec:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004df4:	fb02 f303 	mul.w	r3, r2, r3
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d105      	bne.n	8004e16 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d208      	bcs.n	8004e32 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	3301      	adds	r3, #1
 8004e24:	015b      	lsls	r3, r3, #5
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	4413      	add	r3, r2
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	60da      	str	r2, [r3, #12]
 8004e30:	e002      	b.n	8004e38 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d3ca      	bcc.n	8004ddc <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e50:	3310      	adds	r3, #16
 8004e52:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	371c      	adds	r7, #28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b087      	sub	sp, #28
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	607a      	str	r2, [r7, #4]
 8004e7e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d101      	bne.n	8004e92 <HAL_ETH_DMARxDescListInit+0x20>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	e056      	b.n	8004f40 <HAL_ETH_DMARxDescListInit+0xce>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	617b      	str	r3, [r7, #20]
 8004eac:	e034      	b.n	8004f18 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	015b      	lsls	r3, r3, #5
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ebe:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8004ec6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004ece:	fb02 f303 	mul.w	r3, r2, r3
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d105      	bne.n	8004ef0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d208      	bcs.n	8004f0c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	3301      	adds	r3, #1
 8004efe:	015b      	lsls	r3, r3, #5
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	4413      	add	r3, r2
 8004f04:	461a      	mov	r2, r3
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	60da      	str	r2, [r3, #12]
 8004f0a:	e002      	b.n	8004f12 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	3301      	adds	r3, #1
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d3c6      	bcc.n	8004eae <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f2a:	330c      	adds	r3, #12
 8004f2c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	371c      	adds	r7, #28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_ETH_TransmitFrame+0x24>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e0cd      	b.n	800510c <HAL_ETH_TransmitFrame+0x1c0>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d109      	bne.n	8004f9a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8004f96:	2301      	movs	r3, #1
 8004f98:	e0b8      	b.n	800510c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	da09      	bge.n	8004fb8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2212      	movs	r2, #18
 8004fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e0a9      	b.n	800510c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d915      	bls.n	8004fee <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	4a54      	ldr	r2, [pc, #336]	; (8005118 <HAL_ETH_TransmitFrame+0x1cc>)
 8004fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fca:	0a9b      	lsrs	r3, r3, #10
 8004fcc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	4b51      	ldr	r3, [pc, #324]	; (8005118 <HAL_ETH_TransmitFrame+0x1cc>)
 8004fd2:	fba3 1302 	umull	r1, r3, r3, r2
 8004fd6:	0a9b      	lsrs	r3, r3, #10
 8004fd8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8004fdc:	fb01 f303 	mul.w	r3, r1, r3
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d005      	beq.n	8004ff2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	e001      	b.n	8004ff2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d11c      	bne.n	8005032 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005002:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8005006:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005012:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005022:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	461a      	mov	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005030:	e04b      	b.n	80050ca <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8005032:	2300      	movs	r3, #0
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	e044      	b.n	80050c2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005046:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d107      	bne.n	800505e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800505c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005066:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	3b01      	subs	r3, #1
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	429a      	cmp	r2, r3
 8005070:	d116      	bne.n	80050a0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005080:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	4a25      	ldr	r2, [pc, #148]	; (800511c <HAL_ETH_TransmitFrame+0x1d0>)
 8005086:	fb02 f203 	mul.w	r2, r2, r3
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	4413      	add	r3, r2
 800508e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005092:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800509e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050aa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80050ae:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	461a      	mov	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	3301      	adds	r3, #1
 80050c0:	613b      	str	r3, [r7, #16]
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d3b6      	bcc.n	8005038 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050d2:	3314      	adds	r3, #20
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0304 	and.w	r3, r3, #4
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00d      	beq.n	80050fa <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050e6:	3314      	adds	r3, #20
 80050e8:	2204      	movs	r2, #4
 80050ea:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050f4:	3304      	adds	r3, #4
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	371c      	adds	r7, #28
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	ac02b00b 	.word	0xac02b00b
 800511c:	fffffa0c 	.word	0xfffffa0c

08005120 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005132:	2b01      	cmp	r3, #1
 8005134:	d101      	bne.n	800513a <HAL_ETH_GetReceivedFrame+0x1a>
 8005136:	2302      	movs	r3, #2
 8005138:	e070      	b.n	800521c <HAL_ETH_GetReceivedFrame+0xfc>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2202      	movs	r2, #2
 8005146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	db5a      	blt.n	800520a <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800515e:	2b00      	cmp	r3, #0
 8005160:	d030      	beq.n	80051c4 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005170:	2b01      	cmp	r3, #1
 8005172:	d103      	bne.n	800517c <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	0c1b      	lsrs	r3, r3, #16
 800518c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005190:	3b04      	subs	r3, #4
 8005192:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519e:	689a      	ldr	r2, [r3, #8]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	461a      	mov	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80051c0:	2300      	movs	r3, #0
 80051c2:	e02b      	b.n	800521c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d010      	beq.n	80051f4 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	461a      	mov	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	629a      	str	r2, [r3, #40]	; 0x28
 80051f2:	e00a      	b.n	800520a <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	461a      	mov	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
}
 800521c:	4618      	mov	r0, r3
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005238:	3314      	adds	r3, #20
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005240:	2b40      	cmp	r3, #64	; 0x40
 8005242:	d112      	bne.n	800526a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f860 	bl	800530a <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005252:	3314      	adds	r3, #20
 8005254:	2240      	movs	r2, #64	; 0x40
 8005256:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005268:	e01b      	b.n	80052a2 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005272:	3314      	adds	r3, #20
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b01      	cmp	r3, #1
 800527c:	d111      	bne.n	80052a2 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f839 	bl	80052f6 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800528c:	3314      	adds	r3, #20
 800528e:	2201      	movs	r2, #1
 8005290:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052aa:	3314      	adds	r3, #20
 80052ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80052b0:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ba:	3314      	adds	r3, #20
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052c6:	d112      	bne.n	80052ee <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f828 	bl	800531e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d6:	3314      	adds	r3, #20
 80052d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80052dc:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80052ee:	bf00      	nop
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800530a:	b480      	push	{r7}
 800530c:	b083      	sub	sp, #12
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8005312:	bf00      	nop
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b086      	sub	sp, #24
 8005336:	af00      	add	r7, sp, #0
 8005338:	60f8      	str	r0, [r7, #12]
 800533a:	460b      	mov	r3, r1
 800533c:	607a      	str	r2, [r7, #4]
 800533e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8005340:	2300      	movs	r3, #0
 8005342:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b82      	cmp	r3, #130	; 0x82
 8005352:	d101      	bne.n	8005358 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8005354:	2302      	movs	r3, #2
 8005356:	e050      	b.n	80053fa <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2282      	movs	r2, #130	; 0x82
 800535c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f003 031c 	and.w	r3, r3, #28
 800536e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8a1b      	ldrh	r3, [r3, #16]
 8005374:	02db      	lsls	r3, r3, #11
 8005376:	b29b      	uxth	r3, r3
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800537e:	897b      	ldrh	r3, [r7, #10]
 8005380:	019b      	lsls	r3, r3, #6
 8005382:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f023 0302 	bic.w	r3, r3, #2
 8005392:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f043 0301 	orr.w	r3, r3, #1
 800539a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80053a4:	f7fd f9b8 	bl	8002718 <HAL_GetTick>
 80053a8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80053aa:	e015      	b.n	80053d8 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80053ac:	f7fd f9b4 	bl	8002718 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ba:	d309      	bcc.n	80053d0 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e014      	b.n	80053fa <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1e4      	bne.n	80053ac <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	461a      	mov	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b086      	sub	sp, #24
 8005406:	af00      	add	r7, sp, #0
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	460b      	mov	r3, r1
 800540c:	607a      	str	r2, [r7, #4]
 800540e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b42      	cmp	r3, #66	; 0x42
 8005422:	d101      	bne.n	8005428 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8005424:	2302      	movs	r3, #2
 8005426:	e04e      	b.n	80054c6 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2242      	movs	r2, #66	; 0x42
 800542c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f003 031c 	and.w	r3, r3, #28
 800543e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8a1b      	ldrh	r3, [r3, #16]
 8005444:	02db      	lsls	r3, r3, #11
 8005446:	b29b      	uxth	r3, r3
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	4313      	orrs	r3, r2
 800544c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800544e:	897b      	ldrh	r3, [r7, #10]
 8005450:	019b      	lsls	r3, r3, #6
 8005452:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4313      	orrs	r3, r2
 800545a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f043 0302 	orr.w	r3, r3, #2
 8005462:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f043 0301 	orr.w	r3, r3, #1
 800546a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	b29a      	uxth	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800547e:	f7fd f94b 	bl	8002718 <HAL_GetTick>
 8005482:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005484:	e015      	b.n	80054b2 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8005486:	f7fd f947 	bl	8002718 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005494:	d309      	bcc.n	80054aa <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e00d      	b.n	80054c6 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e4      	bne.n	8005486 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b082      	sub	sp, #8
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <HAL_ETH_Start+0x16>
 80054e0:	2302      	movs	r3, #2
 80054e2:	e01f      	b.n	8005524 <HAL_ETH_Start+0x56>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fb45 	bl	8005b84 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fb7c 	bl	8005bf8 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fc13 	bl	8005d2c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fbb0 	bl	8005c6c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 fbdd 	bl	8005ccc <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800553a:	2b01      	cmp	r3, #1
 800553c:	d101      	bne.n	8005542 <HAL_ETH_Stop+0x16>
 800553e:	2302      	movs	r3, #2
 8005540:	e01f      	b.n	8005582 <HAL_ETH_Stop+0x56>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2202      	movs	r2, #2
 800554e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fba2 	bl	8005c9c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fbcf 	bl	8005cfc <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fb67 	bl	8005c32 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fbe1 	bl	8005d2c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fb27 	bl	8005bbe <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d101      	bne.n	80055a8 <HAL_ETH_ConfigMAC+0x1c>
 80055a4:	2302      	movs	r3, #2
 80055a6:	e0e4      	b.n	8005772 <HAL_ETH_ConfigMAC+0x1e6>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 80b1 	beq.w	8005722 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4b6c      	ldr	r3, [pc, #432]	; (800577c <HAL_ETH_ConfigMAC+0x1f0>)
 80055cc:	4013      	ands	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80055d8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80055de:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80055e4:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80055ea:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80055f0:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80055f6:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80055fc:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8005602:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8005608:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800560e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8005614:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800561a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005632:	2001      	movs	r0, #1
 8005634:	f7fd f87c 	bl	8002730 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005648:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800564e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8005654:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800565a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8005660:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8005666:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8005672:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005674:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800567e:	2001      	movs	r0, #1
 8005680:	f7fd f856 	bl	8002730 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005694:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800569e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	f64f 7341 	movw	r3, #65345	; 0xff41
 80056ae:	4013      	ands	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80056bc:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80056c2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80056c8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80056ce:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80056d4:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80056ec:	2001      	movs	r0, #1
 80056ee:	f7fd f81f 	bl	8002730 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8005712:	2001      	movs	r0, #1
 8005714:	f7fd f80c 	bl	8002730 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	61da      	str	r2, [r3, #28]
 8005720:	e01e      	b.n	8005760 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005730:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689a      	ldr	r2, [r3, #8]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	4313      	orrs	r3, r2
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005752:	2001      	movs	r0, #1
 8005754:	f7fc ffec 	bl	8002730 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	ff20810f 	.word	0xff20810f

08005780 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b0b0      	sub	sp, #192	; 0xc0
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d007      	beq.n	80057a6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800579c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80057a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80057a6:	2300      	movs	r3, #0
 80057a8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80057aa:	2300      	movs	r3, #0
 80057ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80057ae:	2300      	movs	r3, #0
 80057b0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80057b2:	2300      	movs	r3, #0
 80057b4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80057b6:	2300      	movs	r3, #0
 80057b8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80057ba:	2300      	movs	r3, #0
 80057bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	69db      	ldr	r3, [r3, #28]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d103      	bne.n	80057ce <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80057c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057ca:	663b      	str	r3, [r7, #96]	; 0x60
 80057cc:	e001      	b.n	80057d2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80057ce:	2300      	movs	r3, #0
 80057d0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80057d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057d6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80057d8:	2300      	movs	r3, #0
 80057da:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80057dc:	2300      	movs	r3, #0
 80057de:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80057e0:	2300      	movs	r3, #0
 80057e2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80057e4:	2300      	movs	r3, #0
 80057e6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80057e8:	2300      	movs	r3, #0
 80057ea:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80057ec:	2340      	movs	r3, #64	; 0x40
 80057ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80057f0:	2300      	movs	r3, #0
 80057f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80057f6:	2300      	movs	r3, #0
 80057f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80057fc:	2300      	movs	r3, #0
 80057fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8005802:	2300      	movs	r3, #0
 8005804:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8005808:	2300      	movs	r3, #0
 800580a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800580e:	2300      	movs	r3, #0
 8005810:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8005814:	2300      	movs	r3, #0
 8005816:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800581a:	2300      	movs	r3, #0
 800581c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8005820:	2380      	movs	r3, #128	; 0x80
 8005822:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005826:	2300      	movs	r3, #0
 8005828:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800582c:	2300      	movs	r3, #0
 800582e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8005832:	2300      	movs	r3, #0
 8005834:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8005838:	2300      	movs	r3, #0
 800583a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800583e:	2300      	movs	r3, #0
 8005840:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8005844:	2300      	movs	r3, #0
 8005846:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005854:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005858:	4bac      	ldr	r3, [pc, #688]	; (8005b0c <ETH_MACDMAConfig+0x38c>)
 800585a:	4013      	ands	r3, r2
 800585c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005860:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8005862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005864:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8005866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8005868:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800586a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800586c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8005872:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8005874:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8005876:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8005878:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800587a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8005880:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8005882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8005884:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8005886:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8005888:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800588a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800588c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800588e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8005890:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8005892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8005894:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005896:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80058a8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80058b4:	2001      	movs	r0, #1
 80058b6:	f7fc ff3b 	bl	8002730 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80058c2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80058c4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80058c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80058c8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80058ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80058cc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80058ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80058d2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80058d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80058d8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80058da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80058de:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80058e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80058e4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80058e8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80058f0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80058f2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80058fe:	2001      	movs	r0, #1
 8005900:	f7fc ff16 	bl	8002730 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800590c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005916:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005920:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800592c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005930:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005934:	4013      	ands	r3, r2
 8005936:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800593a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800593e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8005940:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005944:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8005946:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800594a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800594c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8005950:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8005952:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8005956:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8005958:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800595c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800595e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005962:	4313      	orrs	r3, r2
 8005964:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005970:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800597c:	2001      	movs	r0, #1
 800597e:	f7fc fed7 	bl	8002730 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800598a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800598c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8005990:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80059a6:	2001      	movs	r0, #1
 80059a8:	f7fc fec2 	bl	8002730 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80059b4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80059b6:	2300      	movs	r3, #0
 80059b8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80059ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059be:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80059c0:	2300      	movs	r3, #0
 80059c2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80059c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80059c8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80059ca:	2300      	movs	r3, #0
 80059cc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80059ce:	2300      	movs	r3, #0
 80059d0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80059d2:	2300      	movs	r3, #0
 80059d4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80059d6:	2300      	movs	r3, #0
 80059d8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80059da:	2304      	movs	r3, #4
 80059dc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80059de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80059e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059e8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80059ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80059ee:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80059f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059f4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80059f6:	2380      	movs	r3, #128	; 0x80
 80059f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80059fe:	2300      	movs	r3, #0
 8005a00:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a0a:	3318      	adds	r3, #24
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005a12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a16:	4b3e      	ldr	r3, [pc, #248]	; (8005b10 <ETH_MACDMAConfig+0x390>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005a1e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8005a20:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005a22:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8005a24:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8005a26:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8005a28:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8005a2a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8005a2c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8005a2e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8005a30:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8005a32:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8005a34:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8005a36:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8005a3a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8005a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8005a3e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005a40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a52:	3318      	adds	r3, #24
 8005a54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a58:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a62:	3318      	adds	r3, #24
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a6a:	2001      	movs	r0, #1
 8005a6c:	f7fc fe60 	bl	8002730 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a78:	3318      	adds	r3, #24
 8005a7a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a7e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005a84:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8005a88:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005a8c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8005a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8005a90:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8005a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a94:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8005a96:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8005a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8005a9a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aa8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005ab8:	2001      	movs	r0, #1
 8005aba:	f7fc fe39 	bl	8002730 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ac6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005aca:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d10f      	bne.n	8005af4 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005adc:	331c      	adds	r3, #28
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005ae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005af0:	331c      	adds	r3, #28
 8005af2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	461a      	mov	r2, r3
 8005afa:	2100      	movs	r1, #0
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f809 	bl	8005b14 <ETH_MACAddressConfig>
}
 8005b02:	bf00      	nop
 8005b04:	37c0      	adds	r7, #192	; 0xc0
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	ff20810f 	.word	0xff20810f
 8005b10:	f8de3f23 	.word	0xf8de3f23

08005b14 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3305      	adds	r3, #5
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	021b      	lsls	r3, r3, #8
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	3204      	adds	r2, #4
 8005b2c:	7812      	ldrb	r2, [r2, #0]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	4b11      	ldr	r3, [pc, #68]	; (8005b7c <ETH_MACAddressConfig+0x68>)
 8005b36:	4413      	add	r3, r2
 8005b38:	461a      	mov	r2, r3
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	3303      	adds	r3, #3
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	061a      	lsls	r2, r3, #24
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	3302      	adds	r3, #2
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	041b      	lsls	r3, r3, #16
 8005b4e:	431a      	orrs	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3301      	adds	r3, #1
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	021b      	lsls	r3, r3, #8
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	7812      	ldrb	r2, [r2, #0]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <ETH_MACAddressConfig+0x6c>)
 8005b66:	4413      	add	r3, r2
 8005b68:	461a      	mov	r2, r3
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	6013      	str	r3, [r2, #0]
}
 8005b6e:	bf00      	nop
 8005b70:	371c      	adds	r7, #28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	40028040 	.word	0x40028040
 8005b80:	40028044 	.word	0x40028044

08005b84 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 0208 	orr.w	r2, r2, #8
 8005b9e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005ba8:	2001      	movs	r0, #1
 8005baa:	f000 f8e9 	bl	8005d80 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	601a      	str	r2, [r3, #0]
}
 8005bb6:	bf00      	nop
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b084      	sub	sp, #16
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0208 	bic.w	r2, r2, #8
 8005bd8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005be2:	2001      	movs	r0, #1
 8005be4:	f000 f8cc 	bl	8005d80 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	601a      	str	r2, [r3, #0]
}
 8005bf0:	bf00      	nop
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005c00:	2300      	movs	r3, #0
 8005c02:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0204 	orr.w	r2, r2, #4
 8005c12:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005c1c:	2001      	movs	r0, #1
 8005c1e:	f000 f8af 	bl	8005d80 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	601a      	str	r2, [r3, #0]
}
 8005c2a:	bf00      	nop
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0204 	bic.w	r2, r2, #4
 8005c4c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005c56:	2001      	movs	r0, #1
 8005c58:	f000 f892 	bl	8005d80 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	601a      	str	r2, [r3, #0]
}
 8005c64:	bf00      	nop
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c7c:	3318      	adds	r3, #24
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c8c:	3318      	adds	r3, #24
 8005c8e:	601a      	str	r2, [r3, #0]
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cac:	3318      	adds	r3, #24
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cbc:	3318      	adds	r3, #24
 8005cbe:	601a      	str	r2, [r3, #0]
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cdc:	3318      	adds	r3, #24
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f042 0202 	orr.w	r2, r2, #2
 8005ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cec:	3318      	adds	r3, #24
 8005cee:	601a      	str	r2, [r3, #0]
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d0c:	3318      	adds	r3, #24
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0202 	bic.w	r2, r2, #2
 8005d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d1c:	3318      	adds	r3, #24
 8005d1e:	601a      	str	r2, [r3, #0]
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d40:	3318      	adds	r3, #24
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d50:	3318      	adds	r3, #24
 8005d52:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d5c:	3318      	adds	r3, #24
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005d62:	2001      	movs	r0, #1
 8005d64:	f000 f80c 	bl	8005d80 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d72:	3318      	adds	r3, #24
 8005d74:	601a      	str	r2, [r3, #0]
}
 8005d76:	bf00      	nop
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005d88:	4b0b      	ldr	r3, [pc, #44]	; (8005db8 <ETH_Delay+0x38>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a0b      	ldr	r2, [pc, #44]	; (8005dbc <ETH_Delay+0x3c>)
 8005d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d92:	0a5b      	lsrs	r3, r3, #9
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	fb02 f303 	mul.w	r3, r2, r3
 8005d9a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8005d9c:	bf00      	nop
  } 
  while (Delay --);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	1e5a      	subs	r2, r3, #1
 8005da2:	60fa      	str	r2, [r7, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1f9      	bne.n	8005d9c <ETH_Delay+0x1c>
}
 8005da8:	bf00      	nop
 8005daa:	bf00      	nop
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	20000508 	.word	0x20000508
 8005dbc:	10624dd3 	.word	0x10624dd3

08005dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b089      	sub	sp, #36	; 0x24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	61fb      	str	r3, [r7, #28]
 8005dda:	e16b      	b.n	80060b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ddc:	2201      	movs	r2, #1
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	fa02 f303 	lsl.w	r3, r2, r3
 8005de4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	4013      	ands	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	f040 815a 	bne.w	80060ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d005      	beq.n	8005e12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d130      	bne.n	8005e74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	2203      	movs	r2, #3
 8005e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e22:	43db      	mvns	r3, r3
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	4013      	ands	r3, r2
 8005e28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68da      	ldr	r2, [r3, #12]
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	fa02 f303 	lsl.w	r3, r2, r3
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e48:	2201      	movs	r2, #1
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e50:	43db      	mvns	r3, r3
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	4013      	ands	r3, r2
 8005e56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	091b      	lsrs	r3, r3, #4
 8005e5e:	f003 0201 	and.w	r2, r3, #1
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	fa02 f303 	lsl.w	r3, r2, r3
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f003 0303 	and.w	r3, r3, #3
 8005e7c:	2b03      	cmp	r3, #3
 8005e7e:	d017      	beq.n	8005eb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	2203      	movs	r2, #3
 8005e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e90:	43db      	mvns	r3, r3
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	4013      	ands	r3, r2
 8005e96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	005b      	lsls	r3, r3, #1
 8005ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f003 0303 	and.w	r3, r3, #3
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d123      	bne.n	8005f04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	08da      	lsrs	r2, r3, #3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3208      	adds	r2, #8
 8005ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	f003 0307 	and.w	r3, r3, #7
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	220f      	movs	r2, #15
 8005ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed8:	43db      	mvns	r3, r3
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	4013      	ands	r3, r2
 8005ede:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	691a      	ldr	r2, [r3, #16]
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	08da      	lsrs	r2, r3, #3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	3208      	adds	r2, #8
 8005efe:	69b9      	ldr	r1, [r7, #24]
 8005f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	005b      	lsls	r3, r3, #1
 8005f0e:	2203      	movs	r2, #3
 8005f10:	fa02 f303 	lsl.w	r3, r2, r3
 8005f14:	43db      	mvns	r3, r3
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	4013      	ands	r3, r2
 8005f1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f003 0203 	and.w	r2, r3, #3
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 80b4 	beq.w	80060ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]
 8005f4a:	4b60      	ldr	r3, [pc, #384]	; (80060cc <HAL_GPIO_Init+0x30c>)
 8005f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4e:	4a5f      	ldr	r2, [pc, #380]	; (80060cc <HAL_GPIO_Init+0x30c>)
 8005f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f54:	6453      	str	r3, [r2, #68]	; 0x44
 8005f56:	4b5d      	ldr	r3, [pc, #372]	; (80060cc <HAL_GPIO_Init+0x30c>)
 8005f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f62:	4a5b      	ldr	r2, [pc, #364]	; (80060d0 <HAL_GPIO_Init+0x310>)
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	089b      	lsrs	r3, r3, #2
 8005f68:	3302      	adds	r3, #2
 8005f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	f003 0303 	and.w	r3, r3, #3
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	220f      	movs	r2, #15
 8005f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7e:	43db      	mvns	r3, r3
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	4013      	ands	r3, r2
 8005f84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a52      	ldr	r2, [pc, #328]	; (80060d4 <HAL_GPIO_Init+0x314>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d02b      	beq.n	8005fe6 <HAL_GPIO_Init+0x226>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a51      	ldr	r2, [pc, #324]	; (80060d8 <HAL_GPIO_Init+0x318>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d025      	beq.n	8005fe2 <HAL_GPIO_Init+0x222>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a50      	ldr	r2, [pc, #320]	; (80060dc <HAL_GPIO_Init+0x31c>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d01f      	beq.n	8005fde <HAL_GPIO_Init+0x21e>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a4f      	ldr	r2, [pc, #316]	; (80060e0 <HAL_GPIO_Init+0x320>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d019      	beq.n	8005fda <HAL_GPIO_Init+0x21a>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a4e      	ldr	r2, [pc, #312]	; (80060e4 <HAL_GPIO_Init+0x324>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d013      	beq.n	8005fd6 <HAL_GPIO_Init+0x216>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a4d      	ldr	r2, [pc, #308]	; (80060e8 <HAL_GPIO_Init+0x328>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d00d      	beq.n	8005fd2 <HAL_GPIO_Init+0x212>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a4c      	ldr	r2, [pc, #304]	; (80060ec <HAL_GPIO_Init+0x32c>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d007      	beq.n	8005fce <HAL_GPIO_Init+0x20e>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a4b      	ldr	r2, [pc, #300]	; (80060f0 <HAL_GPIO_Init+0x330>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d101      	bne.n	8005fca <HAL_GPIO_Init+0x20a>
 8005fc6:	2307      	movs	r3, #7
 8005fc8:	e00e      	b.n	8005fe8 <HAL_GPIO_Init+0x228>
 8005fca:	2308      	movs	r3, #8
 8005fcc:	e00c      	b.n	8005fe8 <HAL_GPIO_Init+0x228>
 8005fce:	2306      	movs	r3, #6
 8005fd0:	e00a      	b.n	8005fe8 <HAL_GPIO_Init+0x228>
 8005fd2:	2305      	movs	r3, #5
 8005fd4:	e008      	b.n	8005fe8 <HAL_GPIO_Init+0x228>
 8005fd6:	2304      	movs	r3, #4
 8005fd8:	e006      	b.n	8005fe8 <HAL_GPIO_Init+0x228>
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e004      	b.n	8005fe8 <HAL_GPIO_Init+0x228>
 8005fde:	2302      	movs	r3, #2
 8005fe0:	e002      	b.n	8005fe8 <HAL_GPIO_Init+0x228>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e000      	b.n	8005fe8 <HAL_GPIO_Init+0x228>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	69fa      	ldr	r2, [r7, #28]
 8005fea:	f002 0203 	and.w	r2, r2, #3
 8005fee:	0092      	lsls	r2, r2, #2
 8005ff0:	4093      	lsls	r3, r2
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ff8:	4935      	ldr	r1, [pc, #212]	; (80060d0 <HAL_GPIO_Init+0x310>)
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	089b      	lsrs	r3, r3, #2
 8005ffe:	3302      	adds	r3, #2
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006006:	4b3b      	ldr	r3, [pc, #236]	; (80060f4 <HAL_GPIO_Init+0x334>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	43db      	mvns	r3, r3
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	4013      	ands	r3, r2
 8006014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	4313      	orrs	r3, r2
 8006028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800602a:	4a32      	ldr	r2, [pc, #200]	; (80060f4 <HAL_GPIO_Init+0x334>)
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006030:	4b30      	ldr	r3, [pc, #192]	; (80060f4 <HAL_GPIO_Init+0x334>)
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	43db      	mvns	r3, r3
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	4013      	ands	r3, r2
 800603e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d003      	beq.n	8006054 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	4313      	orrs	r3, r2
 8006052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006054:	4a27      	ldr	r2, [pc, #156]	; (80060f4 <HAL_GPIO_Init+0x334>)
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800605a:	4b26      	ldr	r3, [pc, #152]	; (80060f4 <HAL_GPIO_Init+0x334>)
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	43db      	mvns	r3, r3
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	4013      	ands	r3, r2
 8006068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	4313      	orrs	r3, r2
 800607c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800607e:	4a1d      	ldr	r2, [pc, #116]	; (80060f4 <HAL_GPIO_Init+0x334>)
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006084:	4b1b      	ldr	r3, [pc, #108]	; (80060f4 <HAL_GPIO_Init+0x334>)
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	43db      	mvns	r3, r3
 800608e:	69ba      	ldr	r2, [r7, #24]
 8006090:	4013      	ands	r3, r2
 8006092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d003      	beq.n	80060a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80060a8:	4a12      	ldr	r2, [pc, #72]	; (80060f4 <HAL_GPIO_Init+0x334>)
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	3301      	adds	r3, #1
 80060b2:	61fb      	str	r3, [r7, #28]
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	2b0f      	cmp	r3, #15
 80060b8:	f67f ae90 	bls.w	8005ddc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80060bc:	bf00      	nop
 80060be:	bf00      	nop
 80060c0:	3724      	adds	r7, #36	; 0x24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40023800 	.word	0x40023800
 80060d0:	40013800 	.word	0x40013800
 80060d4:	40020000 	.word	0x40020000
 80060d8:	40020400 	.word	0x40020400
 80060dc:	40020800 	.word	0x40020800
 80060e0:	40020c00 	.word	0x40020c00
 80060e4:	40021000 	.word	0x40021000
 80060e8:	40021400 	.word	0x40021400
 80060ec:	40021800 	.word	0x40021800
 80060f0:	40021c00 	.word	0x40021c00
 80060f4:	40013c00 	.word	0x40013c00

080060f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	460b      	mov	r3, r1
 8006102:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691a      	ldr	r2, [r3, #16]
 8006108:	887b      	ldrh	r3, [r7, #2]
 800610a:	4013      	ands	r3, r2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006110:	2301      	movs	r3, #1
 8006112:	73fb      	strb	r3, [r7, #15]
 8006114:	e001      	b.n	800611a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006116:	2300      	movs	r3, #0
 8006118:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800611a:	7bfb      	ldrb	r3, [r7, #15]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	460b      	mov	r3, r1
 8006132:	807b      	strh	r3, [r7, #2]
 8006134:	4613      	mov	r3, r2
 8006136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006138:	787b      	ldrb	r3, [r7, #1]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d003      	beq.n	8006146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800613e:	887a      	ldrh	r2, [r7, #2]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006144:	e003      	b.n	800614e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006146:	887b      	ldrh	r3, [r7, #2]
 8006148:	041a      	lsls	r2, r3, #16
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	619a      	str	r2, [r3, #24]
}
 800614e:	bf00      	nop
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800615a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800615c:	b08f      	sub	sp, #60	; 0x3c
 800615e:	af0a      	add	r7, sp, #40	; 0x28
 8006160:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e054      	b.n	8006216 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d106      	bne.n	800618c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f012 feaa 	bl	8018ee0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2203      	movs	r2, #3
 8006190:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800619c:	2b00      	cmp	r3, #0
 800619e:	d102      	bne.n	80061a6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f003 fb10 	bl	80097d0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	603b      	str	r3, [r7, #0]
 80061b6:	687e      	ldr	r6, [r7, #4]
 80061b8:	466d      	mov	r5, sp
 80061ba:	f106 0410 	add.w	r4, r6, #16
 80061be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80061ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80061ce:	1d33      	adds	r3, r6, #4
 80061d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061d2:	6838      	ldr	r0, [r7, #0]
 80061d4:	f003 fa8a 	bl	80096ec <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2101      	movs	r1, #1
 80061de:	4618      	mov	r0, r3
 80061e0:	f003 fb07 	bl	80097f2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	603b      	str	r3, [r7, #0]
 80061ea:	687e      	ldr	r6, [r7, #4]
 80061ec:	466d      	mov	r5, sp
 80061ee:	f106 0410 	add.w	r4, r6, #16
 80061f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80061fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8006202:	1d33      	adds	r3, r6, #4
 8006204:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006206:	6838      	ldr	r0, [r7, #0]
 8006208:	f003 fc6e 	bl	8009ae8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800621e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800621e:	b590      	push	{r4, r7, lr}
 8006220:	b089      	sub	sp, #36	; 0x24
 8006222:	af04      	add	r7, sp, #16
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	4608      	mov	r0, r1
 8006228:	4611      	mov	r1, r2
 800622a:	461a      	mov	r2, r3
 800622c:	4603      	mov	r3, r0
 800622e:	70fb      	strb	r3, [r7, #3]
 8006230:	460b      	mov	r3, r1
 8006232:	70bb      	strb	r3, [r7, #2]
 8006234:	4613      	mov	r3, r2
 8006236:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800623e:	2b01      	cmp	r3, #1
 8006240:	d101      	bne.n	8006246 <HAL_HCD_HC_Init+0x28>
 8006242:	2302      	movs	r3, #2
 8006244:	e076      	b.n	8006334 <HAL_HCD_HC_Init+0x116>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800624e:	78fb      	ldrb	r3, [r7, #3]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	212c      	movs	r1, #44	; 0x2c
 8006254:	fb01 f303 	mul.w	r3, r1, r3
 8006258:	4413      	add	r3, r2
 800625a:	333d      	adds	r3, #61	; 0x3d
 800625c:	2200      	movs	r2, #0
 800625e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8006260:	78fb      	ldrb	r3, [r7, #3]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	212c      	movs	r1, #44	; 0x2c
 8006266:	fb01 f303 	mul.w	r3, r1, r3
 800626a:	4413      	add	r3, r2
 800626c:	3338      	adds	r3, #56	; 0x38
 800626e:	787a      	ldrb	r2, [r7, #1]
 8006270:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8006272:	78fb      	ldrb	r3, [r7, #3]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	212c      	movs	r1, #44	; 0x2c
 8006278:	fb01 f303 	mul.w	r3, r1, r3
 800627c:	4413      	add	r3, r2
 800627e:	3340      	adds	r3, #64	; 0x40
 8006280:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006282:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006284:	78fb      	ldrb	r3, [r7, #3]
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	212c      	movs	r1, #44	; 0x2c
 800628a:	fb01 f303 	mul.w	r3, r1, r3
 800628e:	4413      	add	r3, r2
 8006290:	3339      	adds	r3, #57	; 0x39
 8006292:	78fa      	ldrb	r2, [r7, #3]
 8006294:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8006296:	78fb      	ldrb	r3, [r7, #3]
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	212c      	movs	r1, #44	; 0x2c
 800629c:	fb01 f303 	mul.w	r3, r1, r3
 80062a0:	4413      	add	r3, r2
 80062a2:	333f      	adds	r3, #63	; 0x3f
 80062a4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80062a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80062aa:	78fb      	ldrb	r3, [r7, #3]
 80062ac:	78ba      	ldrb	r2, [r7, #2]
 80062ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062b2:	b2d0      	uxtb	r0, r2
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	212c      	movs	r1, #44	; 0x2c
 80062b8:	fb01 f303 	mul.w	r3, r1, r3
 80062bc:	4413      	add	r3, r2
 80062be:	333a      	adds	r3, #58	; 0x3a
 80062c0:	4602      	mov	r2, r0
 80062c2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80062c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	da09      	bge.n	80062e0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80062cc:	78fb      	ldrb	r3, [r7, #3]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	212c      	movs	r1, #44	; 0x2c
 80062d2:	fb01 f303 	mul.w	r3, r1, r3
 80062d6:	4413      	add	r3, r2
 80062d8:	333b      	adds	r3, #59	; 0x3b
 80062da:	2201      	movs	r2, #1
 80062dc:	701a      	strb	r2, [r3, #0]
 80062de:	e008      	b.n	80062f2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80062e0:	78fb      	ldrb	r3, [r7, #3]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	212c      	movs	r1, #44	; 0x2c
 80062e6:	fb01 f303 	mul.w	r3, r1, r3
 80062ea:	4413      	add	r3, r2
 80062ec:	333b      	adds	r3, #59	; 0x3b
 80062ee:	2200      	movs	r2, #0
 80062f0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80062f2:	78fb      	ldrb	r3, [r7, #3]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	212c      	movs	r1, #44	; 0x2c
 80062f8:	fb01 f303 	mul.w	r3, r1, r3
 80062fc:	4413      	add	r3, r2
 80062fe:	333c      	adds	r3, #60	; 0x3c
 8006300:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006304:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6818      	ldr	r0, [r3, #0]
 800630a:	787c      	ldrb	r4, [r7, #1]
 800630c:	78ba      	ldrb	r2, [r7, #2]
 800630e:	78f9      	ldrb	r1, [r7, #3]
 8006310:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006312:	9302      	str	r3, [sp, #8]
 8006314:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006318:	9301      	str	r3, [sp, #4]
 800631a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	4623      	mov	r3, r4
 8006322:	f003 fd5b 	bl	8009ddc <USB_HC_Init>
 8006326:	4603      	mov	r3, r0
 8006328:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006332:	7bfb      	ldrb	r3, [r7, #15]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	bd90      	pop	{r4, r7, pc}

0800633c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006352:	2b01      	cmp	r3, #1
 8006354:	d101      	bne.n	800635a <HAL_HCD_HC_Halt+0x1e>
 8006356:	2302      	movs	r3, #2
 8006358:	e00f      	b.n	800637a <HAL_HCD_HC_Halt+0x3e>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	78fa      	ldrb	r2, [r7, #3]
 8006368:	4611      	mov	r1, r2
 800636a:	4618      	mov	r0, r3
 800636c:	f003 ff97 	bl	800a29e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006378:	7bfb      	ldrb	r3, [r7, #15]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	4608      	mov	r0, r1
 800638e:	4611      	mov	r1, r2
 8006390:	461a      	mov	r2, r3
 8006392:	4603      	mov	r3, r0
 8006394:	70fb      	strb	r3, [r7, #3]
 8006396:	460b      	mov	r3, r1
 8006398:	70bb      	strb	r3, [r7, #2]
 800639a:	4613      	mov	r3, r2
 800639c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800639e:	78fb      	ldrb	r3, [r7, #3]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	212c      	movs	r1, #44	; 0x2c
 80063a4:	fb01 f303 	mul.w	r3, r1, r3
 80063a8:	4413      	add	r3, r2
 80063aa:	333b      	adds	r3, #59	; 0x3b
 80063ac:	78ba      	ldrb	r2, [r7, #2]
 80063ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80063b0:	78fb      	ldrb	r3, [r7, #3]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	212c      	movs	r1, #44	; 0x2c
 80063b6:	fb01 f303 	mul.w	r3, r1, r3
 80063ba:	4413      	add	r3, r2
 80063bc:	333f      	adds	r3, #63	; 0x3f
 80063be:	787a      	ldrb	r2, [r7, #1]
 80063c0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80063c2:	7c3b      	ldrb	r3, [r7, #16]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d112      	bne.n	80063ee <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80063c8:	78fb      	ldrb	r3, [r7, #3]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	212c      	movs	r1, #44	; 0x2c
 80063ce:	fb01 f303 	mul.w	r3, r1, r3
 80063d2:	4413      	add	r3, r2
 80063d4:	3342      	adds	r3, #66	; 0x42
 80063d6:	2203      	movs	r2, #3
 80063d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80063da:	78fb      	ldrb	r3, [r7, #3]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	212c      	movs	r1, #44	; 0x2c
 80063e0:	fb01 f303 	mul.w	r3, r1, r3
 80063e4:	4413      	add	r3, r2
 80063e6:	333d      	adds	r3, #61	; 0x3d
 80063e8:	7f3a      	ldrb	r2, [r7, #28]
 80063ea:	701a      	strb	r2, [r3, #0]
 80063ec:	e008      	b.n	8006400 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80063ee:	78fb      	ldrb	r3, [r7, #3]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	212c      	movs	r1, #44	; 0x2c
 80063f4:	fb01 f303 	mul.w	r3, r1, r3
 80063f8:	4413      	add	r3, r2
 80063fa:	3342      	adds	r3, #66	; 0x42
 80063fc:	2202      	movs	r2, #2
 80063fe:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8006400:	787b      	ldrb	r3, [r7, #1]
 8006402:	2b03      	cmp	r3, #3
 8006404:	f200 80c6 	bhi.w	8006594 <HAL_HCD_HC_SubmitRequest+0x210>
 8006408:	a201      	add	r2, pc, #4	; (adr r2, 8006410 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800640a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640e:	bf00      	nop
 8006410:	08006421 	.word	0x08006421
 8006414:	08006581 	.word	0x08006581
 8006418:	08006485 	.word	0x08006485
 800641c:	08006503 	.word	0x08006503
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8006420:	7c3b      	ldrb	r3, [r7, #16]
 8006422:	2b01      	cmp	r3, #1
 8006424:	f040 80b8 	bne.w	8006598 <HAL_HCD_HC_SubmitRequest+0x214>
 8006428:	78bb      	ldrb	r3, [r7, #2]
 800642a:	2b00      	cmp	r3, #0
 800642c:	f040 80b4 	bne.w	8006598 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8006430:	8b3b      	ldrh	r3, [r7, #24]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d108      	bne.n	8006448 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8006436:	78fb      	ldrb	r3, [r7, #3]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	212c      	movs	r1, #44	; 0x2c
 800643c:	fb01 f303 	mul.w	r3, r1, r3
 8006440:	4413      	add	r3, r2
 8006442:	3355      	adds	r3, #85	; 0x55
 8006444:	2201      	movs	r2, #1
 8006446:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006448:	78fb      	ldrb	r3, [r7, #3]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	212c      	movs	r1, #44	; 0x2c
 800644e:	fb01 f303 	mul.w	r3, r1, r3
 8006452:	4413      	add	r3, r2
 8006454:	3355      	adds	r3, #85	; 0x55
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d109      	bne.n	8006470 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800645c:	78fb      	ldrb	r3, [r7, #3]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	212c      	movs	r1, #44	; 0x2c
 8006462:	fb01 f303 	mul.w	r3, r1, r3
 8006466:	4413      	add	r3, r2
 8006468:	3342      	adds	r3, #66	; 0x42
 800646a:	2200      	movs	r2, #0
 800646c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800646e:	e093      	b.n	8006598 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006470:	78fb      	ldrb	r3, [r7, #3]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	212c      	movs	r1, #44	; 0x2c
 8006476:	fb01 f303 	mul.w	r3, r1, r3
 800647a:	4413      	add	r3, r2
 800647c:	3342      	adds	r3, #66	; 0x42
 800647e:	2202      	movs	r2, #2
 8006480:	701a      	strb	r2, [r3, #0]
      break;
 8006482:	e089      	b.n	8006598 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006484:	78bb      	ldrb	r3, [r7, #2]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d11d      	bne.n	80064c6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800648a:	78fb      	ldrb	r3, [r7, #3]
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	212c      	movs	r1, #44	; 0x2c
 8006490:	fb01 f303 	mul.w	r3, r1, r3
 8006494:	4413      	add	r3, r2
 8006496:	3355      	adds	r3, #85	; 0x55
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d109      	bne.n	80064b2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800649e:	78fb      	ldrb	r3, [r7, #3]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	212c      	movs	r1, #44	; 0x2c
 80064a4:	fb01 f303 	mul.w	r3, r1, r3
 80064a8:	4413      	add	r3, r2
 80064aa:	3342      	adds	r3, #66	; 0x42
 80064ac:	2200      	movs	r2, #0
 80064ae:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80064b0:	e073      	b.n	800659a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80064b2:	78fb      	ldrb	r3, [r7, #3]
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	212c      	movs	r1, #44	; 0x2c
 80064b8:	fb01 f303 	mul.w	r3, r1, r3
 80064bc:	4413      	add	r3, r2
 80064be:	3342      	adds	r3, #66	; 0x42
 80064c0:	2202      	movs	r2, #2
 80064c2:	701a      	strb	r2, [r3, #0]
      break;
 80064c4:	e069      	b.n	800659a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80064c6:	78fb      	ldrb	r3, [r7, #3]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	212c      	movs	r1, #44	; 0x2c
 80064cc:	fb01 f303 	mul.w	r3, r1, r3
 80064d0:	4413      	add	r3, r2
 80064d2:	3354      	adds	r3, #84	; 0x54
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d109      	bne.n	80064ee <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80064da:	78fb      	ldrb	r3, [r7, #3]
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	212c      	movs	r1, #44	; 0x2c
 80064e0:	fb01 f303 	mul.w	r3, r1, r3
 80064e4:	4413      	add	r3, r2
 80064e6:	3342      	adds	r3, #66	; 0x42
 80064e8:	2200      	movs	r2, #0
 80064ea:	701a      	strb	r2, [r3, #0]
      break;
 80064ec:	e055      	b.n	800659a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80064ee:	78fb      	ldrb	r3, [r7, #3]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	212c      	movs	r1, #44	; 0x2c
 80064f4:	fb01 f303 	mul.w	r3, r1, r3
 80064f8:	4413      	add	r3, r2
 80064fa:	3342      	adds	r3, #66	; 0x42
 80064fc:	2202      	movs	r2, #2
 80064fe:	701a      	strb	r2, [r3, #0]
      break;
 8006500:	e04b      	b.n	800659a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8006502:	78bb      	ldrb	r3, [r7, #2]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d11d      	bne.n	8006544 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006508:	78fb      	ldrb	r3, [r7, #3]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	212c      	movs	r1, #44	; 0x2c
 800650e:	fb01 f303 	mul.w	r3, r1, r3
 8006512:	4413      	add	r3, r2
 8006514:	3355      	adds	r3, #85	; 0x55
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d109      	bne.n	8006530 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800651c:	78fb      	ldrb	r3, [r7, #3]
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	212c      	movs	r1, #44	; 0x2c
 8006522:	fb01 f303 	mul.w	r3, r1, r3
 8006526:	4413      	add	r3, r2
 8006528:	3342      	adds	r3, #66	; 0x42
 800652a:	2200      	movs	r2, #0
 800652c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800652e:	e034      	b.n	800659a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006530:	78fb      	ldrb	r3, [r7, #3]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	212c      	movs	r1, #44	; 0x2c
 8006536:	fb01 f303 	mul.w	r3, r1, r3
 800653a:	4413      	add	r3, r2
 800653c:	3342      	adds	r3, #66	; 0x42
 800653e:	2202      	movs	r2, #2
 8006540:	701a      	strb	r2, [r3, #0]
      break;
 8006542:	e02a      	b.n	800659a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006544:	78fb      	ldrb	r3, [r7, #3]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	212c      	movs	r1, #44	; 0x2c
 800654a:	fb01 f303 	mul.w	r3, r1, r3
 800654e:	4413      	add	r3, r2
 8006550:	3354      	adds	r3, #84	; 0x54
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d109      	bne.n	800656c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006558:	78fb      	ldrb	r3, [r7, #3]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	212c      	movs	r1, #44	; 0x2c
 800655e:	fb01 f303 	mul.w	r3, r1, r3
 8006562:	4413      	add	r3, r2
 8006564:	3342      	adds	r3, #66	; 0x42
 8006566:	2200      	movs	r2, #0
 8006568:	701a      	strb	r2, [r3, #0]
      break;
 800656a:	e016      	b.n	800659a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	212c      	movs	r1, #44	; 0x2c
 8006572:	fb01 f303 	mul.w	r3, r1, r3
 8006576:	4413      	add	r3, r2
 8006578:	3342      	adds	r3, #66	; 0x42
 800657a:	2202      	movs	r2, #2
 800657c:	701a      	strb	r2, [r3, #0]
      break;
 800657e:	e00c      	b.n	800659a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006580:	78fb      	ldrb	r3, [r7, #3]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	212c      	movs	r1, #44	; 0x2c
 8006586:	fb01 f303 	mul.w	r3, r1, r3
 800658a:	4413      	add	r3, r2
 800658c:	3342      	adds	r3, #66	; 0x42
 800658e:	2200      	movs	r2, #0
 8006590:	701a      	strb	r2, [r3, #0]
      break;
 8006592:	e002      	b.n	800659a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8006594:	bf00      	nop
 8006596:	e000      	b.n	800659a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8006598:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800659a:	78fb      	ldrb	r3, [r7, #3]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	212c      	movs	r1, #44	; 0x2c
 80065a0:	fb01 f303 	mul.w	r3, r1, r3
 80065a4:	4413      	add	r3, r2
 80065a6:	3344      	adds	r3, #68	; 0x44
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80065ac:	78fb      	ldrb	r3, [r7, #3]
 80065ae:	8b3a      	ldrh	r2, [r7, #24]
 80065b0:	6879      	ldr	r1, [r7, #4]
 80065b2:	202c      	movs	r0, #44	; 0x2c
 80065b4:	fb00 f303 	mul.w	r3, r0, r3
 80065b8:	440b      	add	r3, r1
 80065ba:	334c      	adds	r3, #76	; 0x4c
 80065bc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80065be:	78fb      	ldrb	r3, [r7, #3]
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	212c      	movs	r1, #44	; 0x2c
 80065c4:	fb01 f303 	mul.w	r3, r1, r3
 80065c8:	4413      	add	r3, r2
 80065ca:	3360      	adds	r3, #96	; 0x60
 80065cc:	2200      	movs	r2, #0
 80065ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80065d0:	78fb      	ldrb	r3, [r7, #3]
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	212c      	movs	r1, #44	; 0x2c
 80065d6:	fb01 f303 	mul.w	r3, r1, r3
 80065da:	4413      	add	r3, r2
 80065dc:	3350      	adds	r3, #80	; 0x50
 80065de:	2200      	movs	r2, #0
 80065e0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80065e2:	78fb      	ldrb	r3, [r7, #3]
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	212c      	movs	r1, #44	; 0x2c
 80065e8:	fb01 f303 	mul.w	r3, r1, r3
 80065ec:	4413      	add	r3, r2
 80065ee:	3339      	adds	r3, #57	; 0x39
 80065f0:	78fa      	ldrb	r2, [r7, #3]
 80065f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	212c      	movs	r1, #44	; 0x2c
 80065fa:	fb01 f303 	mul.w	r3, r1, r3
 80065fe:	4413      	add	r3, r2
 8006600:	3361      	adds	r3, #97	; 0x61
 8006602:	2200      	movs	r2, #0
 8006604:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6818      	ldr	r0, [r3, #0]
 800660a:	78fb      	ldrb	r3, [r7, #3]
 800660c:	222c      	movs	r2, #44	; 0x2c
 800660e:	fb02 f303 	mul.w	r3, r2, r3
 8006612:	3338      	adds	r3, #56	; 0x38
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	18d1      	adds	r1, r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	b2db      	uxtb	r3, r3
 800661e:	461a      	mov	r2, r3
 8006620:	f003 fcea 	bl	8009ff8 <USB_HC_StartXfer>
 8006624:	4603      	mov	r3, r0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop

08006630 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4618      	mov	r0, r3
 8006648:	f003 fa0d 	bl	8009a66 <USB_GetMode>
 800664c:	4603      	mov	r3, r0
 800664e:	2b01      	cmp	r3, #1
 8006650:	f040 80f6 	bne.w	8006840 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4618      	mov	r0, r3
 800665a:	f003 f9f1 	bl	8009a40 <USB_ReadInterrupts>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 80ec 	beq.w	800683e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4618      	mov	r0, r3
 800666c:	f003 f9e8 	bl	8009a40 <USB_ReadInterrupts>
 8006670:	4603      	mov	r3, r0
 8006672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006676:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800667a:	d104      	bne.n	8006686 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006684:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4618      	mov	r0, r3
 800668c:	f003 f9d8 	bl	8009a40 <USB_ReadInterrupts>
 8006690:	4603      	mov	r3, r0
 8006692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800669a:	d104      	bne.n	80066a6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80066a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f003 f9c8 	bl	8009a40 <USB_ReadInterrupts>
 80066b0:	4603      	mov	r3, r0
 80066b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066ba:	d104      	bne.n	80066c6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80066c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f003 f9b8 	bl	8009a40 <USB_ReadInterrupts>
 80066d0:	4603      	mov	r3, r0
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d103      	bne.n	80066e2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2202      	movs	r2, #2
 80066e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f003 f9aa 	bl	8009a40 <USB_ReadInterrupts>
 80066ec:	4603      	mov	r3, r0
 80066ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066f6:	d11c      	bne.n	8006732 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006700:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10f      	bne.n	8006732 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8006712:	2110      	movs	r1, #16
 8006714:	6938      	ldr	r0, [r7, #16]
 8006716:	f003 f8b9 	bl	800988c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800671a:	6938      	ldr	r0, [r7, #16]
 800671c:	f003 f8da 	bl	80098d4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2101      	movs	r1, #1
 8006726:	4618      	mov	r0, r3
 8006728:	f003 fa92 	bl	8009c50 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f012 fc55 	bl	8018fdc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4618      	mov	r0, r3
 8006738:	f003 f982 	bl	8009a40 <USB_ReadInterrupts>
 800673c:	4603      	mov	r3, r0
 800673e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006742:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006746:	d102      	bne.n	800674e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f001 fa03 	bl	8007b54 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4618      	mov	r0, r3
 8006754:	f003 f974 	bl	8009a40 <USB_ReadInterrupts>
 8006758:	4603      	mov	r3, r0
 800675a:	f003 0308 	and.w	r3, r3, #8
 800675e:	2b08      	cmp	r3, #8
 8006760:	d106      	bne.n	8006770 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f012 fc1e 	bl	8018fa4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2208      	movs	r2, #8
 800676e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4618      	mov	r0, r3
 8006776:	f003 f963 	bl	8009a40 <USB_ReadInterrupts>
 800677a:	4603      	mov	r3, r0
 800677c:	f003 0310 	and.w	r3, r3, #16
 8006780:	2b10      	cmp	r3, #16
 8006782:	d101      	bne.n	8006788 <HAL_HCD_IRQHandler+0x158>
 8006784:	2301      	movs	r3, #1
 8006786:	e000      	b.n	800678a <HAL_HCD_IRQHandler+0x15a>
 8006788:	2300      	movs	r3, #0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d012      	beq.n	80067b4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	699a      	ldr	r2, [r3, #24]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0210 	bic.w	r2, r2, #16
 800679c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f001 f906 	bl	80079b0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	699a      	ldr	r2, [r3, #24]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0210 	orr.w	r2, r2, #16
 80067b2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f003 f941 	bl	8009a40 <USB_ReadInterrupts>
 80067be:	4603      	mov	r3, r0
 80067c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067c8:	d13a      	bne.n	8006840 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f003 fd54 	bl	800a27c <USB_HC_ReadInterrupt>
 80067d4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80067d6:	2300      	movs	r3, #0
 80067d8:	617b      	str	r3, [r7, #20]
 80067da:	e025      	b.n	8006828 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	fa22 f303 	lsr.w	r3, r2, r3
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d018      	beq.n	8006822 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006806:	d106      	bne.n	8006816 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	b2db      	uxtb	r3, r3
 800680c:	4619      	mov	r1, r3
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f8ab 	bl	800696a <HCD_HC_IN_IRQHandler>
 8006814:	e005      	b.n	8006822 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	b2db      	uxtb	r3, r3
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fcc6 	bl	80071ae <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	3301      	adds	r3, #1
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	429a      	cmp	r2, r3
 8006830:	d3d4      	bcc.n	80067dc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800683a:	615a      	str	r2, [r3, #20]
 800683c:	e000      	b.n	8006840 <HAL_HCD_IRQHandler+0x210>
      return;
 800683e:	bf00      	nop
    }
  }
}
 8006840:	3718      	adds	r7, #24
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b082      	sub	sp, #8
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006854:	2b01      	cmp	r3, #1
 8006856:	d101      	bne.n	800685c <HAL_HCD_Start+0x16>
 8006858:	2302      	movs	r3, #2
 800685a:	e013      	b.n	8006884 <HAL_HCD_Start+0x3e>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2101      	movs	r1, #1
 800686a:	4618      	mov	r0, r3
 800686c:	f003 fa54 	bl	8009d18 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4618      	mov	r0, r3
 8006876:	f002 ff9a 	bl	80097ae <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800689a:	2b01      	cmp	r3, #1
 800689c:	d101      	bne.n	80068a2 <HAL_HCD_Stop+0x16>
 800689e:	2302      	movs	r3, #2
 80068a0:	e00d      	b.n	80068be <HAL_HCD_Stop+0x32>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f003 fe4e 	bl	800a550 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b082      	sub	sp, #8
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f003 f9f6 	bl	8009cc4 <USB_ResetPort>
 80068d8:	4603      	mov	r3, r0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	460b      	mov	r3, r1
 80068ec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80068ee:	78fb      	ldrb	r3, [r7, #3]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	212c      	movs	r1, #44	; 0x2c
 80068f4:	fb01 f303 	mul.w	r3, r1, r3
 80068f8:	4413      	add	r3, r2
 80068fa:	3360      	adds	r3, #96	; 0x60
 80068fc:	781b      	ldrb	r3, [r3, #0]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800690a:	b480      	push	{r7}
 800690c:	b083      	sub	sp, #12
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	460b      	mov	r3, r1
 8006914:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006916:	78fb      	ldrb	r3, [r7, #3]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	212c      	movs	r1, #44	; 0x2c
 800691c:	fb01 f303 	mul.w	r3, r1, r3
 8006920:	4413      	add	r3, r2
 8006922:	3350      	adds	r3, #80	; 0x50
 8006924:	681b      	ldr	r3, [r3, #0]
}
 8006926:	4618      	mov	r0, r3
 8006928:	370c      	adds	r7, #12
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr

08006932 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b082      	sub	sp, #8
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4618      	mov	r0, r3
 8006940:	f003 fa3a 	bl	8009db8 <USB_GetCurrentFrame>
 8006944:	4603      	mov	r3, r0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b082      	sub	sp, #8
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4618      	mov	r0, r3
 800695c:	f003 fa15 	bl	8009d8a <USB_GetHostSpeed>
 8006960:	4603      	mov	r3, r0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b086      	sub	sp, #24
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
 8006972:	460b      	mov	r3, r1
 8006974:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006980:	78fb      	ldrb	r3, [r7, #3]
 8006982:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	4413      	add	r3, r2
 800698c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f003 0304 	and.w	r3, r3, #4
 8006996:	2b04      	cmp	r3, #4
 8006998:	d119      	bne.n	80069ce <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a6:	461a      	mov	r2, r3
 80069a8:	2304      	movs	r3, #4
 80069aa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	0151      	lsls	r1, r2, #5
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	440a      	add	r2, r1
 80069c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069c6:	f043 0302 	orr.w	r3, r3, #2
 80069ca:	60d3      	str	r3, [r2, #12]
 80069cc:	e101      	b.n	8006bd2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	015a      	lsls	r2, r3, #5
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069e4:	d12b      	bne.n	8006a3e <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f2:	461a      	mov	r2, r3
 80069f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	212c      	movs	r1, #44	; 0x2c
 8006a00:	fb01 f303 	mul.w	r3, r1, r3
 8006a04:	4413      	add	r3, r2
 8006a06:	3361      	adds	r3, #97	; 0x61
 8006a08:	2207      	movs	r2, #7
 8006a0a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	0151      	lsls	r1, r2, #5
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	440a      	add	r2, r1
 8006a22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a26:	f043 0302 	orr.w	r3, r3, #2
 8006a2a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	4611      	mov	r1, r2
 8006a36:	4618      	mov	r0, r3
 8006a38:	f003 fc31 	bl	800a29e <USB_HC_Halt>
 8006a3c:	e0c9      	b.n	8006bd2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f003 0320 	and.w	r3, r3, #32
 8006a50:	2b20      	cmp	r3, #32
 8006a52:	d109      	bne.n	8006a68 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a60:	461a      	mov	r2, r3
 8006a62:	2320      	movs	r3, #32
 8006a64:	6093      	str	r3, [r2, #8]
 8006a66:	e0b4      	b.n	8006bd2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f003 0308 	and.w	r3, r3, #8
 8006a7a:	2b08      	cmp	r3, #8
 8006a7c:	d133      	bne.n	8006ae6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	0151      	lsls	r1, r2, #5
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	440a      	add	r2, r1
 8006a94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a98:	f043 0302 	orr.w	r3, r3, #2
 8006a9c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	212c      	movs	r1, #44	; 0x2c
 8006aa4:	fb01 f303 	mul.w	r3, r1, r3
 8006aa8:	4413      	add	r3, r2
 8006aaa:	3361      	adds	r3, #97	; 0x61
 8006aac:	2205      	movs	r2, #5
 8006aae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006abc:	461a      	mov	r2, r3
 8006abe:	2310      	movs	r3, #16
 8006ac0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	015a      	lsls	r2, r3, #5
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ace:	461a      	mov	r2, r3
 8006ad0:	2308      	movs	r3, #8
 8006ad2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	b2d2      	uxtb	r2, r2
 8006adc:	4611      	mov	r1, r2
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f003 fbdd 	bl	800a29e <USB_HC_Halt>
 8006ae4:	e075      	b.n	8006bd2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	015a      	lsls	r2, r3, #5
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006afc:	d134      	bne.n	8006b68 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	0151      	lsls	r1, r2, #5
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	440a      	add	r2, r1
 8006b14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b18:	f043 0302 	orr.w	r3, r3, #2
 8006b1c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	212c      	movs	r1, #44	; 0x2c
 8006b24:	fb01 f303 	mul.w	r3, r1, r3
 8006b28:	4413      	add	r3, r2
 8006b2a:	3361      	adds	r3, #97	; 0x61
 8006b2c:	2208      	movs	r2, #8
 8006b2e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	015a      	lsls	r2, r3, #5
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	4413      	add	r3, r2
 8006b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	2310      	movs	r3, #16
 8006b40:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	015a      	lsls	r2, r3, #5
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	4413      	add	r3, r2
 8006b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b54:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	b2d2      	uxtb	r2, r2
 8006b5e:	4611      	mov	r1, r2
 8006b60:	4618      	mov	r0, r3
 8006b62:	f003 fb9c 	bl	800a29e <USB_HC_Halt>
 8006b66:	e034      	b.n	8006bd2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b7a:	2b80      	cmp	r3, #128	; 0x80
 8006b7c:	d129      	bne.n	8006bd2 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	0151      	lsls	r1, r2, #5
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	440a      	add	r2, r1
 8006b94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b98:	f043 0302 	orr.w	r3, r3, #2
 8006b9c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	212c      	movs	r1, #44	; 0x2c
 8006ba4:	fb01 f303 	mul.w	r3, r1, r3
 8006ba8:	4413      	add	r3, r2
 8006baa:	3361      	adds	r3, #97	; 0x61
 8006bac:	2206      	movs	r2, #6
 8006bae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	b2d2      	uxtb	r2, r2
 8006bb8:	4611      	mov	r1, r2
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f003 fb6f 	bl	800a29e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bcc:	461a      	mov	r2, r3
 8006bce:	2380      	movs	r3, #128	; 0x80
 8006bd0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	015a      	lsls	r2, r3, #5
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	4413      	add	r3, r2
 8006bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006be8:	d122      	bne.n	8006c30 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	015a      	lsls	r2, r3, #5
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	0151      	lsls	r1, r2, #5
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	440a      	add	r2, r1
 8006c00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c04:	f043 0302 	orr.w	r3, r3, #2
 8006c08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	b2d2      	uxtb	r2, r2
 8006c12:	4611      	mov	r1, r2
 8006c14:	4618      	mov	r0, r3
 8006c16:	f003 fb42 	bl	800a29e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c26:	461a      	mov	r2, r3
 8006c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c2c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8006c2e:	e2ba      	b.n	80071a6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f003 0301 	and.w	r3, r3, #1
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	f040 811b 	bne.w	8006e7e <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d019      	beq.n	8006c84 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	212c      	movs	r1, #44	; 0x2c
 8006c56:	fb01 f303 	mul.w	r3, r1, r3
 8006c5a:	4413      	add	r3, r2
 8006c5c:	3348      	adds	r3, #72	; 0x48
 8006c5e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	0159      	lsls	r1, r3, #5
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	440b      	add	r3, r1
 8006c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006c72:	1ad2      	subs	r2, r2, r3
 8006c74:	6879      	ldr	r1, [r7, #4]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	202c      	movs	r0, #44	; 0x2c
 8006c7a:	fb00 f303 	mul.w	r3, r0, r3
 8006c7e:	440b      	add	r3, r1
 8006c80:	3350      	adds	r3, #80	; 0x50
 8006c82:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	212c      	movs	r1, #44	; 0x2c
 8006c8a:	fb01 f303 	mul.w	r3, r1, r3
 8006c8e:	4413      	add	r3, r2
 8006c90:	3361      	adds	r3, #97	; 0x61
 8006c92:	2201      	movs	r2, #1
 8006c94:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	212c      	movs	r1, #44	; 0x2c
 8006c9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ca0:	4413      	add	r3, r2
 8006ca2:	335c      	adds	r3, #92	; 0x5c
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	212c      	movs	r1, #44	; 0x2c
 8006cc0:	fb01 f303 	mul.w	r3, r1, r3
 8006cc4:	4413      	add	r3, r2
 8006cc6:	333f      	adds	r3, #63	; 0x3f
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d009      	beq.n	8006ce2 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	212c      	movs	r1, #44	; 0x2c
 8006cd4:	fb01 f303 	mul.w	r3, r1, r3
 8006cd8:	4413      	add	r3, r2
 8006cda:	333f      	adds	r3, #63	; 0x3f
 8006cdc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d121      	bne.n	8006d26 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	0151      	lsls	r1, r2, #5
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	440a      	add	r2, r1
 8006cf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cfc:	f043 0302 	orr.w	r3, r3, #2
 8006d00:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	b2d2      	uxtb	r2, r2
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f003 fac6 	bl	800a29e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	015a      	lsls	r2, r3, #5
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d1e:	461a      	mov	r2, r3
 8006d20:	2310      	movs	r3, #16
 8006d22:	6093      	str	r3, [r2, #8]
 8006d24:	e066      	b.n	8006df4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	212c      	movs	r1, #44	; 0x2c
 8006d2c:	fb01 f303 	mul.w	r3, r1, r3
 8006d30:	4413      	add	r3, r2
 8006d32:	333f      	adds	r3, #63	; 0x3f
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d127      	bne.n	8006d8a <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	015a      	lsls	r2, r3, #5
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	0151      	lsls	r1, r2, #5
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	440a      	add	r2, r1
 8006d50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d58:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	212c      	movs	r1, #44	; 0x2c
 8006d60:	fb01 f303 	mul.w	r3, r1, r3
 8006d64:	4413      	add	r3, r2
 8006d66:	3360      	adds	r3, #96	; 0x60
 8006d68:	2201      	movs	r2, #1
 8006d6a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	b2d9      	uxtb	r1, r3
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	202c      	movs	r0, #44	; 0x2c
 8006d76:	fb00 f303 	mul.w	r3, r0, r3
 8006d7a:	4413      	add	r3, r2
 8006d7c:	3360      	adds	r3, #96	; 0x60
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	461a      	mov	r2, r3
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f012 f938 	bl	8018ff8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006d88:	e034      	b.n	8006df4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	212c      	movs	r1, #44	; 0x2c
 8006d90:	fb01 f303 	mul.w	r3, r1, r3
 8006d94:	4413      	add	r3, r2
 8006d96:	333f      	adds	r3, #63	; 0x3f
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d12a      	bne.n	8006df4 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	212c      	movs	r1, #44	; 0x2c
 8006da4:	fb01 f303 	mul.w	r3, r1, r3
 8006da8:	4413      	add	r3, r2
 8006daa:	3360      	adds	r3, #96	; 0x60
 8006dac:	2201      	movs	r2, #1
 8006dae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	212c      	movs	r1, #44	; 0x2c
 8006db6:	fb01 f303 	mul.w	r3, r1, r3
 8006dba:	4413      	add	r3, r2
 8006dbc:	3354      	adds	r3, #84	; 0x54
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	f083 0301 	eor.w	r3, r3, #1
 8006dc4:	b2d8      	uxtb	r0, r3
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	212c      	movs	r1, #44	; 0x2c
 8006dcc:	fb01 f303 	mul.w	r3, r1, r3
 8006dd0:	4413      	add	r3, r2
 8006dd2:	3354      	adds	r3, #84	; 0x54
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	b2d9      	uxtb	r1, r3
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	202c      	movs	r0, #44	; 0x2c
 8006de2:	fb00 f303 	mul.w	r3, r0, r3
 8006de6:	4413      	add	r3, r2
 8006de8:	3360      	adds	r3, #96	; 0x60
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	461a      	mov	r2, r3
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f012 f902 	bl	8018ff8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d12b      	bne.n	8006e54 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	212c      	movs	r1, #44	; 0x2c
 8006e02:	fb01 f303 	mul.w	r3, r1, r3
 8006e06:	4413      	add	r3, r2
 8006e08:	3348      	adds	r3, #72	; 0x48
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6879      	ldr	r1, [r7, #4]
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	202c      	movs	r0, #44	; 0x2c
 8006e12:	fb00 f202 	mul.w	r2, r0, r2
 8006e16:	440a      	add	r2, r1
 8006e18:	3240      	adds	r2, #64	; 0x40
 8006e1a:	8812      	ldrh	r2, [r2, #0]
 8006e1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e20:	f003 0301 	and.w	r3, r3, #1
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 81be 	beq.w	80071a6 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	212c      	movs	r1, #44	; 0x2c
 8006e30:	fb01 f303 	mul.w	r3, r1, r3
 8006e34:	4413      	add	r3, r2
 8006e36:	3354      	adds	r3, #84	; 0x54
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	f083 0301 	eor.w	r3, r3, #1
 8006e3e:	b2d8      	uxtb	r0, r3
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	212c      	movs	r1, #44	; 0x2c
 8006e46:	fb01 f303 	mul.w	r3, r1, r3
 8006e4a:	4413      	add	r3, r2
 8006e4c:	3354      	adds	r3, #84	; 0x54
 8006e4e:	4602      	mov	r2, r0
 8006e50:	701a      	strb	r2, [r3, #0]
}
 8006e52:	e1a8      	b.n	80071a6 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	212c      	movs	r1, #44	; 0x2c
 8006e5a:	fb01 f303 	mul.w	r3, r1, r3
 8006e5e:	4413      	add	r3, r2
 8006e60:	3354      	adds	r3, #84	; 0x54
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	f083 0301 	eor.w	r3, r3, #1
 8006e68:	b2d8      	uxtb	r0, r3
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	212c      	movs	r1, #44	; 0x2c
 8006e70:	fb01 f303 	mul.w	r3, r1, r3
 8006e74:	4413      	add	r3, r2
 8006e76:	3354      	adds	r3, #84	; 0x54
 8006e78:	4602      	mov	r2, r0
 8006e7a:	701a      	strb	r2, [r3, #0]
}
 8006e7c:	e193      	b.n	80071a6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	015a      	lsls	r2, r3, #5
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f003 0302 	and.w	r3, r3, #2
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	f040 8106 	bne.w	80070a2 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	0151      	lsls	r1, r2, #5
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	440a      	add	r2, r1
 8006eac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eb0:	f023 0302 	bic.w	r3, r3, #2
 8006eb4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	212c      	movs	r1, #44	; 0x2c
 8006ebc:	fb01 f303 	mul.w	r3, r1, r3
 8006ec0:	4413      	add	r3, r2
 8006ec2:	3361      	adds	r3, #97	; 0x61
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d109      	bne.n	8006ede <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	212c      	movs	r1, #44	; 0x2c
 8006ed0:	fb01 f303 	mul.w	r3, r1, r3
 8006ed4:	4413      	add	r3, r2
 8006ed6:	3360      	adds	r3, #96	; 0x60
 8006ed8:	2201      	movs	r2, #1
 8006eda:	701a      	strb	r2, [r3, #0]
 8006edc:	e0c9      	b.n	8007072 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	212c      	movs	r1, #44	; 0x2c
 8006ee4:	fb01 f303 	mul.w	r3, r1, r3
 8006ee8:	4413      	add	r3, r2
 8006eea:	3361      	adds	r3, #97	; 0x61
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	2b05      	cmp	r3, #5
 8006ef0:	d109      	bne.n	8006f06 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	212c      	movs	r1, #44	; 0x2c
 8006ef8:	fb01 f303 	mul.w	r3, r1, r3
 8006efc:	4413      	add	r3, r2
 8006efe:	3360      	adds	r3, #96	; 0x60
 8006f00:	2205      	movs	r2, #5
 8006f02:	701a      	strb	r2, [r3, #0]
 8006f04:	e0b5      	b.n	8007072 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	212c      	movs	r1, #44	; 0x2c
 8006f0c:	fb01 f303 	mul.w	r3, r1, r3
 8006f10:	4413      	add	r3, r2
 8006f12:	3361      	adds	r3, #97	; 0x61
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	2b06      	cmp	r3, #6
 8006f18:	d009      	beq.n	8006f2e <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	212c      	movs	r1, #44	; 0x2c
 8006f20:	fb01 f303 	mul.w	r3, r1, r3
 8006f24:	4413      	add	r3, r2
 8006f26:	3361      	adds	r3, #97	; 0x61
 8006f28:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006f2a:	2b08      	cmp	r3, #8
 8006f2c:	d150      	bne.n	8006fd0 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	212c      	movs	r1, #44	; 0x2c
 8006f34:	fb01 f303 	mul.w	r3, r1, r3
 8006f38:	4413      	add	r3, r2
 8006f3a:	335c      	adds	r3, #92	; 0x5c
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	1c5a      	adds	r2, r3, #1
 8006f40:	6879      	ldr	r1, [r7, #4]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	202c      	movs	r0, #44	; 0x2c
 8006f46:	fb00 f303 	mul.w	r3, r0, r3
 8006f4a:	440b      	add	r3, r1
 8006f4c:	335c      	adds	r3, #92	; 0x5c
 8006f4e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	212c      	movs	r1, #44	; 0x2c
 8006f56:	fb01 f303 	mul.w	r3, r1, r3
 8006f5a:	4413      	add	r3, r2
 8006f5c:	335c      	adds	r3, #92	; 0x5c
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d912      	bls.n	8006f8a <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	212c      	movs	r1, #44	; 0x2c
 8006f6a:	fb01 f303 	mul.w	r3, r1, r3
 8006f6e:	4413      	add	r3, r2
 8006f70:	335c      	adds	r3, #92	; 0x5c
 8006f72:	2200      	movs	r2, #0
 8006f74:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	212c      	movs	r1, #44	; 0x2c
 8006f7c:	fb01 f303 	mul.w	r3, r1, r3
 8006f80:	4413      	add	r3, r2
 8006f82:	3360      	adds	r3, #96	; 0x60
 8006f84:	2204      	movs	r2, #4
 8006f86:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006f88:	e073      	b.n	8007072 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	212c      	movs	r1, #44	; 0x2c
 8006f90:	fb01 f303 	mul.w	r3, r1, r3
 8006f94:	4413      	add	r3, r2
 8006f96:	3360      	adds	r3, #96	; 0x60
 8006f98:	2202      	movs	r2, #2
 8006f9a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	015a      	lsls	r2, r3, #5
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006fb2:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fba:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fc8:	461a      	mov	r2, r3
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006fce:	e050      	b.n	8007072 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	212c      	movs	r1, #44	; 0x2c
 8006fd6:	fb01 f303 	mul.w	r3, r1, r3
 8006fda:	4413      	add	r3, r2
 8006fdc:	3361      	adds	r3, #97	; 0x61
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2b03      	cmp	r3, #3
 8006fe2:	d122      	bne.n	800702a <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	212c      	movs	r1, #44	; 0x2c
 8006fea:	fb01 f303 	mul.w	r3, r1, r3
 8006fee:	4413      	add	r3, r2
 8006ff0:	3360      	adds	r3, #96	; 0x60
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	015a      	lsls	r2, r3, #5
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800700c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007014:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	015a      	lsls	r2, r3, #5
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	4413      	add	r3, r2
 800701e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007022:	461a      	mov	r2, r3
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	6013      	str	r3, [r2, #0]
 8007028:	e023      	b.n	8007072 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	212c      	movs	r1, #44	; 0x2c
 8007030:	fb01 f303 	mul.w	r3, r1, r3
 8007034:	4413      	add	r3, r2
 8007036:	3361      	adds	r3, #97	; 0x61
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	2b07      	cmp	r3, #7
 800703c:	d119      	bne.n	8007072 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	212c      	movs	r1, #44	; 0x2c
 8007044:	fb01 f303 	mul.w	r3, r1, r3
 8007048:	4413      	add	r3, r2
 800704a:	335c      	adds	r3, #92	; 0x5c
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	1c5a      	adds	r2, r3, #1
 8007050:	6879      	ldr	r1, [r7, #4]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	202c      	movs	r0, #44	; 0x2c
 8007056:	fb00 f303 	mul.w	r3, r0, r3
 800705a:	440b      	add	r3, r1
 800705c:	335c      	adds	r3, #92	; 0x5c
 800705e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	212c      	movs	r1, #44	; 0x2c
 8007066:	fb01 f303 	mul.w	r3, r1, r3
 800706a:	4413      	add	r3, r2
 800706c:	3360      	adds	r3, #96	; 0x60
 800706e:	2204      	movs	r2, #4
 8007070:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	4413      	add	r3, r2
 800707a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800707e:	461a      	mov	r2, r3
 8007080:	2302      	movs	r3, #2
 8007082:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	b2d9      	uxtb	r1, r3
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	202c      	movs	r0, #44	; 0x2c
 800708e:	fb00 f303 	mul.w	r3, r0, r3
 8007092:	4413      	add	r3, r2
 8007094:	3360      	adds	r3, #96	; 0x60
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	461a      	mov	r2, r3
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f011 ffac 	bl	8018ff8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80070a0:	e081      	b.n	80071a6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f003 0310 	and.w	r3, r3, #16
 80070b4:	2b10      	cmp	r3, #16
 80070b6:	d176      	bne.n	80071a6 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	212c      	movs	r1, #44	; 0x2c
 80070be:	fb01 f303 	mul.w	r3, r1, r3
 80070c2:	4413      	add	r3, r2
 80070c4:	333f      	adds	r3, #63	; 0x3f
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	d121      	bne.n	8007110 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	212c      	movs	r1, #44	; 0x2c
 80070d2:	fb01 f303 	mul.w	r3, r1, r3
 80070d6:	4413      	add	r3, r2
 80070d8:	335c      	adds	r3, #92	; 0x5c
 80070da:	2200      	movs	r2, #0
 80070dc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	0151      	lsls	r1, r2, #5
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	440a      	add	r2, r1
 80070f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070f8:	f043 0302 	orr.w	r3, r3, #2
 80070fc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	b2d2      	uxtb	r2, r2
 8007106:	4611      	mov	r1, r2
 8007108:	4618      	mov	r0, r3
 800710a:	f003 f8c8 	bl	800a29e <USB_HC_Halt>
 800710e:	e041      	b.n	8007194 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	212c      	movs	r1, #44	; 0x2c
 8007116:	fb01 f303 	mul.w	r3, r1, r3
 800711a:	4413      	add	r3, r2
 800711c:	333f      	adds	r3, #63	; 0x3f
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d009      	beq.n	8007138 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	212c      	movs	r1, #44	; 0x2c
 800712a:	fb01 f303 	mul.w	r3, r1, r3
 800712e:	4413      	add	r3, r2
 8007130:	333f      	adds	r3, #63	; 0x3f
 8007132:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007134:	2b02      	cmp	r3, #2
 8007136:	d12d      	bne.n	8007194 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	212c      	movs	r1, #44	; 0x2c
 800713e:	fb01 f303 	mul.w	r3, r1, r3
 8007142:	4413      	add	r3, r2
 8007144:	335c      	adds	r3, #92	; 0x5c
 8007146:	2200      	movs	r2, #0
 8007148:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d120      	bne.n	8007194 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	212c      	movs	r1, #44	; 0x2c
 8007158:	fb01 f303 	mul.w	r3, r1, r3
 800715c:	4413      	add	r3, r2
 800715e:	3361      	adds	r3, #97	; 0x61
 8007160:	2203      	movs	r2, #3
 8007162:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	4413      	add	r3, r2
 800716c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	0151      	lsls	r1, r2, #5
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	440a      	add	r2, r1
 800717a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800717e:	f043 0302 	orr.w	r3, r3, #2
 8007182:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	b2d2      	uxtb	r2, r2
 800718c:	4611      	mov	r1, r2
 800718e:	4618      	mov	r0, r3
 8007190:	f003 f885 	bl	800a29e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	4413      	add	r3, r2
 800719c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071a0:	461a      	mov	r2, r3
 80071a2:	2310      	movs	r3, #16
 80071a4:	6093      	str	r3, [r2, #8]
}
 80071a6:	bf00      	nop
 80071a8:	3718      	adds	r7, #24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b088      	sub	sp, #32
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
 80071b6:	460b      	mov	r3, r1
 80071b8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80071c4:	78fb      	ldrb	r3, [r7, #3]
 80071c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f003 0304 	and.w	r3, r3, #4
 80071da:	2b04      	cmp	r3, #4
 80071dc:	d119      	bne.n	8007212 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	015a      	lsls	r2, r3, #5
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	4413      	add	r3, r2
 80071e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ea:	461a      	mov	r2, r3
 80071ec:	2304      	movs	r3, #4
 80071ee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	015a      	lsls	r2, r3, #5
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	4413      	add	r3, r2
 80071f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	0151      	lsls	r1, r2, #5
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	440a      	add	r2, r1
 8007206:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800720a:	f043 0302 	orr.w	r3, r3, #2
 800720e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8007210:	e3ca      	b.n	80079a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	015a      	lsls	r2, r3, #5
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	4413      	add	r3, r2
 800721a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f003 0320 	and.w	r3, r3, #32
 8007224:	2b20      	cmp	r3, #32
 8007226:	d13e      	bne.n	80072a6 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	4413      	add	r3, r2
 8007230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007234:	461a      	mov	r2, r3
 8007236:	2320      	movs	r3, #32
 8007238:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	212c      	movs	r1, #44	; 0x2c
 8007240:	fb01 f303 	mul.w	r3, r1, r3
 8007244:	4413      	add	r3, r2
 8007246:	333d      	adds	r3, #61	; 0x3d
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	2b01      	cmp	r3, #1
 800724c:	f040 83ac 	bne.w	80079a8 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	212c      	movs	r1, #44	; 0x2c
 8007256:	fb01 f303 	mul.w	r3, r1, r3
 800725a:	4413      	add	r3, r2
 800725c:	333d      	adds	r3, #61	; 0x3d
 800725e:	2200      	movs	r2, #0
 8007260:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	212c      	movs	r1, #44	; 0x2c
 8007268:	fb01 f303 	mul.w	r3, r1, r3
 800726c:	4413      	add	r3, r2
 800726e:	3360      	adds	r3, #96	; 0x60
 8007270:	2202      	movs	r2, #2
 8007272:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	4413      	add	r3, r2
 800727c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	0151      	lsls	r1, r2, #5
 8007286:	69ba      	ldr	r2, [r7, #24]
 8007288:	440a      	add	r2, r1
 800728a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800728e:	f043 0302 	orr.w	r3, r3, #2
 8007292:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	b2d2      	uxtb	r2, r2
 800729c:	4611      	mov	r1, r2
 800729e:	4618      	mov	r0, r3
 80072a0:	f002 fffd 	bl	800a29e <USB_HC_Halt>
}
 80072a4:	e380      	b.n	80079a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	015a      	lsls	r2, r3, #5
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072bc:	d122      	bne.n	8007304 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	0151      	lsls	r1, r2, #5
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	440a      	add	r2, r1
 80072d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072d8:	f043 0302 	orr.w	r3, r3, #2
 80072dc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	b2d2      	uxtb	r2, r2
 80072e6:	4611      	mov	r1, r2
 80072e8:	4618      	mov	r0, r3
 80072ea:	f002 ffd8 	bl	800a29e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072fa:	461a      	mov	r2, r3
 80072fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007300:	6093      	str	r3, [r2, #8]
}
 8007302:	e351      	b.n	80079a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	4413      	add	r3, r2
 800730c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	2b01      	cmp	r3, #1
 8007318:	d150      	bne.n	80073bc <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	212c      	movs	r1, #44	; 0x2c
 8007320:	fb01 f303 	mul.w	r3, r1, r3
 8007324:	4413      	add	r3, r2
 8007326:	335c      	adds	r3, #92	; 0x5c
 8007328:	2200      	movs	r2, #0
 800732a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	4413      	add	r3, r2
 8007334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733e:	2b40      	cmp	r3, #64	; 0x40
 8007340:	d111      	bne.n	8007366 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	212c      	movs	r1, #44	; 0x2c
 8007348:	fb01 f303 	mul.w	r3, r1, r3
 800734c:	4413      	add	r3, r2
 800734e:	333d      	adds	r3, #61	; 0x3d
 8007350:	2201      	movs	r2, #1
 8007352:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	4413      	add	r3, r2
 800735c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007360:	461a      	mov	r2, r3
 8007362:	2340      	movs	r3, #64	; 0x40
 8007364:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	015a      	lsls	r2, r3, #5
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	4413      	add	r3, r2
 800736e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	0151      	lsls	r1, r2, #5
 8007378:	69ba      	ldr	r2, [r7, #24]
 800737a:	440a      	add	r2, r1
 800737c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007380:	f043 0302 	orr.w	r3, r3, #2
 8007384:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	b2d2      	uxtb	r2, r2
 800738e:	4611      	mov	r1, r2
 8007390:	4618      	mov	r0, r3
 8007392:	f002 ff84 	bl	800a29e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	4413      	add	r3, r2
 800739e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073a2:	461a      	mov	r2, r3
 80073a4:	2301      	movs	r3, #1
 80073a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	212c      	movs	r1, #44	; 0x2c
 80073ae:	fb01 f303 	mul.w	r3, r1, r3
 80073b2:	4413      	add	r3, r2
 80073b4:	3361      	adds	r3, #97	; 0x61
 80073b6:	2201      	movs	r2, #1
 80073b8:	701a      	strb	r2, [r3, #0]
}
 80073ba:	e2f5      	b.n	80079a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ce:	2b40      	cmp	r3, #64	; 0x40
 80073d0:	d13c      	bne.n	800744c <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	212c      	movs	r1, #44	; 0x2c
 80073d8:	fb01 f303 	mul.w	r3, r1, r3
 80073dc:	4413      	add	r3, r2
 80073de:	3361      	adds	r3, #97	; 0x61
 80073e0:	2204      	movs	r2, #4
 80073e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	212c      	movs	r1, #44	; 0x2c
 80073ea:	fb01 f303 	mul.w	r3, r1, r3
 80073ee:	4413      	add	r3, r2
 80073f0:	333d      	adds	r3, #61	; 0x3d
 80073f2:	2201      	movs	r2, #1
 80073f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	212c      	movs	r1, #44	; 0x2c
 80073fc:	fb01 f303 	mul.w	r3, r1, r3
 8007400:	4413      	add	r3, r2
 8007402:	335c      	adds	r3, #92	; 0x5c
 8007404:	2200      	movs	r2, #0
 8007406:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	4413      	add	r3, r2
 8007410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	0151      	lsls	r1, r2, #5
 800741a:	69ba      	ldr	r2, [r7, #24]
 800741c:	440a      	add	r2, r1
 800741e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007422:	f043 0302 	orr.w	r3, r3, #2
 8007426:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	b2d2      	uxtb	r2, r2
 8007430:	4611      	mov	r1, r2
 8007432:	4618      	mov	r0, r3
 8007434:	f002 ff33 	bl	800a29e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	4413      	add	r3, r2
 8007440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007444:	461a      	mov	r2, r3
 8007446:	2340      	movs	r3, #64	; 0x40
 8007448:	6093      	str	r3, [r2, #8]
}
 800744a:	e2ad      	b.n	80079a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	4413      	add	r3, r2
 8007454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f003 0308 	and.w	r3, r3, #8
 800745e:	2b08      	cmp	r3, #8
 8007460:	d12a      	bne.n	80074b8 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	4413      	add	r3, r2
 800746a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800746e:	461a      	mov	r2, r3
 8007470:	2308      	movs	r3, #8
 8007472:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	4413      	add	r3, r2
 800747c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	0151      	lsls	r1, r2, #5
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	440a      	add	r2, r1
 800748a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800748e:	f043 0302 	orr.w	r3, r3, #2
 8007492:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	b2d2      	uxtb	r2, r2
 800749c:	4611      	mov	r1, r2
 800749e:	4618      	mov	r0, r3
 80074a0:	f002 fefd 	bl	800a29e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	212c      	movs	r1, #44	; 0x2c
 80074aa:	fb01 f303 	mul.w	r3, r1, r3
 80074ae:	4413      	add	r3, r2
 80074b0:	3361      	adds	r3, #97	; 0x61
 80074b2:	2205      	movs	r2, #5
 80074b4:	701a      	strb	r2, [r3, #0]
}
 80074b6:	e277      	b.n	80079a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f003 0310 	and.w	r3, r3, #16
 80074ca:	2b10      	cmp	r3, #16
 80074cc:	d150      	bne.n	8007570 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	212c      	movs	r1, #44	; 0x2c
 80074d4:	fb01 f303 	mul.w	r3, r1, r3
 80074d8:	4413      	add	r3, r2
 80074da:	335c      	adds	r3, #92	; 0x5c
 80074dc:	2200      	movs	r2, #0
 80074de:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	212c      	movs	r1, #44	; 0x2c
 80074e6:	fb01 f303 	mul.w	r3, r1, r3
 80074ea:	4413      	add	r3, r2
 80074ec:	3361      	adds	r3, #97	; 0x61
 80074ee:	2203      	movs	r2, #3
 80074f0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	212c      	movs	r1, #44	; 0x2c
 80074f8:	fb01 f303 	mul.w	r3, r1, r3
 80074fc:	4413      	add	r3, r2
 80074fe:	333d      	adds	r3, #61	; 0x3d
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d112      	bne.n	800752c <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	212c      	movs	r1, #44	; 0x2c
 800750c:	fb01 f303 	mul.w	r3, r1, r3
 8007510:	4413      	add	r3, r2
 8007512:	333c      	adds	r3, #60	; 0x3c
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d108      	bne.n	800752c <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	212c      	movs	r1, #44	; 0x2c
 8007520:	fb01 f303 	mul.w	r3, r1, r3
 8007524:	4413      	add	r3, r2
 8007526:	333d      	adds	r3, #61	; 0x3d
 8007528:	2201      	movs	r2, #1
 800752a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	015a      	lsls	r2, r3, #5
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	4413      	add	r3, r2
 8007534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	0151      	lsls	r1, r2, #5
 800753e:	69ba      	ldr	r2, [r7, #24]
 8007540:	440a      	add	r2, r1
 8007542:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007546:	f043 0302 	orr.w	r3, r3, #2
 800754a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	b2d2      	uxtb	r2, r2
 8007554:	4611      	mov	r1, r2
 8007556:	4618      	mov	r0, r3
 8007558:	f002 fea1 	bl	800a29e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	015a      	lsls	r2, r3, #5
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	4413      	add	r3, r2
 8007564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007568:	461a      	mov	r2, r3
 800756a:	2310      	movs	r3, #16
 800756c:	6093      	str	r3, [r2, #8]
}
 800756e:	e21b      	b.n	80079a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	4413      	add	r3, r2
 8007578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007582:	2b80      	cmp	r3, #128	; 0x80
 8007584:	d174      	bne.n	8007670 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d121      	bne.n	80075d2 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	212c      	movs	r1, #44	; 0x2c
 8007594:	fb01 f303 	mul.w	r3, r1, r3
 8007598:	4413      	add	r3, r2
 800759a:	3361      	adds	r3, #97	; 0x61
 800759c:	2206      	movs	r2, #6
 800759e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	015a      	lsls	r2, r3, #5
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	0151      	lsls	r1, r2, #5
 80075b2:	69ba      	ldr	r2, [r7, #24]
 80075b4:	440a      	add	r2, r1
 80075b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075ba:	f043 0302 	orr.w	r3, r3, #2
 80075be:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	b2d2      	uxtb	r2, r2
 80075c8:	4611      	mov	r1, r2
 80075ca:	4618      	mov	r0, r3
 80075cc:	f002 fe67 	bl	800a29e <USB_HC_Halt>
 80075d0:	e044      	b.n	800765c <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	212c      	movs	r1, #44	; 0x2c
 80075d8:	fb01 f303 	mul.w	r3, r1, r3
 80075dc:	4413      	add	r3, r2
 80075de:	335c      	adds	r3, #92	; 0x5c
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	6879      	ldr	r1, [r7, #4]
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	202c      	movs	r0, #44	; 0x2c
 80075ea:	fb00 f303 	mul.w	r3, r0, r3
 80075ee:	440b      	add	r3, r1
 80075f0:	335c      	adds	r3, #92	; 0x5c
 80075f2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	212c      	movs	r1, #44	; 0x2c
 80075fa:	fb01 f303 	mul.w	r3, r1, r3
 80075fe:	4413      	add	r3, r2
 8007600:	335c      	adds	r3, #92	; 0x5c
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b02      	cmp	r3, #2
 8007606:	d920      	bls.n	800764a <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	212c      	movs	r1, #44	; 0x2c
 800760e:	fb01 f303 	mul.w	r3, r1, r3
 8007612:	4413      	add	r3, r2
 8007614:	335c      	adds	r3, #92	; 0x5c
 8007616:	2200      	movs	r2, #0
 8007618:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	212c      	movs	r1, #44	; 0x2c
 8007620:	fb01 f303 	mul.w	r3, r1, r3
 8007624:	4413      	add	r3, r2
 8007626:	3360      	adds	r3, #96	; 0x60
 8007628:	2204      	movs	r2, #4
 800762a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	b2d9      	uxtb	r1, r3
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	202c      	movs	r0, #44	; 0x2c
 8007636:	fb00 f303 	mul.w	r3, r0, r3
 800763a:	4413      	add	r3, r2
 800763c:	3360      	adds	r3, #96	; 0x60
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f011 fcd8 	bl	8018ff8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007648:	e008      	b.n	800765c <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	212c      	movs	r1, #44	; 0x2c
 8007650:	fb01 f303 	mul.w	r3, r1, r3
 8007654:	4413      	add	r3, r2
 8007656:	3360      	adds	r3, #96	; 0x60
 8007658:	2202      	movs	r2, #2
 800765a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	015a      	lsls	r2, r3, #5
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	4413      	add	r3, r2
 8007664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007668:	461a      	mov	r2, r3
 800766a:	2380      	movs	r3, #128	; 0x80
 800766c:	6093      	str	r3, [r2, #8]
}
 800766e:	e19b      	b.n	80079a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	4413      	add	r3, r2
 8007678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007686:	d134      	bne.n	80076f2 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	4413      	add	r3, r2
 8007690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	697a      	ldr	r2, [r7, #20]
 8007698:	0151      	lsls	r1, r2, #5
 800769a:	69ba      	ldr	r2, [r7, #24]
 800769c:	440a      	add	r2, r1
 800769e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076a2:	f043 0302 	orr.w	r3, r3, #2
 80076a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	b2d2      	uxtb	r2, r2
 80076b0:	4611      	mov	r1, r2
 80076b2:	4618      	mov	r0, r3
 80076b4:	f002 fdf3 	bl	800a29e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076c4:	461a      	mov	r2, r3
 80076c6:	2310      	movs	r3, #16
 80076c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	015a      	lsls	r2, r3, #5
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076d6:	461a      	mov	r2, r3
 80076d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	212c      	movs	r1, #44	; 0x2c
 80076e4:	fb01 f303 	mul.w	r3, r1, r3
 80076e8:	4413      	add	r3, r2
 80076ea:	3361      	adds	r3, #97	; 0x61
 80076ec:	2208      	movs	r2, #8
 80076ee:	701a      	strb	r2, [r3, #0]
}
 80076f0:	e15a      	b.n	80079a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	015a      	lsls	r2, r3, #5
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	4413      	add	r3, r2
 80076fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f003 0302 	and.w	r3, r3, #2
 8007704:	2b02      	cmp	r3, #2
 8007706:	f040 814f 	bne.w	80079a8 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	015a      	lsls	r2, r3, #5
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	4413      	add	r3, r2
 8007712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	0151      	lsls	r1, r2, #5
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	440a      	add	r2, r1
 8007720:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007724:	f023 0302 	bic.w	r3, r3, #2
 8007728:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	212c      	movs	r1, #44	; 0x2c
 8007730:	fb01 f303 	mul.w	r3, r1, r3
 8007734:	4413      	add	r3, r2
 8007736:	3361      	adds	r3, #97	; 0x61
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d17d      	bne.n	800783a <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	212c      	movs	r1, #44	; 0x2c
 8007744:	fb01 f303 	mul.w	r3, r1, r3
 8007748:	4413      	add	r3, r2
 800774a:	3360      	adds	r3, #96	; 0x60
 800774c:	2201      	movs	r2, #1
 800774e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	212c      	movs	r1, #44	; 0x2c
 8007756:	fb01 f303 	mul.w	r3, r1, r3
 800775a:	4413      	add	r3, r2
 800775c:	333f      	adds	r3, #63	; 0x3f
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	2b02      	cmp	r3, #2
 8007762:	d00a      	beq.n	800777a <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	212c      	movs	r1, #44	; 0x2c
 800776a:	fb01 f303 	mul.w	r3, r1, r3
 800776e:	4413      	add	r3, r2
 8007770:	333f      	adds	r3, #63	; 0x3f
 8007772:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007774:	2b03      	cmp	r3, #3
 8007776:	f040 8100 	bne.w	800797a <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d113      	bne.n	80077aa <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	212c      	movs	r1, #44	; 0x2c
 8007788:	fb01 f303 	mul.w	r3, r1, r3
 800778c:	4413      	add	r3, r2
 800778e:	3355      	adds	r3, #85	; 0x55
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	f083 0301 	eor.w	r3, r3, #1
 8007796:	b2d8      	uxtb	r0, r3
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	212c      	movs	r1, #44	; 0x2c
 800779e:	fb01 f303 	mul.w	r3, r1, r3
 80077a2:	4413      	add	r3, r2
 80077a4:	3355      	adds	r3, #85	; 0x55
 80077a6:	4602      	mov	r2, r0
 80077a8:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	f040 80e3 	bne.w	800797a <HCD_HC_OUT_IRQHandler+0x7cc>
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	212c      	movs	r1, #44	; 0x2c
 80077ba:	fb01 f303 	mul.w	r3, r1, r3
 80077be:	4413      	add	r3, r2
 80077c0:	334c      	adds	r3, #76	; 0x4c
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 80d8 	beq.w	800797a <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	212c      	movs	r1, #44	; 0x2c
 80077d0:	fb01 f303 	mul.w	r3, r1, r3
 80077d4:	4413      	add	r3, r2
 80077d6:	334c      	adds	r3, #76	; 0x4c
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6879      	ldr	r1, [r7, #4]
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	202c      	movs	r0, #44	; 0x2c
 80077e0:	fb00 f202 	mul.w	r2, r0, r2
 80077e4:	440a      	add	r2, r1
 80077e6:	3240      	adds	r2, #64	; 0x40
 80077e8:	8812      	ldrh	r2, [r2, #0]
 80077ea:	4413      	add	r3, r2
 80077ec:	3b01      	subs	r3, #1
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	202c      	movs	r0, #44	; 0x2c
 80077f4:	fb00 f202 	mul.w	r2, r0, r2
 80077f8:	440a      	add	r2, r1
 80077fa:	3240      	adds	r2, #64	; 0x40
 80077fc:	8812      	ldrh	r2, [r2, #0]
 80077fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007802:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 80b5 	beq.w	800797a <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	212c      	movs	r1, #44	; 0x2c
 8007816:	fb01 f303 	mul.w	r3, r1, r3
 800781a:	4413      	add	r3, r2
 800781c:	3355      	adds	r3, #85	; 0x55
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	f083 0301 	eor.w	r3, r3, #1
 8007824:	b2d8      	uxtb	r0, r3
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	212c      	movs	r1, #44	; 0x2c
 800782c:	fb01 f303 	mul.w	r3, r1, r3
 8007830:	4413      	add	r3, r2
 8007832:	3355      	adds	r3, #85	; 0x55
 8007834:	4602      	mov	r2, r0
 8007836:	701a      	strb	r2, [r3, #0]
 8007838:	e09f      	b.n	800797a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	212c      	movs	r1, #44	; 0x2c
 8007840:	fb01 f303 	mul.w	r3, r1, r3
 8007844:	4413      	add	r3, r2
 8007846:	3361      	adds	r3, #97	; 0x61
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	2b03      	cmp	r3, #3
 800784c:	d109      	bne.n	8007862 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	212c      	movs	r1, #44	; 0x2c
 8007854:	fb01 f303 	mul.w	r3, r1, r3
 8007858:	4413      	add	r3, r2
 800785a:	3360      	adds	r3, #96	; 0x60
 800785c:	2202      	movs	r2, #2
 800785e:	701a      	strb	r2, [r3, #0]
 8007860:	e08b      	b.n	800797a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	212c      	movs	r1, #44	; 0x2c
 8007868:	fb01 f303 	mul.w	r3, r1, r3
 800786c:	4413      	add	r3, r2
 800786e:	3361      	adds	r3, #97	; 0x61
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	2b04      	cmp	r3, #4
 8007874:	d109      	bne.n	800788a <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	212c      	movs	r1, #44	; 0x2c
 800787c:	fb01 f303 	mul.w	r3, r1, r3
 8007880:	4413      	add	r3, r2
 8007882:	3360      	adds	r3, #96	; 0x60
 8007884:	2202      	movs	r2, #2
 8007886:	701a      	strb	r2, [r3, #0]
 8007888:	e077      	b.n	800797a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	212c      	movs	r1, #44	; 0x2c
 8007890:	fb01 f303 	mul.w	r3, r1, r3
 8007894:	4413      	add	r3, r2
 8007896:	3361      	adds	r3, #97	; 0x61
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	2b05      	cmp	r3, #5
 800789c:	d109      	bne.n	80078b2 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	212c      	movs	r1, #44	; 0x2c
 80078a4:	fb01 f303 	mul.w	r3, r1, r3
 80078a8:	4413      	add	r3, r2
 80078aa:	3360      	adds	r3, #96	; 0x60
 80078ac:	2205      	movs	r2, #5
 80078ae:	701a      	strb	r2, [r3, #0]
 80078b0:	e063      	b.n	800797a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	212c      	movs	r1, #44	; 0x2c
 80078b8:	fb01 f303 	mul.w	r3, r1, r3
 80078bc:	4413      	add	r3, r2
 80078be:	3361      	adds	r3, #97	; 0x61
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	2b06      	cmp	r3, #6
 80078c4:	d009      	beq.n	80078da <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	212c      	movs	r1, #44	; 0x2c
 80078cc:	fb01 f303 	mul.w	r3, r1, r3
 80078d0:	4413      	add	r3, r2
 80078d2:	3361      	adds	r3, #97	; 0x61
 80078d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80078d6:	2b08      	cmp	r3, #8
 80078d8:	d14f      	bne.n	800797a <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	212c      	movs	r1, #44	; 0x2c
 80078e0:	fb01 f303 	mul.w	r3, r1, r3
 80078e4:	4413      	add	r3, r2
 80078e6:	335c      	adds	r3, #92	; 0x5c
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	1c5a      	adds	r2, r3, #1
 80078ec:	6879      	ldr	r1, [r7, #4]
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	202c      	movs	r0, #44	; 0x2c
 80078f2:	fb00 f303 	mul.w	r3, r0, r3
 80078f6:	440b      	add	r3, r1
 80078f8:	335c      	adds	r3, #92	; 0x5c
 80078fa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	212c      	movs	r1, #44	; 0x2c
 8007902:	fb01 f303 	mul.w	r3, r1, r3
 8007906:	4413      	add	r3, r2
 8007908:	335c      	adds	r3, #92	; 0x5c
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b02      	cmp	r3, #2
 800790e:	d912      	bls.n	8007936 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	212c      	movs	r1, #44	; 0x2c
 8007916:	fb01 f303 	mul.w	r3, r1, r3
 800791a:	4413      	add	r3, r2
 800791c:	335c      	adds	r3, #92	; 0x5c
 800791e:	2200      	movs	r2, #0
 8007920:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	212c      	movs	r1, #44	; 0x2c
 8007928:	fb01 f303 	mul.w	r3, r1, r3
 800792c:	4413      	add	r3, r2
 800792e:	3360      	adds	r3, #96	; 0x60
 8007930:	2204      	movs	r2, #4
 8007932:	701a      	strb	r2, [r3, #0]
 8007934:	e021      	b.n	800797a <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	212c      	movs	r1, #44	; 0x2c
 800793c:	fb01 f303 	mul.w	r3, r1, r3
 8007940:	4413      	add	r3, r2
 8007942:	3360      	adds	r3, #96	; 0x60
 8007944:	2202      	movs	r2, #2
 8007946:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	015a      	lsls	r2, r3, #5
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	4413      	add	r3, r2
 8007950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800795e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007966:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	4413      	add	r3, r2
 8007970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007974:	461a      	mov	r2, r3
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	015a      	lsls	r2, r3, #5
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	4413      	add	r3, r2
 8007982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007986:	461a      	mov	r2, r3
 8007988:	2302      	movs	r3, #2
 800798a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	b2d9      	uxtb	r1, r3
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	202c      	movs	r0, #44	; 0x2c
 8007996:	fb00 f303 	mul.w	r3, r0, r3
 800799a:	4413      	add	r3, r2
 800799c:	3360      	adds	r3, #96	; 0x60
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	461a      	mov	r2, r3
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f011 fb28 	bl	8018ff8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80079a8:	bf00      	nop
 80079aa:	3720      	adds	r7, #32
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b08a      	sub	sp, #40	; 0x28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6a1b      	ldr	r3, [r3, #32]
 80079c8:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	f003 030f 	and.w	r3, r3, #15
 80079d0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	0c5b      	lsrs	r3, r3, #17
 80079d6:	f003 030f 	and.w	r3, r3, #15
 80079da:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	091b      	lsrs	r3, r3, #4
 80079e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079e4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d004      	beq.n	80079f6 <HCD_RXQLVL_IRQHandler+0x46>
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	2b05      	cmp	r3, #5
 80079f0:	f000 80a9 	beq.w	8007b46 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80079f4:	e0aa      	b.n	8007b4c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 80a6 	beq.w	8007b4a <HCD_RXQLVL_IRQHandler+0x19a>
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	212c      	movs	r1, #44	; 0x2c
 8007a04:	fb01 f303 	mul.w	r3, r1, r3
 8007a08:	4413      	add	r3, r2
 8007a0a:	3344      	adds	r3, #68	; 0x44
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f000 809b 	beq.w	8007b4a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	212c      	movs	r1, #44	; 0x2c
 8007a1a:	fb01 f303 	mul.w	r3, r1, r3
 8007a1e:	4413      	add	r3, r2
 8007a20:	3350      	adds	r3, #80	; 0x50
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	441a      	add	r2, r3
 8007a28:	6879      	ldr	r1, [r7, #4]
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	202c      	movs	r0, #44	; 0x2c
 8007a2e:	fb00 f303 	mul.w	r3, r0, r3
 8007a32:	440b      	add	r3, r1
 8007a34:	334c      	adds	r3, #76	; 0x4c
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d87a      	bhi.n	8007b32 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6818      	ldr	r0, [r3, #0]
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	212c      	movs	r1, #44	; 0x2c
 8007a46:	fb01 f303 	mul.w	r3, r1, r3
 8007a4a:	4413      	add	r3, r2
 8007a4c:	3344      	adds	r3, #68	; 0x44
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	b292      	uxth	r2, r2
 8007a54:	4619      	mov	r1, r3
 8007a56:	f001 ff9b 	bl	8009990 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	212c      	movs	r1, #44	; 0x2c
 8007a60:	fb01 f303 	mul.w	r3, r1, r3
 8007a64:	4413      	add	r3, r2
 8007a66:	3344      	adds	r3, #68	; 0x44
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	441a      	add	r2, r3
 8007a6e:	6879      	ldr	r1, [r7, #4]
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	202c      	movs	r0, #44	; 0x2c
 8007a74:	fb00 f303 	mul.w	r3, r0, r3
 8007a78:	440b      	add	r3, r1
 8007a7a:	3344      	adds	r3, #68	; 0x44
 8007a7c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	212c      	movs	r1, #44	; 0x2c
 8007a84:	fb01 f303 	mul.w	r3, r1, r3
 8007a88:	4413      	add	r3, r2
 8007a8a:	3350      	adds	r3, #80	; 0x50
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	441a      	add	r2, r3
 8007a92:	6879      	ldr	r1, [r7, #4]
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	202c      	movs	r0, #44	; 0x2c
 8007a98:	fb00 f303 	mul.w	r3, r0, r3
 8007a9c:	440b      	add	r3, r1
 8007a9e:	3350      	adds	r3, #80	; 0x50
 8007aa0:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	6a3b      	ldr	r3, [r7, #32]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	0cdb      	lsrs	r3, r3, #19
 8007ab2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ab6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	212c      	movs	r1, #44	; 0x2c
 8007abe:	fb01 f303 	mul.w	r3, r1, r3
 8007ac2:	4413      	add	r3, r2
 8007ac4:	3340      	adds	r3, #64	; 0x40
 8007ac6:	881b      	ldrh	r3, [r3, #0]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d13c      	bne.n	8007b4a <HCD_RXQLVL_IRQHandler+0x19a>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d039      	beq.n	8007b4a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007aec:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007af4:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	015a      	lsls	r2, r3, #5
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	4413      	add	r3, r2
 8007afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b02:	461a      	mov	r2, r3
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	212c      	movs	r1, #44	; 0x2c
 8007b0e:	fb01 f303 	mul.w	r3, r1, r3
 8007b12:	4413      	add	r3, r2
 8007b14:	3354      	adds	r3, #84	; 0x54
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	f083 0301 	eor.w	r3, r3, #1
 8007b1c:	b2d8      	uxtb	r0, r3
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	212c      	movs	r1, #44	; 0x2c
 8007b24:	fb01 f303 	mul.w	r3, r1, r3
 8007b28:	4413      	add	r3, r2
 8007b2a:	3354      	adds	r3, #84	; 0x54
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	701a      	strb	r2, [r3, #0]
      break;
 8007b30:	e00b      	b.n	8007b4a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	212c      	movs	r1, #44	; 0x2c
 8007b38:	fb01 f303 	mul.w	r3, r1, r3
 8007b3c:	4413      	add	r3, r2
 8007b3e:	3360      	adds	r3, #96	; 0x60
 8007b40:	2204      	movs	r2, #4
 8007b42:	701a      	strb	r2, [r3, #0]
      break;
 8007b44:	e001      	b.n	8007b4a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8007b46:	bf00      	nop
 8007b48:	e000      	b.n	8007b4c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8007b4a:	bf00      	nop
  }
}
 8007b4c:	bf00      	nop
 8007b4e:	3728      	adds	r7, #40	; 0x28
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b086      	sub	sp, #24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007b80:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d10b      	bne.n	8007ba4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d102      	bne.n	8007b9c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f011 fa12 	bl	8018fc0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	f043 0302 	orr.w	r3, r3, #2
 8007ba2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f003 0308 	and.w	r3, r3, #8
 8007baa:	2b08      	cmp	r3, #8
 8007bac:	d132      	bne.n	8007c14 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	f043 0308 	orr.w	r3, r3, #8
 8007bb4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f003 0304 	and.w	r3, r3, #4
 8007bbc:	2b04      	cmp	r3, #4
 8007bbe:	d126      	bne.n	8007c0e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d113      	bne.n	8007bf0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007bce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bd2:	d106      	bne.n	8007be2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2102      	movs	r1, #2
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f002 f838 	bl	8009c50 <USB_InitFSLSPClkSel>
 8007be0:	e011      	b.n	8007c06 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2101      	movs	r1, #1
 8007be8:	4618      	mov	r0, r3
 8007bea:	f002 f831 	bl	8009c50 <USB_InitFSLSPClkSel>
 8007bee:	e00a      	b.n	8007c06 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d106      	bne.n	8007c06 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007c04:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f011 fa04 	bl	8019014 <HAL_HCD_PortEnabled_Callback>
 8007c0c:	e002      	b.n	8007c14 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f011 fa0e 	bl	8019030 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f003 0320 	and.w	r3, r3, #32
 8007c1a:	2b20      	cmp	r3, #32
 8007c1c:	d103      	bne.n	8007c26 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	f043 0320 	orr.w	r3, r3, #32
 8007c24:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	6013      	str	r3, [r2, #0]
}
 8007c32:	bf00      	nop
 8007c34:	3718      	adds	r7, #24
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
	...

08007c3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e264      	b.n	8008118 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0301 	and.w	r3, r3, #1
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d075      	beq.n	8007d46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c5a:	4ba3      	ldr	r3, [pc, #652]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f003 030c 	and.w	r3, r3, #12
 8007c62:	2b04      	cmp	r3, #4
 8007c64:	d00c      	beq.n	8007c80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c66:	4ba0      	ldr	r3, [pc, #640]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c6e:	2b08      	cmp	r3, #8
 8007c70:	d112      	bne.n	8007c98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c72:	4b9d      	ldr	r3, [pc, #628]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c7e:	d10b      	bne.n	8007c98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c80:	4b99      	ldr	r3, [pc, #612]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d05b      	beq.n	8007d44 <HAL_RCC_OscConfig+0x108>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d157      	bne.n	8007d44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e23f      	b.n	8008118 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ca0:	d106      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x74>
 8007ca2:	4b91      	ldr	r3, [pc, #580]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a90      	ldr	r2, [pc, #576]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cac:	6013      	str	r3, [r2, #0]
 8007cae:	e01d      	b.n	8007cec <HAL_RCC_OscConfig+0xb0>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007cb8:	d10c      	bne.n	8007cd4 <HAL_RCC_OscConfig+0x98>
 8007cba:	4b8b      	ldr	r3, [pc, #556]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a8a      	ldr	r2, [pc, #552]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007cc4:	6013      	str	r3, [r2, #0]
 8007cc6:	4b88      	ldr	r3, [pc, #544]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a87      	ldr	r2, [pc, #540]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cd0:	6013      	str	r3, [r2, #0]
 8007cd2:	e00b      	b.n	8007cec <HAL_RCC_OscConfig+0xb0>
 8007cd4:	4b84      	ldr	r3, [pc, #528]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a83      	ldr	r2, [pc, #524]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cde:	6013      	str	r3, [r2, #0]
 8007ce0:	4b81      	ldr	r3, [pc, #516]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a80      	ldr	r2, [pc, #512]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d013      	beq.n	8007d1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cf4:	f7fa fd10 	bl	8002718 <HAL_GetTick>
 8007cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cfa:	e008      	b.n	8007d0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007cfc:	f7fa fd0c 	bl	8002718 <HAL_GetTick>
 8007d00:	4602      	mov	r2, r0
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	2b64      	cmp	r3, #100	; 0x64
 8007d08:	d901      	bls.n	8007d0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e204      	b.n	8008118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d0e:	4b76      	ldr	r3, [pc, #472]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d0f0      	beq.n	8007cfc <HAL_RCC_OscConfig+0xc0>
 8007d1a:	e014      	b.n	8007d46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d1c:	f7fa fcfc 	bl	8002718 <HAL_GetTick>
 8007d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d22:	e008      	b.n	8007d36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d24:	f7fa fcf8 	bl	8002718 <HAL_GetTick>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	2b64      	cmp	r3, #100	; 0x64
 8007d30:	d901      	bls.n	8007d36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e1f0      	b.n	8008118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d36:	4b6c      	ldr	r3, [pc, #432]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1f0      	bne.n	8007d24 <HAL_RCC_OscConfig+0xe8>
 8007d42:	e000      	b.n	8007d46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0302 	and.w	r3, r3, #2
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d063      	beq.n	8007e1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d52:	4b65      	ldr	r3, [pc, #404]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f003 030c 	and.w	r3, r3, #12
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00b      	beq.n	8007d76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d5e:	4b62      	ldr	r3, [pc, #392]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d66:	2b08      	cmp	r3, #8
 8007d68:	d11c      	bne.n	8007da4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d6a:	4b5f      	ldr	r3, [pc, #380]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d116      	bne.n	8007da4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d76:	4b5c      	ldr	r3, [pc, #368]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0302 	and.w	r3, r3, #2
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d005      	beq.n	8007d8e <HAL_RCC_OscConfig+0x152>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d001      	beq.n	8007d8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e1c4      	b.n	8008118 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d8e:	4b56      	ldr	r3, [pc, #344]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	00db      	lsls	r3, r3, #3
 8007d9c:	4952      	ldr	r1, [pc, #328]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007da2:	e03a      	b.n	8007e1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d020      	beq.n	8007dee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007dac:	4b4f      	ldr	r3, [pc, #316]	; (8007eec <HAL_RCC_OscConfig+0x2b0>)
 8007dae:	2201      	movs	r2, #1
 8007db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007db2:	f7fa fcb1 	bl	8002718 <HAL_GetTick>
 8007db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007db8:	e008      	b.n	8007dcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007dba:	f7fa fcad 	bl	8002718 <HAL_GetTick>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d901      	bls.n	8007dcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e1a5      	b.n	8008118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dcc:	4b46      	ldr	r3, [pc, #280]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0302 	and.w	r3, r3, #2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d0f0      	beq.n	8007dba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dd8:	4b43      	ldr	r3, [pc, #268]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	00db      	lsls	r3, r3, #3
 8007de6:	4940      	ldr	r1, [pc, #256]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007de8:	4313      	orrs	r3, r2
 8007dea:	600b      	str	r3, [r1, #0]
 8007dec:	e015      	b.n	8007e1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007dee:	4b3f      	ldr	r3, [pc, #252]	; (8007eec <HAL_RCC_OscConfig+0x2b0>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007df4:	f7fa fc90 	bl	8002718 <HAL_GetTick>
 8007df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007dfa:	e008      	b.n	8007e0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007dfc:	f7fa fc8c 	bl	8002718 <HAL_GetTick>
 8007e00:	4602      	mov	r2, r0
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d901      	bls.n	8007e0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e184      	b.n	8008118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e0e:	4b36      	ldr	r3, [pc, #216]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0302 	and.w	r3, r3, #2
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1f0      	bne.n	8007dfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0308 	and.w	r3, r3, #8
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d030      	beq.n	8007e88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d016      	beq.n	8007e5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e2e:	4b30      	ldr	r3, [pc, #192]	; (8007ef0 <HAL_RCC_OscConfig+0x2b4>)
 8007e30:	2201      	movs	r2, #1
 8007e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e34:	f7fa fc70 	bl	8002718 <HAL_GetTick>
 8007e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e3a:	e008      	b.n	8007e4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e3c:	f7fa fc6c 	bl	8002718 <HAL_GetTick>
 8007e40:	4602      	mov	r2, r0
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d901      	bls.n	8007e4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e164      	b.n	8008118 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e4e:	4b26      	ldr	r3, [pc, #152]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e52:	f003 0302 	and.w	r3, r3, #2
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d0f0      	beq.n	8007e3c <HAL_RCC_OscConfig+0x200>
 8007e5a:	e015      	b.n	8007e88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e5c:	4b24      	ldr	r3, [pc, #144]	; (8007ef0 <HAL_RCC_OscConfig+0x2b4>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e62:	f7fa fc59 	bl	8002718 <HAL_GetTick>
 8007e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e68:	e008      	b.n	8007e7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e6a:	f7fa fc55 	bl	8002718 <HAL_GetTick>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d901      	bls.n	8007e7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e14d      	b.n	8008118 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e7c:	4b1a      	ldr	r3, [pc, #104]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e80:	f003 0302 	and.w	r3, r3, #2
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1f0      	bne.n	8007e6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0304 	and.w	r3, r3, #4
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 80a0 	beq.w	8007fd6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e96:	2300      	movs	r3, #0
 8007e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e9a:	4b13      	ldr	r3, [pc, #76]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d10f      	bne.n	8007ec6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60bb      	str	r3, [r7, #8]
 8007eaa:	4b0f      	ldr	r3, [pc, #60]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eae:	4a0e      	ldr	r2, [pc, #56]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8007eb6:	4b0c      	ldr	r3, [pc, #48]	; (8007ee8 <HAL_RCC_OscConfig+0x2ac>)
 8007eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ebe:	60bb      	str	r3, [r7, #8]
 8007ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ec6:	4b0b      	ldr	r3, [pc, #44]	; (8007ef4 <HAL_RCC_OscConfig+0x2b8>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d121      	bne.n	8007f16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ed2:	4b08      	ldr	r3, [pc, #32]	; (8007ef4 <HAL_RCC_OscConfig+0x2b8>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a07      	ldr	r2, [pc, #28]	; (8007ef4 <HAL_RCC_OscConfig+0x2b8>)
 8007ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ede:	f7fa fc1b 	bl	8002718 <HAL_GetTick>
 8007ee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ee4:	e011      	b.n	8007f0a <HAL_RCC_OscConfig+0x2ce>
 8007ee6:	bf00      	nop
 8007ee8:	40023800 	.word	0x40023800
 8007eec:	42470000 	.word	0x42470000
 8007ef0:	42470e80 	.word	0x42470e80
 8007ef4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ef8:	f7fa fc0e 	bl	8002718 <HAL_GetTick>
 8007efc:	4602      	mov	r2, r0
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d901      	bls.n	8007f0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007f06:	2303      	movs	r3, #3
 8007f08:	e106      	b.n	8008118 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f0a:	4b85      	ldr	r3, [pc, #532]	; (8008120 <HAL_RCC_OscConfig+0x4e4>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d0f0      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d106      	bne.n	8007f2c <HAL_RCC_OscConfig+0x2f0>
 8007f1e:	4b81      	ldr	r3, [pc, #516]	; (8008124 <HAL_RCC_OscConfig+0x4e8>)
 8007f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f22:	4a80      	ldr	r2, [pc, #512]	; (8008124 <HAL_RCC_OscConfig+0x4e8>)
 8007f24:	f043 0301 	orr.w	r3, r3, #1
 8007f28:	6713      	str	r3, [r2, #112]	; 0x70
 8007f2a:	e01c      	b.n	8007f66 <HAL_RCC_OscConfig+0x32a>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	2b05      	cmp	r3, #5
 8007f32:	d10c      	bne.n	8007f4e <HAL_RCC_OscConfig+0x312>
 8007f34:	4b7b      	ldr	r3, [pc, #492]	; (8008124 <HAL_RCC_OscConfig+0x4e8>)
 8007f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f38:	4a7a      	ldr	r2, [pc, #488]	; (8008124 <HAL_RCC_OscConfig+0x4e8>)
 8007f3a:	f043 0304 	orr.w	r3, r3, #4
 8007f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8007f40:	4b78      	ldr	r3, [pc, #480]	; (8008124 <HAL_RCC_OscConfig+0x4e8>)
 8007f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f44:	4a77      	ldr	r2, [pc, #476]	; (8008124 <HAL_RCC_OscConfig+0x4e8>)
 8007f46:	f043 0301 	orr.w	r3, r3, #1
 8007f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8007f4c:	e00b      	b.n	8007f66 <HAL_RCC_OscConfig+0x32a>
 8007f4e:	4b75      	ldr	r3, [pc, #468]	; (8008124 <HAL_RCC_OscConfig+0x4e8>)
 8007f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f52:	4a74      	ldr	r2, [pc, #464]	; (8008124 <HAL_RCC_OscConfig+0x4e8>)
 8007f54:	f023 0301 	bic.w	r3, r3, #1
 8007f58:	6713      	str	r3, [r2, #112]	; 0x70
 8007f5a:	4b72      	ldr	r3, [pc, #456]	; (8008124 <HAL_RCC_OscConfig+0x4e8>)
 8007f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f5e:	4a71      	ldr	r2, [pc, #452]	; (8008124 <HAL_RCC_OscConfig+0x4e8>)
 8007f60:	f023 0304 	bic.w	r3, r3, #4
 8007f64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d015      	beq.n	8007f9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f6e:	f7fa fbd3 	bl	8002718 <HAL_GetTick>
 8007f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f74:	e00a      	b.n	8007f8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f76:	f7fa fbcf 	bl	8002718 <HAL_GetTick>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d901      	bls.n	8007f8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	e0c5      	b.n	8008118 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f8c:	4b65      	ldr	r3, [pc, #404]	; (8008124 <HAL_RCC_OscConfig+0x4e8>)
 8007f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f90:	f003 0302 	and.w	r3, r3, #2
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d0ee      	beq.n	8007f76 <HAL_RCC_OscConfig+0x33a>
 8007f98:	e014      	b.n	8007fc4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f9a:	f7fa fbbd 	bl	8002718 <HAL_GetTick>
 8007f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fa0:	e00a      	b.n	8007fb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fa2:	f7fa fbb9 	bl	8002718 <HAL_GetTick>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d901      	bls.n	8007fb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	e0af      	b.n	8008118 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fb8:	4b5a      	ldr	r3, [pc, #360]	; (8008124 <HAL_RCC_OscConfig+0x4e8>)
 8007fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fbc:	f003 0302 	and.w	r3, r3, #2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1ee      	bne.n	8007fa2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007fc4:	7dfb      	ldrb	r3, [r7, #23]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d105      	bne.n	8007fd6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fca:	4b56      	ldr	r3, [pc, #344]	; (8008124 <HAL_RCC_OscConfig+0x4e8>)
 8007fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fce:	4a55      	ldr	r2, [pc, #340]	; (8008124 <HAL_RCC_OscConfig+0x4e8>)
 8007fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	699b      	ldr	r3, [r3, #24]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f000 809b 	beq.w	8008116 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007fe0:	4b50      	ldr	r3, [pc, #320]	; (8008124 <HAL_RCC_OscConfig+0x4e8>)
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	f003 030c 	and.w	r3, r3, #12
 8007fe8:	2b08      	cmp	r3, #8
 8007fea:	d05c      	beq.n	80080a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d141      	bne.n	8008078 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ff4:	4b4c      	ldr	r3, [pc, #304]	; (8008128 <HAL_RCC_OscConfig+0x4ec>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ffa:	f7fa fb8d 	bl	8002718 <HAL_GetTick>
 8007ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008000:	e008      	b.n	8008014 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008002:	f7fa fb89 	bl	8002718 <HAL_GetTick>
 8008006:	4602      	mov	r2, r0
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	2b02      	cmp	r3, #2
 800800e:	d901      	bls.n	8008014 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	e081      	b.n	8008118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008014:	4b43      	ldr	r3, [pc, #268]	; (8008124 <HAL_RCC_OscConfig+0x4e8>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1f0      	bne.n	8008002 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	69da      	ldr	r2, [r3, #28]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a1b      	ldr	r3, [r3, #32]
 8008028:	431a      	orrs	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802e:	019b      	lsls	r3, r3, #6
 8008030:	431a      	orrs	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008036:	085b      	lsrs	r3, r3, #1
 8008038:	3b01      	subs	r3, #1
 800803a:	041b      	lsls	r3, r3, #16
 800803c:	431a      	orrs	r2, r3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008042:	061b      	lsls	r3, r3, #24
 8008044:	4937      	ldr	r1, [pc, #220]	; (8008124 <HAL_RCC_OscConfig+0x4e8>)
 8008046:	4313      	orrs	r3, r2
 8008048:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800804a:	4b37      	ldr	r3, [pc, #220]	; (8008128 <HAL_RCC_OscConfig+0x4ec>)
 800804c:	2201      	movs	r2, #1
 800804e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008050:	f7fa fb62 	bl	8002718 <HAL_GetTick>
 8008054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008056:	e008      	b.n	800806a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008058:	f7fa fb5e 	bl	8002718 <HAL_GetTick>
 800805c:	4602      	mov	r2, r0
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	2b02      	cmp	r3, #2
 8008064:	d901      	bls.n	800806a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e056      	b.n	8008118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800806a:	4b2e      	ldr	r3, [pc, #184]	; (8008124 <HAL_RCC_OscConfig+0x4e8>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d0f0      	beq.n	8008058 <HAL_RCC_OscConfig+0x41c>
 8008076:	e04e      	b.n	8008116 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008078:	4b2b      	ldr	r3, [pc, #172]	; (8008128 <HAL_RCC_OscConfig+0x4ec>)
 800807a:	2200      	movs	r2, #0
 800807c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800807e:	f7fa fb4b 	bl	8002718 <HAL_GetTick>
 8008082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008084:	e008      	b.n	8008098 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008086:	f7fa fb47 	bl	8002718 <HAL_GetTick>
 800808a:	4602      	mov	r2, r0
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	2b02      	cmp	r3, #2
 8008092:	d901      	bls.n	8008098 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008094:	2303      	movs	r3, #3
 8008096:	e03f      	b.n	8008118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008098:	4b22      	ldr	r3, [pc, #136]	; (8008124 <HAL_RCC_OscConfig+0x4e8>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1f0      	bne.n	8008086 <HAL_RCC_OscConfig+0x44a>
 80080a4:	e037      	b.n	8008116 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	699b      	ldr	r3, [r3, #24]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d101      	bne.n	80080b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e032      	b.n	8008118 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80080b2:	4b1c      	ldr	r3, [pc, #112]	; (8008124 <HAL_RCC_OscConfig+0x4e8>)
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d028      	beq.n	8008112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d121      	bne.n	8008112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080d8:	429a      	cmp	r2, r3
 80080da:	d11a      	bne.n	8008112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80080e2:	4013      	ands	r3, r2
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80080e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d111      	bne.n	8008112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f8:	085b      	lsrs	r3, r3, #1
 80080fa:	3b01      	subs	r3, #1
 80080fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80080fe:	429a      	cmp	r2, r3
 8008100:	d107      	bne.n	8008112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800810e:	429a      	cmp	r2, r3
 8008110:	d001      	beq.n	8008116 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e000      	b.n	8008118 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3718      	adds	r7, #24
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	40007000 	.word	0x40007000
 8008124:	40023800 	.word	0x40023800
 8008128:	42470060 	.word	0x42470060

0800812c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d101      	bne.n	8008140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	e0cc      	b.n	80082da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008140:	4b68      	ldr	r3, [pc, #416]	; (80082e4 <HAL_RCC_ClockConfig+0x1b8>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 0307 	and.w	r3, r3, #7
 8008148:	683a      	ldr	r2, [r7, #0]
 800814a:	429a      	cmp	r2, r3
 800814c:	d90c      	bls.n	8008168 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800814e:	4b65      	ldr	r3, [pc, #404]	; (80082e4 <HAL_RCC_ClockConfig+0x1b8>)
 8008150:	683a      	ldr	r2, [r7, #0]
 8008152:	b2d2      	uxtb	r2, r2
 8008154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008156:	4b63      	ldr	r3, [pc, #396]	; (80082e4 <HAL_RCC_ClockConfig+0x1b8>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 0307 	and.w	r3, r3, #7
 800815e:	683a      	ldr	r2, [r7, #0]
 8008160:	429a      	cmp	r2, r3
 8008162:	d001      	beq.n	8008168 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e0b8      	b.n	80082da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0302 	and.w	r3, r3, #2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d020      	beq.n	80081b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 0304 	and.w	r3, r3, #4
 800817c:	2b00      	cmp	r3, #0
 800817e:	d005      	beq.n	800818c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008180:	4b59      	ldr	r3, [pc, #356]	; (80082e8 <HAL_RCC_ClockConfig+0x1bc>)
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	4a58      	ldr	r2, [pc, #352]	; (80082e8 <HAL_RCC_ClockConfig+0x1bc>)
 8008186:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800818a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0308 	and.w	r3, r3, #8
 8008194:	2b00      	cmp	r3, #0
 8008196:	d005      	beq.n	80081a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008198:	4b53      	ldr	r3, [pc, #332]	; (80082e8 <HAL_RCC_ClockConfig+0x1bc>)
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	4a52      	ldr	r2, [pc, #328]	; (80082e8 <HAL_RCC_ClockConfig+0x1bc>)
 800819e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80081a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081a4:	4b50      	ldr	r3, [pc, #320]	; (80082e8 <HAL_RCC_ClockConfig+0x1bc>)
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	494d      	ldr	r1, [pc, #308]	; (80082e8 <HAL_RCC_ClockConfig+0x1bc>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d044      	beq.n	800824c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d107      	bne.n	80081da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081ca:	4b47      	ldr	r3, [pc, #284]	; (80082e8 <HAL_RCC_ClockConfig+0x1bc>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d119      	bne.n	800820a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e07f      	b.n	80082da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d003      	beq.n	80081ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	d107      	bne.n	80081fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081ea:	4b3f      	ldr	r3, [pc, #252]	; (80082e8 <HAL_RCC_ClockConfig+0x1bc>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d109      	bne.n	800820a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e06f      	b.n	80082da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081fa:	4b3b      	ldr	r3, [pc, #236]	; (80082e8 <HAL_RCC_ClockConfig+0x1bc>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 0302 	and.w	r3, r3, #2
 8008202:	2b00      	cmp	r3, #0
 8008204:	d101      	bne.n	800820a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e067      	b.n	80082da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800820a:	4b37      	ldr	r3, [pc, #220]	; (80082e8 <HAL_RCC_ClockConfig+0x1bc>)
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	f023 0203 	bic.w	r2, r3, #3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	4934      	ldr	r1, [pc, #208]	; (80082e8 <HAL_RCC_ClockConfig+0x1bc>)
 8008218:	4313      	orrs	r3, r2
 800821a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800821c:	f7fa fa7c 	bl	8002718 <HAL_GetTick>
 8008220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008222:	e00a      	b.n	800823a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008224:	f7fa fa78 	bl	8002718 <HAL_GetTick>
 8008228:	4602      	mov	r2, r0
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008232:	4293      	cmp	r3, r2
 8008234:	d901      	bls.n	800823a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e04f      	b.n	80082da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800823a:	4b2b      	ldr	r3, [pc, #172]	; (80082e8 <HAL_RCC_ClockConfig+0x1bc>)
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	f003 020c 	and.w	r2, r3, #12
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	429a      	cmp	r2, r3
 800824a:	d1eb      	bne.n	8008224 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800824c:	4b25      	ldr	r3, [pc, #148]	; (80082e4 <HAL_RCC_ClockConfig+0x1b8>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 0307 	and.w	r3, r3, #7
 8008254:	683a      	ldr	r2, [r7, #0]
 8008256:	429a      	cmp	r2, r3
 8008258:	d20c      	bcs.n	8008274 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800825a:	4b22      	ldr	r3, [pc, #136]	; (80082e4 <HAL_RCC_ClockConfig+0x1b8>)
 800825c:	683a      	ldr	r2, [r7, #0]
 800825e:	b2d2      	uxtb	r2, r2
 8008260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008262:	4b20      	ldr	r3, [pc, #128]	; (80082e4 <HAL_RCC_ClockConfig+0x1b8>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0307 	and.w	r3, r3, #7
 800826a:	683a      	ldr	r2, [r7, #0]
 800826c:	429a      	cmp	r2, r3
 800826e:	d001      	beq.n	8008274 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	e032      	b.n	80082da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 0304 	and.w	r3, r3, #4
 800827c:	2b00      	cmp	r3, #0
 800827e:	d008      	beq.n	8008292 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008280:	4b19      	ldr	r3, [pc, #100]	; (80082e8 <HAL_RCC_ClockConfig+0x1bc>)
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	4916      	ldr	r1, [pc, #88]	; (80082e8 <HAL_RCC_ClockConfig+0x1bc>)
 800828e:	4313      	orrs	r3, r2
 8008290:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0308 	and.w	r3, r3, #8
 800829a:	2b00      	cmp	r3, #0
 800829c:	d009      	beq.n	80082b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800829e:	4b12      	ldr	r3, [pc, #72]	; (80082e8 <HAL_RCC_ClockConfig+0x1bc>)
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	00db      	lsls	r3, r3, #3
 80082ac:	490e      	ldr	r1, [pc, #56]	; (80082e8 <HAL_RCC_ClockConfig+0x1bc>)
 80082ae:	4313      	orrs	r3, r2
 80082b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80082b2:	f000 f889 	bl	80083c8 <HAL_RCC_GetSysClockFreq>
 80082b6:	4602      	mov	r2, r0
 80082b8:	4b0b      	ldr	r3, [pc, #44]	; (80082e8 <HAL_RCC_ClockConfig+0x1bc>)
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	091b      	lsrs	r3, r3, #4
 80082be:	f003 030f 	and.w	r3, r3, #15
 80082c2:	490a      	ldr	r1, [pc, #40]	; (80082ec <HAL_RCC_ClockConfig+0x1c0>)
 80082c4:	5ccb      	ldrb	r3, [r1, r3]
 80082c6:	fa22 f303 	lsr.w	r3, r2, r3
 80082ca:	4a09      	ldr	r2, [pc, #36]	; (80082f0 <HAL_RCC_ClockConfig+0x1c4>)
 80082cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80082ce:	4b09      	ldr	r3, [pc, #36]	; (80082f4 <HAL_RCC_ClockConfig+0x1c8>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7fa f9dc 	bl	8002690 <HAL_InitTick>

  return HAL_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	40023c00 	.word	0x40023c00
 80082e8:	40023800 	.word	0x40023800
 80082ec:	0801f26c 	.word	0x0801f26c
 80082f0:	20000508 	.word	0x20000508
 80082f4:	2000050c 	.word	0x2000050c

080082f8 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b08c      	sub	sp, #48	; 0x30
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d129      	bne.n	800835e <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800830a:	2300      	movs	r3, #0
 800830c:	61bb      	str	r3, [r7, #24]
 800830e:	4b2b      	ldr	r3, [pc, #172]	; (80083bc <HAL_RCC_MCOConfig+0xc4>)
 8008310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008312:	4a2a      	ldr	r2, [pc, #168]	; (80083bc <HAL_RCC_MCOConfig+0xc4>)
 8008314:	f043 0301 	orr.w	r3, r3, #1
 8008318:	6313      	str	r3, [r2, #48]	; 0x30
 800831a:	4b28      	ldr	r3, [pc, #160]	; (80083bc <HAL_RCC_MCOConfig+0xc4>)
 800831c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831e:	f003 0301 	and.w	r3, r3, #1
 8008322:	61bb      	str	r3, [r7, #24]
 8008324:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8008326:	f44f 7380 	mov.w	r3, #256	; 0x100
 800832a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800832c:	2302      	movs	r3, #2
 800832e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008330:	2303      	movs	r3, #3
 8008332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008334:	2300      	movs	r3, #0
 8008336:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008338:	2300      	movs	r3, #0
 800833a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800833c:	f107 031c 	add.w	r3, r7, #28
 8008340:	4619      	mov	r1, r3
 8008342:	481f      	ldr	r0, [pc, #124]	; (80083c0 <HAL_RCC_MCOConfig+0xc8>)
 8008344:	f7fd fd3c 	bl	8005dc0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8008348:	4b1c      	ldr	r3, [pc, #112]	; (80083bc <HAL_RCC_MCOConfig+0xc4>)
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8008350:	68b9      	ldr	r1, [r7, #8]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	430b      	orrs	r3, r1
 8008356:	4919      	ldr	r1, [pc, #100]	; (80083bc <HAL_RCC_MCOConfig+0xc4>)
 8008358:	4313      	orrs	r3, r2
 800835a:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 800835c:	e029      	b.n	80083b2 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800835e:	2300      	movs	r3, #0
 8008360:	617b      	str	r3, [r7, #20]
 8008362:	4b16      	ldr	r3, [pc, #88]	; (80083bc <HAL_RCC_MCOConfig+0xc4>)
 8008364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008366:	4a15      	ldr	r2, [pc, #84]	; (80083bc <HAL_RCC_MCOConfig+0xc4>)
 8008368:	f043 0304 	orr.w	r3, r3, #4
 800836c:	6313      	str	r3, [r2, #48]	; 0x30
 800836e:	4b13      	ldr	r3, [pc, #76]	; (80083bc <HAL_RCC_MCOConfig+0xc4>)
 8008370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008372:	f003 0304 	and.w	r3, r3, #4
 8008376:	617b      	str	r3, [r7, #20]
 8008378:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800837a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800837e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008380:	2302      	movs	r3, #2
 8008382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008384:	2303      	movs	r3, #3
 8008386:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008388:	2300      	movs	r3, #0
 800838a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800838c:	2300      	movs	r3, #0
 800838e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008390:	f107 031c 	add.w	r3, r7, #28
 8008394:	4619      	mov	r1, r3
 8008396:	480b      	ldr	r0, [pc, #44]	; (80083c4 <HAL_RCC_MCOConfig+0xcc>)
 8008398:	f7fd fd12 	bl	8005dc0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800839c:	4b07      	ldr	r3, [pc, #28]	; (80083bc <HAL_RCC_MCOConfig+0xc4>)
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	00d9      	lsls	r1, r3, #3
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	430b      	orrs	r3, r1
 80083ac:	4903      	ldr	r1, [pc, #12]	; (80083bc <HAL_RCC_MCOConfig+0xc4>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	608b      	str	r3, [r1, #8]
}
 80083b2:	bf00      	nop
 80083b4:	3730      	adds	r7, #48	; 0x30
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	40023800 	.word	0x40023800
 80083c0:	40020000 	.word	0x40020000
 80083c4:	40020800 	.word	0x40020800

080083c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80083cc:	b084      	sub	sp, #16
 80083ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80083d0:	2300      	movs	r3, #0
 80083d2:	607b      	str	r3, [r7, #4]
 80083d4:	2300      	movs	r3, #0
 80083d6:	60fb      	str	r3, [r7, #12]
 80083d8:	2300      	movs	r3, #0
 80083da:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80083dc:	2300      	movs	r3, #0
 80083de:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083e0:	4b67      	ldr	r3, [pc, #412]	; (8008580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	f003 030c 	and.w	r3, r3, #12
 80083e8:	2b08      	cmp	r3, #8
 80083ea:	d00d      	beq.n	8008408 <HAL_RCC_GetSysClockFreq+0x40>
 80083ec:	2b08      	cmp	r3, #8
 80083ee:	f200 80bd 	bhi.w	800856c <HAL_RCC_GetSysClockFreq+0x1a4>
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d002      	beq.n	80083fc <HAL_RCC_GetSysClockFreq+0x34>
 80083f6:	2b04      	cmp	r3, #4
 80083f8:	d003      	beq.n	8008402 <HAL_RCC_GetSysClockFreq+0x3a>
 80083fa:	e0b7      	b.n	800856c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80083fc:	4b61      	ldr	r3, [pc, #388]	; (8008584 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80083fe:	60bb      	str	r3, [r7, #8]
       break;
 8008400:	e0b7      	b.n	8008572 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008402:	4b61      	ldr	r3, [pc, #388]	; (8008588 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008404:	60bb      	str	r3, [r7, #8]
      break;
 8008406:	e0b4      	b.n	8008572 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008408:	4b5d      	ldr	r3, [pc, #372]	; (8008580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008410:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008412:	4b5b      	ldr	r3, [pc, #364]	; (8008580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800841a:	2b00      	cmp	r3, #0
 800841c:	d04d      	beq.n	80084ba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800841e:	4b58      	ldr	r3, [pc, #352]	; (8008580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	099b      	lsrs	r3, r3, #6
 8008424:	461a      	mov	r2, r3
 8008426:	f04f 0300 	mov.w	r3, #0
 800842a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800842e:	f04f 0100 	mov.w	r1, #0
 8008432:	ea02 0800 	and.w	r8, r2, r0
 8008436:	ea03 0901 	and.w	r9, r3, r1
 800843a:	4640      	mov	r0, r8
 800843c:	4649      	mov	r1, r9
 800843e:	f04f 0200 	mov.w	r2, #0
 8008442:	f04f 0300 	mov.w	r3, #0
 8008446:	014b      	lsls	r3, r1, #5
 8008448:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800844c:	0142      	lsls	r2, r0, #5
 800844e:	4610      	mov	r0, r2
 8008450:	4619      	mov	r1, r3
 8008452:	ebb0 0008 	subs.w	r0, r0, r8
 8008456:	eb61 0109 	sbc.w	r1, r1, r9
 800845a:	f04f 0200 	mov.w	r2, #0
 800845e:	f04f 0300 	mov.w	r3, #0
 8008462:	018b      	lsls	r3, r1, #6
 8008464:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008468:	0182      	lsls	r2, r0, #6
 800846a:	1a12      	subs	r2, r2, r0
 800846c:	eb63 0301 	sbc.w	r3, r3, r1
 8008470:	f04f 0000 	mov.w	r0, #0
 8008474:	f04f 0100 	mov.w	r1, #0
 8008478:	00d9      	lsls	r1, r3, #3
 800847a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800847e:	00d0      	lsls	r0, r2, #3
 8008480:	4602      	mov	r2, r0
 8008482:	460b      	mov	r3, r1
 8008484:	eb12 0208 	adds.w	r2, r2, r8
 8008488:	eb43 0309 	adc.w	r3, r3, r9
 800848c:	f04f 0000 	mov.w	r0, #0
 8008490:	f04f 0100 	mov.w	r1, #0
 8008494:	0259      	lsls	r1, r3, #9
 8008496:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800849a:	0250      	lsls	r0, r2, #9
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	4610      	mov	r0, r2
 80084a2:	4619      	mov	r1, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	461a      	mov	r2, r3
 80084a8:	f04f 0300 	mov.w	r3, #0
 80084ac:	f7f8 fb7c 	bl	8000ba8 <__aeabi_uldivmod>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	4613      	mov	r3, r2
 80084b6:	60fb      	str	r3, [r7, #12]
 80084b8:	e04a      	b.n	8008550 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084ba:	4b31      	ldr	r3, [pc, #196]	; (8008580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	099b      	lsrs	r3, r3, #6
 80084c0:	461a      	mov	r2, r3
 80084c2:	f04f 0300 	mov.w	r3, #0
 80084c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80084ca:	f04f 0100 	mov.w	r1, #0
 80084ce:	ea02 0400 	and.w	r4, r2, r0
 80084d2:	ea03 0501 	and.w	r5, r3, r1
 80084d6:	4620      	mov	r0, r4
 80084d8:	4629      	mov	r1, r5
 80084da:	f04f 0200 	mov.w	r2, #0
 80084de:	f04f 0300 	mov.w	r3, #0
 80084e2:	014b      	lsls	r3, r1, #5
 80084e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80084e8:	0142      	lsls	r2, r0, #5
 80084ea:	4610      	mov	r0, r2
 80084ec:	4619      	mov	r1, r3
 80084ee:	1b00      	subs	r0, r0, r4
 80084f0:	eb61 0105 	sbc.w	r1, r1, r5
 80084f4:	f04f 0200 	mov.w	r2, #0
 80084f8:	f04f 0300 	mov.w	r3, #0
 80084fc:	018b      	lsls	r3, r1, #6
 80084fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008502:	0182      	lsls	r2, r0, #6
 8008504:	1a12      	subs	r2, r2, r0
 8008506:	eb63 0301 	sbc.w	r3, r3, r1
 800850a:	f04f 0000 	mov.w	r0, #0
 800850e:	f04f 0100 	mov.w	r1, #0
 8008512:	00d9      	lsls	r1, r3, #3
 8008514:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008518:	00d0      	lsls	r0, r2, #3
 800851a:	4602      	mov	r2, r0
 800851c:	460b      	mov	r3, r1
 800851e:	1912      	adds	r2, r2, r4
 8008520:	eb45 0303 	adc.w	r3, r5, r3
 8008524:	f04f 0000 	mov.w	r0, #0
 8008528:	f04f 0100 	mov.w	r1, #0
 800852c:	0299      	lsls	r1, r3, #10
 800852e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008532:	0290      	lsls	r0, r2, #10
 8008534:	4602      	mov	r2, r0
 8008536:	460b      	mov	r3, r1
 8008538:	4610      	mov	r0, r2
 800853a:	4619      	mov	r1, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	461a      	mov	r2, r3
 8008540:	f04f 0300 	mov.w	r3, #0
 8008544:	f7f8 fb30 	bl	8000ba8 <__aeabi_uldivmod>
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	4613      	mov	r3, r2
 800854e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008550:	4b0b      	ldr	r3, [pc, #44]	; (8008580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	0c1b      	lsrs	r3, r3, #16
 8008556:	f003 0303 	and.w	r3, r3, #3
 800855a:	3301      	adds	r3, #1
 800855c:	005b      	lsls	r3, r3, #1
 800855e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	fbb2 f3f3 	udiv	r3, r2, r3
 8008568:	60bb      	str	r3, [r7, #8]
      break;
 800856a:	e002      	b.n	8008572 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800856c:	4b05      	ldr	r3, [pc, #20]	; (8008584 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800856e:	60bb      	str	r3, [r7, #8]
      break;
 8008570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008572:	68bb      	ldr	r3, [r7, #8]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800857e:	bf00      	nop
 8008580:	40023800 	.word	0x40023800
 8008584:	00f42400 	.word	0x00f42400
 8008588:	007a1200 	.word	0x007a1200

0800858c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800858c:	b480      	push	{r7}
 800858e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008590:	4b03      	ldr	r3, [pc, #12]	; (80085a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008592:	681b      	ldr	r3, [r3, #0]
}
 8008594:	4618      	mov	r0, r3
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	20000508 	.word	0x20000508

080085a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80085a8:	f7ff fff0 	bl	800858c <HAL_RCC_GetHCLKFreq>
 80085ac:	4602      	mov	r2, r0
 80085ae:	4b05      	ldr	r3, [pc, #20]	; (80085c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	0a9b      	lsrs	r3, r3, #10
 80085b4:	f003 0307 	and.w	r3, r3, #7
 80085b8:	4903      	ldr	r1, [pc, #12]	; (80085c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085ba:	5ccb      	ldrb	r3, [r1, r3]
 80085bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	40023800 	.word	0x40023800
 80085c8:	0801f27c 	.word	0x0801f27c

080085cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80085d0:	f7ff ffdc 	bl	800858c <HAL_RCC_GetHCLKFreq>
 80085d4:	4602      	mov	r2, r0
 80085d6:	4b05      	ldr	r3, [pc, #20]	; (80085ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	0b5b      	lsrs	r3, r3, #13
 80085dc:	f003 0307 	and.w	r3, r3, #7
 80085e0:	4903      	ldr	r1, [pc, #12]	; (80085f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085e2:	5ccb      	ldrb	r3, [r1, r3]
 80085e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	40023800 	.word	0x40023800
 80085f0:	0801f27c 	.word	0x0801f27c

080085f4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d101      	bne.n	800860a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e034      	b.n	8008674 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b00      	cmp	r3, #0
 8008614:	d106      	bne.n	8008624 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f7f9 fc54 	bl	8001ecc <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	3308      	adds	r3, #8
 800862c:	4619      	mov	r1, r3
 800862e:	4610      	mov	r0, r2
 8008630:	f000 ff8c 	bl	800954c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6818      	ldr	r0, [r3, #0]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	461a      	mov	r2, r3
 800863e:	68b9      	ldr	r1, [r7, #8]
 8008640:	f000 ffd6 	bl	80095f0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6858      	ldr	r0, [r3, #4]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	689a      	ldr	r2, [r3, #8]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008650:	6879      	ldr	r1, [r7, #4]
 8008652:	f001 f80b 	bl	800966c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	6892      	ldr	r2, [r2, #8]
 800865e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	6892      	ldr	r2, [r2, #8]
 800866a:	f041 0101 	orr.w	r1, r1, #1
 800866e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e03f      	b.n	800870e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008694:	b2db      	uxtb	r3, r3
 8008696:	2b00      	cmp	r3, #0
 8008698:	d106      	bne.n	80086a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7f9 fb32 	bl	8001d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2224      	movs	r2, #36	; 0x24
 80086ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68da      	ldr	r2, [r3, #12]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fd7b 	bl	80091bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	691a      	ldr	r2, [r3, #16]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	695a      	ldr	r2, [r3, #20]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80086e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68da      	ldr	r2, [r3, #12]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2220      	movs	r2, #32
 8008700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2220      	movs	r2, #32
 8008708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b08a      	sub	sp, #40	; 0x28
 800871a:	af02      	add	r7, sp, #8
 800871c:	60f8      	str	r0, [r7, #12]
 800871e:	60b9      	str	r1, [r7, #8]
 8008720:	603b      	str	r3, [r7, #0]
 8008722:	4613      	mov	r3, r2
 8008724:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008726:	2300      	movs	r3, #0
 8008728:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b20      	cmp	r3, #32
 8008734:	d17c      	bne.n	8008830 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <HAL_UART_Transmit+0x2c>
 800873c:	88fb      	ldrh	r3, [r7, #6]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d101      	bne.n	8008746 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e075      	b.n	8008832 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800874c:	2b01      	cmp	r3, #1
 800874e:	d101      	bne.n	8008754 <HAL_UART_Transmit+0x3e>
 8008750:	2302      	movs	r3, #2
 8008752:	e06e      	b.n	8008832 <HAL_UART_Transmit+0x11c>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2221      	movs	r2, #33	; 0x21
 8008766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800876a:	f7f9 ffd5 	bl	8002718 <HAL_GetTick>
 800876e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	88fa      	ldrh	r2, [r7, #6]
 8008774:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	88fa      	ldrh	r2, [r7, #6]
 800877a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008784:	d108      	bne.n	8008798 <HAL_UART_Transmit+0x82>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d104      	bne.n	8008798 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800878e:	2300      	movs	r3, #0
 8008790:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	61bb      	str	r3, [r7, #24]
 8008796:	e003      	b.n	80087a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800879c:	2300      	movs	r3, #0
 800879e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80087a8:	e02a      	b.n	8008800 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	2200      	movs	r2, #0
 80087b2:	2180      	movs	r1, #128	; 0x80
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f000 faf9 	bl	8008dac <UART_WaitOnFlagUntilTimeout>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d001      	beq.n	80087c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e036      	b.n	8008832 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d10b      	bne.n	80087e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	881b      	ldrh	r3, [r3, #0]
 80087ce:	461a      	mov	r2, r3
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	3302      	adds	r3, #2
 80087de:	61bb      	str	r3, [r7, #24]
 80087e0:	e007      	b.n	80087f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	781a      	ldrb	r2, [r3, #0]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	3301      	adds	r3, #1
 80087f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	3b01      	subs	r3, #1
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008804:	b29b      	uxth	r3, r3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1cf      	bne.n	80087aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2200      	movs	r2, #0
 8008812:	2140      	movs	r1, #64	; 0x40
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f000 fac9 	bl	8008dac <UART_WaitOnFlagUntilTimeout>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008820:	2303      	movs	r3, #3
 8008822:	e006      	b.n	8008832 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2220      	movs	r2, #32
 8008828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800882c:	2300      	movs	r3, #0
 800882e:	e000      	b.n	8008832 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008830:	2302      	movs	r3, #2
  }
}
 8008832:	4618      	mov	r0, r3
 8008834:	3720      	adds	r7, #32
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
	...

0800883c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b0ba      	sub	sp, #232	; 0xe8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008862:	2300      	movs	r3, #0
 8008864:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008868:	2300      	movs	r3, #0
 800886a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800886e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008872:	f003 030f 	and.w	r3, r3, #15
 8008876:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800887a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10f      	bne.n	80088a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008886:	f003 0320 	and.w	r3, r3, #32
 800888a:	2b00      	cmp	r3, #0
 800888c:	d009      	beq.n	80088a2 <HAL_UART_IRQHandler+0x66>
 800888e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008892:	f003 0320 	and.w	r3, r3, #32
 8008896:	2b00      	cmp	r3, #0
 8008898:	d003      	beq.n	80088a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fbd3 	bl	8009046 <UART_Receive_IT>
      return;
 80088a0:	e256      	b.n	8008d50 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80088a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f000 80de 	beq.w	8008a68 <HAL_UART_IRQHandler+0x22c>
 80088ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088b0:	f003 0301 	and.w	r3, r3, #1
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d106      	bne.n	80088c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80088b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f000 80d1 	beq.w	8008a68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80088c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088ca:	f003 0301 	and.w	r3, r3, #1
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00b      	beq.n	80088ea <HAL_UART_IRQHandler+0xae>
 80088d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d005      	beq.n	80088ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e2:	f043 0201 	orr.w	r2, r3, #1
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80088ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088ee:	f003 0304 	and.w	r3, r3, #4
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d00b      	beq.n	800890e <HAL_UART_IRQHandler+0xd2>
 80088f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088fa:	f003 0301 	and.w	r3, r3, #1
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d005      	beq.n	800890e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008906:	f043 0202 	orr.w	r2, r3, #2
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800890e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008912:	f003 0302 	and.w	r3, r3, #2
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00b      	beq.n	8008932 <HAL_UART_IRQHandler+0xf6>
 800891a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	2b00      	cmp	r3, #0
 8008924:	d005      	beq.n	8008932 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892a:	f043 0204 	orr.w	r2, r3, #4
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008936:	f003 0308 	and.w	r3, r3, #8
 800893a:	2b00      	cmp	r3, #0
 800893c:	d011      	beq.n	8008962 <HAL_UART_IRQHandler+0x126>
 800893e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008942:	f003 0320 	and.w	r3, r3, #32
 8008946:	2b00      	cmp	r3, #0
 8008948:	d105      	bne.n	8008956 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800894a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	2b00      	cmp	r3, #0
 8008954:	d005      	beq.n	8008962 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895a:	f043 0208 	orr.w	r2, r3, #8
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008966:	2b00      	cmp	r3, #0
 8008968:	f000 81ed 	beq.w	8008d46 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800896c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008970:	f003 0320 	and.w	r3, r3, #32
 8008974:	2b00      	cmp	r3, #0
 8008976:	d008      	beq.n	800898a <HAL_UART_IRQHandler+0x14e>
 8008978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800897c:	f003 0320 	and.w	r3, r3, #32
 8008980:	2b00      	cmp	r3, #0
 8008982:	d002      	beq.n	800898a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 fb5e 	bl	8009046 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	695b      	ldr	r3, [r3, #20]
 8008990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008994:	2b40      	cmp	r3, #64	; 0x40
 8008996:	bf0c      	ite	eq
 8008998:	2301      	moveq	r3, #1
 800899a:	2300      	movne	r3, #0
 800899c:	b2db      	uxtb	r3, r3
 800899e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a6:	f003 0308 	and.w	r3, r3, #8
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d103      	bne.n	80089b6 <HAL_UART_IRQHandler+0x17a>
 80089ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d04f      	beq.n	8008a56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fa66 	bl	8008e88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c6:	2b40      	cmp	r3, #64	; 0x40
 80089c8:	d141      	bne.n	8008a4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	3314      	adds	r3, #20
 80089d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089d8:	e853 3f00 	ldrex	r3, [r3]
 80089dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80089e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	3314      	adds	r3, #20
 80089f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80089f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80089fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008a02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008a06:	e841 2300 	strex	r3, r2, [r1]
 8008a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008a0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1d9      	bne.n	80089ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d013      	beq.n	8008a46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a22:	4a7d      	ldr	r2, [pc, #500]	; (8008c18 <HAL_UART_IRQHandler+0x3dc>)
 8008a24:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fa fc08 	bl	8003240 <HAL_DMA_Abort_IT>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d016      	beq.n	8008a64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008a40:	4610      	mov	r0, r2
 8008a42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a44:	e00e      	b.n	8008a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f99a 	bl	8008d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a4c:	e00a      	b.n	8008a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f996 	bl	8008d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a54:	e006      	b.n	8008a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f992 	bl	8008d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008a62:	e170      	b.n	8008d46 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a64:	bf00      	nop
    return;
 8008a66:	e16e      	b.n	8008d46 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	f040 814a 	bne.w	8008d06 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a76:	f003 0310 	and.w	r3, r3, #16
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f000 8143 	beq.w	8008d06 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a84:	f003 0310 	and.w	r3, r3, #16
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f000 813c 	beq.w	8008d06 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a8e:	2300      	movs	r3, #0
 8008a90:	60bb      	str	r3, [r7, #8]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	60bb      	str	r3, [r7, #8]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	60bb      	str	r3, [r7, #8]
 8008aa2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aae:	2b40      	cmp	r3, #64	; 0x40
 8008ab0:	f040 80b4 	bne.w	8008c1c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ac0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f000 8140 	beq.w	8008d4a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ace:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	f080 8139 	bcs.w	8008d4a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008ade:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae4:	69db      	ldr	r3, [r3, #28]
 8008ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aea:	f000 8088 	beq.w	8008bfe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	330c      	adds	r3, #12
 8008af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008afc:	e853 3f00 	ldrex	r3, [r3]
 8008b00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	330c      	adds	r3, #12
 8008b16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008b1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008b1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008b26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008b2a:	e841 2300 	strex	r3, r2, [r1]
 8008b2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1d9      	bne.n	8008aee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	3314      	adds	r3, #20
 8008b40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b44:	e853 3f00 	ldrex	r3, [r3]
 8008b48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008b4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b4c:	f023 0301 	bic.w	r3, r3, #1
 8008b50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	3314      	adds	r3, #20
 8008b5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008b5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008b62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008b66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b6a:	e841 2300 	strex	r3, r2, [r1]
 8008b6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1e1      	bne.n	8008b3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	3314      	adds	r3, #20
 8008b7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b80:	e853 3f00 	ldrex	r3, [r3]
 8008b84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	3314      	adds	r3, #20
 8008b96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008b9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ba0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ba2:	e841 2300 	strex	r3, r2, [r1]
 8008ba6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1e3      	bne.n	8008b76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2220      	movs	r2, #32
 8008bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	330c      	adds	r3, #12
 8008bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bc6:	e853 3f00 	ldrex	r3, [r3]
 8008bca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bce:	f023 0310 	bic.w	r3, r3, #16
 8008bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	330c      	adds	r3, #12
 8008bdc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008be0:	65ba      	str	r2, [r7, #88]	; 0x58
 8008be2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008be6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008be8:	e841 2300 	strex	r3, r2, [r1]
 8008bec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1e3      	bne.n	8008bbc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7fa fab1 	bl	8003160 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f8c0 	bl	8008d94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c14:	e099      	b.n	8008d4a <HAL_UART_IRQHandler+0x50e>
 8008c16:	bf00      	nop
 8008c18:	08008f4f 	.word	0x08008f4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	1ad3      	subs	r3, r2, r3
 8008c28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f000 808b 	beq.w	8008d4e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008c38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f000 8086 	beq.w	8008d4e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	330c      	adds	r3, #12
 8008c48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4c:	e853 3f00 	ldrex	r3, [r3]
 8008c50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	330c      	adds	r3, #12
 8008c62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008c66:	647a      	str	r2, [r7, #68]	; 0x44
 8008c68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c6e:	e841 2300 	strex	r3, r2, [r1]
 8008c72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1e3      	bne.n	8008c42 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	3314      	adds	r3, #20
 8008c80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c84:	e853 3f00 	ldrex	r3, [r3]
 8008c88:	623b      	str	r3, [r7, #32]
   return(result);
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	f023 0301 	bic.w	r3, r3, #1
 8008c90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	3314      	adds	r3, #20
 8008c9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008c9e:	633a      	str	r2, [r7, #48]	; 0x30
 8008ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ca6:	e841 2300 	strex	r3, r2, [r1]
 8008caa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1e3      	bne.n	8008c7a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2220      	movs	r2, #32
 8008cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	330c      	adds	r3, #12
 8008cc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	e853 3f00 	ldrex	r3, [r3]
 8008cce:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f023 0310 	bic.w	r3, r3, #16
 8008cd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	330c      	adds	r3, #12
 8008ce0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008ce4:	61fa      	str	r2, [r7, #28]
 8008ce6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce8:	69b9      	ldr	r1, [r7, #24]
 8008cea:	69fa      	ldr	r2, [r7, #28]
 8008cec:	e841 2300 	strex	r3, r2, [r1]
 8008cf0:	617b      	str	r3, [r7, #20]
   return(result);
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1e3      	bne.n	8008cc0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008cf8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f848 	bl	8008d94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008d04:	e023      	b.n	8008d4e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d009      	beq.n	8008d26 <HAL_UART_IRQHandler+0x4ea>
 8008d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d003      	beq.n	8008d26 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f929 	bl	8008f76 <UART_Transmit_IT>
    return;
 8008d24:	e014      	b.n	8008d50 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00e      	beq.n	8008d50 <HAL_UART_IRQHandler+0x514>
 8008d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d008      	beq.n	8008d50 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 f969 	bl	8009016 <UART_EndTransmit_IT>
    return;
 8008d44:	e004      	b.n	8008d50 <HAL_UART_IRQHandler+0x514>
    return;
 8008d46:	bf00      	nop
 8008d48:	e002      	b.n	8008d50 <HAL_UART_IRQHandler+0x514>
      return;
 8008d4a:	bf00      	nop
 8008d4c:	e000      	b.n	8008d50 <HAL_UART_IRQHandler+0x514>
      return;
 8008d4e:	bf00      	nop
  }
}
 8008d50:	37e8      	adds	r7, #232	; 0xe8
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop

08008d58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008d74:	bf00      	nop
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b090      	sub	sp, #64	; 0x40
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	603b      	str	r3, [r7, #0]
 8008db8:	4613      	mov	r3, r2
 8008dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dbc:	e050      	b.n	8008e60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc4:	d04c      	beq.n	8008e60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d007      	beq.n	8008ddc <UART_WaitOnFlagUntilTimeout+0x30>
 8008dcc:	f7f9 fca4 	bl	8002718 <HAL_GetTick>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d241      	bcs.n	8008e60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	330c      	adds	r3, #12
 8008de2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de6:	e853 3f00 	ldrex	r3, [r3]
 8008dea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	330c      	adds	r3, #12
 8008dfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008dfc:	637a      	str	r2, [r7, #52]	; 0x34
 8008dfe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e04:	e841 2300 	strex	r3, r2, [r1]
 8008e08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1e5      	bne.n	8008ddc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	3314      	adds	r3, #20
 8008e16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	e853 3f00 	ldrex	r3, [r3]
 8008e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	f023 0301 	bic.w	r3, r3, #1
 8008e26:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3314      	adds	r3, #20
 8008e2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e30:	623a      	str	r2, [r7, #32]
 8008e32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e34:	69f9      	ldr	r1, [r7, #28]
 8008e36:	6a3a      	ldr	r2, [r7, #32]
 8008e38:	e841 2300 	strex	r3, r2, [r1]
 8008e3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d1e5      	bne.n	8008e10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2220      	movs	r2, #32
 8008e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2220      	movs	r2, #32
 8008e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e00f      	b.n	8008e80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	4013      	ands	r3, r2
 8008e6a:	68ba      	ldr	r2, [r7, #8]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	bf0c      	ite	eq
 8008e70:	2301      	moveq	r3, #1
 8008e72:	2300      	movne	r3, #0
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	461a      	mov	r2, r3
 8008e78:	79fb      	ldrb	r3, [r7, #7]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d09f      	beq.n	8008dbe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3740      	adds	r7, #64	; 0x40
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b095      	sub	sp, #84	; 0x54
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	330c      	adds	r3, #12
 8008e96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e9a:	e853 3f00 	ldrex	r3, [r3]
 8008e9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	330c      	adds	r3, #12
 8008eae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008eb0:	643a      	str	r2, [r7, #64]	; 0x40
 8008eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008eb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008eb8:	e841 2300 	strex	r3, r2, [r1]
 8008ebc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1e5      	bne.n	8008e90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	3314      	adds	r3, #20
 8008eca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ecc:	6a3b      	ldr	r3, [r7, #32]
 8008ece:	e853 3f00 	ldrex	r3, [r3]
 8008ed2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	f023 0301 	bic.w	r3, r3, #1
 8008eda:	64bb      	str	r3, [r7, #72]	; 0x48
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	3314      	adds	r3, #20
 8008ee2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ee4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ee6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eec:	e841 2300 	strex	r3, r2, [r1]
 8008ef0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1e5      	bne.n	8008ec4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d119      	bne.n	8008f34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	330c      	adds	r3, #12
 8008f06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	e853 3f00 	ldrex	r3, [r3]
 8008f0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	f023 0310 	bic.w	r3, r3, #16
 8008f16:	647b      	str	r3, [r7, #68]	; 0x44
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	330c      	adds	r3, #12
 8008f1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f20:	61ba      	str	r2, [r7, #24]
 8008f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f24:	6979      	ldr	r1, [r7, #20]
 8008f26:	69ba      	ldr	r2, [r7, #24]
 8008f28:	e841 2300 	strex	r3, r2, [r1]
 8008f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d1e5      	bne.n	8008f00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2220      	movs	r2, #32
 8008f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008f42:	bf00      	nop
 8008f44:	3754      	adds	r7, #84	; 0x54
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr

08008f4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b084      	sub	sp, #16
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2200      	movs	r2, #0
 8008f66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	f7ff ff09 	bl	8008d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f6e:	bf00      	nop
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008f76:	b480      	push	{r7}
 8008f78:	b085      	sub	sp, #20
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	2b21      	cmp	r3, #33	; 0x21
 8008f88:	d13e      	bne.n	8009008 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f92:	d114      	bne.n	8008fbe <UART_Transmit_IT+0x48>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d110      	bne.n	8008fbe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6a1b      	ldr	r3, [r3, #32]
 8008fa0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	881b      	ldrh	r3, [r3, #0]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fb0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	1c9a      	adds	r2, r3, #2
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	621a      	str	r2, [r3, #32]
 8008fbc:	e008      	b.n	8008fd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a1b      	ldr	r3, [r3, #32]
 8008fc2:	1c59      	adds	r1, r3, #1
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	6211      	str	r1, [r2, #32]
 8008fc8:	781a      	ldrb	r2, [r3, #0]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	4619      	mov	r1, r3
 8008fde:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10f      	bne.n	8009004 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	68da      	ldr	r2, [r3, #12]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ff2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68da      	ldr	r2, [r3, #12]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009002:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009004:	2300      	movs	r3, #0
 8009006:	e000      	b.n	800900a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009008:	2302      	movs	r3, #2
  }
}
 800900a:	4618      	mov	r0, r3
 800900c:	3714      	adds	r7, #20
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b082      	sub	sp, #8
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68da      	ldr	r2, [r3, #12]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800902c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2220      	movs	r2, #32
 8009032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f7ff fe8e 	bl	8008d58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b08c      	sub	sp, #48	; 0x30
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009054:	b2db      	uxtb	r3, r3
 8009056:	2b22      	cmp	r3, #34	; 0x22
 8009058:	f040 80ab 	bne.w	80091b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009064:	d117      	bne.n	8009096 <UART_Receive_IT+0x50>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d113      	bne.n	8009096 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800906e:	2300      	movs	r3, #0
 8009070:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009076:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	b29b      	uxth	r3, r3
 8009080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009084:	b29a      	uxth	r2, r3
 8009086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009088:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800908e:	1c9a      	adds	r2, r3, #2
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	629a      	str	r2, [r3, #40]	; 0x28
 8009094:	e026      	b.n	80090e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800909c:	2300      	movs	r3, #0
 800909e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090a8:	d007      	beq.n	80090ba <UART_Receive_IT+0x74>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10a      	bne.n	80090c8 <UART_Receive_IT+0x82>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d106      	bne.n	80090c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	b2da      	uxtb	r2, r3
 80090c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c4:	701a      	strb	r2, [r3, #0]
 80090c6:	e008      	b.n	80090da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090d4:	b2da      	uxtb	r2, r3
 80090d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090de:	1c5a      	adds	r2, r3, #1
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	3b01      	subs	r3, #1
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	4619      	mov	r1, r3
 80090f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d15a      	bne.n	80091ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	68da      	ldr	r2, [r3, #12]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f022 0220 	bic.w	r2, r2, #32
 8009106:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	68da      	ldr	r2, [r3, #12]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009116:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	695a      	ldr	r2, [r3, #20]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f022 0201 	bic.w	r2, r2, #1
 8009126:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2220      	movs	r2, #32
 800912c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009134:	2b01      	cmp	r3, #1
 8009136:	d135      	bne.n	80091a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	330c      	adds	r3, #12
 8009144:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	e853 3f00 	ldrex	r3, [r3]
 800914c:	613b      	str	r3, [r7, #16]
   return(result);
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	f023 0310 	bic.w	r3, r3, #16
 8009154:	627b      	str	r3, [r7, #36]	; 0x24
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	330c      	adds	r3, #12
 800915c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800915e:	623a      	str	r2, [r7, #32]
 8009160:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009162:	69f9      	ldr	r1, [r7, #28]
 8009164:	6a3a      	ldr	r2, [r7, #32]
 8009166:	e841 2300 	strex	r3, r2, [r1]
 800916a:	61bb      	str	r3, [r7, #24]
   return(result);
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1e5      	bne.n	800913e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 0310 	and.w	r3, r3, #16
 800917c:	2b10      	cmp	r3, #16
 800917e:	d10a      	bne.n	8009196 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009180:	2300      	movs	r3, #0
 8009182:	60fb      	str	r3, [r7, #12]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	60fb      	str	r3, [r7, #12]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	60fb      	str	r3, [r7, #12]
 8009194:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7ff fdf9 	bl	8008d94 <HAL_UARTEx_RxEventCallback>
 80091a2:	e002      	b.n	80091aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7ff fde1 	bl	8008d6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80091aa:	2300      	movs	r3, #0
 80091ac:	e002      	b.n	80091b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80091ae:	2300      	movs	r3, #0
 80091b0:	e000      	b.n	80091b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80091b2:	2302      	movs	r3, #2
  }
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3730      	adds	r7, #48	; 0x30
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c0:	b09f      	sub	sp, #124	; 0x7c
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	691b      	ldr	r3, [r3, #16]
 80091cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80091d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091d2:	68d9      	ldr	r1, [r3, #12]
 80091d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	ea40 0301 	orr.w	r3, r0, r1
 80091dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80091de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091e0:	689a      	ldr	r2, [r3, #8]
 80091e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	431a      	orrs	r2, r3
 80091e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091ea:	695b      	ldr	r3, [r3, #20]
 80091ec:	431a      	orrs	r2, r3
 80091ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091f0:	69db      	ldr	r3, [r3, #28]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80091f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009200:	f021 010c 	bic.w	r1, r1, #12
 8009204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800920a:	430b      	orrs	r3, r1
 800920c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800920e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	695b      	ldr	r3, [r3, #20]
 8009214:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800921a:	6999      	ldr	r1, [r3, #24]
 800921c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	ea40 0301 	orr.w	r3, r0, r1
 8009224:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	4bc5      	ldr	r3, [pc, #788]	; (8009540 <UART_SetConfig+0x384>)
 800922c:	429a      	cmp	r2, r3
 800922e:	d004      	beq.n	800923a <UART_SetConfig+0x7e>
 8009230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	4bc3      	ldr	r3, [pc, #780]	; (8009544 <UART_SetConfig+0x388>)
 8009236:	429a      	cmp	r2, r3
 8009238:	d103      	bne.n	8009242 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800923a:	f7ff f9c7 	bl	80085cc <HAL_RCC_GetPCLK2Freq>
 800923e:	6778      	str	r0, [r7, #116]	; 0x74
 8009240:	e002      	b.n	8009248 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009242:	f7ff f9af 	bl	80085a4 <HAL_RCC_GetPCLK1Freq>
 8009246:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800924a:	69db      	ldr	r3, [r3, #28]
 800924c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009250:	f040 80b6 	bne.w	80093c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009256:	461c      	mov	r4, r3
 8009258:	f04f 0500 	mov.w	r5, #0
 800925c:	4622      	mov	r2, r4
 800925e:	462b      	mov	r3, r5
 8009260:	1891      	adds	r1, r2, r2
 8009262:	6439      	str	r1, [r7, #64]	; 0x40
 8009264:	415b      	adcs	r3, r3
 8009266:	647b      	str	r3, [r7, #68]	; 0x44
 8009268:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800926c:	1912      	adds	r2, r2, r4
 800926e:	eb45 0303 	adc.w	r3, r5, r3
 8009272:	f04f 0000 	mov.w	r0, #0
 8009276:	f04f 0100 	mov.w	r1, #0
 800927a:	00d9      	lsls	r1, r3, #3
 800927c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009280:	00d0      	lsls	r0, r2, #3
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	1911      	adds	r1, r2, r4
 8009288:	6639      	str	r1, [r7, #96]	; 0x60
 800928a:	416b      	adcs	r3, r5
 800928c:	667b      	str	r3, [r7, #100]	; 0x64
 800928e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	461a      	mov	r2, r3
 8009294:	f04f 0300 	mov.w	r3, #0
 8009298:	1891      	adds	r1, r2, r2
 800929a:	63b9      	str	r1, [r7, #56]	; 0x38
 800929c:	415b      	adcs	r3, r3
 800929e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80092a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80092a8:	f7f7 fc7e 	bl	8000ba8 <__aeabi_uldivmod>
 80092ac:	4602      	mov	r2, r0
 80092ae:	460b      	mov	r3, r1
 80092b0:	4ba5      	ldr	r3, [pc, #660]	; (8009548 <UART_SetConfig+0x38c>)
 80092b2:	fba3 2302 	umull	r2, r3, r3, r2
 80092b6:	095b      	lsrs	r3, r3, #5
 80092b8:	011e      	lsls	r6, r3, #4
 80092ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092bc:	461c      	mov	r4, r3
 80092be:	f04f 0500 	mov.w	r5, #0
 80092c2:	4622      	mov	r2, r4
 80092c4:	462b      	mov	r3, r5
 80092c6:	1891      	adds	r1, r2, r2
 80092c8:	6339      	str	r1, [r7, #48]	; 0x30
 80092ca:	415b      	adcs	r3, r3
 80092cc:	637b      	str	r3, [r7, #52]	; 0x34
 80092ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80092d2:	1912      	adds	r2, r2, r4
 80092d4:	eb45 0303 	adc.w	r3, r5, r3
 80092d8:	f04f 0000 	mov.w	r0, #0
 80092dc:	f04f 0100 	mov.w	r1, #0
 80092e0:	00d9      	lsls	r1, r3, #3
 80092e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80092e6:	00d0      	lsls	r0, r2, #3
 80092e8:	4602      	mov	r2, r0
 80092ea:	460b      	mov	r3, r1
 80092ec:	1911      	adds	r1, r2, r4
 80092ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80092f0:	416b      	adcs	r3, r5
 80092f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	461a      	mov	r2, r3
 80092fa:	f04f 0300 	mov.w	r3, #0
 80092fe:	1891      	adds	r1, r2, r2
 8009300:	62b9      	str	r1, [r7, #40]	; 0x28
 8009302:	415b      	adcs	r3, r3
 8009304:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009306:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800930a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800930e:	f7f7 fc4b 	bl	8000ba8 <__aeabi_uldivmod>
 8009312:	4602      	mov	r2, r0
 8009314:	460b      	mov	r3, r1
 8009316:	4b8c      	ldr	r3, [pc, #560]	; (8009548 <UART_SetConfig+0x38c>)
 8009318:	fba3 1302 	umull	r1, r3, r3, r2
 800931c:	095b      	lsrs	r3, r3, #5
 800931e:	2164      	movs	r1, #100	; 0x64
 8009320:	fb01 f303 	mul.w	r3, r1, r3
 8009324:	1ad3      	subs	r3, r2, r3
 8009326:	00db      	lsls	r3, r3, #3
 8009328:	3332      	adds	r3, #50	; 0x32
 800932a:	4a87      	ldr	r2, [pc, #540]	; (8009548 <UART_SetConfig+0x38c>)
 800932c:	fba2 2303 	umull	r2, r3, r2, r3
 8009330:	095b      	lsrs	r3, r3, #5
 8009332:	005b      	lsls	r3, r3, #1
 8009334:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009338:	441e      	add	r6, r3
 800933a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800933c:	4618      	mov	r0, r3
 800933e:	f04f 0100 	mov.w	r1, #0
 8009342:	4602      	mov	r2, r0
 8009344:	460b      	mov	r3, r1
 8009346:	1894      	adds	r4, r2, r2
 8009348:	623c      	str	r4, [r7, #32]
 800934a:	415b      	adcs	r3, r3
 800934c:	627b      	str	r3, [r7, #36]	; 0x24
 800934e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009352:	1812      	adds	r2, r2, r0
 8009354:	eb41 0303 	adc.w	r3, r1, r3
 8009358:	f04f 0400 	mov.w	r4, #0
 800935c:	f04f 0500 	mov.w	r5, #0
 8009360:	00dd      	lsls	r5, r3, #3
 8009362:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009366:	00d4      	lsls	r4, r2, #3
 8009368:	4622      	mov	r2, r4
 800936a:	462b      	mov	r3, r5
 800936c:	1814      	adds	r4, r2, r0
 800936e:	653c      	str	r4, [r7, #80]	; 0x50
 8009370:	414b      	adcs	r3, r1
 8009372:	657b      	str	r3, [r7, #84]	; 0x54
 8009374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	461a      	mov	r2, r3
 800937a:	f04f 0300 	mov.w	r3, #0
 800937e:	1891      	adds	r1, r2, r2
 8009380:	61b9      	str	r1, [r7, #24]
 8009382:	415b      	adcs	r3, r3
 8009384:	61fb      	str	r3, [r7, #28]
 8009386:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800938a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800938e:	f7f7 fc0b 	bl	8000ba8 <__aeabi_uldivmod>
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	4b6c      	ldr	r3, [pc, #432]	; (8009548 <UART_SetConfig+0x38c>)
 8009398:	fba3 1302 	umull	r1, r3, r3, r2
 800939c:	095b      	lsrs	r3, r3, #5
 800939e:	2164      	movs	r1, #100	; 0x64
 80093a0:	fb01 f303 	mul.w	r3, r1, r3
 80093a4:	1ad3      	subs	r3, r2, r3
 80093a6:	00db      	lsls	r3, r3, #3
 80093a8:	3332      	adds	r3, #50	; 0x32
 80093aa:	4a67      	ldr	r2, [pc, #412]	; (8009548 <UART_SetConfig+0x38c>)
 80093ac:	fba2 2303 	umull	r2, r3, r2, r3
 80093b0:	095b      	lsrs	r3, r3, #5
 80093b2:	f003 0207 	and.w	r2, r3, #7
 80093b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4432      	add	r2, r6
 80093bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80093be:	e0b9      	b.n	8009534 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093c2:	461c      	mov	r4, r3
 80093c4:	f04f 0500 	mov.w	r5, #0
 80093c8:	4622      	mov	r2, r4
 80093ca:	462b      	mov	r3, r5
 80093cc:	1891      	adds	r1, r2, r2
 80093ce:	6139      	str	r1, [r7, #16]
 80093d0:	415b      	adcs	r3, r3
 80093d2:	617b      	str	r3, [r7, #20]
 80093d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80093d8:	1912      	adds	r2, r2, r4
 80093da:	eb45 0303 	adc.w	r3, r5, r3
 80093de:	f04f 0000 	mov.w	r0, #0
 80093e2:	f04f 0100 	mov.w	r1, #0
 80093e6:	00d9      	lsls	r1, r3, #3
 80093e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80093ec:	00d0      	lsls	r0, r2, #3
 80093ee:	4602      	mov	r2, r0
 80093f0:	460b      	mov	r3, r1
 80093f2:	eb12 0804 	adds.w	r8, r2, r4
 80093f6:	eb43 0905 	adc.w	r9, r3, r5
 80093fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	4618      	mov	r0, r3
 8009400:	f04f 0100 	mov.w	r1, #0
 8009404:	f04f 0200 	mov.w	r2, #0
 8009408:	f04f 0300 	mov.w	r3, #0
 800940c:	008b      	lsls	r3, r1, #2
 800940e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009412:	0082      	lsls	r2, r0, #2
 8009414:	4640      	mov	r0, r8
 8009416:	4649      	mov	r1, r9
 8009418:	f7f7 fbc6 	bl	8000ba8 <__aeabi_uldivmod>
 800941c:	4602      	mov	r2, r0
 800941e:	460b      	mov	r3, r1
 8009420:	4b49      	ldr	r3, [pc, #292]	; (8009548 <UART_SetConfig+0x38c>)
 8009422:	fba3 2302 	umull	r2, r3, r3, r2
 8009426:	095b      	lsrs	r3, r3, #5
 8009428:	011e      	lsls	r6, r3, #4
 800942a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800942c:	4618      	mov	r0, r3
 800942e:	f04f 0100 	mov.w	r1, #0
 8009432:	4602      	mov	r2, r0
 8009434:	460b      	mov	r3, r1
 8009436:	1894      	adds	r4, r2, r2
 8009438:	60bc      	str	r4, [r7, #8]
 800943a:	415b      	adcs	r3, r3
 800943c:	60fb      	str	r3, [r7, #12]
 800943e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009442:	1812      	adds	r2, r2, r0
 8009444:	eb41 0303 	adc.w	r3, r1, r3
 8009448:	f04f 0400 	mov.w	r4, #0
 800944c:	f04f 0500 	mov.w	r5, #0
 8009450:	00dd      	lsls	r5, r3, #3
 8009452:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009456:	00d4      	lsls	r4, r2, #3
 8009458:	4622      	mov	r2, r4
 800945a:	462b      	mov	r3, r5
 800945c:	1814      	adds	r4, r2, r0
 800945e:	64bc      	str	r4, [r7, #72]	; 0x48
 8009460:	414b      	adcs	r3, r1
 8009462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	4618      	mov	r0, r3
 800946a:	f04f 0100 	mov.w	r1, #0
 800946e:	f04f 0200 	mov.w	r2, #0
 8009472:	f04f 0300 	mov.w	r3, #0
 8009476:	008b      	lsls	r3, r1, #2
 8009478:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800947c:	0082      	lsls	r2, r0, #2
 800947e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009482:	f7f7 fb91 	bl	8000ba8 <__aeabi_uldivmod>
 8009486:	4602      	mov	r2, r0
 8009488:	460b      	mov	r3, r1
 800948a:	4b2f      	ldr	r3, [pc, #188]	; (8009548 <UART_SetConfig+0x38c>)
 800948c:	fba3 1302 	umull	r1, r3, r3, r2
 8009490:	095b      	lsrs	r3, r3, #5
 8009492:	2164      	movs	r1, #100	; 0x64
 8009494:	fb01 f303 	mul.w	r3, r1, r3
 8009498:	1ad3      	subs	r3, r2, r3
 800949a:	011b      	lsls	r3, r3, #4
 800949c:	3332      	adds	r3, #50	; 0x32
 800949e:	4a2a      	ldr	r2, [pc, #168]	; (8009548 <UART_SetConfig+0x38c>)
 80094a0:	fba2 2303 	umull	r2, r3, r2, r3
 80094a4:	095b      	lsrs	r3, r3, #5
 80094a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094aa:	441e      	add	r6, r3
 80094ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094ae:	4618      	mov	r0, r3
 80094b0:	f04f 0100 	mov.w	r1, #0
 80094b4:	4602      	mov	r2, r0
 80094b6:	460b      	mov	r3, r1
 80094b8:	1894      	adds	r4, r2, r2
 80094ba:	603c      	str	r4, [r7, #0]
 80094bc:	415b      	adcs	r3, r3
 80094be:	607b      	str	r3, [r7, #4]
 80094c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094c4:	1812      	adds	r2, r2, r0
 80094c6:	eb41 0303 	adc.w	r3, r1, r3
 80094ca:	f04f 0400 	mov.w	r4, #0
 80094ce:	f04f 0500 	mov.w	r5, #0
 80094d2:	00dd      	lsls	r5, r3, #3
 80094d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80094d8:	00d4      	lsls	r4, r2, #3
 80094da:	4622      	mov	r2, r4
 80094dc:	462b      	mov	r3, r5
 80094de:	eb12 0a00 	adds.w	sl, r2, r0
 80094e2:	eb43 0b01 	adc.w	fp, r3, r1
 80094e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f04f 0100 	mov.w	r1, #0
 80094f0:	f04f 0200 	mov.w	r2, #0
 80094f4:	f04f 0300 	mov.w	r3, #0
 80094f8:	008b      	lsls	r3, r1, #2
 80094fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80094fe:	0082      	lsls	r2, r0, #2
 8009500:	4650      	mov	r0, sl
 8009502:	4659      	mov	r1, fp
 8009504:	f7f7 fb50 	bl	8000ba8 <__aeabi_uldivmod>
 8009508:	4602      	mov	r2, r0
 800950a:	460b      	mov	r3, r1
 800950c:	4b0e      	ldr	r3, [pc, #56]	; (8009548 <UART_SetConfig+0x38c>)
 800950e:	fba3 1302 	umull	r1, r3, r3, r2
 8009512:	095b      	lsrs	r3, r3, #5
 8009514:	2164      	movs	r1, #100	; 0x64
 8009516:	fb01 f303 	mul.w	r3, r1, r3
 800951a:	1ad3      	subs	r3, r2, r3
 800951c:	011b      	lsls	r3, r3, #4
 800951e:	3332      	adds	r3, #50	; 0x32
 8009520:	4a09      	ldr	r2, [pc, #36]	; (8009548 <UART_SetConfig+0x38c>)
 8009522:	fba2 2303 	umull	r2, r3, r2, r3
 8009526:	095b      	lsrs	r3, r3, #5
 8009528:	f003 020f 	and.w	r2, r3, #15
 800952c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4432      	add	r2, r6
 8009532:	609a      	str	r2, [r3, #8]
}
 8009534:	bf00      	nop
 8009536:	377c      	adds	r7, #124	; 0x7c
 8009538:	46bd      	mov	sp, r7
 800953a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800953e:	bf00      	nop
 8009540:	40011000 	.word	0x40011000
 8009544:	40011400 	.word	0x40011400
 8009548:	51eb851f 	.word	0x51eb851f

0800954c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8009556:	2300      	movs	r3, #0
 8009558:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009564:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	4b20      	ldr	r3, [pc, #128]	; (80095ec <FSMC_NORSRAM_Init+0xa0>)
 800956a:	4013      	ands	r3, r2
 800956c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009576:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800957c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8009582:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8009588:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800958e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8009594:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800959a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80095a0:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80095a6:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80095ac:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80095b2:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80095b8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	4313      	orrs	r3, r2
 80095be:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	2b08      	cmp	r3, #8
 80095c6:	d103      	bne.n	80095d0 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095ce:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	68f9      	ldr	r1, [r7, #12]
 80095d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3714      	adds	r7, #20
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	fff00080 	.word	0xfff00080

080095f0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b087      	sub	sp, #28
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80095fc:	2300      	movs	r3, #0
 80095fe:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	1c5a      	adds	r2, r3, #1
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800960a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009612:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800961e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8009626:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800962e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	3b01      	subs	r3, #1
 8009636:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009638:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	695b      	ldr	r3, [r3, #20]
 800963e:	3b02      	subs	r3, #2
 8009640:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009642:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009648:	4313      	orrs	r3, r2
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	4313      	orrs	r3, r2
 800964e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	1c5a      	adds	r2, r3, #1
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6979      	ldr	r1, [r7, #20]
 8009658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	371c      	adds	r7, #28
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
	...

0800966c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800966c:	b480      	push	{r7}
 800966e:	b087      	sub	sp, #28
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	607a      	str	r2, [r7, #4]
 8009678:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800967a:	2300      	movs	r3, #0
 800967c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009684:	d122      	bne.n	80096cc <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800968e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8009690:	697a      	ldr	r2, [r7, #20]
 8009692:	4b15      	ldr	r3, [pc, #84]	; (80096e8 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8009694:	4013      	ands	r3, r2
 8009696:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80096a2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80096aa:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80096b2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80096b8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80096ba:	697a      	ldr	r2, [r7, #20]
 80096bc:	4313      	orrs	r3, r2
 80096be:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	6979      	ldr	r1, [r7, #20]
 80096c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80096ca:	e005      	b.n	80096d8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80096d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	371c      	adds	r7, #28
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	cff00000 	.word	0xcff00000

080096ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096ec:	b084      	sub	sp, #16
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b084      	sub	sp, #16
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	f107 001c 	add.w	r0, r7, #28
 80096fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80096fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009700:	2b01      	cmp	r3, #1
 8009702:	d122      	bne.n	800974a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009708:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800972c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800972e:	2b01      	cmp	r3, #1
 8009730:	d105      	bne.n	800973e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f9a0 	bl	8009a84 <USB_CoreReset>
 8009744:	4603      	mov	r3, r0
 8009746:	73fb      	strb	r3, [r7, #15]
 8009748:	e01a      	b.n	8009780 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 f994 	bl	8009a84 <USB_CoreReset>
 800975c:	4603      	mov	r3, r0
 800975e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009762:	2b00      	cmp	r3, #0
 8009764:	d106      	bne.n	8009774 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	639a      	str	r2, [r3, #56]	; 0x38
 8009772:	e005      	b.n	8009780 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009778:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009782:	2b01      	cmp	r3, #1
 8009784:	d10b      	bne.n	800979e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	f043 0206 	orr.w	r2, r3, #6
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	f043 0220 	orr.w	r2, r3, #32
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800979e:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097aa:	b004      	add	sp, #16
 80097ac:	4770      	bx	lr

080097ae <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80097ae:	b480      	push	{r7}
 80097b0:	b083      	sub	sp, #12
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	f043 0201 	orr.w	r2, r3, #1
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	f023 0201 	bic.w	r2, r3, #1
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	370c      	adds	r7, #12
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr

080097f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b084      	sub	sp, #16
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
 80097fa:	460b      	mov	r3, r1
 80097fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80097fe:	2300      	movs	r3, #0
 8009800:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800980e:	78fb      	ldrb	r3, [r7, #3]
 8009810:	2b01      	cmp	r3, #1
 8009812:	d115      	bne.n	8009840 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009820:	2001      	movs	r0, #1
 8009822:	f7f8 ff85 	bl	8002730 <HAL_Delay>
      ms++;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	3301      	adds	r3, #1
 800982a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 f91a 	bl	8009a66 <USB_GetMode>
 8009832:	4603      	mov	r3, r0
 8009834:	2b01      	cmp	r3, #1
 8009836:	d01e      	beq.n	8009876 <USB_SetCurrentMode+0x84>
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2b31      	cmp	r3, #49	; 0x31
 800983c:	d9f0      	bls.n	8009820 <USB_SetCurrentMode+0x2e>
 800983e:	e01a      	b.n	8009876 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009840:	78fb      	ldrb	r3, [r7, #3]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d115      	bne.n	8009872 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009852:	2001      	movs	r0, #1
 8009854:	f7f8 ff6c 	bl	8002730 <HAL_Delay>
      ms++;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	3301      	adds	r3, #1
 800985c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f901 	bl	8009a66 <USB_GetMode>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d005      	beq.n	8009876 <USB_SetCurrentMode+0x84>
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2b31      	cmp	r3, #49	; 0x31
 800986e:	d9f0      	bls.n	8009852 <USB_SetCurrentMode+0x60>
 8009870:	e001      	b.n	8009876 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	e005      	b.n	8009882 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2b32      	cmp	r3, #50	; 0x32
 800987a:	d101      	bne.n	8009880 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	e000      	b.n	8009882 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
	...

0800988c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800988c:	b480      	push	{r7}
 800988e:	b085      	sub	sp, #20
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009896:	2300      	movs	r3, #0
 8009898:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	019b      	lsls	r3, r3, #6
 800989e:	f043 0220 	orr.w	r2, r3, #32
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	3301      	adds	r3, #1
 80098aa:	60fb      	str	r3, [r7, #12]
 80098ac:	4a08      	ldr	r2, [pc, #32]	; (80098d0 <USB_FlushTxFifo+0x44>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d901      	bls.n	80098b6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80098b2:	2303      	movs	r3, #3
 80098b4:	e006      	b.n	80098c4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	f003 0320 	and.w	r3, r3, #32
 80098be:	2b20      	cmp	r3, #32
 80098c0:	d0f1      	beq.n	80098a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3714      	adds	r7, #20
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr
 80098d0:	00030d40 	.word	0x00030d40

080098d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098dc:	2300      	movs	r3, #0
 80098de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2210      	movs	r2, #16
 80098e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	3301      	adds	r3, #1
 80098ea:	60fb      	str	r3, [r7, #12]
 80098ec:	4a08      	ldr	r2, [pc, #32]	; (8009910 <USB_FlushRxFifo+0x3c>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d901      	bls.n	80098f6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80098f2:	2303      	movs	r3, #3
 80098f4:	e006      	b.n	8009904 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	691b      	ldr	r3, [r3, #16]
 80098fa:	f003 0310 	and.w	r3, r3, #16
 80098fe:	2b10      	cmp	r3, #16
 8009900:	d0f1      	beq.n	80098e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009902:	2300      	movs	r3, #0
}
 8009904:	4618      	mov	r0, r3
 8009906:	3714      	adds	r7, #20
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr
 8009910:	00030d40 	.word	0x00030d40

08009914 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009914:	b480      	push	{r7}
 8009916:	b089      	sub	sp, #36	; 0x24
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	4611      	mov	r1, r2
 8009920:	461a      	mov	r2, r3
 8009922:	460b      	mov	r3, r1
 8009924:	71fb      	strb	r3, [r7, #7]
 8009926:	4613      	mov	r3, r2
 8009928:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009932:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009936:	2b00      	cmp	r3, #0
 8009938:	d123      	bne.n	8009982 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800993a:	88bb      	ldrh	r3, [r7, #4]
 800993c:	3303      	adds	r3, #3
 800993e:	089b      	lsrs	r3, r3, #2
 8009940:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009942:	2300      	movs	r3, #0
 8009944:	61bb      	str	r3, [r7, #24]
 8009946:	e018      	b.n	800997a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009948:	79fb      	ldrb	r3, [r7, #7]
 800994a:	031a      	lsls	r2, r3, #12
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	4413      	add	r3, r2
 8009950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009954:	461a      	mov	r2, r3
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	3301      	adds	r3, #1
 8009960:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	3301      	adds	r3, #1
 8009966:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	3301      	adds	r3, #1
 800996c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	3301      	adds	r3, #1
 8009972:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	3301      	adds	r3, #1
 8009978:	61bb      	str	r3, [r7, #24]
 800997a:	69ba      	ldr	r2, [r7, #24]
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	429a      	cmp	r2, r3
 8009980:	d3e2      	bcc.n	8009948 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3724      	adds	r7, #36	; 0x24
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009990:	b480      	push	{r7}
 8009992:	b08b      	sub	sp, #44	; 0x2c
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	4613      	mov	r3, r2
 800999c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80099a6:	88fb      	ldrh	r3, [r7, #6]
 80099a8:	089b      	lsrs	r3, r3, #2
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80099ae:	88fb      	ldrh	r3, [r7, #6]
 80099b0:	f003 0303 	and.w	r3, r3, #3
 80099b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80099b6:	2300      	movs	r3, #0
 80099b8:	623b      	str	r3, [r7, #32]
 80099ba:	e014      	b.n	80099e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80099c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ca:	3301      	adds	r3, #1
 80099cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80099ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d0:	3301      	adds	r3, #1
 80099d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80099d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d6:	3301      	adds	r3, #1
 80099d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80099da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099dc:	3301      	adds	r3, #1
 80099de:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80099e0:	6a3b      	ldr	r3, [r7, #32]
 80099e2:	3301      	adds	r3, #1
 80099e4:	623b      	str	r3, [r7, #32]
 80099e6:	6a3a      	ldr	r2, [r7, #32]
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d3e6      	bcc.n	80099bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80099ee:	8bfb      	ldrh	r3, [r7, #30]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d01e      	beq.n	8009a32 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80099f4:	2300      	movs	r3, #0
 80099f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099fe:	461a      	mov	r2, r3
 8009a00:	f107 0310 	add.w	r3, r7, #16
 8009a04:	6812      	ldr	r2, [r2, #0]
 8009a06:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009a08:	693a      	ldr	r2, [r7, #16]
 8009a0a:	6a3b      	ldr	r3, [r7, #32]
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	00db      	lsls	r3, r3, #3
 8009a10:	fa22 f303 	lsr.w	r3, r2, r3
 8009a14:	b2da      	uxtb	r2, r3
 8009a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a18:	701a      	strb	r2, [r3, #0]
      i++;
 8009a1a:	6a3b      	ldr	r3, [r7, #32]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a22:	3301      	adds	r3, #1
 8009a24:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009a26:	8bfb      	ldrh	r3, [r7, #30]
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009a2c:	8bfb      	ldrh	r3, [r7, #30]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d1ea      	bne.n	8009a08 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	372c      	adds	r7, #44	; 0x2c
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b085      	sub	sp, #20
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	695b      	ldr	r3, [r3, #20]
 8009a4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	699b      	ldr	r3, [r3, #24]
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	4013      	ands	r3, r2
 8009a56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009a58:	68fb      	ldr	r3, [r7, #12]
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3714      	adds	r7, #20
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr

08009a66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009a66:	b480      	push	{r7}
 8009a68:	b083      	sub	sp, #12
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	695b      	ldr	r3, [r3, #20]
 8009a72:	f003 0301 	and.w	r3, r3, #1
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	370c      	adds	r7, #12
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
	...

08009a84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	3301      	adds	r3, #1
 8009a94:	60fb      	str	r3, [r7, #12]
 8009a96:	4a13      	ldr	r2, [pc, #76]	; (8009ae4 <USB_CoreReset+0x60>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d901      	bls.n	8009aa0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	e01a      	b.n	8009ad6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	daf3      	bge.n	8009a90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	f043 0201 	orr.w	r2, r3, #1
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	3301      	adds	r3, #1
 8009abc:	60fb      	str	r3, [r7, #12]
 8009abe:	4a09      	ldr	r2, [pc, #36]	; (8009ae4 <USB_CoreReset+0x60>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d901      	bls.n	8009ac8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8009ac4:	2303      	movs	r3, #3
 8009ac6:	e006      	b.n	8009ad6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	f003 0301 	and.w	r3, r3, #1
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d0f1      	beq.n	8009ab8 <USB_CoreReset+0x34>

  return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3714      	adds	r7, #20
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	00030d40 	.word	0x00030d40

08009ae8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ae8:	b084      	sub	sp, #16
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b084      	sub	sp, #16
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
 8009af2:	f107 001c 	add.w	r0, r7, #28
 8009af6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b04:	461a      	mov	r2, r3
 8009b06:	2300      	movs	r3, #0
 8009b08:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b1a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b26:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d018      	beq.n	8009b6c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d10a      	bne.n	8009b56 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b4e:	f043 0304 	orr.w	r3, r3, #4
 8009b52:	6013      	str	r3, [r2, #0]
 8009b54:	e014      	b.n	8009b80 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68ba      	ldr	r2, [r7, #8]
 8009b60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b64:	f023 0304 	bic.w	r3, r3, #4
 8009b68:	6013      	str	r3, [r2, #0]
 8009b6a:	e009      	b.n	8009b80 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68ba      	ldr	r2, [r7, #8]
 8009b76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b7a:	f023 0304 	bic.w	r3, r3, #4
 8009b7e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009b80:	2110      	movs	r1, #16
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7ff fe82 	bl	800988c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f7ff fea3 	bl	80098d4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009b8e:	2300      	movs	r3, #0
 8009b90:	60fb      	str	r3, [r7, #12]
 8009b92:	e015      	b.n	8009bc0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	015a      	lsls	r2, r3, #5
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	015a      	lsls	r2, r3, #5
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	4413      	add	r3, r2
 8009bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	60fb      	str	r3, [r7, #12]
 8009bc0:	6a3b      	ldr	r3, [r7, #32]
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d3e5      	bcc.n	8009b94 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8009bd4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d00b      	beq.n	8009bfa <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009be8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4a13      	ldr	r2, [pc, #76]	; (8009c3c <USB_HostInit+0x154>)
 8009bee:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	4a13      	ldr	r2, [pc, #76]	; (8009c40 <USB_HostInit+0x158>)
 8009bf4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009bf8:	e009      	b.n	8009c0e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2280      	movs	r2, #128	; 0x80
 8009bfe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a10      	ldr	r2, [pc, #64]	; (8009c44 <USB_HostInit+0x15c>)
 8009c04:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4a0f      	ldr	r2, [pc, #60]	; (8009c48 <USB_HostInit+0x160>)
 8009c0a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d105      	bne.n	8009c20 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	699b      	ldr	r3, [r3, #24]
 8009c18:	f043 0210 	orr.w	r2, r3, #16
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	699a      	ldr	r2, [r3, #24]
 8009c24:	4b09      	ldr	r3, [pc, #36]	; (8009c4c <USB_HostInit+0x164>)
 8009c26:	4313      	orrs	r3, r2
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3710      	adds	r7, #16
 8009c32:	46bd      	mov	sp, r7
 8009c34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c38:	b004      	add	sp, #16
 8009c3a:	4770      	bx	lr
 8009c3c:	01000200 	.word	0x01000200
 8009c40:	00e00300 	.word	0x00e00300
 8009c44:	00600080 	.word	0x00600080
 8009c48:	004000e0 	.word	0x004000e0
 8009c4c:	a3200008 	.word	0xa3200008

08009c50 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	460b      	mov	r3, r1
 8009c5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c6e:	f023 0303 	bic.w	r3, r3, #3
 8009c72:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	78fb      	ldrb	r3, [r7, #3]
 8009c7e:	f003 0303 	and.w	r3, r3, #3
 8009c82:	68f9      	ldr	r1, [r7, #12]
 8009c84:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009c8c:	78fb      	ldrb	r3, [r7, #3]
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d107      	bne.n	8009ca2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c98:	461a      	mov	r2, r3
 8009c9a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009c9e:	6053      	str	r3, [r2, #4]
 8009ca0:	e009      	b.n	8009cb6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009ca2:	78fb      	ldrb	r3, [r7, #3]
 8009ca4:	2b02      	cmp	r3, #2
 8009ca6:	d106      	bne.n	8009cb6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cae:	461a      	mov	r2, r3
 8009cb0:	f241 7370 	movw	r3, #6000	; 0x1770
 8009cb4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3714      	adds	r7, #20
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009ce4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	68fa      	ldr	r2, [r7, #12]
 8009cea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cf2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009cf4:	2064      	movs	r0, #100	; 0x64
 8009cf6:	f7f8 fd1b 	bl	8002730 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009d02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d06:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009d08:	200a      	movs	r0, #10
 8009d0a:	f7f8 fd11 	bl	8002730 <HAL_Delay>

  return HAL_OK;
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3710      	adds	r7, #16
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	460b      	mov	r3, r1
 8009d22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009d3c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d109      	bne.n	8009d5c <USB_DriveVbus+0x44>
 8009d48:	78fb      	ldrb	r3, [r7, #3]
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d106      	bne.n	8009d5c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009d56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009d5a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d66:	d109      	bne.n	8009d7c <USB_DriveVbus+0x64>
 8009d68:	78fb      	ldrb	r3, [r7, #3]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d106      	bne.n	8009d7c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	68fa      	ldr	r2, [r7, #12]
 8009d72:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009d76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d7a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3714      	adds	r7, #20
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009d8a:	b480      	push	{r7}
 8009d8c:	b085      	sub	sp, #20
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009d96:	2300      	movs	r3, #0
 8009d98:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	0c5b      	lsrs	r3, r3, #17
 8009da8:	f003 0303 	and.w	r3, r3, #3
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3714      	adds	r7, #20
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	b29b      	uxth	r3, r3
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3714      	adds	r7, #20
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
	...

08009ddc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b088      	sub	sp, #32
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	4608      	mov	r0, r1
 8009de6:	4611      	mov	r1, r2
 8009de8:	461a      	mov	r2, r3
 8009dea:	4603      	mov	r3, r0
 8009dec:	70fb      	strb	r3, [r7, #3]
 8009dee:	460b      	mov	r3, r1
 8009df0:	70bb      	strb	r3, [r7, #2]
 8009df2:	4613      	mov	r3, r2
 8009df4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009df6:	2300      	movs	r3, #0
 8009df8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009dfe:	78fb      	ldrb	r3, [r7, #3]
 8009e00:	015a      	lsls	r2, r3, #5
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	4413      	add	r3, r2
 8009e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e10:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009e12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009e16:	2b03      	cmp	r3, #3
 8009e18:	d87e      	bhi.n	8009f18 <USB_HC_Init+0x13c>
 8009e1a:	a201      	add	r2, pc, #4	; (adr r2, 8009e20 <USB_HC_Init+0x44>)
 8009e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e20:	08009e31 	.word	0x08009e31
 8009e24:	08009edb 	.word	0x08009edb
 8009e28:	08009e31 	.word	0x08009e31
 8009e2c:	08009e9d 	.word	0x08009e9d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009e30:	78fb      	ldrb	r3, [r7, #3]
 8009e32:	015a      	lsls	r2, r3, #5
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	4413      	add	r3, r2
 8009e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	f240 439d 	movw	r3, #1181	; 0x49d
 8009e42:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009e44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	da10      	bge.n	8009e6e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009e4c:	78fb      	ldrb	r3, [r7, #3]
 8009e4e:	015a      	lsls	r2, r3, #5
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	4413      	add	r3, r2
 8009e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	78fa      	ldrb	r2, [r7, #3]
 8009e5c:	0151      	lsls	r1, r2, #5
 8009e5e:	693a      	ldr	r2, [r7, #16]
 8009e60:	440a      	add	r2, r1
 8009e62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e6a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009e6c:	e057      	b.n	8009f1e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d051      	beq.n	8009f1e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009e7a:	78fb      	ldrb	r3, [r7, #3]
 8009e7c:	015a      	lsls	r2, r3, #5
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	4413      	add	r3, r2
 8009e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	78fa      	ldrb	r2, [r7, #3]
 8009e8a:	0151      	lsls	r1, r2, #5
 8009e8c:	693a      	ldr	r2, [r7, #16]
 8009e8e:	440a      	add	r2, r1
 8009e90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e94:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009e98:	60d3      	str	r3, [r2, #12]
      break;
 8009e9a:	e040      	b.n	8009f1e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009e9c:	78fb      	ldrb	r3, [r7, #3]
 8009e9e:	015a      	lsls	r2, r3, #5
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	f240 639d 	movw	r3, #1693	; 0x69d
 8009eae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009eb0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	da34      	bge.n	8009f22 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009eb8:	78fb      	ldrb	r3, [r7, #3]
 8009eba:	015a      	lsls	r2, r3, #5
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	4413      	add	r3, r2
 8009ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	78fa      	ldrb	r2, [r7, #3]
 8009ec8:	0151      	lsls	r1, r2, #5
 8009eca:	693a      	ldr	r2, [r7, #16]
 8009ecc:	440a      	add	r2, r1
 8009ece:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ed6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009ed8:	e023      	b.n	8009f22 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009eda:	78fb      	ldrb	r3, [r7, #3]
 8009edc:	015a      	lsls	r2, r3, #5
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	f240 2325 	movw	r3, #549	; 0x225
 8009eec:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009eee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	da17      	bge.n	8009f26 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009ef6:	78fb      	ldrb	r3, [r7, #3]
 8009ef8:	015a      	lsls	r2, r3, #5
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	4413      	add	r3, r2
 8009efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	78fa      	ldrb	r2, [r7, #3]
 8009f06:	0151      	lsls	r1, r2, #5
 8009f08:	693a      	ldr	r2, [r7, #16]
 8009f0a:	440a      	add	r2, r1
 8009f0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f10:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009f14:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009f16:	e006      	b.n	8009f26 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	77fb      	strb	r3, [r7, #31]
      break;
 8009f1c:	e004      	b.n	8009f28 <USB_HC_Init+0x14c>
      break;
 8009f1e:	bf00      	nop
 8009f20:	e002      	b.n	8009f28 <USB_HC_Init+0x14c>
      break;
 8009f22:	bf00      	nop
 8009f24:	e000      	b.n	8009f28 <USB_HC_Init+0x14c>
      break;
 8009f26:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f2e:	699a      	ldr	r2, [r3, #24]
 8009f30:	78fb      	ldrb	r3, [r7, #3]
 8009f32:	f003 030f 	and.w	r3, r3, #15
 8009f36:	2101      	movs	r1, #1
 8009f38:	fa01 f303 	lsl.w	r3, r1, r3
 8009f3c:	6939      	ldr	r1, [r7, #16]
 8009f3e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009f42:	4313      	orrs	r3, r2
 8009f44:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	699b      	ldr	r3, [r3, #24]
 8009f4a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009f52:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	da03      	bge.n	8009f62 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f5e:	61bb      	str	r3, [r7, #24]
 8009f60:	e001      	b.n	8009f66 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8009f62:	2300      	movs	r3, #0
 8009f64:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f7ff ff0f 	bl	8009d8a <USB_GetHostSpeed>
 8009f6c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009f6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d106      	bne.n	8009f84 <USB_HC_Init+0x1a8>
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	d003      	beq.n	8009f84 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009f7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009f80:	617b      	str	r3, [r7, #20]
 8009f82:	e001      	b.n	8009f88 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009f84:	2300      	movs	r3, #0
 8009f86:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f88:	787b      	ldrb	r3, [r7, #1]
 8009f8a:	059b      	lsls	r3, r3, #22
 8009f8c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009f90:	78bb      	ldrb	r3, [r7, #2]
 8009f92:	02db      	lsls	r3, r3, #11
 8009f94:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f98:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009f9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009f9e:	049b      	lsls	r3, r3, #18
 8009fa0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009fa4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009fa6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009fa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009fac:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009fae:	69bb      	ldr	r3, [r7, #24]
 8009fb0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009fb2:	78fb      	ldrb	r3, [r7, #3]
 8009fb4:	0159      	lsls	r1, r3, #5
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	440b      	add	r3, r1
 8009fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fbe:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009fc4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8009fc6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009fca:	2b03      	cmp	r3, #3
 8009fcc:	d10f      	bne.n	8009fee <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009fce:	78fb      	ldrb	r3, [r7, #3]
 8009fd0:	015a      	lsls	r2, r3, #5
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	78fa      	ldrb	r2, [r7, #3]
 8009fde:	0151      	lsls	r1, r2, #5
 8009fe0:	693a      	ldr	r2, [r7, #16]
 8009fe2:	440a      	add	r2, r1
 8009fe4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fe8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009fec:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009fee:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3720      	adds	r7, #32
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b08c      	sub	sp, #48	; 0x30
 8009ffc:	af02      	add	r7, sp, #8
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	4613      	mov	r3, r2
 800a004:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	785b      	ldrb	r3, [r3, #1]
 800a00e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a010:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a014:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a01a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d02d      	beq.n	800a07e <USB_HC_StartXfer+0x86>
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	791b      	ldrb	r3, [r3, #4]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d129      	bne.n	800a07e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800a02a:	79fb      	ldrb	r3, [r7, #7]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d117      	bne.n	800a060 <USB_HC_StartXfer+0x68>
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	79db      	ldrb	r3, [r3, #7]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d003      	beq.n	800a040 <USB_HC_StartXfer+0x48>
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	79db      	ldrb	r3, [r3, #7]
 800a03c:	2b02      	cmp	r3, #2
 800a03e:	d10f      	bne.n	800a060 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	015a      	lsls	r2, r3, #5
 800a044:	6a3b      	ldr	r3, [r7, #32]
 800a046:	4413      	add	r3, r2
 800a048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	69fa      	ldr	r2, [r7, #28]
 800a050:	0151      	lsls	r1, r2, #5
 800a052:	6a3a      	ldr	r2, [r7, #32]
 800a054:	440a      	add	r2, r1
 800a056:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a05a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a05e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800a060:	79fb      	ldrb	r3, [r7, #7]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d10b      	bne.n	800a07e <USB_HC_StartXfer+0x86>
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	795b      	ldrb	r3, [r3, #5]
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d107      	bne.n	800a07e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	785b      	ldrb	r3, [r3, #1]
 800a072:	4619      	mov	r1, r3
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f000 fa2f 	bl	800a4d8 <USB_DoPing>
      return HAL_OK;
 800a07a:	2300      	movs	r3, #0
 800a07c:	e0f8      	b.n	800a270 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	695b      	ldr	r3, [r3, #20]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d018      	beq.n	800a0b8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	695b      	ldr	r3, [r3, #20]
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	8912      	ldrh	r2, [r2, #8]
 800a08e:	4413      	add	r3, r2
 800a090:	3b01      	subs	r3, #1
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	8912      	ldrh	r2, [r2, #8]
 800a096:	fbb3 f3f2 	udiv	r3, r3, r2
 800a09a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a09c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a09e:	8b7b      	ldrh	r3, [r7, #26]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d90b      	bls.n	800a0bc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800a0a4:	8b7b      	ldrh	r3, [r7, #26]
 800a0a6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a0a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	8912      	ldrh	r2, [r2, #8]
 800a0ae:	fb02 f203 	mul.w	r2, r2, r3
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	611a      	str	r2, [r3, #16]
 800a0b6:	e001      	b.n	800a0bc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	78db      	ldrb	r3, [r3, #3]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d007      	beq.n	800a0d4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a0c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a0c6:	68ba      	ldr	r2, [r7, #8]
 800a0c8:	8912      	ldrh	r2, [r2, #8]
 800a0ca:	fb02 f203 	mul.w	r2, r2, r3
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	611a      	str	r2, [r3, #16]
 800a0d2:	e003      	b.n	800a0dc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	695a      	ldr	r2, [r3, #20]
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a0e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a0e6:	04d9      	lsls	r1, r3, #19
 800a0e8:	4b63      	ldr	r3, [pc, #396]	; (800a278 <USB_HC_StartXfer+0x280>)
 800a0ea:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a0ec:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	7a9b      	ldrb	r3, [r3, #10]
 800a0f2:	075b      	lsls	r3, r3, #29
 800a0f4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a0f8:	69f9      	ldr	r1, [r7, #28]
 800a0fa:	0148      	lsls	r0, r1, #5
 800a0fc:	6a39      	ldr	r1, [r7, #32]
 800a0fe:	4401      	add	r1, r0
 800a100:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a104:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a106:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a108:	79fb      	ldrb	r3, [r7, #7]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d009      	beq.n	800a122 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	68d9      	ldr	r1, [r3, #12]
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	015a      	lsls	r2, r3, #5
 800a116:	6a3b      	ldr	r3, [r7, #32]
 800a118:	4413      	add	r3, r2
 800a11a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a11e:	460a      	mov	r2, r1
 800a120:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a122:	6a3b      	ldr	r3, [r7, #32]
 800a124:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	f003 0301 	and.w	r3, r3, #1
 800a12e:	2b00      	cmp	r3, #0
 800a130:	bf0c      	ite	eq
 800a132:	2301      	moveq	r3, #1
 800a134:	2300      	movne	r3, #0
 800a136:	b2db      	uxtb	r3, r3
 800a138:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	015a      	lsls	r2, r3, #5
 800a13e:	6a3b      	ldr	r3, [r7, #32]
 800a140:	4413      	add	r3, r2
 800a142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	69fa      	ldr	r2, [r7, #28]
 800a14a:	0151      	lsls	r1, r2, #5
 800a14c:	6a3a      	ldr	r2, [r7, #32]
 800a14e:	440a      	add	r2, r1
 800a150:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a154:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a158:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a15a:	69fb      	ldr	r3, [r7, #28]
 800a15c:	015a      	lsls	r2, r3, #5
 800a15e:	6a3b      	ldr	r3, [r7, #32]
 800a160:	4413      	add	r3, r2
 800a162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	7e7b      	ldrb	r3, [r7, #25]
 800a16a:	075b      	lsls	r3, r3, #29
 800a16c:	69f9      	ldr	r1, [r7, #28]
 800a16e:	0148      	lsls	r0, r1, #5
 800a170:	6a39      	ldr	r1, [r7, #32]
 800a172:	4401      	add	r1, r0
 800a174:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a178:	4313      	orrs	r3, r2
 800a17a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	015a      	lsls	r2, r3, #5
 800a180:	6a3b      	ldr	r3, [r7, #32]
 800a182:	4413      	add	r3, r2
 800a184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a192:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	78db      	ldrb	r3, [r3, #3]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d004      	beq.n	800a1a6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1a2:	613b      	str	r3, [r7, #16]
 800a1a4:	e003      	b.n	800a1ae <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a1ac:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a1b4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	015a      	lsls	r2, r3, #5
 800a1ba:	6a3b      	ldr	r3, [r7, #32]
 800a1bc:	4413      	add	r3, r2
 800a1be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a1c8:	79fb      	ldrb	r3, [r7, #7]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d001      	beq.n	800a1d2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	e04e      	b.n	800a270 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	78db      	ldrb	r3, [r3, #3]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d149      	bne.n	800a26e <USB_HC_StartXfer+0x276>
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	695b      	ldr	r3, [r3, #20]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d045      	beq.n	800a26e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	79db      	ldrb	r3, [r3, #7]
 800a1e6:	2b03      	cmp	r3, #3
 800a1e8:	d830      	bhi.n	800a24c <USB_HC_StartXfer+0x254>
 800a1ea:	a201      	add	r2, pc, #4	; (adr r2, 800a1f0 <USB_HC_StartXfer+0x1f8>)
 800a1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f0:	0800a201 	.word	0x0800a201
 800a1f4:	0800a225 	.word	0x0800a225
 800a1f8:	0800a201 	.word	0x0800a201
 800a1fc:	0800a225 	.word	0x0800a225
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	695b      	ldr	r3, [r3, #20]
 800a204:	3303      	adds	r3, #3
 800a206:	089b      	lsrs	r3, r3, #2
 800a208:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a20a:	8afa      	ldrh	r2, [r7, #22]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a210:	b29b      	uxth	r3, r3
 800a212:	429a      	cmp	r2, r3
 800a214:	d91c      	bls.n	800a250 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	699b      	ldr	r3, [r3, #24]
 800a21a:	f043 0220 	orr.w	r2, r3, #32
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	619a      	str	r2, [r3, #24]
        }
        break;
 800a222:	e015      	b.n	800a250 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	695b      	ldr	r3, [r3, #20]
 800a228:	3303      	adds	r3, #3
 800a22a:	089b      	lsrs	r3, r3, #2
 800a22c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a22e:	8afa      	ldrh	r2, [r7, #22]
 800a230:	6a3b      	ldr	r3, [r7, #32]
 800a232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a236:	691b      	ldr	r3, [r3, #16]
 800a238:	b29b      	uxth	r3, r3
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d90a      	bls.n	800a254 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	699b      	ldr	r3, [r3, #24]
 800a242:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	619a      	str	r2, [r3, #24]
        }
        break;
 800a24a:	e003      	b.n	800a254 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800a24c:	bf00      	nop
 800a24e:	e002      	b.n	800a256 <USB_HC_StartXfer+0x25e>
        break;
 800a250:	bf00      	nop
 800a252:	e000      	b.n	800a256 <USB_HC_StartXfer+0x25e>
        break;
 800a254:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	68d9      	ldr	r1, [r3, #12]
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	785a      	ldrb	r2, [r3, #1]
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	b29b      	uxth	r3, r3
 800a264:	2000      	movs	r0, #0
 800a266:	9000      	str	r0, [sp, #0]
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f7ff fb53 	bl	8009914 <USB_WritePacket>
  }

  return HAL_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	3728      	adds	r7, #40	; 0x28
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}
 800a278:	1ff80000 	.word	0x1ff80000

0800a27c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b085      	sub	sp, #20
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a28e:	695b      	ldr	r3, [r3, #20]
 800a290:	b29b      	uxth	r3, r3
}
 800a292:	4618      	mov	r0, r3
 800a294:	3714      	adds	r7, #20
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr

0800a29e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a29e:	b480      	push	{r7}
 800a2a0:	b089      	sub	sp, #36	; 0x24
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800a2ae:	78fb      	ldrb	r3, [r7, #3]
 800a2b0:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	015a      	lsls	r2, r3, #5
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	4413      	add	r3, r2
 800a2be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	0c9b      	lsrs	r3, r3, #18
 800a2c6:	f003 0303 	and.w	r3, r3, #3
 800a2ca:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	015a      	lsls	r2, r3, #5
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	0fdb      	lsrs	r3, r3, #31
 800a2dc:	f003 0301 	and.w	r3, r3, #1
 800a2e0:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	f003 0320 	and.w	r3, r3, #32
 800a2ea:	2b20      	cmp	r3, #32
 800a2ec:	d104      	bne.n	800a2f8 <USB_HC_Halt+0x5a>
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d101      	bne.n	800a2f8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	e0e8      	b.n	800a4ca <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d002      	beq.n	800a304 <USB_HC_Halt+0x66>
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	2b02      	cmp	r3, #2
 800a302:	d173      	bne.n	800a3ec <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	015a      	lsls	r2, r3, #5
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	4413      	add	r3, r2
 800a30c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	697a      	ldr	r2, [r7, #20]
 800a314:	0151      	lsls	r1, r2, #5
 800a316:	69ba      	ldr	r2, [r7, #24]
 800a318:	440a      	add	r2, r1
 800a31a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a31e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a322:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	f003 0320 	and.w	r3, r3, #32
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	f040 80cb 	bne.w	800a4c8 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a336:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d143      	bne.n	800a3c6 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	015a      	lsls	r2, r3, #5
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	4413      	add	r3, r2
 800a346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	697a      	ldr	r2, [r7, #20]
 800a34e:	0151      	lsls	r1, r2, #5
 800a350:	69ba      	ldr	r2, [r7, #24]
 800a352:	440a      	add	r2, r1
 800a354:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a358:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a35c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	015a      	lsls	r2, r3, #5
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	4413      	add	r3, r2
 800a366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	697a      	ldr	r2, [r7, #20]
 800a36e:	0151      	lsls	r1, r2, #5
 800a370:	69ba      	ldr	r2, [r7, #24]
 800a372:	440a      	add	r2, r1
 800a374:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a378:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a37c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	015a      	lsls	r2, r3, #5
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	4413      	add	r3, r2
 800a386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	0151      	lsls	r1, r2, #5
 800a390:	69ba      	ldr	r2, [r7, #24]
 800a392:	440a      	add	r2, r1
 800a394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a398:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a39c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	61fb      	str	r3, [r7, #28]
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3aa:	d81d      	bhi.n	800a3e8 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	015a      	lsls	r2, r3, #5
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a3c2:	d0ec      	beq.n	800a39e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a3c4:	e080      	b.n	800a4c8 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	015a      	lsls	r2, r3, #5
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	697a      	ldr	r2, [r7, #20]
 800a3d6:	0151      	lsls	r1, r2, #5
 800a3d8:	69ba      	ldr	r2, [r7, #24]
 800a3da:	440a      	add	r2, r1
 800a3dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a3e4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a3e6:	e06f      	b.n	800a4c8 <USB_HC_Halt+0x22a>
            break;
 800a3e8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a3ea:	e06d      	b.n	800a4c8 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	015a      	lsls	r2, r3, #5
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	697a      	ldr	r2, [r7, #20]
 800a3fc:	0151      	lsls	r1, r2, #5
 800a3fe:	69ba      	ldr	r2, [r7, #24]
 800a400:	440a      	add	r2, r1
 800a402:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a406:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a40a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d143      	bne.n	800a4a4 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	015a      	lsls	r2, r3, #5
 800a420:	69bb      	ldr	r3, [r7, #24]
 800a422:	4413      	add	r3, r2
 800a424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	697a      	ldr	r2, [r7, #20]
 800a42c:	0151      	lsls	r1, r2, #5
 800a42e:	69ba      	ldr	r2, [r7, #24]
 800a430:	440a      	add	r2, r1
 800a432:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a436:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a43a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	015a      	lsls	r2, r3, #5
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	4413      	add	r3, r2
 800a444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	697a      	ldr	r2, [r7, #20]
 800a44c:	0151      	lsls	r1, r2, #5
 800a44e:	69ba      	ldr	r2, [r7, #24]
 800a450:	440a      	add	r2, r1
 800a452:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a456:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a45a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	015a      	lsls	r2, r3, #5
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	4413      	add	r3, r2
 800a464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	697a      	ldr	r2, [r7, #20]
 800a46c:	0151      	lsls	r1, r2, #5
 800a46e:	69ba      	ldr	r2, [r7, #24]
 800a470:	440a      	add	r2, r1
 800a472:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a476:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a47a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	3301      	adds	r3, #1
 800a480:	61fb      	str	r3, [r7, #28]
 800a482:	69fb      	ldr	r3, [r7, #28]
 800a484:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a488:	d81d      	bhi.n	800a4c6 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	015a      	lsls	r2, r3, #5
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	4413      	add	r3, r2
 800a492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a49c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4a0:	d0ec      	beq.n	800a47c <USB_HC_Halt+0x1de>
 800a4a2:	e011      	b.n	800a4c8 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	015a      	lsls	r2, r3, #5
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	4413      	add	r3, r2
 800a4ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	697a      	ldr	r2, [r7, #20]
 800a4b4:	0151      	lsls	r1, r2, #5
 800a4b6:	69ba      	ldr	r2, [r7, #24]
 800a4b8:	440a      	add	r2, r1
 800a4ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a4c2:	6013      	str	r3, [r2, #0]
 800a4c4:	e000      	b.n	800a4c8 <USB_HC_Halt+0x22a>
          break;
 800a4c6:	bf00      	nop
    }
  }

  return HAL_OK;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3724      	adds	r7, #36	; 0x24
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr
	...

0800a4d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b087      	sub	sp, #28
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a4e8:	78fb      	ldrb	r3, [r7, #3]
 800a4ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	04da      	lsls	r2, r3, #19
 800a4f4:	4b15      	ldr	r3, [pc, #84]	; (800a54c <USB_DoPing+0x74>)
 800a4f6:	4013      	ands	r3, r2
 800a4f8:	693a      	ldr	r2, [r7, #16]
 800a4fa:	0151      	lsls	r1, r2, #5
 800a4fc:	697a      	ldr	r2, [r7, #20]
 800a4fe:	440a      	add	r2, r1
 800a500:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a504:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a508:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	015a      	lsls	r2, r3, #5
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	4413      	add	r3, r2
 800a512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a520:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a528:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	015a      	lsls	r2, r3, #5
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	4413      	add	r3, r2
 800a532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a536:	461a      	mov	r2, r3
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	371c      	adds	r7, #28
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	1ff80000 	.word	0x1ff80000

0800a550 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b086      	sub	sp, #24
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a55c:	2300      	movs	r3, #0
 800a55e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f7ff f935 	bl	80097d0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800a566:	2110      	movs	r1, #16
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f7ff f98f 	bl	800988c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f7ff f9b0 	bl	80098d4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a574:	2300      	movs	r3, #0
 800a576:	613b      	str	r3, [r7, #16]
 800a578:	e01f      	b.n	800a5ba <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	015a      	lsls	r2, r3, #5
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	4413      	add	r3, r2
 800a582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a590:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a598:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a5a0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	015a      	lsls	r2, r3, #5
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	613b      	str	r3, [r7, #16]
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	2b0f      	cmp	r3, #15
 800a5be:	d9dc      	bls.n	800a57a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	613b      	str	r3, [r7, #16]
 800a5c4:	e034      	b.n	800a630 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	015a      	lsls	r2, r3, #5
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5dc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a5e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a5ec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	015a      	lsls	r2, r3, #5
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	3301      	adds	r3, #1
 800a604:	617b      	str	r3, [r7, #20]
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a60c:	d80c      	bhi.n	800a628 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	015a      	lsls	r2, r3, #5
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	4413      	add	r3, r2
 800a616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a620:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a624:	d0ec      	beq.n	800a600 <USB_StopHost+0xb0>
 800a626:	e000      	b.n	800a62a <USB_StopHost+0xda>
        break;
 800a628:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	3301      	adds	r3, #1
 800a62e:	613b      	str	r3, [r7, #16]
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	2b0f      	cmp	r3, #15
 800a634:	d9c7      	bls.n	800a5c6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a63c:	461a      	mov	r2, r3
 800a63e:	f04f 33ff 	mov.w	r3, #4294967295
 800a642:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f04f 32ff 	mov.w	r2, #4294967295
 800a64a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f7ff f8ae 	bl	80097ae <USB_EnableGlobalInt>

  return HAL_OK;
 800a652:	2300      	movs	r3, #0
}
 800a654:	4618      	mov	r0, r3
 800a656:	3718      	adds	r7, #24
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800a660:	4904      	ldr	r1, [pc, #16]	; (800a674 <MX_FATFS_Init+0x18>)
 800a662:	4805      	ldr	r0, [pc, #20]	; (800a678 <MX_FATFS_Init+0x1c>)
 800a664:	f004 f866 	bl	800e734 <FATFS_LinkDriver>
 800a668:	4603      	mov	r3, r0
 800a66a:	461a      	mov	r2, r3
 800a66c:	4b03      	ldr	r3, [pc, #12]	; (800a67c <MX_FATFS_Init+0x20>)
 800a66e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a670:	bf00      	nop
 800a672:	bd80      	pop	{r7, pc}
 800a674:	20002a8c 	.word	0x20002a8c
 800a678:	0801f28c 	.word	0x0801f28c
 800a67c:	20004af4 	.word	0x20004af4

0800a680 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	4603      	mov	r3, r0
 800a688:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	4603      	mov	r3, r0
 800a6a0:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800a6a6:	79fb      	ldrb	r3, [r7, #7]
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	4808      	ldr	r0, [pc, #32]	; (800a6cc <USBH_status+0x34>)
 800a6ac:	f001 fc6a 	bl	800bf84 <USBH_MSC_UnitIsReady>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d002      	beq.n	800a6bc <USBH_status+0x24>
  {
    res = RES_OK;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	73fb      	strb	r3, [r7, #15]
 800a6ba:	e001      	b.n	800a6c0 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	2001a9cc 	.word	0x2001a9cc

0800a6d0 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b094      	sub	sp, #80	; 0x50
 800a6d4:	af02      	add	r7, sp, #8
 800a6d6:	60b9      	str	r1, [r7, #8]
 800a6d8:	607a      	str	r2, [r7, #4]
 800a6da:	603b      	str	r3, [r7, #0]
 800a6dc:	4603      	mov	r3, r0
 800a6de:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800a6e6:	7bf9      	ldrb	r1, [r7, #15]
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	9300      	str	r3, [sp, #0]
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	4818      	ldr	r0, [pc, #96]	; (800a754 <USBH_read+0x84>)
 800a6f2:	f001 fc91 	bl	800c018 <USBH_MSC_Read>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d103      	bne.n	800a704 <USBH_read+0x34>
  {
    res = RES_OK;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a702:	e020      	b.n	800a746 <USBH_read+0x76>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a704:	f107 0210 	add.w	r2, r7, #16
 800a708:	7bfb      	ldrb	r3, [r7, #15]
 800a70a:	4619      	mov	r1, r3
 800a70c:	4811      	ldr	r0, [pc, #68]	; (800a754 <USBH_read+0x84>)
 800a70e:	f001 fc5f 	bl	800bfd0 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a712:	7f7b      	ldrb	r3, [r7, #29]
 800a714:	2b3a      	cmp	r3, #58	; 0x3a
 800a716:	d005      	beq.n	800a724 <USBH_read+0x54>
 800a718:	2b3a      	cmp	r3, #58	; 0x3a
 800a71a:	dc10      	bgt.n	800a73e <USBH_read+0x6e>
 800a71c:	2b04      	cmp	r3, #4
 800a71e:	d001      	beq.n	800a724 <USBH_read+0x54>
 800a720:	2b28      	cmp	r3, #40	; 0x28
 800a722:	d10c      	bne.n	800a73e <USBH_read+0x6e>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
 800a724:	480c      	ldr	r0, [pc, #48]	; (800a758 <USBH_read+0x88>)
 800a726:	f00f fc21 	bl	8019f6c <iprintf>
 800a72a:	480c      	ldr	r0, [pc, #48]	; (800a75c <USBH_read+0x8c>)
 800a72c:	f00f fc1e 	bl	8019f6c <iprintf>
 800a730:	200a      	movs	r0, #10
 800a732:	f00f fc33 	bl	8019f9c <putchar>
      res = RES_NOTRDY;
 800a736:	2303      	movs	r3, #3
 800a738:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a73c:	e003      	b.n	800a746 <USBH_read+0x76>

    default:
      res = RES_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a744:	bf00      	nop
    }
  }

  return res;
 800a746:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3748      	adds	r7, #72	; 0x48
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	2001a9cc 	.word	0x2001a9cc
 800a758:	0801c0e0 	.word	0x0801c0e0
 800a75c:	0801c0e8 	.word	0x0801c0e8

0800a760 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b094      	sub	sp, #80	; 0x50
 800a764:	af02      	add	r7, sp, #8
 800a766:	60b9      	str	r1, [r7, #8]
 800a768:	607a      	str	r2, [r7, #4]
 800a76a:	603b      	str	r3, [r7, #0]
 800a76c:	4603      	mov	r3, r0
 800a76e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800a776:	7bf9      	ldrb	r1, [r7, #15]
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	9300      	str	r3, [sp, #0]
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	4820      	ldr	r0, [pc, #128]	; (800a804 <USBH_write+0xa4>)
 800a782:	f001 fcb2 	bl	800c0ea <USBH_MSC_Write>
 800a786:	4603      	mov	r3, r0
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d103      	bne.n	800a794 <USBH_write+0x34>
  {
    res = RES_OK;
 800a78c:	2300      	movs	r3, #0
 800a78e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a792:	e031      	b.n	800a7f8 <USBH_write+0x98>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a794:	f107 0210 	add.w	r2, r7, #16
 800a798:	7bfb      	ldrb	r3, [r7, #15]
 800a79a:	4619      	mov	r1, r3
 800a79c:	4819      	ldr	r0, [pc, #100]	; (800a804 <USBH_write+0xa4>)
 800a79e:	f001 fc17 	bl	800bfd0 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a7a2:	7f7b      	ldrb	r3, [r7, #29]
 800a7a4:	2b3a      	cmp	r3, #58	; 0x3a
 800a7a6:	d016      	beq.n	800a7d6 <USBH_write+0x76>
 800a7a8:	2b3a      	cmp	r3, #58	; 0x3a
 800a7aa:	dc21      	bgt.n	800a7f0 <USBH_write+0x90>
 800a7ac:	2b28      	cmp	r3, #40	; 0x28
 800a7ae:	d012      	beq.n	800a7d6 <USBH_write+0x76>
 800a7b0:	2b28      	cmp	r3, #40	; 0x28
 800a7b2:	dc1d      	bgt.n	800a7f0 <USBH_write+0x90>
 800a7b4:	2b04      	cmp	r3, #4
 800a7b6:	d00e      	beq.n	800a7d6 <USBH_write+0x76>
 800a7b8:	2b27      	cmp	r3, #39	; 0x27
 800a7ba:	d119      	bne.n	800a7f0 <USBH_write+0x90>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
 800a7bc:	4812      	ldr	r0, [pc, #72]	; (800a808 <USBH_write+0xa8>)
 800a7be:	f00f fbd5 	bl	8019f6c <iprintf>
 800a7c2:	4812      	ldr	r0, [pc, #72]	; (800a80c <USBH_write+0xac>)
 800a7c4:	f00f fbd2 	bl	8019f6c <iprintf>
 800a7c8:	200a      	movs	r0, #10
 800a7ca:	f00f fbe7 	bl	8019f9c <putchar>
      res = RES_WRPRT;
 800a7ce:	2302      	movs	r3, #2
 800a7d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a7d4:	e010      	b.n	800a7f8 <USBH_write+0x98>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
 800a7d6:	480c      	ldr	r0, [pc, #48]	; (800a808 <USBH_write+0xa8>)
 800a7d8:	f00f fbc8 	bl	8019f6c <iprintf>
 800a7dc:	480c      	ldr	r0, [pc, #48]	; (800a810 <USBH_write+0xb0>)
 800a7de:	f00f fbc5 	bl	8019f6c <iprintf>
 800a7e2:	200a      	movs	r0, #10
 800a7e4:	f00f fbda 	bl	8019f9c <putchar>
      res = RES_NOTRDY;
 800a7e8:	2303      	movs	r3, #3
 800a7ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a7ee:	e003      	b.n	800a7f8 <USBH_write+0x98>

    default:
      res = RES_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a7f6:	bf00      	nop
    }
  }

  return res;
 800a7f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3748      	adds	r7, #72	; 0x48
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}
 800a804:	2001a9cc 	.word	0x2001a9cc
 800a808:	0801c0e0 	.word	0x0801c0e0
 800a80c:	0801c100 	.word	0x0801c100
 800a810:	0801c0e8 	.word	0x0801c0e8

0800a814 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b090      	sub	sp, #64	; 0x40
 800a818:	af00      	add	r7, sp, #0
 800a81a:	4603      	mov	r3, r0
 800a81c:	603a      	str	r2, [r7, #0]
 800a81e:	71fb      	strb	r3, [r7, #7]
 800a820:	460b      	mov	r3, r1
 800a822:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a824:	2301      	movs	r3, #1
 800a826:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800a82a:	79bb      	ldrb	r3, [r7, #6]
 800a82c:	2b03      	cmp	r3, #3
 800a82e:	d852      	bhi.n	800a8d6 <USBH_ioctl+0xc2>
 800a830:	a201      	add	r2, pc, #4	; (adr r2, 800a838 <USBH_ioctl+0x24>)
 800a832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a836:	bf00      	nop
 800a838:	0800a849 	.word	0x0800a849
 800a83c:	0800a851 	.word	0x0800a851
 800a840:	0800a87b 	.word	0x0800a87b
 800a844:	0800a8a7 	.word	0x0800a8a7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800a848:	2300      	movs	r3, #0
 800a84a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a84e:	e045      	b.n	800a8dc <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a850:	f107 0208 	add.w	r2, r7, #8
 800a854:	79fb      	ldrb	r3, [r7, #7]
 800a856:	4619      	mov	r1, r3
 800a858:	4823      	ldr	r0, [pc, #140]	; (800a8e8 <USBH_ioctl+0xd4>)
 800a85a:	f001 fbb9 	bl	800bfd0 <USBH_MSC_GetLUNInfo>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d106      	bne.n	800a872 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800a864:	68fa      	ldr	r2, [r7, #12]
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a86a:	2300      	movs	r3, #0
 800a86c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a870:	e034      	b.n	800a8dc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a872:	2301      	movs	r3, #1
 800a874:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a878:	e030      	b.n	800a8dc <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a87a:	f107 0208 	add.w	r2, r7, #8
 800a87e:	79fb      	ldrb	r3, [r7, #7]
 800a880:	4619      	mov	r1, r3
 800a882:	4819      	ldr	r0, [pc, #100]	; (800a8e8 <USBH_ioctl+0xd4>)
 800a884:	f001 fba4 	bl	800bfd0 <USBH_MSC_GetLUNInfo>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d107      	bne.n	800a89e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800a88e:	8a3b      	ldrh	r3, [r7, #16]
 800a890:	461a      	mov	r2, r3
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a896:	2300      	movs	r3, #0
 800a898:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a89c:	e01e      	b.n	800a8dc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a8a4:	e01a      	b.n	800a8dc <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a8a6:	f107 0208 	add.w	r2, r7, #8
 800a8aa:	79fb      	ldrb	r3, [r7, #7]
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	480e      	ldr	r0, [pc, #56]	; (800a8e8 <USBH_ioctl+0xd4>)
 800a8b0:	f001 fb8e 	bl	800bfd0 <USBH_MSC_GetLUNInfo>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d109      	bne.n	800a8ce <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800a8ba:	8a3b      	ldrh	r3, [r7, #16]
 800a8bc:	0a5b      	lsrs	r3, r3, #9
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a8cc:	e006      	b.n	800a8dc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a8d4:	e002      	b.n	800a8dc <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800a8d6:	2304      	movs	r3, #4
 800a8d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800a8dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3740      	adds	r7, #64	; 0x40
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}
 800a8e8:	2001a9cc 	.word	0x2001a9cc

0800a8ec <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800a8f2:	4b8d      	ldr	r3, [pc, #564]	; (800ab28 <MX_LWIP_Init+0x23c>)
 800a8f4:	22c0      	movs	r2, #192	; 0xc0
 800a8f6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800a8f8:	4b8b      	ldr	r3, [pc, #556]	; (800ab28 <MX_LWIP_Init+0x23c>)
 800a8fa:	22a8      	movs	r2, #168	; 0xa8
 800a8fc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800a8fe:	4b8a      	ldr	r3, [pc, #552]	; (800ab28 <MX_LWIP_Init+0x23c>)
 800a900:	2201      	movs	r2, #1
 800a902:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 200;
 800a904:	4b88      	ldr	r3, [pc, #544]	; (800ab28 <MX_LWIP_Init+0x23c>)
 800a906:	22c8      	movs	r2, #200	; 0xc8
 800a908:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a90a:	4b88      	ldr	r3, [pc, #544]	; (800ab2c <MX_LWIP_Init+0x240>)
 800a90c:	22ff      	movs	r2, #255	; 0xff
 800a90e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a910:	4b86      	ldr	r3, [pc, #536]	; (800ab2c <MX_LWIP_Init+0x240>)
 800a912:	22ff      	movs	r2, #255	; 0xff
 800a914:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a916:	4b85      	ldr	r3, [pc, #532]	; (800ab2c <MX_LWIP_Init+0x240>)
 800a918:	22ff      	movs	r2, #255	; 0xff
 800a91a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a91c:	4b83      	ldr	r3, [pc, #524]	; (800ab2c <MX_LWIP_Init+0x240>)
 800a91e:	2200      	movs	r2, #0
 800a920:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800a922:	4b83      	ldr	r3, [pc, #524]	; (800ab30 <MX_LWIP_Init+0x244>)
 800a924:	22c0      	movs	r2, #192	; 0xc0
 800a926:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800a928:	4b81      	ldr	r3, [pc, #516]	; (800ab30 <MX_LWIP_Init+0x244>)
 800a92a:	22a8      	movs	r2, #168	; 0xa8
 800a92c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800a92e:	4b80      	ldr	r3, [pc, #512]	; (800ab30 <MX_LWIP_Init+0x244>)
 800a930:	2201      	movs	r2, #1
 800a932:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800a934:	4b7e      	ldr	r3, [pc, #504]	; (800ab30 <MX_LWIP_Init+0x244>)
 800a936:	2201      	movs	r2, #1
 800a938:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800a93a:	f003 ff38 	bl	800e7ae <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a93e:	4b7a      	ldr	r3, [pc, #488]	; (800ab28 <MX_LWIP_Init+0x23c>)
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	061a      	lsls	r2, r3, #24
 800a944:	4b78      	ldr	r3, [pc, #480]	; (800ab28 <MX_LWIP_Init+0x23c>)
 800a946:	785b      	ldrb	r3, [r3, #1]
 800a948:	041b      	lsls	r3, r3, #16
 800a94a:	431a      	orrs	r2, r3
 800a94c:	4b76      	ldr	r3, [pc, #472]	; (800ab28 <MX_LWIP_Init+0x23c>)
 800a94e:	789b      	ldrb	r3, [r3, #2]
 800a950:	021b      	lsls	r3, r3, #8
 800a952:	4313      	orrs	r3, r2
 800a954:	4a74      	ldr	r2, [pc, #464]	; (800ab28 <MX_LWIP_Init+0x23c>)
 800a956:	78d2      	ldrb	r2, [r2, #3]
 800a958:	4313      	orrs	r3, r2
 800a95a:	061a      	lsls	r2, r3, #24
 800a95c:	4b72      	ldr	r3, [pc, #456]	; (800ab28 <MX_LWIP_Init+0x23c>)
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	0619      	lsls	r1, r3, #24
 800a962:	4b71      	ldr	r3, [pc, #452]	; (800ab28 <MX_LWIP_Init+0x23c>)
 800a964:	785b      	ldrb	r3, [r3, #1]
 800a966:	041b      	lsls	r3, r3, #16
 800a968:	4319      	orrs	r1, r3
 800a96a:	4b6f      	ldr	r3, [pc, #444]	; (800ab28 <MX_LWIP_Init+0x23c>)
 800a96c:	789b      	ldrb	r3, [r3, #2]
 800a96e:	021b      	lsls	r3, r3, #8
 800a970:	430b      	orrs	r3, r1
 800a972:	496d      	ldr	r1, [pc, #436]	; (800ab28 <MX_LWIP_Init+0x23c>)
 800a974:	78c9      	ldrb	r1, [r1, #3]
 800a976:	430b      	orrs	r3, r1
 800a978:	021b      	lsls	r3, r3, #8
 800a97a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a97e:	431a      	orrs	r2, r3
 800a980:	4b69      	ldr	r3, [pc, #420]	; (800ab28 <MX_LWIP_Init+0x23c>)
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	0619      	lsls	r1, r3, #24
 800a986:	4b68      	ldr	r3, [pc, #416]	; (800ab28 <MX_LWIP_Init+0x23c>)
 800a988:	785b      	ldrb	r3, [r3, #1]
 800a98a:	041b      	lsls	r3, r3, #16
 800a98c:	4319      	orrs	r1, r3
 800a98e:	4b66      	ldr	r3, [pc, #408]	; (800ab28 <MX_LWIP_Init+0x23c>)
 800a990:	789b      	ldrb	r3, [r3, #2]
 800a992:	021b      	lsls	r3, r3, #8
 800a994:	430b      	orrs	r3, r1
 800a996:	4964      	ldr	r1, [pc, #400]	; (800ab28 <MX_LWIP_Init+0x23c>)
 800a998:	78c9      	ldrb	r1, [r1, #3]
 800a99a:	430b      	orrs	r3, r1
 800a99c:	0a1b      	lsrs	r3, r3, #8
 800a99e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a9a2:	431a      	orrs	r2, r3
 800a9a4:	4b60      	ldr	r3, [pc, #384]	; (800ab28 <MX_LWIP_Init+0x23c>)
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	0619      	lsls	r1, r3, #24
 800a9aa:	4b5f      	ldr	r3, [pc, #380]	; (800ab28 <MX_LWIP_Init+0x23c>)
 800a9ac:	785b      	ldrb	r3, [r3, #1]
 800a9ae:	041b      	lsls	r3, r3, #16
 800a9b0:	4319      	orrs	r1, r3
 800a9b2:	4b5d      	ldr	r3, [pc, #372]	; (800ab28 <MX_LWIP_Init+0x23c>)
 800a9b4:	789b      	ldrb	r3, [r3, #2]
 800a9b6:	021b      	lsls	r3, r3, #8
 800a9b8:	430b      	orrs	r3, r1
 800a9ba:	495b      	ldr	r1, [pc, #364]	; (800ab28 <MX_LWIP_Init+0x23c>)
 800a9bc:	78c9      	ldrb	r1, [r1, #3]
 800a9be:	430b      	orrs	r3, r1
 800a9c0:	0e1b      	lsrs	r3, r3, #24
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	4a5b      	ldr	r2, [pc, #364]	; (800ab34 <MX_LWIP_Init+0x248>)
 800a9c6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a9c8:	4b58      	ldr	r3, [pc, #352]	; (800ab2c <MX_LWIP_Init+0x240>)
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	061a      	lsls	r2, r3, #24
 800a9ce:	4b57      	ldr	r3, [pc, #348]	; (800ab2c <MX_LWIP_Init+0x240>)
 800a9d0:	785b      	ldrb	r3, [r3, #1]
 800a9d2:	041b      	lsls	r3, r3, #16
 800a9d4:	431a      	orrs	r2, r3
 800a9d6:	4b55      	ldr	r3, [pc, #340]	; (800ab2c <MX_LWIP_Init+0x240>)
 800a9d8:	789b      	ldrb	r3, [r3, #2]
 800a9da:	021b      	lsls	r3, r3, #8
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	4a53      	ldr	r2, [pc, #332]	; (800ab2c <MX_LWIP_Init+0x240>)
 800a9e0:	78d2      	ldrb	r2, [r2, #3]
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	061a      	lsls	r2, r3, #24
 800a9e6:	4b51      	ldr	r3, [pc, #324]	; (800ab2c <MX_LWIP_Init+0x240>)
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	0619      	lsls	r1, r3, #24
 800a9ec:	4b4f      	ldr	r3, [pc, #316]	; (800ab2c <MX_LWIP_Init+0x240>)
 800a9ee:	785b      	ldrb	r3, [r3, #1]
 800a9f0:	041b      	lsls	r3, r3, #16
 800a9f2:	4319      	orrs	r1, r3
 800a9f4:	4b4d      	ldr	r3, [pc, #308]	; (800ab2c <MX_LWIP_Init+0x240>)
 800a9f6:	789b      	ldrb	r3, [r3, #2]
 800a9f8:	021b      	lsls	r3, r3, #8
 800a9fa:	430b      	orrs	r3, r1
 800a9fc:	494b      	ldr	r1, [pc, #300]	; (800ab2c <MX_LWIP_Init+0x240>)
 800a9fe:	78c9      	ldrb	r1, [r1, #3]
 800aa00:	430b      	orrs	r3, r1
 800aa02:	021b      	lsls	r3, r3, #8
 800aa04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aa08:	431a      	orrs	r2, r3
 800aa0a:	4b48      	ldr	r3, [pc, #288]	; (800ab2c <MX_LWIP_Init+0x240>)
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	0619      	lsls	r1, r3, #24
 800aa10:	4b46      	ldr	r3, [pc, #280]	; (800ab2c <MX_LWIP_Init+0x240>)
 800aa12:	785b      	ldrb	r3, [r3, #1]
 800aa14:	041b      	lsls	r3, r3, #16
 800aa16:	4319      	orrs	r1, r3
 800aa18:	4b44      	ldr	r3, [pc, #272]	; (800ab2c <MX_LWIP_Init+0x240>)
 800aa1a:	789b      	ldrb	r3, [r3, #2]
 800aa1c:	021b      	lsls	r3, r3, #8
 800aa1e:	430b      	orrs	r3, r1
 800aa20:	4942      	ldr	r1, [pc, #264]	; (800ab2c <MX_LWIP_Init+0x240>)
 800aa22:	78c9      	ldrb	r1, [r1, #3]
 800aa24:	430b      	orrs	r3, r1
 800aa26:	0a1b      	lsrs	r3, r3, #8
 800aa28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aa2c:	431a      	orrs	r2, r3
 800aa2e:	4b3f      	ldr	r3, [pc, #252]	; (800ab2c <MX_LWIP_Init+0x240>)
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	0619      	lsls	r1, r3, #24
 800aa34:	4b3d      	ldr	r3, [pc, #244]	; (800ab2c <MX_LWIP_Init+0x240>)
 800aa36:	785b      	ldrb	r3, [r3, #1]
 800aa38:	041b      	lsls	r3, r3, #16
 800aa3a:	4319      	orrs	r1, r3
 800aa3c:	4b3b      	ldr	r3, [pc, #236]	; (800ab2c <MX_LWIP_Init+0x240>)
 800aa3e:	789b      	ldrb	r3, [r3, #2]
 800aa40:	021b      	lsls	r3, r3, #8
 800aa42:	430b      	orrs	r3, r1
 800aa44:	4939      	ldr	r1, [pc, #228]	; (800ab2c <MX_LWIP_Init+0x240>)
 800aa46:	78c9      	ldrb	r1, [r1, #3]
 800aa48:	430b      	orrs	r3, r1
 800aa4a:	0e1b      	lsrs	r3, r3, #24
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	4a3a      	ldr	r2, [pc, #232]	; (800ab38 <MX_LWIP_Init+0x24c>)
 800aa50:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800aa52:	4b37      	ldr	r3, [pc, #220]	; (800ab30 <MX_LWIP_Init+0x244>)
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	061a      	lsls	r2, r3, #24
 800aa58:	4b35      	ldr	r3, [pc, #212]	; (800ab30 <MX_LWIP_Init+0x244>)
 800aa5a:	785b      	ldrb	r3, [r3, #1]
 800aa5c:	041b      	lsls	r3, r3, #16
 800aa5e:	431a      	orrs	r2, r3
 800aa60:	4b33      	ldr	r3, [pc, #204]	; (800ab30 <MX_LWIP_Init+0x244>)
 800aa62:	789b      	ldrb	r3, [r3, #2]
 800aa64:	021b      	lsls	r3, r3, #8
 800aa66:	4313      	orrs	r3, r2
 800aa68:	4a31      	ldr	r2, [pc, #196]	; (800ab30 <MX_LWIP_Init+0x244>)
 800aa6a:	78d2      	ldrb	r2, [r2, #3]
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	061a      	lsls	r2, r3, #24
 800aa70:	4b2f      	ldr	r3, [pc, #188]	; (800ab30 <MX_LWIP_Init+0x244>)
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	0619      	lsls	r1, r3, #24
 800aa76:	4b2e      	ldr	r3, [pc, #184]	; (800ab30 <MX_LWIP_Init+0x244>)
 800aa78:	785b      	ldrb	r3, [r3, #1]
 800aa7a:	041b      	lsls	r3, r3, #16
 800aa7c:	4319      	orrs	r1, r3
 800aa7e:	4b2c      	ldr	r3, [pc, #176]	; (800ab30 <MX_LWIP_Init+0x244>)
 800aa80:	789b      	ldrb	r3, [r3, #2]
 800aa82:	021b      	lsls	r3, r3, #8
 800aa84:	430b      	orrs	r3, r1
 800aa86:	492a      	ldr	r1, [pc, #168]	; (800ab30 <MX_LWIP_Init+0x244>)
 800aa88:	78c9      	ldrb	r1, [r1, #3]
 800aa8a:	430b      	orrs	r3, r1
 800aa8c:	021b      	lsls	r3, r3, #8
 800aa8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aa92:	431a      	orrs	r2, r3
 800aa94:	4b26      	ldr	r3, [pc, #152]	; (800ab30 <MX_LWIP_Init+0x244>)
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	0619      	lsls	r1, r3, #24
 800aa9a:	4b25      	ldr	r3, [pc, #148]	; (800ab30 <MX_LWIP_Init+0x244>)
 800aa9c:	785b      	ldrb	r3, [r3, #1]
 800aa9e:	041b      	lsls	r3, r3, #16
 800aaa0:	4319      	orrs	r1, r3
 800aaa2:	4b23      	ldr	r3, [pc, #140]	; (800ab30 <MX_LWIP_Init+0x244>)
 800aaa4:	789b      	ldrb	r3, [r3, #2]
 800aaa6:	021b      	lsls	r3, r3, #8
 800aaa8:	430b      	orrs	r3, r1
 800aaaa:	4921      	ldr	r1, [pc, #132]	; (800ab30 <MX_LWIP_Init+0x244>)
 800aaac:	78c9      	ldrb	r1, [r1, #3]
 800aaae:	430b      	orrs	r3, r1
 800aab0:	0a1b      	lsrs	r3, r3, #8
 800aab2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aab6:	431a      	orrs	r2, r3
 800aab8:	4b1d      	ldr	r3, [pc, #116]	; (800ab30 <MX_LWIP_Init+0x244>)
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	0619      	lsls	r1, r3, #24
 800aabe:	4b1c      	ldr	r3, [pc, #112]	; (800ab30 <MX_LWIP_Init+0x244>)
 800aac0:	785b      	ldrb	r3, [r3, #1]
 800aac2:	041b      	lsls	r3, r3, #16
 800aac4:	4319      	orrs	r1, r3
 800aac6:	4b1a      	ldr	r3, [pc, #104]	; (800ab30 <MX_LWIP_Init+0x244>)
 800aac8:	789b      	ldrb	r3, [r3, #2]
 800aaca:	021b      	lsls	r3, r3, #8
 800aacc:	430b      	orrs	r3, r1
 800aace:	4918      	ldr	r1, [pc, #96]	; (800ab30 <MX_LWIP_Init+0x244>)
 800aad0:	78c9      	ldrb	r1, [r1, #3]
 800aad2:	430b      	orrs	r3, r1
 800aad4:	0e1b      	lsrs	r3, r3, #24
 800aad6:	4313      	orrs	r3, r2
 800aad8:	4a18      	ldr	r2, [pc, #96]	; (800ab3c <MX_LWIP_Init+0x250>)
 800aada:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800aadc:	4b18      	ldr	r3, [pc, #96]	; (800ab40 <MX_LWIP_Init+0x254>)
 800aade:	9302      	str	r3, [sp, #8]
 800aae0:	4b18      	ldr	r3, [pc, #96]	; (800ab44 <MX_LWIP_Init+0x258>)
 800aae2:	9301      	str	r3, [sp, #4]
 800aae4:	2300      	movs	r3, #0
 800aae6:	9300      	str	r3, [sp, #0]
 800aae8:	4b14      	ldr	r3, [pc, #80]	; (800ab3c <MX_LWIP_Init+0x250>)
 800aaea:	4a13      	ldr	r2, [pc, #76]	; (800ab38 <MX_LWIP_Init+0x24c>)
 800aaec:	4911      	ldr	r1, [pc, #68]	; (800ab34 <MX_LWIP_Init+0x248>)
 800aaee:	4816      	ldr	r0, [pc, #88]	; (800ab48 <MX_LWIP_Init+0x25c>)
 800aaf0:	f004 fb02 	bl	800f0f8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800aaf4:	4814      	ldr	r0, [pc, #80]	; (800ab48 <MX_LWIP_Init+0x25c>)
 800aaf6:	f004 fcb1 	bl	800f45c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800aafa:	4b13      	ldr	r3, [pc, #76]	; (800ab48 <MX_LWIP_Init+0x25c>)
 800aafc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ab00:	089b      	lsrs	r3, r3, #2
 800ab02:	f003 0301 	and.w	r3, r3, #1
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d003      	beq.n	800ab14 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800ab0c:	480e      	ldr	r0, [pc, #56]	; (800ab48 <MX_LWIP_Init+0x25c>)
 800ab0e:	f004 fcb5 	bl	800f47c <netif_set_up>
 800ab12:	e002      	b.n	800ab1a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800ab14:	480c      	ldr	r0, [pc, #48]	; (800ab48 <MX_LWIP_Init+0x25c>)
 800ab16:	f004 fd1d 	bl	800f554 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800ab1a:	490c      	ldr	r1, [pc, #48]	; (800ab4c <MX_LWIP_Init+0x260>)
 800ab1c:	480a      	ldr	r0, [pc, #40]	; (800ab48 <MX_LWIP_Init+0x25c>)
 800ab1e:	f004 fd4b 	bl	800f5b8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800ab22:	bf00      	nop
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	20004b38 	.word	0x20004b38
 800ab2c:	20004b34 	.word	0x20004b34
 800ab30:	20004af8 	.word	0x20004af8
 800ab34:	20004b30 	.word	0x20004b30
 800ab38:	20004b3c 	.word	0x20004b3c
 800ab3c:	20004b40 	.word	0x20004b40
 800ab40:	08018c55 	.word	0x08018c55
 800ab44:	0800b119 	.word	0x0800b119
 800ab48:	20004afc 	.word	0x20004afc
 800ab4c:	0800b185 	.word	0x0800b185

0800ab50 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800ab54:	4803      	ldr	r0, [pc, #12]	; (800ab64 <MX_LWIP_Process+0x14>)
 800ab56:	f000 fabf 	bl	800b0d8 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800ab5a:	f00b fc95 	bl	8016488 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800ab5e:	bf00      	nop
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	20004afc 	.word	0x20004afc

0800ab68 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b08e      	sub	sp, #56	; 0x38
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab74:	2200      	movs	r2, #0
 800ab76:	601a      	str	r2, [r3, #0]
 800ab78:	605a      	str	r2, [r3, #4]
 800ab7a:	609a      	str	r2, [r3, #8]
 800ab7c:	60da      	str	r2, [r3, #12]
 800ab7e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a4a      	ldr	r2, [pc, #296]	; (800acb0 <HAL_ETH_MspInit+0x148>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	f040 808d 	bne.w	800aca6 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	623b      	str	r3, [r7, #32]
 800ab90:	4b48      	ldr	r3, [pc, #288]	; (800acb4 <HAL_ETH_MspInit+0x14c>)
 800ab92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab94:	4a47      	ldr	r2, [pc, #284]	; (800acb4 <HAL_ETH_MspInit+0x14c>)
 800ab96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ab9a:	6313      	str	r3, [r2, #48]	; 0x30
 800ab9c:	4b45      	ldr	r3, [pc, #276]	; (800acb4 <HAL_ETH_MspInit+0x14c>)
 800ab9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aba4:	623b      	str	r3, [r7, #32]
 800aba6:	6a3b      	ldr	r3, [r7, #32]
 800aba8:	2300      	movs	r3, #0
 800abaa:	61fb      	str	r3, [r7, #28]
 800abac:	4b41      	ldr	r3, [pc, #260]	; (800acb4 <HAL_ETH_MspInit+0x14c>)
 800abae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb0:	4a40      	ldr	r2, [pc, #256]	; (800acb4 <HAL_ETH_MspInit+0x14c>)
 800abb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800abb6:	6313      	str	r3, [r2, #48]	; 0x30
 800abb8:	4b3e      	ldr	r3, [pc, #248]	; (800acb4 <HAL_ETH_MspInit+0x14c>)
 800abba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800abc0:	61fb      	str	r3, [r7, #28]
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	2300      	movs	r3, #0
 800abc6:	61bb      	str	r3, [r7, #24]
 800abc8:	4b3a      	ldr	r3, [pc, #232]	; (800acb4 <HAL_ETH_MspInit+0x14c>)
 800abca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abcc:	4a39      	ldr	r2, [pc, #228]	; (800acb4 <HAL_ETH_MspInit+0x14c>)
 800abce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800abd2:	6313      	str	r3, [r2, #48]	; 0x30
 800abd4:	4b37      	ldr	r3, [pc, #220]	; (800acb4 <HAL_ETH_MspInit+0x14c>)
 800abd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abdc:	61bb      	str	r3, [r7, #24]
 800abde:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800abe0:	2300      	movs	r3, #0
 800abe2:	617b      	str	r3, [r7, #20]
 800abe4:	4b33      	ldr	r3, [pc, #204]	; (800acb4 <HAL_ETH_MspInit+0x14c>)
 800abe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe8:	4a32      	ldr	r2, [pc, #200]	; (800acb4 <HAL_ETH_MspInit+0x14c>)
 800abea:	f043 0304 	orr.w	r3, r3, #4
 800abee:	6313      	str	r3, [r2, #48]	; 0x30
 800abf0:	4b30      	ldr	r3, [pc, #192]	; (800acb4 <HAL_ETH_MspInit+0x14c>)
 800abf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abf4:	f003 0304 	and.w	r3, r3, #4
 800abf8:	617b      	str	r3, [r7, #20]
 800abfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800abfc:	2300      	movs	r3, #0
 800abfe:	613b      	str	r3, [r7, #16]
 800ac00:	4b2c      	ldr	r3, [pc, #176]	; (800acb4 <HAL_ETH_MspInit+0x14c>)
 800ac02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac04:	4a2b      	ldr	r2, [pc, #172]	; (800acb4 <HAL_ETH_MspInit+0x14c>)
 800ac06:	f043 0301 	orr.w	r3, r3, #1
 800ac0a:	6313      	str	r3, [r2, #48]	; 0x30
 800ac0c:	4b29      	ldr	r3, [pc, #164]	; (800acb4 <HAL_ETH_MspInit+0x14c>)
 800ac0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac10:	f003 0301 	and.w	r3, r3, #1
 800ac14:	613b      	str	r3, [r7, #16]
 800ac16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800ac18:	2300      	movs	r3, #0
 800ac1a:	60fb      	str	r3, [r7, #12]
 800ac1c:	4b25      	ldr	r3, [pc, #148]	; (800acb4 <HAL_ETH_MspInit+0x14c>)
 800ac1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac20:	4a24      	ldr	r2, [pc, #144]	; (800acb4 <HAL_ETH_MspInit+0x14c>)
 800ac22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac26:	6313      	str	r3, [r2, #48]	; 0x30
 800ac28:	4b22      	ldr	r3, [pc, #136]	; (800acb4 <HAL_ETH_MspInit+0x14c>)
 800ac2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac30:	60fb      	str	r3, [r7, #12]
 800ac32:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800ac34:	2332      	movs	r3, #50	; 0x32
 800ac36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac38:	2302      	movs	r3, #2
 800ac3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac40:	2303      	movs	r3, #3
 800ac42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ac44:	230b      	movs	r3, #11
 800ac46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ac48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	481a      	ldr	r0, [pc, #104]	; (800acb8 <HAL_ETH_MspInit+0x150>)
 800ac50:	f7fb f8b6 	bl	8005dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800ac54:	2386      	movs	r3, #134	; 0x86
 800ac56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac58:	2302      	movs	r3, #2
 800ac5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac60:	2303      	movs	r3, #3
 800ac62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ac64:	230b      	movs	r3, #11
 800ac66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	4813      	ldr	r0, [pc, #76]	; (800acbc <HAL_ETH_MspInit+0x154>)
 800ac70:	f7fb f8a6 	bl	8005dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800ac74:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800ac78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac7a:	2302      	movs	r3, #2
 800ac7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac82:	2303      	movs	r3, #3
 800ac84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ac86:	230b      	movs	r3, #11
 800ac88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ac8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac8e:	4619      	mov	r1, r3
 800ac90:	480b      	ldr	r0, [pc, #44]	; (800acc0 <HAL_ETH_MspInit+0x158>)
 800ac92:	f7fb f895 	bl	8005dc0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 2, 0);
 800ac96:	2200      	movs	r2, #0
 800ac98:	2102      	movs	r1, #2
 800ac9a:	203d      	movs	r0, #61	; 0x3d
 800ac9c:	f7f7 fe47 	bl	800292e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800aca0:	203d      	movs	r0, #61	; 0x3d
 800aca2:	f7f7 fe60 	bl	8002966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800aca6:	bf00      	nop
 800aca8:	3738      	adds	r7, #56	; 0x38
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	40028000 	.word	0x40028000
 800acb4:	40023800 	.word	0x40023800
 800acb8:	40020800 	.word	0x40020800
 800acbc:	40020000 	.word	0x40020000
 800acc0:	40021800 	.word	0x40021800

0800acc4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b086      	sub	sp, #24
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800accc:	2300      	movs	r3, #0
 800acce:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800acd0:	4b52      	ldr	r3, [pc, #328]	; (800ae1c <low_level_init+0x158>)
 800acd2:	4a53      	ldr	r2, [pc, #332]	; (800ae20 <low_level_init+0x15c>)
 800acd4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800acd6:	4b51      	ldr	r3, [pc, #324]	; (800ae1c <low_level_init+0x158>)
 800acd8:	2201      	movs	r2, #1
 800acda:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800acdc:	4b4f      	ldr	r3, [pc, #316]	; (800ae1c <low_level_init+0x158>)
 800acde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ace2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800ace4:	4b4d      	ldr	r3, [pc, #308]	; (800ae1c <low_level_init+0x158>)
 800ace6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800acea:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 800acec:	4b4b      	ldr	r3, [pc, #300]	; (800ae1c <low_level_init+0x158>)
 800acee:	2201      	movs	r2, #1
 800acf0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800acf2:	2300      	movs	r3, #0
 800acf4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800acf6:	2380      	movs	r3, #128	; 0x80
 800acf8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800acfa:	23e1      	movs	r3, #225	; 0xe1
 800acfc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800acfe:	2300      	movs	r3, #0
 800ad00:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800ad02:	2300      	movs	r3, #0
 800ad04:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800ad06:	2300      	movs	r3, #0
 800ad08:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800ad0a:	4a44      	ldr	r2, [pc, #272]	; (800ae1c <low_level_init+0x158>)
 800ad0c:	f107 0308 	add.w	r3, r7, #8
 800ad10:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800ad12:	4b42      	ldr	r3, [pc, #264]	; (800ae1c <low_level_init+0x158>)
 800ad14:	2200      	movs	r2, #0
 800ad16:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800ad18:	4b40      	ldr	r3, [pc, #256]	; (800ae1c <low_level_init+0x158>)
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800ad1e:	4b3f      	ldr	r3, [pc, #252]	; (800ae1c <low_level_init+0x158>)
 800ad20:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800ad24:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ad26:	483d      	ldr	r0, [pc, #244]	; (800ae1c <low_level_init+0x158>)
 800ad28:	f7f9 fe9e 	bl	8004a68 <HAL_ETH_Init>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800ad30:	7dfb      	ldrb	r3, [r7, #23]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d108      	bne.n	800ad48 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ad3c:	f043 0304 	orr.w	r3, r3, #4
 800ad40:	b2da      	uxtb	r2, r3
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800ad48:	2304      	movs	r3, #4
 800ad4a:	4a36      	ldr	r2, [pc, #216]	; (800ae24 <low_level_init+0x160>)
 800ad4c:	4936      	ldr	r1, [pc, #216]	; (800ae28 <low_level_init+0x164>)
 800ad4e:	4833      	ldr	r0, [pc, #204]	; (800ae1c <low_level_init+0x158>)
 800ad50:	f7fa f826 	bl	8004da0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800ad54:	2304      	movs	r3, #4
 800ad56:	4a35      	ldr	r2, [pc, #212]	; (800ae2c <low_level_init+0x168>)
 800ad58:	4935      	ldr	r1, [pc, #212]	; (800ae30 <low_level_init+0x16c>)
 800ad5a:	4830      	ldr	r0, [pc, #192]	; (800ae1c <low_level_init+0x158>)
 800ad5c:	f7fa f889 	bl	8004e72 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2206      	movs	r2, #6
 800ad64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ad68:	4b2c      	ldr	r3, [pc, #176]	; (800ae1c <low_level_init+0x158>)
 800ad6a:	695b      	ldr	r3, [r3, #20]
 800ad6c:	781a      	ldrb	r2, [r3, #0]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800ad74:	4b29      	ldr	r3, [pc, #164]	; (800ae1c <low_level_init+0x158>)
 800ad76:	695b      	ldr	r3, [r3, #20]
 800ad78:	785a      	ldrb	r2, [r3, #1]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800ad80:	4b26      	ldr	r3, [pc, #152]	; (800ae1c <low_level_init+0x158>)
 800ad82:	695b      	ldr	r3, [r3, #20]
 800ad84:	789a      	ldrb	r2, [r3, #2]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800ad8c:	4b23      	ldr	r3, [pc, #140]	; (800ae1c <low_level_init+0x158>)
 800ad8e:	695b      	ldr	r3, [r3, #20]
 800ad90:	78da      	ldrb	r2, [r3, #3]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800ad98:	4b20      	ldr	r3, [pc, #128]	; (800ae1c <low_level_init+0x158>)
 800ad9a:	695b      	ldr	r3, [r3, #20]
 800ad9c:	791a      	ldrb	r2, [r3, #4]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800ada4:	4b1d      	ldr	r3, [pc, #116]	; (800ae1c <low_level_init+0x158>)
 800ada6:	695b      	ldr	r3, [r3, #20]
 800ada8:	795a      	ldrb	r2, [r3, #5]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800adb6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800adbe:	f043 030a 	orr.w	r3, r3, #10
 800adc2:	b2da      	uxtb	r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800adca:	4814      	ldr	r0, [pc, #80]	; (800ae1c <low_level_init+0x158>)
 800adcc:	f7fa fb7f 	bl	80054ce <HAL_ETH_Start>

/* USER CODE END PHY_PRE_CONFIG */

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 800add0:	f107 0310 	add.w	r3, r7, #16
 800add4:	461a      	mov	r2, r3
 800add6:	2111      	movs	r1, #17
 800add8:	4810      	ldr	r0, [pc, #64]	; (800ae1c <low_level_init+0x158>)
 800adda:	f7fa faaa 	bl	8005332 <HAL_ETH_ReadPHYRegister>

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	f043 0303 	orr.w	r3, r3, #3
 800ade4:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	461a      	mov	r2, r3
 800adea:	2111      	movs	r1, #17
 800adec:	480b      	ldr	r0, [pc, #44]	; (800ae1c <low_level_init+0x158>)
 800adee:	f7fa fb08 	bl	8005402 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 800adf2:	f107 0310 	add.w	r3, r7, #16
 800adf6:	461a      	mov	r2, r3
 800adf8:	2112      	movs	r1, #18
 800adfa:	4808      	ldr	r0, [pc, #32]	; (800ae1c <low_level_init+0x158>)
 800adfc:	f7fa fa99 	bl	8005332 <HAL_ETH_ReadPHYRegister>

  regvalue |= PHY_MISR_LINK_INT_EN;
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	f043 0320 	orr.w	r3, r3, #32
 800ae06:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	2112      	movs	r1, #18
 800ae0e:	4803      	ldr	r0, [pc, #12]	; (800ae1c <low_level_init+0x158>)
 800ae10:	f7fa faf7 	bl	8005402 <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800ae14:	bf00      	nop
 800ae16:	3718      	adds	r7, #24
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	20006414 	.word	0x20006414
 800ae20:	40028000 	.word	0x40028000
 800ae24:	2000645c 	.word	0x2000645c
 800ae28:	20004b44 	.word	0x20004b44
 800ae2c:	20004bc4 	.word	0x20004bc4
 800ae30:	20006394 	.word	0x20006394

0800ae34 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b08a      	sub	sp, #40	; 0x28
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800ae3e:	4b4b      	ldr	r3, [pc, #300]	; (800af6c <low_level_output+0x138>)
 800ae40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800ae46:	2300      	movs	r3, #0
 800ae48:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800ae52:	2300      	movs	r3, #0
 800ae54:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800ae56:	4b45      	ldr	r3, [pc, #276]	; (800af6c <low_level_output+0x138>)
 800ae58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae5a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	623b      	str	r3, [r7, #32]
 800ae64:	e05a      	b.n	800af1c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800ae66:	69bb      	ldr	r3, [r7, #24]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	da03      	bge.n	800ae76 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800ae6e:	23f8      	movs	r3, #248	; 0xf8
 800ae70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800ae74:	e05c      	b.n	800af30 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800ae76:	6a3b      	ldr	r3, [r7, #32]
 800ae78:	895b      	ldrh	r3, [r3, #10]
 800ae7a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800ae80:	e02f      	b.n	800aee2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800ae82:	69fa      	ldr	r2, [r7, #28]
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	18d0      	adds	r0, r2, r3
 800ae88:	6a3b      	ldr	r3, [r7, #32]
 800ae8a:	685a      	ldr	r2, [r3, #4]
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	18d1      	adds	r1, r2, r3
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800ae96:	3304      	adds	r3, #4
 800ae98:	461a      	mov	r2, r3
 800ae9a:	f00e fb3d 	bl	8019518 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800aea4:	69bb      	ldr	r3, [r7, #24]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	da03      	bge.n	800aeb4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800aeac:	23f8      	movs	r3, #248	; 0xf8
 800aeae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800aeb2:	e03d      	b.n	800af30 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800aeb4:	69bb      	ldr	r3, [r7, #24]
 800aeb6:	689b      	ldr	r3, [r3, #8]
 800aeb8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800aeba:	693a      	ldr	r2, [r7, #16]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	4413      	add	r3, r2
 800aec0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800aec4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800aec6:	68ba      	ldr	r2, [r7, #8]
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	1ad3      	subs	r3, r2, r3
 800aecc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800aed0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800aed2:	697a      	ldr	r2, [r7, #20]
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	1ad3      	subs	r3, r2, r3
 800aed8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800aedc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800aede:	2300      	movs	r3, #0
 800aee0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800aee2:	68fa      	ldr	r2, [r7, #12]
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	4413      	add	r3, r2
 800aee8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d8c8      	bhi.n	800ae82 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800aef0:	69fa      	ldr	r2, [r7, #28]
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	18d0      	adds	r0, r2, r3
 800aef6:	6a3b      	ldr	r3, [r7, #32]
 800aef8:	685a      	ldr	r2, [r3, #4]
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	4413      	add	r3, r2
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	4619      	mov	r1, r3
 800af02:	f00e fb09 	bl	8019518 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800af06:	693a      	ldr	r2, [r7, #16]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	4413      	add	r3, r2
 800af0c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800af0e:	697a      	ldr	r2, [r7, #20]
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	4413      	add	r3, r2
 800af14:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800af16:	6a3b      	ldr	r3, [r7, #32]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	623b      	str	r3, [r7, #32]
 800af1c:	6a3b      	ldr	r3, [r7, #32]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d1a1      	bne.n	800ae66 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800af22:	6979      	ldr	r1, [r7, #20]
 800af24:	4811      	ldr	r0, [pc, #68]	; (800af6c <low_level_output+0x138>)
 800af26:	f7fa f811 	bl	8004f4c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800af2a:	2300      	movs	r3, #0
 800af2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800af30:	4b0e      	ldr	r3, [pc, #56]	; (800af6c <low_level_output+0x138>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af38:	3314      	adds	r3, #20
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f003 0320 	and.w	r3, r3, #32
 800af40:	2b00      	cmp	r3, #0
 800af42:	d00d      	beq.n	800af60 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800af44:	4b09      	ldr	r3, [pc, #36]	; (800af6c <low_level_output+0x138>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af4c:	3314      	adds	r3, #20
 800af4e:	2220      	movs	r2, #32
 800af50:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800af52:	4b06      	ldr	r3, [pc, #24]	; (800af6c <low_level_output+0x138>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af5a:	3304      	adds	r3, #4
 800af5c:	2200      	movs	r2, #0
 800af5e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800af60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800af64:	4618      	mov	r0, r3
 800af66:	3728      	adds	r7, #40	; 0x28
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	20006414 	.word	0x20006414

0800af70 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b08c      	sub	sp, #48	; 0x30
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800af78:	2300      	movs	r3, #0
 800af7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800af7c:	2300      	movs	r3, #0
 800af7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800af80:	2300      	movs	r3, #0
 800af82:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800af84:	2300      	movs	r3, #0
 800af86:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800af88:	2300      	movs	r3, #0
 800af8a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800af8c:	2300      	movs	r3, #0
 800af8e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800af90:	2300      	movs	r3, #0
 800af92:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800af94:	484f      	ldr	r0, [pc, #316]	; (800b0d4 <low_level_input+0x164>)
 800af96:	f7fa f8c3 	bl	8005120 <HAL_ETH_GetReceivedFrame>
 800af9a:	4603      	mov	r3, r0
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d001      	beq.n	800afa4 <low_level_input+0x34>

    return NULL;
 800afa0:	2300      	movs	r3, #0
 800afa2:	e092      	b.n	800b0ca <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800afa4:	4b4b      	ldr	r3, [pc, #300]	; (800b0d4 <low_level_input+0x164>)
 800afa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afa8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800afaa:	4b4a      	ldr	r3, [pc, #296]	; (800b0d4 <low_level_input+0x164>)
 800afac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afae:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800afb0:	89fb      	ldrh	r3, [r7, #14]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d007      	beq.n	800afc6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800afb6:	89fb      	ldrh	r3, [r7, #14]
 800afb8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800afbc:	4619      	mov	r1, r3
 800afbe:	2000      	movs	r0, #0
 800afc0:	f004 fb96 	bl	800f6f0 <pbuf_alloc>
 800afc4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800afc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d04b      	beq.n	800b064 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800afcc:	4b41      	ldr	r3, [pc, #260]	; (800b0d4 <low_level_input+0x164>)
 800afce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afd0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800afd2:	2300      	movs	r3, #0
 800afd4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800afd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd8:	62bb      	str	r3, [r7, #40]	; 0x28
 800afda:	e040      	b.n	800b05e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800afdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afde:	895b      	ldrh	r3, [r3, #10]
 800afe0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800afe2:	2300      	movs	r3, #0
 800afe4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800afe6:	e021      	b.n	800b02c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800afe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afea:	685a      	ldr	r2, [r3, #4]
 800afec:	69bb      	ldr	r3, [r7, #24]
 800afee:	18d0      	adds	r0, r2, r3
 800aff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	18d1      	adds	r1, r2, r3
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800affc:	3304      	adds	r3, #4
 800affe:	461a      	mov	r2, r3
 800b000:	f00e fa8a 	bl	8019518 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b004:	6a3b      	ldr	r3, [r7, #32]
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800b00a:	6a3b      	ldr	r3, [r7, #32]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800b010:	69fa      	ldr	r2, [r7, #28]
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	4413      	add	r3, r2
 800b016:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800b01a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800b01c:	69ba      	ldr	r2, [r7, #24]
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	1ad3      	subs	r3, r2, r3
 800b022:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b026:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800b028:	2300      	movs	r3, #0
 800b02a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800b02c:	697a      	ldr	r2, [r7, #20]
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	4413      	add	r3, r2
 800b032:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b036:	4293      	cmp	r3, r2
 800b038:	d8d6      	bhi.n	800afe8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800b03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03c:	685a      	ldr	r2, [r3, #4]
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	18d0      	adds	r0, r2, r3
 800b042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b044:	69fb      	ldr	r3, [r7, #28]
 800b046:	4413      	add	r3, r2
 800b048:	697a      	ldr	r2, [r7, #20]
 800b04a:	4619      	mov	r1, r3
 800b04c:	f00e fa64 	bl	8019518 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800b050:	69fa      	ldr	r2, [r7, #28]
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	4413      	add	r3, r2
 800b056:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800b058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b060:	2b00      	cmp	r3, #0
 800b062:	d1bb      	bne.n	800afdc <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b064:	4b1b      	ldr	r3, [pc, #108]	; (800b0d4 <low_level_input+0x164>)
 800b066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b068:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b06a:	2300      	movs	r3, #0
 800b06c:	613b      	str	r3, [r7, #16]
 800b06e:	e00b      	b.n	800b088 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800b070:	6a3b      	ldr	r3, [r7, #32]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b078:	6a3b      	ldr	r3, [r7, #32]
 800b07a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b07c:	6a3b      	ldr	r3, [r7, #32]
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	3301      	adds	r3, #1
 800b086:	613b      	str	r3, [r7, #16]
 800b088:	4b12      	ldr	r3, [pc, #72]	; (800b0d4 <low_level_input+0x164>)
 800b08a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b08c:	693a      	ldr	r2, [r7, #16]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d3ee      	bcc.n	800b070 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800b092:	4b10      	ldr	r3, [pc, #64]	; (800b0d4 <low_level_input+0x164>)
 800b094:	2200      	movs	r2, #0
 800b096:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800b098:	4b0e      	ldr	r3, [pc, #56]	; (800b0d4 <low_level_input+0x164>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0a0:	3314      	adds	r3, #20
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d00d      	beq.n	800b0c8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800b0ac:	4b09      	ldr	r3, [pc, #36]	; (800b0d4 <low_level_input+0x164>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0b4:	3314      	adds	r3, #20
 800b0b6:	2280      	movs	r2, #128	; 0x80
 800b0b8:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800b0ba:	4b06      	ldr	r3, [pc, #24]	; (800b0d4 <low_level_input+0x164>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0c2:	3308      	adds	r3, #8
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	601a      	str	r2, [r3, #0]
  }
  return p;
 800b0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3730      	adds	r7, #48	; 0x30
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	20006414 	.word	0x20006414

0800b0d8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f7ff ff45 	bl	800af70 <low_level_input>
 800b0e6:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d010      	beq.n	800b110 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	691b      	ldr	r3, [r3, #16]
 800b0f2:	6879      	ldr	r1, [r7, #4]
 800b0f4:	68f8      	ldr	r0, [r7, #12]
 800b0f6:	4798      	blx	r3
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800b0fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d006      	beq.n	800b112 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f004 fdd7 	bl	800fcb8 <pbuf_free>
    p = NULL;
 800b10a:	2300      	movs	r3, #0
 800b10c:	60fb      	str	r3, [r7, #12]
 800b10e:	e000      	b.n	800b112 <ethernetif_input+0x3a>
  if (p == NULL) return;
 800b110:	bf00      	nop
  }
}
 800b112:	3710      	adds	r7, #16
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b082      	sub	sp, #8
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d106      	bne.n	800b134 <ethernetif_init+0x1c>
 800b126:	4b0e      	ldr	r3, [pc, #56]	; (800b160 <ethernetif_init+0x48>)
 800b128:	f240 2215 	movw	r2, #533	; 0x215
 800b12c:	490d      	ldr	r1, [pc, #52]	; (800b164 <ethernetif_init+0x4c>)
 800b12e:	480e      	ldr	r0, [pc, #56]	; (800b168 <ethernetif_init+0x50>)
 800b130:	f00e ff1c 	bl	8019f6c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2273      	movs	r2, #115	; 0x73
 800b138:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2274      	movs	r2, #116	; 0x74
 800b140:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4a09      	ldr	r2, [pc, #36]	; (800b16c <ethernetif_init+0x54>)
 800b148:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4a08      	ldr	r2, [pc, #32]	; (800b170 <ethernetif_init+0x58>)
 800b14e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f7ff fdb7 	bl	800acc4 <low_level_init>

  return ERR_OK;
 800b156:	2300      	movs	r3, #0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	0801c120 	.word	0x0801c120
 800b164:	0801c13c 	.word	0x0801c13c
 800b168:	0801c14c 	.word	0x0801c14c
 800b16c:	08017119 	.word	0x08017119
 800b170:	0800ae35 	.word	0x0800ae35

0800b174 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b178:	f7f7 face 	bl	8002718 <HAL_GetTick>
 800b17c:	4603      	mov	r3, r0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	bd80      	pop	{r7, pc}
	...

0800b184 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800b18c:	2300      	movs	r3, #0
 800b18e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800b190:	2300      	movs	r3, #0
 800b192:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b19a:	089b      	lsrs	r3, r3, #2
 800b19c:	f003 0301 	and.w	r3, r3, #1
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d05d      	beq.n	800b262 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800b1a6:	4b34      	ldr	r3, [pc, #208]	; (800b278 <ethernetif_update_config+0xf4>)
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d03f      	beq.n	800b22e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800b1ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	4830      	ldr	r0, [pc, #192]	; (800b278 <ethernetif_update_config+0xf4>)
 800b1b6:	f7fa f924 	bl	8005402 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800b1ba:	f7f7 faad 	bl	8002718 <HAL_GetTick>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800b1c2:	f107 0308 	add.w	r3, r7, #8
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	2101      	movs	r1, #1
 800b1ca:	482b      	ldr	r0, [pc, #172]	; (800b278 <ethernetif_update_config+0xf4>)
 800b1cc:	f7fa f8b1 	bl	8005332 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800b1d0:	f7f7 faa2 	bl	8002718 <HAL_GetTick>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b1de:	d828      	bhi.n	800b232 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	f003 0320 	and.w	r3, r3, #32
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d0eb      	beq.n	800b1c2 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800b1ea:	f107 0308 	add.w	r3, r7, #8
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	2131      	movs	r1, #49	; 0x31
 800b1f2:	4821      	ldr	r0, [pc, #132]	; (800b278 <ethernetif_update_config+0xf4>)
 800b1f4:	f7fa f89d 	bl	8005332 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	f003 0310 	and.w	r3, r3, #16
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d004      	beq.n	800b20c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800b202:	4b1d      	ldr	r3, [pc, #116]	; (800b278 <ethernetif_update_config+0xf4>)
 800b204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b208:	60da      	str	r2, [r3, #12]
 800b20a:	e002      	b.n	800b212 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800b20c:	4b1a      	ldr	r3, [pc, #104]	; (800b278 <ethernetif_update_config+0xf4>)
 800b20e:	2200      	movs	r2, #0
 800b210:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	f003 0304 	and.w	r3, r3, #4
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d003      	beq.n	800b224 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800b21c:	4b16      	ldr	r3, [pc, #88]	; (800b278 <ethernetif_update_config+0xf4>)
 800b21e:	2200      	movs	r2, #0
 800b220:	609a      	str	r2, [r3, #8]
 800b222:	e016      	b.n	800b252 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800b224:	4b14      	ldr	r3, [pc, #80]	; (800b278 <ethernetif_update_config+0xf4>)
 800b226:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b22a:	609a      	str	r2, [r3, #8]
 800b22c:	e011      	b.n	800b252 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800b22e:	bf00      	nop
 800b230:	e000      	b.n	800b234 <ethernetif_update_config+0xb0>
          goto error;
 800b232:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800b234:	4b10      	ldr	r3, [pc, #64]	; (800b278 <ethernetif_update_config+0xf4>)
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	08db      	lsrs	r3, r3, #3
 800b23a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800b23c:	4b0e      	ldr	r3, [pc, #56]	; (800b278 <ethernetif_update_config+0xf4>)
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	085b      	lsrs	r3, r3, #1
 800b242:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800b244:	4313      	orrs	r3, r2
 800b246:	b29b      	uxth	r3, r3
 800b248:	461a      	mov	r2, r3
 800b24a:	2100      	movs	r1, #0
 800b24c:	480a      	ldr	r0, [pc, #40]	; (800b278 <ethernetif_update_config+0xf4>)
 800b24e:	f7fa f8d8 	bl	8005402 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800b252:	2100      	movs	r1, #0
 800b254:	4808      	ldr	r0, [pc, #32]	; (800b278 <ethernetif_update_config+0xf4>)
 800b256:	f7fa f999 	bl	800558c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800b25a:	4807      	ldr	r0, [pc, #28]	; (800b278 <ethernetif_update_config+0xf4>)
 800b25c:	f7fa f937 	bl	80054ce <HAL_ETH_Start>
 800b260:	e002      	b.n	800b268 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800b262:	4805      	ldr	r0, [pc, #20]	; (800b278 <ethernetif_update_config+0xf4>)
 800b264:	f7fa f962 	bl	800552c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 f807 	bl	800b27c <ethernetif_notify_conn_changed>
}
 800b26e:	bf00      	nop
 800b270:	3710      	adds	r7, #16
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	20006414 	.word	0x20006414

0800b27c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800b284:	bf00      	nop
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b290:	b590      	push	{r4, r7, lr}
 800b292:	b089      	sub	sp, #36	; 0x24
 800b294:	af04      	add	r7, sp, #16
 800b296:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b29e:	7919      	ldrb	r1, [r3, #4]
 800b2a0:	2350      	movs	r3, #80	; 0x50
 800b2a2:	2206      	movs	r2, #6
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f001 fe1b 	bl	800cee0 <USBH_FindInterface>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800b2ae:	7bfb      	ldrb	r3, [r7, #15]
 800b2b0:	2bff      	cmp	r3, #255	; 0xff
 800b2b2:	d002      	beq.n	800b2ba <USBH_MSC_InterfaceInit+0x2a>
 800b2b4:	7bfb      	ldrb	r3, [r7, #15]
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d90f      	bls.n	800b2da <USBH_MSC_InterfaceInit+0x4a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 800b2ba:	4886      	ldr	r0, [pc, #536]	; (800b4d4 <USBH_MSC_InterfaceInit+0x244>)
 800b2bc:	f00e fe56 	bl	8019f6c <iprintf>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	4883      	ldr	r0, [pc, #524]	; (800b4d8 <USBH_MSC_InterfaceInit+0x248>)
 800b2cc:	f00e fe4e 	bl	8019f6c <iprintf>
 800b2d0:	200a      	movs	r0, #10
 800b2d2:	f00e fe63 	bl	8019f9c <putchar>
    return USBH_FAIL;
 800b2d6:	2302      	movs	r3, #2
 800b2d8:	e0f8      	b.n	800b4cc <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800b2da:	7bfb      	ldrb	r3, [r7, #15]
 800b2dc:	4619      	mov	r1, r3
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f001 fd96 	bl	800ce10 <USBH_SelectInterface>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b2e8:	7bbb      	ldrb	r3, [r7, #14]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d001      	beq.n	800b2f2 <USBH_MSC_InterfaceInit+0x62>
  {
    return USBH_FAIL;
 800b2ee:	2302      	movs	r3, #2
 800b2f0:	e0ec      	b.n	800b4cc <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b2f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b2fc:	f00e f8ee 	bl	80194dc <malloc>
 800b300:	4603      	mov	r3, r0
 800b302:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b30a:	69db      	ldr	r3, [r3, #28]
 800b30c:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10a      	bne.n	800b32a <USBH_MSC_InterfaceInit+0x9a>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
 800b314:	486f      	ldr	r0, [pc, #444]	; (800b4d4 <USBH_MSC_InterfaceInit+0x244>)
 800b316:	f00e fe29 	bl	8019f6c <iprintf>
 800b31a:	4870      	ldr	r0, [pc, #448]	; (800b4dc <USBH_MSC_InterfaceInit+0x24c>)
 800b31c:	f00e fe26 	bl	8019f6c <iprintf>
 800b320:	200a      	movs	r0, #10
 800b322:	f00e fe3b 	bl	8019f9c <putchar>
    return USBH_FAIL;
 800b326:	2302      	movs	r3, #2
 800b328:	e0d0      	b.n	800b4cc <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800b32a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b32e:	2100      	movs	r1, #0
 800b330:	68b8      	ldr	r0, [r7, #8]
 800b332:	f00e f8ff 	bl	8019534 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b336:	7bfb      	ldrb	r3, [r7, #15]
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	211a      	movs	r1, #26
 800b33c:	fb01 f303 	mul.w	r3, r1, r3
 800b340:	4413      	add	r3, r2
 800b342:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	b25b      	sxtb	r3, r3
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	da16      	bge.n	800b37c <USBH_MSC_InterfaceInit+0xec>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b34e:	7bfb      	ldrb	r3, [r7, #15]
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	211a      	movs	r1, #26
 800b354:	fb01 f303 	mul.w	r3, r1, r3
 800b358:	4413      	add	r3, r2
 800b35a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b35e:	781a      	ldrb	r2, [r3, #0]
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b364:	7bfb      	ldrb	r3, [r7, #15]
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	211a      	movs	r1, #26
 800b36a:	fb01 f303 	mul.w	r3, r1, r3
 800b36e:	4413      	add	r3, r2
 800b370:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b374:	881a      	ldrh	r2, [r3, #0]
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	815a      	strh	r2, [r3, #10]
 800b37a:	e015      	b.n	800b3a8 <USBH_MSC_InterfaceInit+0x118>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b37c:	7bfb      	ldrb	r3, [r7, #15]
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	211a      	movs	r1, #26
 800b382:	fb01 f303 	mul.w	r3, r1, r3
 800b386:	4413      	add	r3, r2
 800b388:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b38c:	781a      	ldrb	r2, [r3, #0]
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b392:	7bfb      	ldrb	r3, [r7, #15]
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	211a      	movs	r1, #26
 800b398:	fb01 f303 	mul.w	r3, r1, r3
 800b39c:	4413      	add	r3, r2
 800b39e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b3a2:	881a      	ldrh	r2, [r3, #0]
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800b3a8:	7bfb      	ldrb	r3, [r7, #15]
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	211a      	movs	r1, #26
 800b3ae:	fb01 f303 	mul.w	r3, r1, r3
 800b3b2:	4413      	add	r3, r2
 800b3b4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	b25b      	sxtb	r3, r3
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	da16      	bge.n	800b3ee <USBH_MSC_InterfaceInit+0x15e>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	211a      	movs	r1, #26
 800b3c6:	fb01 f303 	mul.w	r3, r1, r3
 800b3ca:	4413      	add	r3, r2
 800b3cc:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b3d0:	781a      	ldrb	r2, [r3, #0]
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b3d6:	7bfb      	ldrb	r3, [r7, #15]
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	211a      	movs	r1, #26
 800b3dc:	fb01 f303 	mul.w	r3, r1, r3
 800b3e0:	4413      	add	r3, r2
 800b3e2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b3e6:	881a      	ldrh	r2, [r3, #0]
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	815a      	strh	r2, [r3, #10]
 800b3ec:	e015      	b.n	800b41a <USBH_MSC_InterfaceInit+0x18a>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b3ee:	7bfb      	ldrb	r3, [r7, #15]
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	211a      	movs	r1, #26
 800b3f4:	fb01 f303 	mul.w	r3, r1, r3
 800b3f8:	4413      	add	r3, r2
 800b3fa:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b3fe:	781a      	ldrb	r2, [r3, #0]
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b404:	7bfb      	ldrb	r3, [r7, #15]
 800b406:	687a      	ldr	r2, [r7, #4]
 800b408:	211a      	movs	r1, #26
 800b40a:	fb01 f303 	mul.w	r3, r1, r3
 800b40e:	4413      	add	r3, r2
 800b410:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b414:	881a      	ldrh	r2, [r3, #0]
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	2200      	movs	r2, #0
 800b41e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	2200      	movs	r2, #0
 800b424:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	2200      	movs	r2, #0
 800b42a:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	799b      	ldrb	r3, [r3, #6]
 800b430:	4619      	mov	r1, r3
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f003 f8cf 	bl	800e5d6 <USBH_AllocPipe>
 800b438:	4603      	mov	r3, r0
 800b43a:	461a      	mov	r2, r3
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	79db      	ldrb	r3, [r3, #7]
 800b444:	4619      	mov	r1, r3
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f003 f8c5 	bl	800e5d6 <USBH_AllocPipe>
 800b44c:	4603      	mov	r3, r0
 800b44e:	461a      	mov	r2, r3
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f000 feed 	bl	800c234 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	7959      	ldrb	r1, [r3, #5]
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	7998      	ldrb	r0, [r3, #6]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	8912      	ldrh	r2, [r2, #8]
 800b472:	9202      	str	r2, [sp, #8]
 800b474:	2202      	movs	r2, #2
 800b476:	9201      	str	r2, [sp, #4]
 800b478:	9300      	str	r3, [sp, #0]
 800b47a:	4623      	mov	r3, r4
 800b47c:	4602      	mov	r2, r0
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f003 f87a 	bl	800e578 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	7919      	ldrb	r1, [r3, #4]
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	79d8      	ldrb	r0, [r3, #7]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b498:	68ba      	ldr	r2, [r7, #8]
 800b49a:	8952      	ldrh	r2, [r2, #10]
 800b49c:	9202      	str	r2, [sp, #8]
 800b49e:	2202      	movs	r2, #2
 800b4a0:	9201      	str	r2, [sp, #4]
 800b4a2:	9300      	str	r3, [sp, #0]
 800b4a4:	4623      	mov	r3, r4
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f003 f865 	bl	800e578 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	791b      	ldrb	r3, [r3, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f00d ff38 	bl	801932c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	795b      	ldrb	r3, [r3, #5]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f00d ff31 	bl	801932c <USBH_LL_SetToggle>

  return USBH_OK;
 800b4ca:	2300      	movs	r3, #0
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3714      	adds	r7, #20
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd90      	pop	{r4, r7, pc}
 800b4d4:	0801c178 	.word	0x0801c178
 800b4d8:	0801c184 	.word	0x0801c184
 800b4dc:	0801c1ac 	.word	0x0801c1ac

0800b4e0 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4ee:	69db      	ldr	r3, [r3, #28]
 800b4f0:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	795b      	ldrb	r3, [r3, #5]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d00e      	beq.n	800b518 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	795b      	ldrb	r3, [r3, #5]
 800b4fe:	4619      	mov	r1, r3
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f003 f858 	bl	800e5b6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	795b      	ldrb	r3, [r3, #5]
 800b50a:	4619      	mov	r1, r3
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f003 f883 	bl	800e618 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2200      	movs	r2, #0
 800b516:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	791b      	ldrb	r3, [r3, #4]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d00e      	beq.n	800b53e <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	791b      	ldrb	r3, [r3, #4]
 800b524:	4619      	mov	r1, r3
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f003 f845 	bl	800e5b6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	791b      	ldrb	r3, [r3, #4]
 800b530:	4619      	mov	r1, r3
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f003 f870 	bl	800e618 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2200      	movs	r2, #0
 800b53c:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b544:	69db      	ldr	r3, [r3, #28]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d00b      	beq.n	800b562 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b550:	69db      	ldr	r3, [r3, #28]
 800b552:	4618      	mov	r0, r3
 800b554:	f00d ffca 	bl	80194ec <free>
    phost->pActiveClass->pData = 0U;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b55e:	2200      	movs	r2, #0
 800b560:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	3710      	adds	r7, #16
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b57a:	69db      	ldr	r3, [r3, #28]
 800b57c:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b57e:	2301      	movs	r3, #1
 800b580:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	7b9b      	ldrb	r3, [r3, #14]
 800b586:	2b03      	cmp	r3, #3
 800b588:	d04a      	beq.n	800b620 <USBH_MSC_ClassRequest+0xb4>
 800b58a:	2b03      	cmp	r3, #3
 800b58c:	dc54      	bgt.n	800b638 <USBH_MSC_ClassRequest+0xcc>
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d001      	beq.n	800b596 <USBH_MSC_ClassRequest+0x2a>
 800b592:	2b02      	cmp	r3, #2
 800b594:	d150      	bne.n	800b638 <USBH_MSC_ClassRequest+0xcc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	4619      	mov	r1, r3
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 fe2b 	bl	800c1f6 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800b5a4:	7bfb      	ldrb	r3, [r7, #15]
 800b5a6:	2b03      	cmp	r3, #3
 800b5a8:	d104      	bne.n	800b5b4 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800b5b4:	7bfb      	ldrb	r3, [r7, #15]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d140      	bne.n	800b63c <USBH_MSC_ClassRequest+0xd0>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	d804      	bhi.n	800b5cc <USBH_MSC_ClassRequest+0x60>
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	b2da      	uxtb	r2, r3
 800b5ca:	e000      	b.n	800b5ce <USBH_MSC_ClassRequest+0x62>
 800b5cc:	2202      	movs	r2, #2
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	481c      	ldr	r0, [pc, #112]	; (800b64c <USBH_MSC_ClassRequest+0xe0>)
 800b5da:	f00e fcc7 	bl	8019f6c <iprintf>
 800b5de:	200a      	movs	r0, #10
 800b5e0:	f00e fcdc 	bl	8019f9c <putchar>

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	73bb      	strb	r3, [r7, #14]
 800b5e8:	e014      	b.n	800b614 <USBH_MSC_ClassRequest+0xa8>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800b5ea:	7bbb      	ldrb	r3, [r7, #14]
 800b5ec:	68ba      	ldr	r2, [r7, #8]
 800b5ee:	2134      	movs	r1, #52	; 0x34
 800b5f0:	fb01 f303 	mul.w	r3, r1, r3
 800b5f4:	4413      	add	r3, r2
 800b5f6:	3392      	adds	r3, #146	; 0x92
 800b5f8:	2202      	movs	r2, #2
 800b5fa:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800b5fc:	7bbb      	ldrb	r3, [r7, #14]
 800b5fe:	68ba      	ldr	r2, [r7, #8]
 800b600:	2134      	movs	r1, #52	; 0x34
 800b602:	fb01 f303 	mul.w	r3, r1, r3
 800b606:	4413      	add	r3, r2
 800b608:	33c1      	adds	r3, #193	; 0xc1
 800b60a:	2200      	movs	r2, #0
 800b60c:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b60e:	7bbb      	ldrb	r3, [r7, #14]
 800b610:	3301      	adds	r3, #1
 800b612:	73bb      	strb	r3, [r7, #14]
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	7bba      	ldrb	r2, [r7, #14]
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d3e5      	bcc.n	800b5ea <USBH_MSC_ClassRequest+0x7e>
        }
      }
      break;
 800b61e:	e00d      	b.n	800b63c <USBH_MSC_ClassRequest+0xd0>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800b620:	2100      	movs	r1, #0
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f002 fb69 	bl	800dcfa <USBH_ClrFeature>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d108      	bne.n	800b640 <USBH_MSC_ClassRequest+0xd4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	7bda      	ldrb	r2, [r3, #15]
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	739a      	strb	r2, [r3, #14]
      }
      break;
 800b636:	e003      	b.n	800b640 <USBH_MSC_ClassRequest+0xd4>

    default:
      break;
 800b638:	bf00      	nop
 800b63a:	e002      	b.n	800b642 <USBH_MSC_ClassRequest+0xd6>
      break;
 800b63c:	bf00      	nop
 800b63e:	e000      	b.n	800b642 <USBH_MSC_ClassRequest+0xd6>
      break;
 800b640:	bf00      	nop
  }

  return status;
 800b642:	7bfb      	ldrb	r3, [r7, #15]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3710      	adds	r7, #16
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	0801c1d4 	.word	0x0801c1d4

0800b650 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b086      	sub	sp, #24
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b65e:	69db      	ldr	r3, [r3, #28]
 800b660:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800b662:	2301      	movs	r3, #1
 800b664:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800b666:	2301      	movs	r3, #1
 800b668:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800b66a:	2301      	movs	r3, #1
 800b66c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	7b1b      	ldrb	r3, [r3, #12]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d003      	beq.n	800b67e <USBH_MSC_Process+0x2e>
 800b676:	2b01      	cmp	r3, #1
 800b678:	f000 8355 	beq.w	800bd26 <USBH_MSC_Process+0x6d6>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800b67c:	e356      	b.n	800bd2c <USBH_MSC_Process+0x6dc>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	b29b      	uxth	r3, r3
 800b68a:	429a      	cmp	r2, r3
 800b68c:	f080 8333 	bcs.w	800bcf6 <USBH_MSC_Process+0x6a6>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b696:	4619      	mov	r1, r3
 800b698:	693a      	ldr	r2, [r7, #16]
 800b69a:	2334      	movs	r3, #52	; 0x34
 800b69c:	fb03 f301 	mul.w	r3, r3, r1
 800b6a0:	4413      	add	r3, r2
 800b6a2:	3391      	adds	r3, #145	; 0x91
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	693a      	ldr	r2, [r7, #16]
 800b6b2:	2334      	movs	r3, #52	; 0x34
 800b6b4:	fb03 f301 	mul.w	r3, r3, r1
 800b6b8:	4413      	add	r3, r2
 800b6ba:	3390      	adds	r3, #144	; 0x90
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	2b08      	cmp	r3, #8
 800b6c0:	f200 8327 	bhi.w	800bd12 <USBH_MSC_Process+0x6c2>
 800b6c4:	a201      	add	r2, pc, #4	; (adr r2, 800b6cc <USBH_MSC_Process+0x7c>)
 800b6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ca:	bf00      	nop
 800b6cc:	0800b6f1 	.word	0x0800b6f1
 800b6d0:	0800bd13 	.word	0x0800bd13
 800b6d4:	0800b839 	.word	0x0800b839
 800b6d8:	0800b9ed 	.word	0x0800b9ed
 800b6dc:	0800b72b 	.word	0x0800b72b
 800b6e0:	0800bb59 	.word	0x0800bb59
 800b6e4:	0800bd13 	.word	0x0800bd13
 800b6e8:	0800bd13 	.word	0x0800bd13
 800b6ec:	0800bce5 	.word	0x0800bce5
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	48b6      	ldr	r0, [pc, #728]	; (800b9d4 <USBH_MSC_Process+0x384>)
 800b6fa:	f00e fc37 	bl	8019f6c <iprintf>
 800b6fe:	200a      	movs	r0, #10
 800b700:	f00e fc4c 	bl	8019f9c <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b70a:	4619      	mov	r1, r3
 800b70c:	693a      	ldr	r2, [r7, #16]
 800b70e:	2334      	movs	r3, #52	; 0x34
 800b710:	fb03 f301 	mul.w	r3, r3, r1
 800b714:	4413      	add	r3, r2
 800b716:	3390      	adds	r3, #144	; 0x90
 800b718:	2204      	movs	r2, #4
 800b71a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800b728:	e2fc      	b.n	800bd24 <USBH_MSC_Process+0x6d4>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b730:	b2d9      	uxtb	r1, r3
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b738:	461a      	mov	r2, r3
 800b73a:	2334      	movs	r3, #52	; 0x34
 800b73c:	fb03 f302 	mul.w	r3, r3, r2
 800b740:	3398      	adds	r3, #152	; 0x98
 800b742:	693a      	ldr	r2, [r7, #16]
 800b744:	4413      	add	r3, r2
 800b746:	3307      	adds	r3, #7
 800b748:	461a      	mov	r2, r3
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f001 f890 	bl	800c870 <USBH_MSC_SCSI_Inquiry>
 800b750:	4603      	mov	r3, r0
 800b752:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b754:	7bfb      	ldrb	r3, [r7, #15]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d141      	bne.n	800b7de <USBH_MSC_Process+0x18e>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b760:	461a      	mov	r2, r3
 800b762:	2334      	movs	r3, #52	; 0x34
 800b764:	fb03 f302 	mul.w	r3, r3, r2
 800b768:	3398      	adds	r3, #152	; 0x98
 800b76a:	693a      	ldr	r2, [r7, #16]
 800b76c:	4413      	add	r3, r2
 800b76e:	330a      	adds	r3, #10
 800b770:	4619      	mov	r1, r3
 800b772:	4899      	ldr	r0, [pc, #612]	; (800b9d8 <USBH_MSC_Process+0x388>)
 800b774:	f00e fbfa 	bl	8019f6c <iprintf>
 800b778:	200a      	movs	r0, #10
 800b77a:	f00e fc0f 	bl	8019f9c <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b784:	461a      	mov	r2, r3
 800b786:	2334      	movs	r3, #52	; 0x34
 800b788:	fb03 f302 	mul.w	r3, r3, r2
 800b78c:	33a0      	adds	r3, #160	; 0xa0
 800b78e:	693a      	ldr	r2, [r7, #16]
 800b790:	4413      	add	r3, r2
 800b792:	330b      	adds	r3, #11
 800b794:	4619      	mov	r1, r3
 800b796:	4891      	ldr	r0, [pc, #580]	; (800b9dc <USBH_MSC_Process+0x38c>)
 800b798:	f00e fbe8 	bl	8019f6c <iprintf>
 800b79c:	200a      	movs	r0, #10
 800b79e:	f00e fbfd 	bl	8019f9c <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	2334      	movs	r3, #52	; 0x34
 800b7ac:	fb03 f302 	mul.w	r3, r3, r2
 800b7b0:	33b0      	adds	r3, #176	; 0xb0
 800b7b2:	693a      	ldr	r2, [r7, #16]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	330c      	adds	r3, #12
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	4889      	ldr	r0, [pc, #548]	; (800b9e0 <USBH_MSC_Process+0x390>)
 800b7bc:	f00e fbd6 	bl	8019f6c <iprintf>
 800b7c0:	200a      	movs	r0, #10
 800b7c2:	f00e fbeb 	bl	8019f9c <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	693a      	ldr	r2, [r7, #16]
 800b7d0:	2334      	movs	r3, #52	; 0x34
 800b7d2:	fb03 f301 	mul.w	r3, r3, r1
 800b7d6:	4413      	add	r3, r2
 800b7d8:	3390      	adds	r3, #144	; 0x90
 800b7da:	2202      	movs	r2, #2
 800b7dc:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800b7de:	7bfb      	ldrb	r3, [r7, #15]
 800b7e0:	2b02      	cmp	r3, #2
 800b7e2:	d10c      	bne.n	800b7fe <USBH_MSC_Process+0x1ae>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	693a      	ldr	r2, [r7, #16]
 800b7ee:	2334      	movs	r3, #52	; 0x34
 800b7f0:	fb03 f301 	mul.w	r3, r3, r1
 800b7f4:	4413      	add	r3, r2
 800b7f6:	3390      	adds	r3, #144	; 0x90
 800b7f8:	2205      	movs	r2, #5
 800b7fa:	701a      	strb	r2, [r3, #0]
            break;
 800b7fc:	e28b      	b.n	800bd16 <USBH_MSC_Process+0x6c6>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b7fe:	7bfb      	ldrb	r3, [r7, #15]
 800b800:	2b04      	cmp	r3, #4
 800b802:	f040 8288 	bne.w	800bd16 <USBH_MSC_Process+0x6c6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b80c:	4619      	mov	r1, r3
 800b80e:	693a      	ldr	r2, [r7, #16]
 800b810:	2334      	movs	r3, #52	; 0x34
 800b812:	fb03 f301 	mul.w	r3, r3, r1
 800b816:	4413      	add	r3, r2
 800b818:	3390      	adds	r3, #144	; 0x90
 800b81a:	2201      	movs	r2, #1
 800b81c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b824:	4619      	mov	r1, r3
 800b826:	693a      	ldr	r2, [r7, #16]
 800b828:	2334      	movs	r3, #52	; 0x34
 800b82a:	fb03 f301 	mul.w	r3, r3, r1
 800b82e:	4413      	add	r3, r2
 800b830:	3391      	adds	r3, #145	; 0x91
 800b832:	2202      	movs	r2, #2
 800b834:	701a      	strb	r2, [r3, #0]
            break;
 800b836:	e26e      	b.n	800bd16 <USBH_MSC_Process+0x6c6>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	4619      	mov	r1, r3
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 ff56 	bl	800c6f4 <USBH_MSC_SCSI_TestUnitReady>
 800b848:	4603      	mov	r3, r0
 800b84a:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800b84c:	7bbb      	ldrb	r3, [r7, #14]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d14f      	bne.n	800b8f2 <USBH_MSC_Process+0x2a2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b858:	4619      	mov	r1, r3
 800b85a:	693a      	ldr	r2, [r7, #16]
 800b85c:	2334      	movs	r3, #52	; 0x34
 800b85e:	fb03 f301 	mul.w	r3, r3, r1
 800b862:	4413      	add	r3, r2
 800b864:	3392      	adds	r3, #146	; 0x92
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d012      	beq.n	800b892 <USBH_MSC_Process+0x242>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b872:	4619      	mov	r1, r3
 800b874:	693a      	ldr	r2, [r7, #16]
 800b876:	2334      	movs	r3, #52	; 0x34
 800b878:	fb03 f301 	mul.w	r3, r3, r1
 800b87c:	4413      	add	r3, r2
 800b87e:	33c1      	adds	r3, #193	; 0xc1
 800b880:	2201      	movs	r2, #1
 800b882:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device ready");
 800b884:	4857      	ldr	r0, [pc, #348]	; (800b9e4 <USBH_MSC_Process+0x394>)
 800b886:	f00e fb71 	bl	8019f6c <iprintf>
 800b88a:	200a      	movs	r0, #10
 800b88c:	f00e fb86 	bl	8019f9c <putchar>
 800b890:	e00b      	b.n	800b8aa <USBH_MSC_Process+0x25a>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b898:	4619      	mov	r1, r3
 800b89a:	693a      	ldr	r2, [r7, #16]
 800b89c:	2334      	movs	r3, #52	; 0x34
 800b89e:	fb03 f301 	mul.w	r3, r3, r1
 800b8a2:	4413      	add	r3, r2
 800b8a4:	33c1      	adds	r3, #193	; 0xc1
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	693a      	ldr	r2, [r7, #16]
 800b8b4:	2334      	movs	r3, #52	; 0x34
 800b8b6:	fb03 f301 	mul.w	r3, r3, r1
 800b8ba:	4413      	add	r3, r2
 800b8bc:	3390      	adds	r3, #144	; 0x90
 800b8be:	2203      	movs	r2, #3
 800b8c0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	693a      	ldr	r2, [r7, #16]
 800b8cc:	2334      	movs	r3, #52	; 0x34
 800b8ce:	fb03 f301 	mul.w	r3, r3, r1
 800b8d2:	4413      	add	r3, r2
 800b8d4:	3391      	adds	r3, #145	; 0x91
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	693a      	ldr	r2, [r7, #16]
 800b8e4:	2334      	movs	r3, #52	; 0x34
 800b8e6:	fb03 f301 	mul.w	r3, r3, r1
 800b8ea:	4413      	add	r3, r2
 800b8ec:	3392      	adds	r3, #146	; 0x92
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800b8f2:	7bbb      	ldrb	r3, [r7, #14]
 800b8f4:	2b02      	cmp	r3, #2
 800b8f6:	d150      	bne.n	800b99a <USBH_MSC_Process+0x34a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b8fe:	4619      	mov	r1, r3
 800b900:	693a      	ldr	r2, [r7, #16]
 800b902:	2334      	movs	r3, #52	; 0x34
 800b904:	fb03 f301 	mul.w	r3, r3, r1
 800b908:	4413      	add	r3, r2
 800b90a:	3392      	adds	r3, #146	; 0x92
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	2b02      	cmp	r3, #2
 800b910:	d012      	beq.n	800b938 <USBH_MSC_Process+0x2e8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b918:	4619      	mov	r1, r3
 800b91a:	693a      	ldr	r2, [r7, #16]
 800b91c:	2334      	movs	r3, #52	; 0x34
 800b91e:	fb03 f301 	mul.w	r3, r3, r1
 800b922:	4413      	add	r3, r2
 800b924:	33c1      	adds	r3, #193	; 0xc1
 800b926:	2201      	movs	r2, #1
 800b928:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device NOT ready");
 800b92a:	482f      	ldr	r0, [pc, #188]	; (800b9e8 <USBH_MSC_Process+0x398>)
 800b92c:	f00e fb1e 	bl	8019f6c <iprintf>
 800b930:	200a      	movs	r0, #10
 800b932:	f00e fb33 	bl	8019f9c <putchar>
 800b936:	e00b      	b.n	800b950 <USBH_MSC_Process+0x300>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b93e:	4619      	mov	r1, r3
 800b940:	693a      	ldr	r2, [r7, #16]
 800b942:	2334      	movs	r3, #52	; 0x34
 800b944:	fb03 f301 	mul.w	r3, r3, r1
 800b948:	4413      	add	r3, r2
 800b94a:	33c1      	adds	r3, #193	; 0xc1
 800b94c:	2200      	movs	r2, #0
 800b94e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b956:	4619      	mov	r1, r3
 800b958:	693a      	ldr	r2, [r7, #16]
 800b95a:	2334      	movs	r3, #52	; 0x34
 800b95c:	fb03 f301 	mul.w	r3, r3, r1
 800b960:	4413      	add	r3, r2
 800b962:	3390      	adds	r3, #144	; 0x90
 800b964:	2205      	movs	r2, #5
 800b966:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b96e:	4619      	mov	r1, r3
 800b970:	693a      	ldr	r2, [r7, #16]
 800b972:	2334      	movs	r3, #52	; 0x34
 800b974:	fb03 f301 	mul.w	r3, r3, r1
 800b978:	4413      	add	r3, r2
 800b97a:	3391      	adds	r3, #145	; 0x91
 800b97c:	2201      	movs	r2, #1
 800b97e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b986:	4619      	mov	r1, r3
 800b988:	693a      	ldr	r2, [r7, #16]
 800b98a:	2334      	movs	r3, #52	; 0x34
 800b98c:	fb03 f301 	mul.w	r3, r3, r1
 800b990:	4413      	add	r3, r2
 800b992:	3392      	adds	r3, #146	; 0x92
 800b994:	2202      	movs	r2, #2
 800b996:	701a      	strb	r2, [r3, #0]
            break;
 800b998:	e1bf      	b.n	800bd1a <USBH_MSC_Process+0x6ca>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800b99a:	7bbb      	ldrb	r3, [r7, #14]
 800b99c:	2b04      	cmp	r3, #4
 800b99e:	f040 81bc 	bne.w	800bd1a <USBH_MSC_Process+0x6ca>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	693a      	ldr	r2, [r7, #16]
 800b9ac:	2334      	movs	r3, #52	; 0x34
 800b9ae:	fb03 f301 	mul.w	r3, r3, r1
 800b9b2:	4413      	add	r3, r2
 800b9b4:	3390      	adds	r3, #144	; 0x90
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	693a      	ldr	r2, [r7, #16]
 800b9c4:	2334      	movs	r3, #52	; 0x34
 800b9c6:	fb03 f301 	mul.w	r3, r3, r1
 800b9ca:	4413      	add	r3, r2
 800b9cc:	3391      	adds	r3, #145	; 0x91
 800b9ce:	2202      	movs	r2, #2
 800b9d0:	701a      	strb	r2, [r3, #0]
            break;
 800b9d2:	e1a2      	b.n	800bd1a <USBH_MSC_Process+0x6ca>
 800b9d4:	0801c1f0 	.word	0x0801c1f0
 800b9d8:	0801c1fc 	.word	0x0801c1fc
 800b9dc:	0801c214 	.word	0x0801c214
 800b9e0:	0801c22c 	.word	0x0801c22c
 800b9e4:	0801c244 	.word	0x0801c244
 800b9e8:	0801c258 	.word	0x0801c258
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b9f2:	b2d9      	uxtb	r1, r3
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	2334      	movs	r3, #52	; 0x34
 800b9fe:	fb03 f302 	mul.w	r3, r3, r2
 800ba02:	3390      	adds	r3, #144	; 0x90
 800ba04:	693a      	ldr	r2, [r7, #16]
 800ba06:	4413      	add	r3, r2
 800ba08:	3304      	adds	r3, #4
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 feb4 	bl	800c77a <USBH_MSC_SCSI_ReadCapacity>
 800ba12:	4603      	mov	r3, r0
 800ba14:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800ba16:	7bfb      	ldrb	r3, [r7, #15]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d170      	bne.n	800bafe <USBH_MSC_Process+0x4ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba22:	4619      	mov	r1, r3
 800ba24:	693a      	ldr	r2, [r7, #16]
 800ba26:	2334      	movs	r3, #52	; 0x34
 800ba28:	fb03 f301 	mul.w	r3, r3, r1
 800ba2c:	4413      	add	r3, r2
 800ba2e:	33c1      	adds	r3, #193	; 0xc1
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d142      	bne.n	800babc <USBH_MSC_Process+0x46c>
                USBH_UsrLog("MSC Device capacity : %lu Bytes", \
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	693a      	ldr	r2, [r7, #16]
 800ba40:	2334      	movs	r3, #52	; 0x34
 800ba42:	fb03 f301 	mul.w	r3, r3, r1
 800ba46:	4413      	add	r3, r2
 800ba48:	3394      	adds	r3, #148	; 0x94
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	693a      	ldr	r2, [r7, #16]
 800ba4e:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 800ba52:	4610      	mov	r0, r2
 800ba54:	6939      	ldr	r1, [r7, #16]
 800ba56:	2234      	movs	r2, #52	; 0x34
 800ba58:	fb02 f200 	mul.w	r2, r2, r0
 800ba5c:	440a      	add	r2, r1
 800ba5e:	3298      	adds	r2, #152	; 0x98
 800ba60:	8812      	ldrh	r2, [r2, #0]
 800ba62:	fb02 f303 	mul.w	r3, r2, r3
 800ba66:	4619      	mov	r1, r3
 800ba68:	48b3      	ldr	r0, [pc, #716]	; (800bd38 <USBH_MSC_Process+0x6e8>)
 800ba6a:	f00e fa7f 	bl	8019f6c <iprintf>
 800ba6e:	200a      	movs	r0, #10
 800ba70:	f00e fa94 	bl	8019f9c <putchar>
                USBH_UsrLog("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	693a      	ldr	r2, [r7, #16]
 800ba7e:	2334      	movs	r3, #52	; 0x34
 800ba80:	fb03 f301 	mul.w	r3, r3, r1
 800ba84:	4413      	add	r3, r2
 800ba86:	3394      	adds	r3, #148	; 0x94
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	48ab      	ldr	r0, [pc, #684]	; (800bd3c <USBH_MSC_Process+0x6ec>)
 800ba8e:	f00e fa6d 	bl	8019f6c <iprintf>
 800ba92:	200a      	movs	r0, #10
 800ba94:	f00e fa82 	bl	8019f9c <putchar>
                USBH_UsrLog("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba9e:	4619      	mov	r1, r3
 800baa0:	693a      	ldr	r2, [r7, #16]
 800baa2:	2334      	movs	r3, #52	; 0x34
 800baa4:	fb03 f301 	mul.w	r3, r3, r1
 800baa8:	4413      	add	r3, r2
 800baaa:	3398      	adds	r3, #152	; 0x98
 800baac:	881b      	ldrh	r3, [r3, #0]
 800baae:	4619      	mov	r1, r3
 800bab0:	48a3      	ldr	r0, [pc, #652]	; (800bd40 <USBH_MSC_Process+0x6f0>)
 800bab2:	f00e fa5b 	bl	8019f6c <iprintf>
 800bab6:	200a      	movs	r0, #10
 800bab8:	f00e fa70 	bl	8019f9c <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bac2:	4619      	mov	r1, r3
 800bac4:	693a      	ldr	r2, [r7, #16]
 800bac6:	2334      	movs	r3, #52	; 0x34
 800bac8:	fb03 f301 	mul.w	r3, r3, r1
 800bacc:	4413      	add	r3, r2
 800bace:	3390      	adds	r3, #144	; 0x90
 800bad0:	2201      	movs	r2, #1
 800bad2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bada:	4619      	mov	r1, r3
 800badc:	693a      	ldr	r2, [r7, #16]
 800bade:	2334      	movs	r3, #52	; 0x34
 800bae0:	fb03 f301 	mul.w	r3, r3, r1
 800bae4:	4413      	add	r3, r2
 800bae6:	3391      	adds	r3, #145	; 0x91
 800bae8:	2200      	movs	r2, #0
 800baea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800baf2:	3301      	adds	r3, #1
 800baf4:	b29a      	uxth	r2, r3
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800bafc:	e10f      	b.n	800bd1e <USBH_MSC_Process+0x6ce>
            else if (scsi_status == USBH_FAIL)
 800bafe:	7bfb      	ldrb	r3, [r7, #15]
 800bb00:	2b02      	cmp	r3, #2
 800bb02:	d10c      	bne.n	800bb1e <USBH_MSC_Process+0x4ce>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	693a      	ldr	r2, [r7, #16]
 800bb0e:	2334      	movs	r3, #52	; 0x34
 800bb10:	fb03 f301 	mul.w	r3, r3, r1
 800bb14:	4413      	add	r3, r2
 800bb16:	3390      	adds	r3, #144	; 0x90
 800bb18:	2205      	movs	r2, #5
 800bb1a:	701a      	strb	r2, [r3, #0]
            break;
 800bb1c:	e0ff      	b.n	800bd1e <USBH_MSC_Process+0x6ce>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bb1e:	7bfb      	ldrb	r3, [r7, #15]
 800bb20:	2b04      	cmp	r3, #4
 800bb22:	f040 80fc 	bne.w	800bd1e <USBH_MSC_Process+0x6ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	693a      	ldr	r2, [r7, #16]
 800bb30:	2334      	movs	r3, #52	; 0x34
 800bb32:	fb03 f301 	mul.w	r3, r3, r1
 800bb36:	4413      	add	r3, r2
 800bb38:	3390      	adds	r3, #144	; 0x90
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb44:	4619      	mov	r1, r3
 800bb46:	693a      	ldr	r2, [r7, #16]
 800bb48:	2334      	movs	r3, #52	; 0x34
 800bb4a:	fb03 f301 	mul.w	r3, r3, r1
 800bb4e:	4413      	add	r3, r2
 800bb50:	3391      	adds	r3, #145	; 0x91
 800bb52:	2202      	movs	r2, #2
 800bb54:	701a      	strb	r2, [r3, #0]
            break;
 800bb56:	e0e2      	b.n	800bd1e <USBH_MSC_Process+0x6ce>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb5e:	b2d9      	uxtb	r1, r3
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb66:	461a      	mov	r2, r3
 800bb68:	2334      	movs	r3, #52	; 0x34
 800bb6a:	fb03 f302 	mul.w	r3, r3, r2
 800bb6e:	3398      	adds	r3, #152	; 0x98
 800bb70:	693a      	ldr	r2, [r7, #16]
 800bb72:	4413      	add	r3, r2
 800bb74:	3304      	adds	r3, #4
 800bb76:	461a      	mov	r2, r3
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 ff1e 	bl	800c9ba <USBH_MSC_SCSI_RequestSense>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800bb82:	7bfb      	ldrb	r3, [r7, #15]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d17b      	bne.n	800bc80 <USBH_MSC_Process+0x630>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb8e:	4619      	mov	r1, r3
 800bb90:	693a      	ldr	r2, [r7, #16]
 800bb92:	2334      	movs	r3, #52	; 0x34
 800bb94:	fb03 f301 	mul.w	r3, r3, r1
 800bb98:	4413      	add	r3, r2
 800bb9a:	339c      	adds	r3, #156	; 0x9c
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	2b06      	cmp	r3, #6
 800bba0:	d00c      	beq.n	800bbbc <USBH_MSC_Process+0x56c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bba8:	4619      	mov	r1, r3
 800bbaa:	693a      	ldr	r2, [r7, #16]
 800bbac:	2334      	movs	r3, #52	; 0x34
 800bbae:	fb03 f301 	mul.w	r3, r3, r1
 800bbb2:	4413      	add	r3, r2
 800bbb4:	339c      	adds	r3, #156	; 0x9c
 800bbb6:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800bbb8:	2b02      	cmp	r3, #2
 800bbba:	d117      	bne.n	800bbec <USBH_MSC_Process+0x59c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800bbc8:	1ad3      	subs	r3, r2, r3
 800bbca:	f242 720f 	movw	r2, #9999	; 0x270f
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d80c      	bhi.n	800bbec <USBH_MSC_Process+0x59c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bbd8:	4619      	mov	r1, r3
 800bbda:	693a      	ldr	r2, [r7, #16]
 800bbdc:	2334      	movs	r3, #52	; 0x34
 800bbde:	fb03 f301 	mul.w	r3, r3, r1
 800bbe2:	4413      	add	r3, r2
 800bbe4:	3390      	adds	r3, #144	; 0x90
 800bbe6:	2202      	movs	r2, #2
 800bbe8:	701a      	strb	r2, [r3, #0]
                  break;
 800bbea:	e09b      	b.n	800bd24 <USBH_MSC_Process+0x6d4>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	693a      	ldr	r2, [r7, #16]
 800bbf6:	2334      	movs	r3, #52	; 0x34
 800bbf8:	fb03 f301 	mul.w	r3, r3, r1
 800bbfc:	4413      	add	r3, r2
 800bbfe:	339c      	adds	r3, #156	; 0x9c
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	4619      	mov	r1, r3
 800bc04:	484f      	ldr	r0, [pc, #316]	; (800bd44 <USBH_MSC_Process+0x6f4>)
 800bc06:	f00e f9b1 	bl	8019f6c <iprintf>
 800bc0a:	200a      	movs	r0, #10
 800bc0c:	f00e f9c6 	bl	8019f9c <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc16:	4619      	mov	r1, r3
 800bc18:	693a      	ldr	r2, [r7, #16]
 800bc1a:	2334      	movs	r3, #52	; 0x34
 800bc1c:	fb03 f301 	mul.w	r3, r3, r1
 800bc20:	4413      	add	r3, r2
 800bc22:	339d      	adds	r3, #157	; 0x9d
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	4619      	mov	r1, r3
 800bc28:	4847      	ldr	r0, [pc, #284]	; (800bd48 <USBH_MSC_Process+0x6f8>)
 800bc2a:	f00e f99f 	bl	8019f6c <iprintf>
 800bc2e:	200a      	movs	r0, #10
 800bc30:	f00e f9b4 	bl	8019f9c <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	693a      	ldr	r2, [r7, #16]
 800bc3e:	2334      	movs	r3, #52	; 0x34
 800bc40:	fb03 f301 	mul.w	r3, r3, r1
 800bc44:	4413      	add	r3, r2
 800bc46:	339e      	adds	r3, #158	; 0x9e
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	483f      	ldr	r0, [pc, #252]	; (800bd4c <USBH_MSC_Process+0x6fc>)
 800bc4e:	f00e f98d 	bl	8019f6c <iprintf>
 800bc52:	200a      	movs	r0, #10
 800bc54:	f00e f9a2 	bl	8019f9c <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc5e:	4619      	mov	r1, r3
 800bc60:	693a      	ldr	r2, [r7, #16]
 800bc62:	2334      	movs	r3, #52	; 0x34
 800bc64:	fb03 f301 	mul.w	r3, r3, r1
 800bc68:	4413      	add	r3, r2
 800bc6a:	3390      	adds	r3, #144	; 0x90
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc76:	3301      	adds	r3, #1
 800bc78:	b29a      	uxth	r2, r3
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800bc80:	7bfb      	ldrb	r3, [r7, #15]
 800bc82:	2b02      	cmp	r3, #2
 800bc84:	d112      	bne.n	800bcac <USBH_MSC_Process+0x65c>
              USBH_UsrLog("MSC Device NOT ready");
 800bc86:	4832      	ldr	r0, [pc, #200]	; (800bd50 <USBH_MSC_Process+0x700>)
 800bc88:	f00e f970 	bl	8019f6c <iprintf>
 800bc8c:	200a      	movs	r0, #10
 800bc8e:	f00e f985 	bl	8019f9c <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc98:	4619      	mov	r1, r3
 800bc9a:	693a      	ldr	r2, [r7, #16]
 800bc9c:	2334      	movs	r3, #52	; 0x34
 800bc9e:	fb03 f301 	mul.w	r3, r3, r1
 800bca2:	4413      	add	r3, r2
 800bca4:	3390      	adds	r3, #144	; 0x90
 800bca6:	2208      	movs	r2, #8
 800bca8:	701a      	strb	r2, [r3, #0]
            break;
 800bcaa:	e03a      	b.n	800bd22 <USBH_MSC_Process+0x6d2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bcac:	7bfb      	ldrb	r3, [r7, #15]
 800bcae:	2b04      	cmp	r3, #4
 800bcb0:	d137      	bne.n	800bd22 <USBH_MSC_Process+0x6d2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bcb8:	4619      	mov	r1, r3
 800bcba:	693a      	ldr	r2, [r7, #16]
 800bcbc:	2334      	movs	r3, #52	; 0x34
 800bcbe:	fb03 f301 	mul.w	r3, r3, r1
 800bcc2:	4413      	add	r3, r2
 800bcc4:	3390      	adds	r3, #144	; 0x90
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	693a      	ldr	r2, [r7, #16]
 800bcd4:	2334      	movs	r3, #52	; 0x34
 800bcd6:	fb03 f301 	mul.w	r3, r3, r1
 800bcda:	4413      	add	r3, r2
 800bcdc:	3391      	adds	r3, #145	; 0x91
 800bcde:	2202      	movs	r2, #2
 800bce0:	701a      	strb	r2, [r3, #0]
            break;
 800bce2:	e01e      	b.n	800bd22 <USBH_MSC_Process+0x6d2>
            MSC_Handle->current_lun++;
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bcea:	3301      	adds	r3, #1
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800bcf4:	e016      	b.n	800bd24 <USBH_MSC_Process+0x6d4>
        MSC_Handle->current_lun = 0U;
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	2201      	movs	r2, #1
 800bd02:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd0a:	2102      	movs	r1, #2
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	4798      	blx	r3
      break;
 800bd10:	e00c      	b.n	800bd2c <USBH_MSC_Process+0x6dc>
            break;
 800bd12:	bf00      	nop
 800bd14:	e00a      	b.n	800bd2c <USBH_MSC_Process+0x6dc>
            break;
 800bd16:	bf00      	nop
 800bd18:	e008      	b.n	800bd2c <USBH_MSC_Process+0x6dc>
            break;
 800bd1a:	bf00      	nop
 800bd1c:	e006      	b.n	800bd2c <USBH_MSC_Process+0x6dc>
            break;
 800bd1e:	bf00      	nop
 800bd20:	e004      	b.n	800bd2c <USBH_MSC_Process+0x6dc>
            break;
 800bd22:	bf00      	nop
      break;
 800bd24:	e002      	b.n	800bd2c <USBH_MSC_Process+0x6dc>
      error = USBH_OK;
 800bd26:	2300      	movs	r3, #0
 800bd28:	75fb      	strb	r3, [r7, #23]
      break;
 800bd2a:	bf00      	nop
  }
  return error;
 800bd2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3718      	adds	r7, #24
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	0801c270 	.word	0x0801c270
 800bd3c:	0801c290 	.word	0x0801c290
 800bd40:	0801c2a4 	.word	0x0801c2a4
 800bd44:	0801c2b8 	.word	0x0801c2b8
 800bd48:	0801c2c8 	.word	0x0801c2c8
 800bd4c:	0801c2e4 	.word	0x0801c2e4
 800bd50:	0801c258 	.word	0x0801c258

0800bd54 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	370c      	adds	r7, #12
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr
	...

0800bd6c <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b088      	sub	sp, #32
 800bd70:	af02      	add	r7, sp, #8
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	460b      	mov	r3, r1
 800bd76:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd7e:	69db      	ldr	r3, [r3, #28]
 800bd80:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800bd82:	2301      	movs	r3, #1
 800bd84:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800bd86:	2301      	movs	r3, #1
 800bd88:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800bd8a:	78fb      	ldrb	r3, [r7, #3]
 800bd8c:	693a      	ldr	r2, [r7, #16]
 800bd8e:	2134      	movs	r1, #52	; 0x34
 800bd90:	fb01 f303 	mul.w	r3, r1, r3
 800bd94:	4413      	add	r3, r2
 800bd96:	3390      	adds	r3, #144	; 0x90
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	2b07      	cmp	r3, #7
 800bd9c:	d03d      	beq.n	800be1a <USBH_MSC_RdWrProcess+0xae>
 800bd9e:	2b07      	cmp	r3, #7
 800bda0:	f300 80dc 	bgt.w	800bf5c <USBH_MSC_RdWrProcess+0x1f0>
 800bda4:	2b05      	cmp	r3, #5
 800bda6:	d06d      	beq.n	800be84 <USBH_MSC_RdWrProcess+0x118>
 800bda8:	2b06      	cmp	r3, #6
 800bdaa:	f040 80d7 	bne.w	800bf5c <USBH_MSC_RdWrProcess+0x1f0>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800bdae:	78f9      	ldrb	r1, [r7, #3]
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	9300      	str	r3, [sp, #0]
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f000 fee2 	bl	800cb82 <USBH_MSC_SCSI_Read>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800bdc2:	7bfb      	ldrb	r3, [r7, #15]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d10b      	bne.n	800bde0 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800bdc8:	78fb      	ldrb	r3, [r7, #3]
 800bdca:	693a      	ldr	r2, [r7, #16]
 800bdcc:	2134      	movs	r1, #52	; 0x34
 800bdce:	fb01 f303 	mul.w	r3, r1, r3
 800bdd2:	4413      	add	r3, r2
 800bdd4:	3390      	adds	r3, #144	; 0x90
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800bdda:	2300      	movs	r3, #0
 800bddc:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bdde:	e0bf      	b.n	800bf60 <USBH_MSC_RdWrProcess+0x1f4>
      else if (scsi_status == USBH_FAIL)
 800bde0:	7bfb      	ldrb	r3, [r7, #15]
 800bde2:	2b02      	cmp	r3, #2
 800bde4:	d109      	bne.n	800bdfa <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800bde6:	78fb      	ldrb	r3, [r7, #3]
 800bde8:	693a      	ldr	r2, [r7, #16]
 800bdea:	2134      	movs	r1, #52	; 0x34
 800bdec:	fb01 f303 	mul.w	r3, r1, r3
 800bdf0:	4413      	add	r3, r2
 800bdf2:	3390      	adds	r3, #144	; 0x90
 800bdf4:	2205      	movs	r2, #5
 800bdf6:	701a      	strb	r2, [r3, #0]
      break;
 800bdf8:	e0b2      	b.n	800bf60 <USBH_MSC_RdWrProcess+0x1f4>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bdfa:	7bfb      	ldrb	r3, [r7, #15]
 800bdfc:	2b04      	cmp	r3, #4
 800bdfe:	f040 80af 	bne.w	800bf60 <USBH_MSC_RdWrProcess+0x1f4>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800be02:	78fb      	ldrb	r3, [r7, #3]
 800be04:	693a      	ldr	r2, [r7, #16]
 800be06:	2134      	movs	r1, #52	; 0x34
 800be08:	fb01 f303 	mul.w	r3, r1, r3
 800be0c:	4413      	add	r3, r2
 800be0e:	3390      	adds	r3, #144	; 0x90
 800be10:	2208      	movs	r2, #8
 800be12:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800be14:	2302      	movs	r3, #2
 800be16:	75fb      	strb	r3, [r7, #23]
      break;
 800be18:	e0a2      	b.n	800bf60 <USBH_MSC_RdWrProcess+0x1f4>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800be1a:	78f9      	ldrb	r1, [r7, #3]
 800be1c:	2300      	movs	r3, #0
 800be1e:	9300      	str	r3, [sp, #0]
 800be20:	2300      	movs	r3, #0
 800be22:	2200      	movs	r2, #0
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 fe41 	bl	800caac <USBH_MSC_SCSI_Write>
 800be2a:	4603      	mov	r3, r0
 800be2c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800be2e:	7bfb      	ldrb	r3, [r7, #15]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d10b      	bne.n	800be4c <USBH_MSC_RdWrProcess+0xe0>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800be34:	78fb      	ldrb	r3, [r7, #3]
 800be36:	693a      	ldr	r2, [r7, #16]
 800be38:	2134      	movs	r1, #52	; 0x34
 800be3a:	fb01 f303 	mul.w	r3, r1, r3
 800be3e:	4413      	add	r3, r2
 800be40:	3390      	adds	r3, #144	; 0x90
 800be42:	2201      	movs	r2, #1
 800be44:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800be46:	2300      	movs	r3, #0
 800be48:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800be4a:	e08b      	b.n	800bf64 <USBH_MSC_RdWrProcess+0x1f8>
      else if (scsi_status == USBH_FAIL)
 800be4c:	7bfb      	ldrb	r3, [r7, #15]
 800be4e:	2b02      	cmp	r3, #2
 800be50:	d109      	bne.n	800be66 <USBH_MSC_RdWrProcess+0xfa>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800be52:	78fb      	ldrb	r3, [r7, #3]
 800be54:	693a      	ldr	r2, [r7, #16]
 800be56:	2134      	movs	r1, #52	; 0x34
 800be58:	fb01 f303 	mul.w	r3, r1, r3
 800be5c:	4413      	add	r3, r2
 800be5e:	3390      	adds	r3, #144	; 0x90
 800be60:	2205      	movs	r2, #5
 800be62:	701a      	strb	r2, [r3, #0]
      break;
 800be64:	e07e      	b.n	800bf64 <USBH_MSC_RdWrProcess+0x1f8>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800be66:	7bfb      	ldrb	r3, [r7, #15]
 800be68:	2b04      	cmp	r3, #4
 800be6a:	d17b      	bne.n	800bf64 <USBH_MSC_RdWrProcess+0x1f8>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800be6c:	78fb      	ldrb	r3, [r7, #3]
 800be6e:	693a      	ldr	r2, [r7, #16]
 800be70:	2134      	movs	r1, #52	; 0x34
 800be72:	fb01 f303 	mul.w	r3, r1, r3
 800be76:	4413      	add	r3, r2
 800be78:	3390      	adds	r3, #144	; 0x90
 800be7a:	2208      	movs	r2, #8
 800be7c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800be7e:	2302      	movs	r3, #2
 800be80:	75fb      	strb	r3, [r7, #23]
      break;
 800be82:	e06f      	b.n	800bf64 <USBH_MSC_RdWrProcess+0x1f8>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800be84:	78fb      	ldrb	r3, [r7, #3]
 800be86:	2234      	movs	r2, #52	; 0x34
 800be88:	fb02 f303 	mul.w	r3, r2, r3
 800be8c:	3398      	adds	r3, #152	; 0x98
 800be8e:	693a      	ldr	r2, [r7, #16]
 800be90:	4413      	add	r3, r2
 800be92:	1d1a      	adds	r2, r3, #4
 800be94:	78fb      	ldrb	r3, [r7, #3]
 800be96:	4619      	mov	r1, r3
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 fd8e 	bl	800c9ba <USBH_MSC_SCSI_RequestSense>
 800be9e:	4603      	mov	r3, r0
 800bea0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800bea2:	7bfb      	ldrb	r3, [r7, #15]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d140      	bne.n	800bf2a <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
 800bea8:	78fb      	ldrb	r3, [r7, #3]
 800beaa:	693a      	ldr	r2, [r7, #16]
 800beac:	2134      	movs	r1, #52	; 0x34
 800beae:	fb01 f303 	mul.w	r3, r1, r3
 800beb2:	4413      	add	r3, r2
 800beb4:	339c      	adds	r3, #156	; 0x9c
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	4619      	mov	r1, r3
 800beba:	482e      	ldr	r0, [pc, #184]	; (800bf74 <USBH_MSC_RdWrProcess+0x208>)
 800bebc:	f00e f856 	bl	8019f6c <iprintf>
 800bec0:	200a      	movs	r0, #10
 800bec2:	f00e f86b 	bl	8019f9c <putchar>
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
 800bec6:	78fb      	ldrb	r3, [r7, #3]
 800bec8:	693a      	ldr	r2, [r7, #16]
 800beca:	2134      	movs	r1, #52	; 0x34
 800becc:	fb01 f303 	mul.w	r3, r1, r3
 800bed0:	4413      	add	r3, r2
 800bed2:	339d      	adds	r3, #157	; 0x9d
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	4619      	mov	r1, r3
 800bed8:	4827      	ldr	r0, [pc, #156]	; (800bf78 <USBH_MSC_RdWrProcess+0x20c>)
 800beda:	f00e f847 	bl	8019f6c <iprintf>
 800bede:	200a      	movs	r0, #10
 800bee0:	f00e f85c 	bl	8019f9c <putchar>
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
 800bee4:	78fb      	ldrb	r3, [r7, #3]
 800bee6:	693a      	ldr	r2, [r7, #16]
 800bee8:	2134      	movs	r1, #52	; 0x34
 800beea:	fb01 f303 	mul.w	r3, r1, r3
 800beee:	4413      	add	r3, r2
 800bef0:	339e      	adds	r3, #158	; 0x9e
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	4619      	mov	r1, r3
 800bef6:	4821      	ldr	r0, [pc, #132]	; (800bf7c <USBH_MSC_RdWrProcess+0x210>)
 800bef8:	f00e f838 	bl	8019f6c <iprintf>
 800befc:	200a      	movs	r0, #10
 800befe:	f00e f84d 	bl	8019f9c <putchar>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800bf02:	78fb      	ldrb	r3, [r7, #3]
 800bf04:	693a      	ldr	r2, [r7, #16]
 800bf06:	2134      	movs	r1, #52	; 0x34
 800bf08:	fb01 f303 	mul.w	r3, r1, r3
 800bf0c:	4413      	add	r3, r2
 800bf0e:	3390      	adds	r3, #144	; 0x90
 800bf10:	2201      	movs	r2, #1
 800bf12:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800bf14:	78fb      	ldrb	r3, [r7, #3]
 800bf16:	693a      	ldr	r2, [r7, #16]
 800bf18:	2134      	movs	r1, #52	; 0x34
 800bf1a:	fb01 f303 	mul.w	r3, r1, r3
 800bf1e:	4413      	add	r3, r2
 800bf20:	3391      	adds	r3, #145	; 0x91
 800bf22:	2202      	movs	r2, #2
 800bf24:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800bf26:	2302      	movs	r3, #2
 800bf28:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800bf2a:	7bfb      	ldrb	r3, [r7, #15]
 800bf2c:	2b02      	cmp	r3, #2
 800bf2e:	d106      	bne.n	800bf3e <USBH_MSC_RdWrProcess+0x1d2>
      {
        USBH_UsrLog("MSC Device NOT ready");
 800bf30:	4813      	ldr	r0, [pc, #76]	; (800bf80 <USBH_MSC_RdWrProcess+0x214>)
 800bf32:	f00e f81b 	bl	8019f6c <iprintf>
 800bf36:	200a      	movs	r0, #10
 800bf38:	f00e f830 	bl	8019f9c <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bf3c:	e014      	b.n	800bf68 <USBH_MSC_RdWrProcess+0x1fc>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bf3e:	7bfb      	ldrb	r3, [r7, #15]
 800bf40:	2b04      	cmp	r3, #4
 800bf42:	d111      	bne.n	800bf68 <USBH_MSC_RdWrProcess+0x1fc>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800bf44:	78fb      	ldrb	r3, [r7, #3]
 800bf46:	693a      	ldr	r2, [r7, #16]
 800bf48:	2134      	movs	r1, #52	; 0x34
 800bf4a:	fb01 f303 	mul.w	r3, r1, r3
 800bf4e:	4413      	add	r3, r2
 800bf50:	3390      	adds	r3, #144	; 0x90
 800bf52:	2208      	movs	r2, #8
 800bf54:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800bf56:	2302      	movs	r3, #2
 800bf58:	75fb      	strb	r3, [r7, #23]
      break;
 800bf5a:	e005      	b.n	800bf68 <USBH_MSC_RdWrProcess+0x1fc>

    default:
      break;
 800bf5c:	bf00      	nop
 800bf5e:	e004      	b.n	800bf6a <USBH_MSC_RdWrProcess+0x1fe>
      break;
 800bf60:	bf00      	nop
 800bf62:	e002      	b.n	800bf6a <USBH_MSC_RdWrProcess+0x1fe>
      break;
 800bf64:	bf00      	nop
 800bf66:	e000      	b.n	800bf6a <USBH_MSC_RdWrProcess+0x1fe>
      break;
 800bf68:	bf00      	nop

  }
  return error;
 800bf6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3718      	adds	r7, #24
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}
 800bf74:	0801c2b8 	.word	0x0801c2b8
 800bf78:	0801c2c8 	.word	0x0801c2c8
 800bf7c:	0801c2e4 	.word	0x0801c2e4
 800bf80:	0801c258 	.word	0x0801c258

0800bf84 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b085      	sub	sp, #20
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf96:	69db      	ldr	r3, [r3, #28]
 800bf98:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	2b0b      	cmp	r3, #11
 800bfa2:	d10c      	bne.n	800bfbe <USBH_MSC_UnitIsReady+0x3a>
 800bfa4:	78fb      	ldrb	r3, [r7, #3]
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	2134      	movs	r1, #52	; 0x34
 800bfaa:	fb01 f303 	mul.w	r3, r1, r3
 800bfae:	4413      	add	r3, r2
 800bfb0:	3391      	adds	r3, #145	; 0x91
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d102      	bne.n	800bfbe <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	73fb      	strb	r3, [r7, #15]
 800bfbc:	e001      	b.n	800bfc2 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800bfc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3714      	adds	r7, #20
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfce:	4770      	bx	lr

0800bfd0 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b086      	sub	sp, #24
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	60f8      	str	r0, [r7, #12]
 800bfd8:	460b      	mov	r3, r1
 800bfda:	607a      	str	r2, [r7, #4]
 800bfdc:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bfe4:	69db      	ldr	r3, [r3, #28]
 800bfe6:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	2b0b      	cmp	r3, #11
 800bff0:	d10d      	bne.n	800c00e <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800bff2:	7afb      	ldrb	r3, [r7, #11]
 800bff4:	2234      	movs	r2, #52	; 0x34
 800bff6:	fb02 f303 	mul.w	r3, r2, r3
 800bffa:	3390      	adds	r3, #144	; 0x90
 800bffc:	697a      	ldr	r2, [r7, #20]
 800bffe:	4413      	add	r3, r2
 800c000:	2234      	movs	r2, #52	; 0x34
 800c002:	4619      	mov	r1, r3
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f00d fa87 	bl	8019518 <memcpy>
    return USBH_OK;
 800c00a:	2300      	movs	r3, #0
 800c00c:	e000      	b.n	800c010 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800c00e:	2302      	movs	r3, #2
  }
}
 800c010:	4618      	mov	r0, r3
 800c012:	3718      	adds	r7, #24
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b088      	sub	sp, #32
 800c01c:	af02      	add	r7, sp, #8
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	607a      	str	r2, [r7, #4]
 800c022:	603b      	str	r3, [r7, #0]
 800c024:	460b      	mov	r3, r1
 800c026:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c02e:	69db      	ldr	r3, [r3, #28]
 800c030:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d00e      	beq.n	800c05c <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800c044:	2b0b      	cmp	r3, #11
 800c046:	d109      	bne.n	800c05c <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800c048:	7afb      	ldrb	r3, [r7, #11]
 800c04a:	697a      	ldr	r2, [r7, #20]
 800c04c:	2134      	movs	r1, #52	; 0x34
 800c04e:	fb01 f303 	mul.w	r3, r1, r3
 800c052:	4413      	add	r3, r2
 800c054:	3390      	adds	r3, #144	; 0x90
 800c056:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d001      	beq.n	800c060 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800c05c:	2302      	movs	r3, #2
 800c05e:	e040      	b.n	800c0e2 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	2206      	movs	r2, #6
 800c064:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800c066:	7afb      	ldrb	r3, [r7, #11]
 800c068:	697a      	ldr	r2, [r7, #20]
 800c06a:	2134      	movs	r1, #52	; 0x34
 800c06c:	fb01 f303 	mul.w	r3, r1, r3
 800c070:	4413      	add	r3, r2
 800c072:	3390      	adds	r3, #144	; 0x90
 800c074:	2206      	movs	r2, #6
 800c076:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800c078:	7afb      	ldrb	r3, [r7, #11]
 800c07a:	b29a      	uxth	r2, r3
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800c082:	7af9      	ldrb	r1, [r7, #11]
 800c084:	6a3b      	ldr	r3, [r7, #32]
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	68f8      	ldr	r0, [r7, #12]
 800c08e:	f000 fd78 	bl	800cb82 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c098:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c09a:	e016      	b.n	800c0ca <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	1ad2      	subs	r2, r2, r3
 800c0a6:	6a3b      	ldr	r3, [r7, #32]
 800c0a8:	f242 7110 	movw	r1, #10000	; 0x2710
 800c0ac:	fb01 f303 	mul.w	r3, r1, r3
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d805      	bhi.n	800c0c0 <USBH_MSC_Read+0xa8>
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c0ba:	b2db      	uxtb	r3, r3
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d104      	bne.n	800c0ca <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800c0c6:	2302      	movs	r3, #2
 800c0c8:	e00b      	b.n	800c0e2 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c0ca:	7afb      	ldrb	r3, [r7, #11]
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	68f8      	ldr	r0, [r7, #12]
 800c0d0:	f7ff fe4c 	bl	800bd6c <USBH_MSC_RdWrProcess>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	2b01      	cmp	r3, #1
 800c0d8:	d0e0      	beq.n	800c09c <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	2201      	movs	r2, #1
 800c0de:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800c0e0:	2300      	movs	r3, #0
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3718      	adds	r7, #24
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}

0800c0ea <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b088      	sub	sp, #32
 800c0ee:	af02      	add	r7, sp, #8
 800c0f0:	60f8      	str	r0, [r7, #12]
 800c0f2:	607a      	str	r2, [r7, #4]
 800c0f4:	603b      	str	r3, [r7, #0]
 800c0f6:	460b      	mov	r3, r1
 800c0f8:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c100:	69db      	ldr	r3, [r3, #28]
 800c102:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c10a:	b2db      	uxtb	r3, r3
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d00e      	beq.n	800c12e <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800c116:	2b0b      	cmp	r3, #11
 800c118:	d109      	bne.n	800c12e <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800c11a:	7afb      	ldrb	r3, [r7, #11]
 800c11c:	697a      	ldr	r2, [r7, #20]
 800c11e:	2134      	movs	r1, #52	; 0x34
 800c120:	fb01 f303 	mul.w	r3, r1, r3
 800c124:	4413      	add	r3, r2
 800c126:	3390      	adds	r3, #144	; 0x90
 800c128:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	d001      	beq.n	800c132 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800c12e:	2302      	movs	r3, #2
 800c130:	e040      	b.n	800c1b4 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	2207      	movs	r2, #7
 800c136:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800c138:	7afb      	ldrb	r3, [r7, #11]
 800c13a:	697a      	ldr	r2, [r7, #20]
 800c13c:	2134      	movs	r1, #52	; 0x34
 800c13e:	fb01 f303 	mul.w	r3, r1, r3
 800c142:	4413      	add	r3, r2
 800c144:	3390      	adds	r3, #144	; 0x90
 800c146:	2207      	movs	r2, #7
 800c148:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800c14a:	7afb      	ldrb	r3, [r7, #11]
 800c14c:	b29a      	uxth	r2, r3
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800c154:	7af9      	ldrb	r1, [r7, #11]
 800c156:	6a3b      	ldr	r3, [r7, #32]
 800c158:	9300      	str	r3, [sp, #0]
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	68f8      	ldr	r0, [r7, #12]
 800c160:	f000 fca4 	bl	800caac <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c16a:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c16c:	e016      	b.n	800c19c <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	1ad2      	subs	r2, r2, r3
 800c178:	6a3b      	ldr	r3, [r7, #32]
 800c17a:	f242 7110 	movw	r1, #10000	; 0x2710
 800c17e:	fb01 f303 	mul.w	r3, r1, r3
 800c182:	429a      	cmp	r2, r3
 800c184:	d805      	bhi.n	800c192 <USBH_MSC_Write+0xa8>
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c18c:	b2db      	uxtb	r3, r3
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d104      	bne.n	800c19c <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	2201      	movs	r2, #1
 800c196:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800c198:	2302      	movs	r3, #2
 800c19a:	e00b      	b.n	800c1b4 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c19c:	7afb      	ldrb	r3, [r7, #11]
 800c19e:	4619      	mov	r1, r3
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	f7ff fde3 	bl	800bd6c <USBH_MSC_RdWrProcess>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d0e0      	beq.n	800c16e <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800c1b2:	2300      	movs	r3, #0
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3718      	adds	r7, #24
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2221      	movs	r2, #33	; 0x21
 800c1c8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	22ff      	movs	r2, #255	; 0xff
 800c1ce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	2100      	movs	r1, #0
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f001 ff67 	bl	800e0ba <USBH_CtlReq>
 800c1ec:	4603      	mov	r3, r0
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3708      	adds	r7, #8
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}

0800c1f6 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800c1f6:	b580      	push	{r7, lr}
 800c1f8:	b082      	sub	sp, #8
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	22a1      	movs	r2, #161	; 0xa1
 800c204:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	22fe      	movs	r2, #254	; 0xfe
 800c20a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2200      	movs	r2, #0
 800c210:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2201      	movs	r2, #1
 800c21c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800c21e:	2201      	movs	r2, #1
 800c220:	6839      	ldr	r1, [r7, #0]
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f001 ff49 	bl	800e0ba <USBH_CtlReq>
 800c228:	4603      	mov	r3, r0
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3708      	adds	r7, #8
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
	...

0800c234 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800c234:	b480      	push	{r7}
 800c236:	b085      	sub	sp, #20
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c242:	69db      	ldr	r3, [r3, #28]
 800c244:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	4a09      	ldr	r2, [pc, #36]	; (800c270 <USBH_MSC_BOT_Init+0x3c>)
 800c24a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	4a09      	ldr	r2, [pc, #36]	; (800c274 <USBH_MSC_BOT_Init+0x40>)
 800c250:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2201      	movs	r2, #1
 800c256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2201      	movs	r2, #1
 800c25e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800c262:	2300      	movs	r3, #0
}
 800c264:	4618      	mov	r0, r3
 800c266:	3714      	adds	r7, #20
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr
 800c270:	43425355 	.word	0x43425355
 800c274:	20304050 	.word	0x20304050

0800c278 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b088      	sub	sp, #32
 800c27c:	af02      	add	r7, sp, #8
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	460b      	mov	r3, r1
 800c282:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800c284:	2301      	movs	r3, #1
 800c286:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800c288:	2301      	movs	r3, #1
 800c28a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800c28c:	2301      	movs	r3, #1
 800c28e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c290:	2300      	movs	r3, #0
 800c292:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c29a:	69db      	ldr	r3, [r3, #28]
 800c29c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c2a8:	3b01      	subs	r3, #1
 800c2aa:	2b0a      	cmp	r3, #10
 800c2ac:	f200 819e 	bhi.w	800c5ec <USBH_MSC_BOT_Process+0x374>
 800c2b0:	a201      	add	r2, pc, #4	; (adr r2, 800c2b8 <USBH_MSC_BOT_Process+0x40>)
 800c2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2b6:	bf00      	nop
 800c2b8:	0800c2e5 	.word	0x0800c2e5
 800c2bc:	0800c30d 	.word	0x0800c30d
 800c2c0:	0800c377 	.word	0x0800c377
 800c2c4:	0800c395 	.word	0x0800c395
 800c2c8:	0800c419 	.word	0x0800c419
 800c2cc:	0800c43b 	.word	0x0800c43b
 800c2d0:	0800c4d3 	.word	0x0800c4d3
 800c2d4:	0800c4ef 	.word	0x0800c4ef
 800c2d8:	0800c541 	.word	0x0800c541
 800c2dc:	0800c571 	.word	0x0800c571
 800c2e0:	0800c5d3 	.word	0x0800c5d3
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	78fa      	ldrb	r2, [r7, #3]
 800c2e8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	2202      	movs	r2, #2
 800c2f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	795b      	ldrb	r3, [r3, #5]
 800c2fe:	2201      	movs	r2, #1
 800c300:	9200      	str	r2, [sp, #0]
 800c302:	221f      	movs	r2, #31
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f002 f8f4 	bl	800e4f2 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800c30a:	e17e      	b.n	800c60a <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	795b      	ldrb	r3, [r3, #5]
 800c310:	4619      	mov	r1, r3
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f00c ffe0 	bl	80192d8 <USBH_LL_GetURBState>
 800c318:	4603      	mov	r3, r0
 800c31a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c31c:	7d3b      	ldrb	r3, [r7, #20]
 800c31e:	2b01      	cmp	r3, #1
 800c320:	d118      	bne.n	800c354 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c326:	2b00      	cmp	r3, #0
 800c328:	d00f      	beq.n	800c34a <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800c330:	b25b      	sxtb	r3, r3
 800c332:	2b00      	cmp	r3, #0
 800c334:	da04      	bge.n	800c340 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	2203      	movs	r2, #3
 800c33a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c33e:	e157      	b.n	800c5f0 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	2205      	movs	r2, #5
 800c344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c348:	e152      	b.n	800c5f0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	2207      	movs	r2, #7
 800c34e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c352:	e14d      	b.n	800c5f0 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c354:	7d3b      	ldrb	r3, [r7, #20]
 800c356:	2b02      	cmp	r3, #2
 800c358:	d104      	bne.n	800c364 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	2201      	movs	r2, #1
 800c35e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c362:	e145      	b.n	800c5f0 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800c364:	7d3b      	ldrb	r3, [r7, #20]
 800c366:	2b05      	cmp	r3, #5
 800c368:	f040 8142 	bne.w	800c5f0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	220a      	movs	r2, #10
 800c370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c374:	e13c      	b.n	800c5f0 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	895a      	ldrh	r2, [r3, #10]
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	791b      	ldrb	r3, [r3, #4]
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f002 f8d9 	bl	800e53c <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	2204      	movs	r2, #4
 800c38e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800c392:	e13a      	b.n	800c60a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	791b      	ldrb	r3, [r3, #4]
 800c398:	4619      	mov	r1, r3
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f00c ff9c 	bl	80192d8 <USBH_LL_GetURBState>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c3a4:	7d3b      	ldrb	r3, [r7, #20]
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	d12d      	bne.n	800c406 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3ae:	693a      	ldr	r2, [r7, #16]
 800c3b0:	8952      	ldrh	r2, [r2, #10]
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d910      	bls.n	800c3d8 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3bc:	693a      	ldr	r2, [r7, #16]
 800c3be:	8952      	ldrh	r2, [r2, #10]
 800c3c0:	441a      	add	r2, r3
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3cc:	693a      	ldr	r2, [r7, #16]
 800c3ce:	8952      	ldrh	r2, [r2, #10]
 800c3d0:	1a9a      	subs	r2, r3, r2
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	65da      	str	r2, [r3, #92]	; 0x5c
 800c3d6:	e002      	b.n	800c3de <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00a      	beq.n	800c3fc <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	895a      	ldrh	r2, [r3, #10]
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	791b      	ldrb	r3, [r3, #4]
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f002 f8a1 	bl	800e53c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800c3fa:	e0fb      	b.n	800c5f4 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	2207      	movs	r2, #7
 800c400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c404:	e0f6      	b.n	800c5f4 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800c406:	7d3b      	ldrb	r3, [r7, #20]
 800c408:	2b05      	cmp	r3, #5
 800c40a:	f040 80f3 	bne.w	800c5f4 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	2209      	movs	r2, #9
 800c412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c416:	e0ed      	b.n	800c5f4 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	891a      	ldrh	r2, [r3, #8]
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	795b      	ldrb	r3, [r3, #5]
 800c426:	2001      	movs	r0, #1
 800c428:	9000      	str	r0, [sp, #0]
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f002 f861 	bl	800e4f2 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	2206      	movs	r2, #6
 800c434:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c438:	e0e7      	b.n	800c60a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	795b      	ldrb	r3, [r3, #5]
 800c43e:	4619      	mov	r1, r3
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f00c ff49 	bl	80192d8 <USBH_LL_GetURBState>
 800c446:	4603      	mov	r3, r0
 800c448:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c44a:	7d3b      	ldrb	r3, [r7, #20]
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d12f      	bne.n	800c4b0 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c454:	693a      	ldr	r2, [r7, #16]
 800c456:	8912      	ldrh	r2, [r2, #8]
 800c458:	4293      	cmp	r3, r2
 800c45a:	d910      	bls.n	800c47e <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c462:	693a      	ldr	r2, [r7, #16]
 800c464:	8912      	ldrh	r2, [r2, #8]
 800c466:	441a      	add	r2, r3
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c472:	693a      	ldr	r2, [r7, #16]
 800c474:	8912      	ldrh	r2, [r2, #8]
 800c476:	1a9a      	subs	r2, r3, r2
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	65da      	str	r2, [r3, #92]	; 0x5c
 800c47c:	e002      	b.n	800c484 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	2200      	movs	r2, #0
 800c482:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d00c      	beq.n	800c4a6 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	891a      	ldrh	r2, [r3, #8]
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	795b      	ldrb	r3, [r3, #5]
 800c49a:	2001      	movs	r0, #1
 800c49c:	9000      	str	r0, [sp, #0]
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f002 f827 	bl	800e4f2 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800c4a4:	e0a8      	b.n	800c5f8 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	2207      	movs	r2, #7
 800c4aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c4ae:	e0a3      	b.n	800c5f8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c4b0:	7d3b      	ldrb	r3, [r7, #20]
 800c4b2:	2b02      	cmp	r3, #2
 800c4b4:	d104      	bne.n	800c4c0 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	2205      	movs	r2, #5
 800c4ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c4be:	e09b      	b.n	800c5f8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800c4c0:	7d3b      	ldrb	r3, [r7, #20]
 800c4c2:	2b05      	cmp	r3, #5
 800c4c4:	f040 8098 	bne.w	800c5f8 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	220a      	movs	r2, #10
 800c4cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c4d0:	e092      	b.n	800c5f8 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	791b      	ldrb	r3, [r3, #4]
 800c4dc:	220d      	movs	r2, #13
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f002 f82c 	bl	800e53c <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	2208      	movs	r2, #8
 800c4e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c4ec:	e08d      	b.n	800c60a <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	791b      	ldrb	r3, [r3, #4]
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f00c feef 	bl	80192d8 <USBH_LL_GetURBState>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800c4fe:	7d3b      	ldrb	r3, [r7, #20]
 800c500:	2b01      	cmp	r3, #1
 800c502:	d115      	bne.n	800c530 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	2201      	movs	r2, #1
 800c508:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	2201      	movs	r2, #1
 800c510:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f000 f8a9 	bl	800c66c <USBH_MSC_DecodeCSW>
 800c51a:	4603      	mov	r3, r0
 800c51c:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800c51e:	7d7b      	ldrb	r3, [r7, #21]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d102      	bne.n	800c52a <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800c524:	2300      	movs	r3, #0
 800c526:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800c528:	e068      	b.n	800c5fc <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800c52a:	2302      	movs	r3, #2
 800c52c:	75fb      	strb	r3, [r7, #23]
      break;
 800c52e:	e065      	b.n	800c5fc <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800c530:	7d3b      	ldrb	r3, [r7, #20]
 800c532:	2b05      	cmp	r3, #5
 800c534:	d162      	bne.n	800c5fc <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	2209      	movs	r2, #9
 800c53a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c53e:	e05d      	b.n	800c5fc <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800c540:	78fb      	ldrb	r3, [r7, #3]
 800c542:	2200      	movs	r2, #0
 800c544:	4619      	mov	r1, r3
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 f864 	bl	800c614 <USBH_MSC_BOT_Abort>
 800c54c:	4603      	mov	r3, r0
 800c54e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c550:	7dbb      	ldrb	r3, [r7, #22]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d104      	bne.n	800c560 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	2207      	movs	r2, #7
 800c55a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800c55e:	e04f      	b.n	800c600 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800c560:	7dbb      	ldrb	r3, [r7, #22]
 800c562:	2b04      	cmp	r3, #4
 800c564:	d14c      	bne.n	800c600 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	220b      	movs	r2, #11
 800c56a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c56e:	e047      	b.n	800c600 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800c570:	78fb      	ldrb	r3, [r7, #3]
 800c572:	2201      	movs	r2, #1
 800c574:	4619      	mov	r1, r3
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 f84c 	bl	800c614 <USBH_MSC_BOT_Abort>
 800c57c:	4603      	mov	r3, r0
 800c57e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c580:	7dbb      	ldrb	r3, [r7, #22]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d11d      	bne.n	800c5c2 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	795b      	ldrb	r3, [r3, #5]
 800c58a:	4619      	mov	r1, r3
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f00c fefd 	bl	801938c <USBH_LL_GetToggle>
 800c592:	4603      	mov	r3, r0
 800c594:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	7959      	ldrb	r1, [r3, #5]
 800c59a:	7bfb      	ldrb	r3, [r7, #15]
 800c59c:	f1c3 0301 	rsb	r3, r3, #1
 800c5a0:	b2db      	uxtb	r3, r3
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f00c fec1 	bl	801932c <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	791b      	ldrb	r3, [r3, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f00c feba 	bl	801932c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	2209      	movs	r2, #9
 800c5bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800c5c0:	e020      	b.n	800c604 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800c5c2:	7dbb      	ldrb	r3, [r7, #22]
 800c5c4:	2b04      	cmp	r3, #4
 800c5c6:	d11d      	bne.n	800c604 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	220b      	movs	r2, #11
 800c5cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c5d0:	e018      	b.n	800c604 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f7ff fdf2 	bl	800c1bc <USBH_MSC_BOT_REQ_Reset>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800c5dc:	7dfb      	ldrb	r3, [r7, #23]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d112      	bne.n	800c608 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800c5ea:	e00d      	b.n	800c608 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800c5ec:	bf00      	nop
 800c5ee:	e00c      	b.n	800c60a <USBH_MSC_BOT_Process+0x392>
      break;
 800c5f0:	bf00      	nop
 800c5f2:	e00a      	b.n	800c60a <USBH_MSC_BOT_Process+0x392>
      break;
 800c5f4:	bf00      	nop
 800c5f6:	e008      	b.n	800c60a <USBH_MSC_BOT_Process+0x392>
      break;
 800c5f8:	bf00      	nop
 800c5fa:	e006      	b.n	800c60a <USBH_MSC_BOT_Process+0x392>
      break;
 800c5fc:	bf00      	nop
 800c5fe:	e004      	b.n	800c60a <USBH_MSC_BOT_Process+0x392>
      break;
 800c600:	bf00      	nop
 800c602:	e002      	b.n	800c60a <USBH_MSC_BOT_Process+0x392>
      break;
 800c604:	bf00      	nop
 800c606:	e000      	b.n	800c60a <USBH_MSC_BOT_Process+0x392>
      break;
 800c608:	bf00      	nop
  }
  return status;
 800c60a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3718      	adds	r7, #24
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	460b      	mov	r3, r1
 800c61e:	70fb      	strb	r3, [r7, #3]
 800c620:	4613      	mov	r3, r2
 800c622:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800c624:	2302      	movs	r3, #2
 800c626:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c62e:	69db      	ldr	r3, [r3, #28]
 800c630:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800c632:	78bb      	ldrb	r3, [r7, #2]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d002      	beq.n	800c63e <USBH_MSC_BOT_Abort+0x2a>
 800c638:	2b01      	cmp	r3, #1
 800c63a:	d009      	beq.n	800c650 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800c63c:	e011      	b.n	800c662 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	79db      	ldrb	r3, [r3, #7]
 800c642:	4619      	mov	r1, r3
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f001 fb58 	bl	800dcfa <USBH_ClrFeature>
 800c64a:	4603      	mov	r3, r0
 800c64c:	73fb      	strb	r3, [r7, #15]
      break;
 800c64e:	e008      	b.n	800c662 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	799b      	ldrb	r3, [r3, #6]
 800c654:	4619      	mov	r1, r3
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f001 fb4f 	bl	800dcfa <USBH_ClrFeature>
 800c65c:	4603      	mov	r3, r0
 800c65e:	73fb      	strb	r3, [r7, #15]
      break;
 800c660:	bf00      	nop
  }
  return status;
 800c662:	7bfb      	ldrb	r3, [r7, #15]
}
 800c664:	4618      	mov	r0, r3
 800c666:	3710      	adds	r7, #16
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b084      	sub	sp, #16
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c67a:	69db      	ldr	r3, [r3, #28]
 800c67c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800c67e:	2301      	movs	r3, #1
 800c680:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	791b      	ldrb	r3, [r3, #4]
 800c686:	4619      	mov	r1, r3
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f00c fd93 	bl	80191b4 <USBH_LL_GetLastXferSize>
 800c68e:	4603      	mov	r3, r0
 800c690:	2b0d      	cmp	r3, #13
 800c692:	d002      	beq.n	800c69a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800c694:	2302      	movs	r3, #2
 800c696:	73fb      	strb	r3, [r7, #15]
 800c698:	e024      	b.n	800c6e4 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c69e:	4a14      	ldr	r2, [pc, #80]	; (800c6f0 <USBH_MSC_DecodeCSW+0x84>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d11d      	bne.n	800c6e0 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d119      	bne.n	800c6e4 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d102      	bne.n	800c6c0 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	73fb      	strb	r3, [r7, #15]
 800c6be:	e011      	b.n	800c6e4 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	d102      	bne.n	800c6d0 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	73fb      	strb	r3, [r7, #15]
 800c6ce:	e009      	b.n	800c6e4 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c6d6:	2b02      	cmp	r3, #2
 800c6d8:	d104      	bne.n	800c6e4 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800c6da:	2302      	movs	r3, #2
 800c6dc:	73fb      	strb	r3, [r7, #15]
 800c6de:	e001      	b.n	800c6e4 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800c6e0:	2302      	movs	r3, #2
 800c6e2:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800c6e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3710      	adds	r7, #16
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	53425355 	.word	0x53425355

0800c6f4 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c700:	2302      	movs	r3, #2
 800c702:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c70a:	69db      	ldr	r3, [r3, #28]
 800c70c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c714:	2b01      	cmp	r3, #1
 800c716:	d002      	beq.n	800c71e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800c718:	2b02      	cmp	r3, #2
 800c71a:	d021      	beq.n	800c760 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c71c:	e028      	b.n	800c770 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	2200      	movs	r2, #0
 800c722:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	2200      	movs	r2, #0
 800c728:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	220a      	movs	r2, #10
 800c730:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	3363      	adds	r3, #99	; 0x63
 800c738:	2210      	movs	r2, #16
 800c73a:	2100      	movs	r1, #0
 800c73c:	4618      	mov	r0, r3
 800c73e:	f00c fef9 	bl	8019534 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	2200      	movs	r2, #0
 800c746:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	2201      	movs	r2, #1
 800c74e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	2202      	movs	r2, #2
 800c756:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800c75a:	2301      	movs	r3, #1
 800c75c:	73fb      	strb	r3, [r7, #15]
      break;
 800c75e:	e007      	b.n	800c770 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c760:	78fb      	ldrb	r3, [r7, #3]
 800c762:	4619      	mov	r1, r3
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f7ff fd87 	bl	800c278 <USBH_MSC_BOT_Process>
 800c76a:	4603      	mov	r3, r0
 800c76c:	73fb      	strb	r3, [r7, #15]
      break;
 800c76e:	bf00      	nop
  }

  return error;
 800c770:	7bfb      	ldrb	r3, [r7, #15]
}
 800c772:	4618      	mov	r0, r3
 800c774:	3710      	adds	r7, #16
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}

0800c77a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800c77a:	b580      	push	{r7, lr}
 800c77c:	b086      	sub	sp, #24
 800c77e:	af00      	add	r7, sp, #0
 800c780:	60f8      	str	r0, [r7, #12]
 800c782:	460b      	mov	r3, r1
 800c784:	607a      	str	r2, [r7, #4]
 800c786:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800c788:	2301      	movs	r3, #1
 800c78a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c792:	69db      	ldr	r3, [r3, #28]
 800c794:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d002      	beq.n	800c7a6 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800c7a0:	2b02      	cmp	r3, #2
 800c7a2:	d027      	beq.n	800c7f4 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800c7a4:	e05f      	b.n	800c866 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	2208      	movs	r2, #8
 800c7aa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	2280      	movs	r2, #128	; 0x80
 800c7b0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	220a      	movs	r2, #10
 800c7b8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	3363      	adds	r3, #99	; 0x63
 800c7c0:	2210      	movs	r2, #16
 800c7c2:	2100      	movs	r1, #0
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f00c feb5 	bl	8019534 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	2225      	movs	r2, #37	; 0x25
 800c7ce:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	2201      	movs	r2, #1
 800c7d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	2202      	movs	r2, #2
 800c7de:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	f103 0210 	add.w	r2, r3, #16
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	75fb      	strb	r3, [r7, #23]
      break;
 800c7f2:	e038      	b.n	800c866 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c7f4:	7afb      	ldrb	r3, [r7, #11]
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	68f8      	ldr	r0, [r7, #12]
 800c7fa:	f7ff fd3d 	bl	800c278 <USBH_MSC_BOT_Process>
 800c7fe:	4603      	mov	r3, r0
 800c800:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c802:	7dfb      	ldrb	r3, [r7, #23]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d12d      	bne.n	800c864 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c80e:	3303      	adds	r3, #3
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	461a      	mov	r2, r3
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c81a:	3302      	adds	r3, #2
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	021b      	lsls	r3, r3, #8
 800c820:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c828:	3301      	adds	r3, #1
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c82e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	061b      	lsls	r3, r3, #24
 800c83a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c846:	3307      	adds	r3, #7
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	b29a      	uxth	r2, r3
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c852:	3306      	adds	r3, #6
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	b29b      	uxth	r3, r3
 800c858:	021b      	lsls	r3, r3, #8
 800c85a:	b29b      	uxth	r3, r3
 800c85c:	4313      	orrs	r3, r2
 800c85e:	b29a      	uxth	r2, r3
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	809a      	strh	r2, [r3, #4]
      break;
 800c864:	bf00      	nop
  }

  return error;
 800c866:	7dfb      	ldrb	r3, [r7, #23]
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3718      	adds	r7, #24
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b086      	sub	sp, #24
 800c874:	af00      	add	r7, sp, #0
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	460b      	mov	r3, r1
 800c87a:	607a      	str	r2, [r7, #4]
 800c87c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800c87e:	2302      	movs	r3, #2
 800c880:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c888:	69db      	ldr	r3, [r3, #28]
 800c88a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c892:	2b01      	cmp	r3, #1
 800c894:	d002      	beq.n	800c89c <USBH_MSC_SCSI_Inquiry+0x2c>
 800c896:	2b02      	cmp	r3, #2
 800c898:	d03d      	beq.n	800c916 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800c89a:	e089      	b.n	800c9b0 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	2224      	movs	r2, #36	; 0x24
 800c8a0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	2280      	movs	r2, #128	; 0x80
 800c8a6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	220a      	movs	r2, #10
 800c8ae:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	3363      	adds	r3, #99	; 0x63
 800c8b6:	220a      	movs	r2, #10
 800c8b8:	2100      	movs	r1, #0
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f00c fe3a 	bl	8019534 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	2212      	movs	r2, #18
 800c8c4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800c8c8:	7afb      	ldrb	r3, [r7, #11]
 800c8ca:	015b      	lsls	r3, r3, #5
 800c8cc:	b2da      	uxtb	r2, r3
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	2224      	movs	r2, #36	; 0x24
 800c8e8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	2202      	movs	r2, #2
 800c900:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	f103 0210 	add.w	r2, r3, #16
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c910:	2301      	movs	r3, #1
 800c912:	75fb      	strb	r3, [r7, #23]
      break;
 800c914:	e04c      	b.n	800c9b0 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c916:	7afb      	ldrb	r3, [r7, #11]
 800c918:	4619      	mov	r1, r3
 800c91a:	68f8      	ldr	r0, [r7, #12]
 800c91c:	f7ff fcac 	bl	800c278 <USBH_MSC_BOT_Process>
 800c920:	4603      	mov	r3, r0
 800c922:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c924:	7dfb      	ldrb	r3, [r7, #23]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d141      	bne.n	800c9ae <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800c92a:	2222      	movs	r2, #34	; 0x22
 800c92c:	2100      	movs	r1, #0
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f00c fe00 	bl	8019534 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c93a:	781b      	ldrb	r3, [r3, #0]
 800c93c:	f003 031f 	and.w	r3, r3, #31
 800c940:	b2da      	uxtb	r2, r3
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	095b      	lsrs	r3, r3, #5
 800c950:	b2da      	uxtb	r2, r3
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c95c:	3301      	adds	r3, #1
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	b25b      	sxtb	r3, r3
 800c962:	2b00      	cmp	r3, #0
 800c964:	da03      	bge.n	800c96e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2201      	movs	r2, #1
 800c96a:	709a      	strb	r2, [r3, #2]
 800c96c:	e002      	b.n	800c974 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2200      	movs	r2, #0
 800c972:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	1cd8      	adds	r0, r3, #3
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c97e:	3308      	adds	r3, #8
 800c980:	2208      	movs	r2, #8
 800c982:	4619      	mov	r1, r3
 800c984:	f00c fdc8 	bl	8019518 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f103 000c 	add.w	r0, r3, #12
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c994:	3310      	adds	r3, #16
 800c996:	2210      	movs	r2, #16
 800c998:	4619      	mov	r1, r3
 800c99a:	f00c fdbd 	bl	8019518 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	331d      	adds	r3, #29
 800c9a2:	693a      	ldr	r2, [r7, #16]
 800c9a4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800c9a8:	3220      	adds	r2, #32
 800c9aa:	6812      	ldr	r2, [r2, #0]
 800c9ac:	601a      	str	r2, [r3, #0]
      break;
 800c9ae:	bf00      	nop
  }

  return error;
 800c9b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3718      	adds	r7, #24
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b086      	sub	sp, #24
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	60f8      	str	r0, [r7, #12]
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	607a      	str	r2, [r7, #4]
 800c9c6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c9c8:	2302      	movs	r3, #2
 800c9ca:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c9d2:	69db      	ldr	r3, [r3, #28]
 800c9d4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d002      	beq.n	800c9e6 <USBH_MSC_SCSI_RequestSense+0x2c>
 800c9e0:	2b02      	cmp	r3, #2
 800c9e2:	d03d      	beq.n	800ca60 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800c9e4:	e05d      	b.n	800caa2 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	220e      	movs	r2, #14
 800c9ea:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	2280      	movs	r2, #128	; 0x80
 800c9f0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	220a      	movs	r2, #10
 800c9f8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	3363      	adds	r3, #99	; 0x63
 800ca00:	2210      	movs	r2, #16
 800ca02:	2100      	movs	r1, #0
 800ca04:	4618      	mov	r0, r3
 800ca06:	f00c fd95 	bl	8019534 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	2203      	movs	r2, #3
 800ca0e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800ca12:	7afb      	ldrb	r3, [r7, #11]
 800ca14:	015b      	lsls	r3, r3, #5
 800ca16:	b2da      	uxtb	r2, r3
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	2200      	movs	r2, #0
 800ca22:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	220e      	movs	r2, #14
 800ca32:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	2201      	movs	r2, #1
 800ca42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	2202      	movs	r2, #2
 800ca4a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	f103 0210 	add.w	r2, r3, #16
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	75fb      	strb	r3, [r7, #23]
      break;
 800ca5e:	e020      	b.n	800caa2 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ca60:	7afb      	ldrb	r3, [r7, #11]
 800ca62:	4619      	mov	r1, r3
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	f7ff fc07 	bl	800c278 <USBH_MSC_BOT_Process>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ca6e:	7dfb      	ldrb	r3, [r7, #23]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d115      	bne.n	800caa0 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca7a:	3302      	adds	r3, #2
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	f003 030f 	and.w	r3, r3, #15
 800ca82:	b2da      	uxtb	r2, r3
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca8e:	7b1a      	ldrb	r2, [r3, #12]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca9a:	7b5a      	ldrb	r2, [r3, #13]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	709a      	strb	r2, [r3, #2]
      break;
 800caa0:	bf00      	nop
  }

  return error;
 800caa2:	7dfb      	ldrb	r3, [r7, #23]
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3718      	adds	r7, #24
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b086      	sub	sp, #24
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	60f8      	str	r0, [r7, #12]
 800cab4:	607a      	str	r2, [r7, #4]
 800cab6:	603b      	str	r3, [r7, #0]
 800cab8:	460b      	mov	r3, r1
 800caba:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800cabc:	2302      	movs	r3, #2
 800cabe:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cac6:	69db      	ldr	r3, [r3, #28]
 800cac8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	d002      	beq.n	800cada <USBH_MSC_SCSI_Write+0x2e>
 800cad4:	2b02      	cmp	r3, #2
 800cad6:	d047      	beq.n	800cb68 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800cad8:	e04e      	b.n	800cb78 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800cae0:	461a      	mov	r2, r3
 800cae2:	6a3b      	ldr	r3, [r7, #32]
 800cae4:	fb03 f202 	mul.w	r2, r3, r2
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	2200      	movs	r2, #0
 800caf0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	220a      	movs	r2, #10
 800caf8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	3363      	adds	r3, #99	; 0x63
 800cb00:	2210      	movs	r2, #16
 800cb02:	2100      	movs	r1, #0
 800cb04:	4618      	mov	r0, r3
 800cb06:	f00c fd15 	bl	8019534 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	222a      	movs	r2, #42	; 0x2a
 800cb0e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800cb12:	79fa      	ldrb	r2, [r7, #7]
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800cb1a:	79ba      	ldrb	r2, [r7, #6]
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800cb22:	797a      	ldrb	r2, [r7, #5]
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800cb2a:	1d3b      	adds	r3, r7, #4
 800cb2c:	781a      	ldrb	r2, [r3, #0]
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800cb34:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800cb3e:	f107 0320 	add.w	r3, r7, #32
 800cb42:	781a      	ldrb	r2, [r3, #0]
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	2202      	movs	r2, #2
 800cb56:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	683a      	ldr	r2, [r7, #0]
 800cb5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800cb62:	2301      	movs	r3, #1
 800cb64:	75fb      	strb	r3, [r7, #23]
      break;
 800cb66:	e007      	b.n	800cb78 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800cb68:	7afb      	ldrb	r3, [r7, #11]
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	68f8      	ldr	r0, [r7, #12]
 800cb6e:	f7ff fb83 	bl	800c278 <USBH_MSC_BOT_Process>
 800cb72:	4603      	mov	r3, r0
 800cb74:	75fb      	strb	r3, [r7, #23]
      break;
 800cb76:	bf00      	nop
  }

  return error;
 800cb78:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3718      	adds	r7, #24
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b086      	sub	sp, #24
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	60f8      	str	r0, [r7, #12]
 800cb8a:	607a      	str	r2, [r7, #4]
 800cb8c:	603b      	str	r3, [r7, #0]
 800cb8e:	460b      	mov	r3, r1
 800cb90:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800cb92:	2302      	movs	r3, #2
 800cb94:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb9c:	69db      	ldr	r3, [r3, #28]
 800cb9e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800cba6:	2b01      	cmp	r3, #1
 800cba8:	d002      	beq.n	800cbb0 <USBH_MSC_SCSI_Read+0x2e>
 800cbaa:	2b02      	cmp	r3, #2
 800cbac:	d047      	beq.n	800cc3e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800cbae:	e04e      	b.n	800cc4e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	6a3b      	ldr	r3, [r7, #32]
 800cbba:	fb03 f202 	mul.w	r2, r3, r2
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	2280      	movs	r2, #128	; 0x80
 800cbc6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	220a      	movs	r2, #10
 800cbce:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	3363      	adds	r3, #99	; 0x63
 800cbd6:	2210      	movs	r2, #16
 800cbd8:	2100      	movs	r1, #0
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f00c fcaa 	bl	8019534 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	2228      	movs	r2, #40	; 0x28
 800cbe4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800cbe8:	79fa      	ldrb	r2, [r7, #7]
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800cbf0:	79ba      	ldrb	r2, [r7, #6]
 800cbf2:	693b      	ldr	r3, [r7, #16]
 800cbf4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800cbf8:	797a      	ldrb	r2, [r7, #5]
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800cc00:	1d3b      	adds	r3, r7, #4
 800cc02:	781a      	ldrb	r2, [r3, #0]
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800cc0a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800cc14:	f107 0320 	add.w	r3, r7, #32
 800cc18:	781a      	ldrb	r2, [r3, #0]
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	2201      	movs	r2, #1
 800cc24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	2202      	movs	r2, #2
 800cc2c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	683a      	ldr	r2, [r7, #0]
 800cc34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	75fb      	strb	r3, [r7, #23]
      break;
 800cc3c:	e007      	b.n	800cc4e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800cc3e:	7afb      	ldrb	r3, [r7, #11]
 800cc40:	4619      	mov	r1, r3
 800cc42:	68f8      	ldr	r0, [r7, #12]
 800cc44:	f7ff fb18 	bl	800c278 <USBH_MSC_BOT_Process>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	75fb      	strb	r3, [r7, #23]
      break;
 800cc4c:	bf00      	nop
  }

  return error;
 800cc4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3718      	adds	r7, #24
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	60b9      	str	r1, [r7, #8]
 800cc62:	4613      	mov	r3, r2
 800cc64:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d10a      	bne.n	800cc82 <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800cc6c:	481c      	ldr	r0, [pc, #112]	; (800cce0 <USBH_Init+0x88>)
 800cc6e:	f00d f97d 	bl	8019f6c <iprintf>
 800cc72:	481c      	ldr	r0, [pc, #112]	; (800cce4 <USBH_Init+0x8c>)
 800cc74:	f00d f97a 	bl	8019f6c <iprintf>
 800cc78:	200a      	movs	r0, #10
 800cc7a:	f00d f98f 	bl	8019f9c <putchar>
    return USBH_FAIL;
 800cc7e:	2302      	movs	r3, #2
 800cc80:	e029      	b.n	800ccd6 <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	79fa      	ldrb	r2, [r7, #7]
 800cc86:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2200      	movs	r2, #0
 800cc96:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800cc9a:	68f8      	ldr	r0, [r7, #12]
 800cc9c:	f000 f824 	bl	800cce8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	2200      	movs	r2, #0
 800cca4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d003      	beq.n	800ccce <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	68ba      	ldr	r2, [r7, #8]
 800ccca:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800ccce:	68f8      	ldr	r0, [r7, #12]
 800ccd0:	f00c f9bc 	bl	801904c <USBH_LL_Init>

  return USBH_OK;
 800ccd4:	2300      	movs	r3, #0
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3710      	adds	r7, #16
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	0801c308 	.word	0x0801c308
 800cce4:	0801c310 	.word	0x0801c310

0800cce8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b085      	sub	sp, #20
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	60fb      	str	r3, [r7, #12]
 800ccf8:	e009      	b.n	800cd0e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ccfa:	687a      	ldr	r2, [r7, #4]
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	33e0      	adds	r3, #224	; 0xe0
 800cd00:	009b      	lsls	r3, r3, #2
 800cd02:	4413      	add	r3, r2
 800cd04:	2200      	movs	r2, #0
 800cd06:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	60fb      	str	r3, [r7, #12]
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	2b0e      	cmp	r3, #14
 800cd12:	d9f2      	bls.n	800ccfa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cd14:	2300      	movs	r3, #0
 800cd16:	60fb      	str	r3, [r7, #12]
 800cd18:	e009      	b.n	800cd2e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800cd1a:	687a      	ldr	r2, [r7, #4]
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	4413      	add	r3, r2
 800cd20:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cd24:	2200      	movs	r2, #0
 800cd26:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	60fb      	str	r3, [r7, #12]
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd34:	d3f1      	bcc.n	800cd1a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2200      	movs	r2, #0
 800cd3a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2201      	movs	r2, #1
 800cd46:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2201      	movs	r2, #1
 800cd54:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2240      	movs	r2, #64	; 0x40
 800cd5a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2200      	movs	r2, #0
 800cd66:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2200      	movs	r2, #0
 800cd76:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800cd82:	2300      	movs	r3, #0
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	3714      	adds	r7, #20
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr

0800cd90 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b084      	sub	sp, #16
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d01f      	beq.n	800cde4 <USBH_RegisterClass+0x54>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d10e      	bne.n	800cdcc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cdb4:	1c59      	adds	r1, r3, #1
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800cdbc:	687a      	ldr	r2, [r7, #4]
 800cdbe:	33de      	adds	r3, #222	; 0xde
 800cdc0:	6839      	ldr	r1, [r7, #0]
 800cdc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	73fb      	strb	r3, [r7, #15]
 800cdca:	e016      	b.n	800cdfa <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800cdcc:	480d      	ldr	r0, [pc, #52]	; (800ce04 <USBH_RegisterClass+0x74>)
 800cdce:	f00d f8cd 	bl	8019f6c <iprintf>
 800cdd2:	480d      	ldr	r0, [pc, #52]	; (800ce08 <USBH_RegisterClass+0x78>)
 800cdd4:	f00d f8ca 	bl	8019f6c <iprintf>
 800cdd8:	200a      	movs	r0, #10
 800cdda:	f00d f8df 	bl	8019f9c <putchar>
      status = USBH_FAIL;
 800cdde:	2302      	movs	r3, #2
 800cde0:	73fb      	strb	r3, [r7, #15]
 800cde2:	e00a      	b.n	800cdfa <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800cde4:	4807      	ldr	r0, [pc, #28]	; (800ce04 <USBH_RegisterClass+0x74>)
 800cde6:	f00d f8c1 	bl	8019f6c <iprintf>
 800cdea:	4808      	ldr	r0, [pc, #32]	; (800ce0c <USBH_RegisterClass+0x7c>)
 800cdec:	f00d f8be 	bl	8019f6c <iprintf>
 800cdf0:	200a      	movs	r0, #10
 800cdf2:	f00d f8d3 	bl	8019f9c <putchar>
    status = USBH_FAIL;
 800cdf6:	2302      	movs	r3, #2
 800cdf8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cdfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3710      	adds	r7, #16
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}
 800ce04:	0801c308 	.word	0x0801c308
 800ce08:	0801c324 	.word	0x0801c324
 800ce0c:	0801c340 	.word	0x0801c340

0800ce10 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b084      	sub	sp, #16
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	460b      	mov	r3, r1
 800ce1a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800ce26:	78fa      	ldrb	r2, [r7, #3]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d23c      	bcs.n	800cea6 <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	78fa      	ldrb	r2, [r7, #3]
 800ce30:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800ce34:	78fb      	ldrb	r3, [r7, #3]
 800ce36:	4619      	mov	r1, r3
 800ce38:	4823      	ldr	r0, [pc, #140]	; (800cec8 <USBH_SelectInterface+0xb8>)
 800ce3a:	f00d f897 	bl	8019f6c <iprintf>
 800ce3e:	200a      	movs	r0, #10
 800ce40:	f00d f8ac 	bl	8019f9c <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800ce44:	78fb      	ldrb	r3, [r7, #3]
 800ce46:	687a      	ldr	r2, [r7, #4]
 800ce48:	211a      	movs	r1, #26
 800ce4a:	fb01 f303 	mul.w	r3, r1, r3
 800ce4e:	4413      	add	r3, r2
 800ce50:	f203 3347 	addw	r3, r3, #839	; 0x347
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	4619      	mov	r1, r3
 800ce58:	481c      	ldr	r0, [pc, #112]	; (800cecc <USBH_SelectInterface+0xbc>)
 800ce5a:	f00d f887 	bl	8019f6c <iprintf>
 800ce5e:	200a      	movs	r0, #10
 800ce60:	f00d f89c 	bl	8019f9c <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800ce64:	78fb      	ldrb	r3, [r7, #3]
 800ce66:	687a      	ldr	r2, [r7, #4]
 800ce68:	211a      	movs	r1, #26
 800ce6a:	fb01 f303 	mul.w	r3, r1, r3
 800ce6e:	4413      	add	r3, r2
 800ce70:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800ce74:	781b      	ldrb	r3, [r3, #0]
 800ce76:	4619      	mov	r1, r3
 800ce78:	4815      	ldr	r0, [pc, #84]	; (800ced0 <USBH_SelectInterface+0xc0>)
 800ce7a:	f00d f877 	bl	8019f6c <iprintf>
 800ce7e:	200a      	movs	r0, #10
 800ce80:	f00d f88c 	bl	8019f9c <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800ce84:	78fb      	ldrb	r3, [r7, #3]
 800ce86:	687a      	ldr	r2, [r7, #4]
 800ce88:	211a      	movs	r1, #26
 800ce8a:	fb01 f303 	mul.w	r3, r1, r3
 800ce8e:	4413      	add	r3, r2
 800ce90:	f203 3349 	addw	r3, r3, #841	; 0x349
 800ce94:	781b      	ldrb	r3, [r3, #0]
 800ce96:	4619      	mov	r1, r3
 800ce98:	480e      	ldr	r0, [pc, #56]	; (800ced4 <USBH_SelectInterface+0xc4>)
 800ce9a:	f00d f867 	bl	8019f6c <iprintf>
 800ce9e:	200a      	movs	r0, #10
 800cea0:	f00d f87c 	bl	8019f9c <putchar>
 800cea4:	e00a      	b.n	800cebc <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800cea6:	480c      	ldr	r0, [pc, #48]	; (800ced8 <USBH_SelectInterface+0xc8>)
 800cea8:	f00d f860 	bl	8019f6c <iprintf>
 800ceac:	480b      	ldr	r0, [pc, #44]	; (800cedc <USBH_SelectInterface+0xcc>)
 800ceae:	f00d f85d 	bl	8019f6c <iprintf>
 800ceb2:	200a      	movs	r0, #10
 800ceb4:	f00d f872 	bl	8019f9c <putchar>
    status = USBH_FAIL;
 800ceb8:	2302      	movs	r3, #2
 800ceba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cebc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3710      	adds	r7, #16
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	0801c358 	.word	0x0801c358
 800cecc:	0801c378 	.word	0x0801c378
 800ced0:	0801c388 	.word	0x0801c388
 800ced4:	0801c398 	.word	0x0801c398
 800ced8:	0801c308 	.word	0x0801c308
 800cedc:	0801c3a8 	.word	0x0801c3a8

0800cee0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b087      	sub	sp, #28
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	4608      	mov	r0, r1
 800ceea:	4611      	mov	r1, r2
 800ceec:	461a      	mov	r2, r3
 800ceee:	4603      	mov	r3, r0
 800cef0:	70fb      	strb	r3, [r7, #3]
 800cef2:	460b      	mov	r3, r1
 800cef4:	70bb      	strb	r3, [r7, #2]
 800cef6:	4613      	mov	r3, r2
 800cef8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800cefa:	2300      	movs	r3, #0
 800cefc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800cefe:	2300      	movs	r3, #0
 800cf00:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800cf08:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cf0a:	e025      	b.n	800cf58 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800cf0c:	7dfb      	ldrb	r3, [r7, #23]
 800cf0e:	221a      	movs	r2, #26
 800cf10:	fb02 f303 	mul.w	r3, r2, r3
 800cf14:	3308      	adds	r3, #8
 800cf16:	68fa      	ldr	r2, [r7, #12]
 800cf18:	4413      	add	r3, r2
 800cf1a:	3302      	adds	r3, #2
 800cf1c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	795b      	ldrb	r3, [r3, #5]
 800cf22:	78fa      	ldrb	r2, [r7, #3]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d002      	beq.n	800cf2e <USBH_FindInterface+0x4e>
 800cf28:	78fb      	ldrb	r3, [r7, #3]
 800cf2a:	2bff      	cmp	r3, #255	; 0xff
 800cf2c:	d111      	bne.n	800cf52 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800cf32:	78ba      	ldrb	r2, [r7, #2]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d002      	beq.n	800cf3e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cf38:	78bb      	ldrb	r3, [r7, #2]
 800cf3a:	2bff      	cmp	r3, #255	; 0xff
 800cf3c:	d109      	bne.n	800cf52 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cf42:	787a      	ldrb	r2, [r7, #1]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d002      	beq.n	800cf4e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cf48:	787b      	ldrb	r3, [r7, #1]
 800cf4a:	2bff      	cmp	r3, #255	; 0xff
 800cf4c:	d101      	bne.n	800cf52 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800cf4e:	7dfb      	ldrb	r3, [r7, #23]
 800cf50:	e006      	b.n	800cf60 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800cf52:	7dfb      	ldrb	r3, [r7, #23]
 800cf54:	3301      	adds	r3, #1
 800cf56:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cf58:	7dfb      	ldrb	r3, [r7, #23]
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d9d6      	bls.n	800cf0c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800cf5e:	23ff      	movs	r3, #255	; 0xff
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	371c      	adds	r7, #28
 800cf64:	46bd      	mov	sp, r7
 800cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6a:	4770      	bx	lr

0800cf6c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f00c f8a5 	bl	80190c4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800cf7a:	2101      	movs	r1, #1
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f00c f9be 	bl	80192fe <USBH_LL_DriverVBUS>

  return USBH_OK;
 800cf82:	2300      	movs	r3, #0
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3708      	adds	r7, #8
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b088      	sub	sp, #32
 800cf90:	af04      	add	r7, sp, #16
 800cf92:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800cf94:	2302      	movs	r3, #2
 800cf96:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800cfa2:	b2db      	uxtb	r3, r3
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d102      	bne.n	800cfae <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2203      	movs	r2, #3
 800cfac:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	2b0b      	cmp	r3, #11
 800cfb6:	f200 822b 	bhi.w	800d410 <USBH_Process+0x484>
 800cfba:	a201      	add	r2, pc, #4	; (adr r2, 800cfc0 <USBH_Process+0x34>)
 800cfbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfc0:	0800cff1 	.word	0x0800cff1
 800cfc4:	0800d02f 	.word	0x0800d02f
 800cfc8:	0800d0af 	.word	0x0800d0af
 800cfcc:	0800d39f 	.word	0x0800d39f
 800cfd0:	0800d411 	.word	0x0800d411
 800cfd4:	0800d153 	.word	0x0800d153
 800cfd8:	0800d321 	.word	0x0800d321
 800cfdc:	0800d1a1 	.word	0x0800d1a1
 800cfe0:	0800d1c1 	.word	0x0800d1c1
 800cfe4:	0800d1ed 	.word	0x0800d1ed
 800cfe8:	0800d227 	.word	0x0800d227
 800cfec:	0800d387 	.word	0x0800d387
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800cff6:	b2db      	uxtb	r3, r3
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	f000 820b 	beq.w	800d414 <USBH_Process+0x488>
      {
        USBH_UsrLog("USB Device Connected");
 800cffe:	48b9      	ldr	r0, [pc, #740]	; (800d2e4 <USBH_Process+0x358>)
 800d000:	f00c ffb4 	bl	8019f6c <iprintf>
 800d004:	200a      	movs	r0, #10
 800d006:	f00c ffc9 	bl	8019f9c <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2201      	movs	r2, #1
 800d00e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800d010:	20c8      	movs	r0, #200	; 0xc8
 800d012:	f00c f9eb 	bl	80193ec <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f00c f8b1 	bl	801917e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2200      	movs	r2, #0
 800d020:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2200      	movs	r2, #0
 800d028:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d02c:	e1f2      	b.n	800d414 <USBH_Process+0x488>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800d034:	2b01      	cmp	r3, #1
 800d036:	d10d      	bne.n	800d054 <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800d038:	48ab      	ldr	r0, [pc, #684]	; (800d2e8 <USBH_Process+0x35c>)
 800d03a:	f00c ff97 	bl	8019f6c <iprintf>
 800d03e:	200a      	movs	r0, #10
 800d040:	f00c ffac 	bl	8019f9c <putchar>
        phost->device.RstCnt = 0U;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2200      	movs	r2, #0
 800d048:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2202      	movs	r2, #2
 800d050:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d052:	e1ec      	b.n	800d42e <USBH_Process+0x4a2>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d05a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d05e:	d91a      	bls.n	800d096 <USBH_Process+0x10a>
          phost->device.RstCnt++;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d066:	3301      	adds	r3, #1
 800d068:	b2da      	uxtb	r2, r3
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d076:	2b03      	cmp	r3, #3
 800d078:	d909      	bls.n	800d08e <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800d07a:	489c      	ldr	r0, [pc, #624]	; (800d2ec <USBH_Process+0x360>)
 800d07c:	f00c ff76 	bl	8019f6c <iprintf>
 800d080:	200a      	movs	r0, #10
 800d082:	f00c ff8b 	bl	8019f9c <putchar>
            phost->gState = HOST_ABORT_STATE;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	220d      	movs	r2, #13
 800d08a:	701a      	strb	r2, [r3, #0]
      break;
 800d08c:	e1cf      	b.n	800d42e <USBH_Process+0x4a2>
            phost->gState = HOST_IDLE;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2200      	movs	r2, #0
 800d092:	701a      	strb	r2, [r3, #0]
      break;
 800d094:	e1cb      	b.n	800d42e <USBH_Process+0x4a2>
          phost->Timeout += 10U;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d09c:	f103 020a 	add.w	r2, r3, #10
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800d0a6:	200a      	movs	r0, #10
 800d0a8:	f00c f9a0 	bl	80193ec <USBH_Delay>
      break;
 800d0ac:	e1bf      	b.n	800d42e <USBH_Process+0x4a2>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d005      	beq.n	800d0c4 <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d0be:	2104      	movs	r1, #4
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800d0c4:	2064      	movs	r0, #100	; 0x64
 800d0c6:	f00c f991 	bl	80193ec <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f00c f830 	bl	8019130 <USBH_LL_GetSpeed>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2205      	movs	r2, #5
 800d0de:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d0e0:	2100      	movs	r1, #0
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f001 fa77 	bl	800e5d6 <USBH_AllocPipe>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d0f0:	2180      	movs	r1, #128	; 0x80
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f001 fa6f 	bl	800e5d6 <USBH_AllocPipe>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	461a      	mov	r2, r3
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	7919      	ldrb	r1, [r3, #4]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d110:	687a      	ldr	r2, [r7, #4]
 800d112:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d114:	b292      	uxth	r2, r2
 800d116:	9202      	str	r2, [sp, #8]
 800d118:	2200      	movs	r2, #0
 800d11a:	9201      	str	r2, [sp, #4]
 800d11c:	9300      	str	r3, [sp, #0]
 800d11e:	4603      	mov	r3, r0
 800d120:	2280      	movs	r2, #128	; 0x80
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f001 fa28 	bl	800e578 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	7959      	ldrb	r1, [r3, #5]
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d138:	687a      	ldr	r2, [r7, #4]
 800d13a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d13c:	b292      	uxth	r2, r2
 800d13e:	9202      	str	r2, [sp, #8]
 800d140:	2200      	movs	r2, #0
 800d142:	9201      	str	r2, [sp, #4]
 800d144:	9300      	str	r3, [sp, #0]
 800d146:	4603      	mov	r3, r0
 800d148:	2200      	movs	r2, #0
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f001 fa14 	bl	800e578 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d150:	e16d      	b.n	800d42e <USBH_Process+0x4a2>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f000 f97a 	bl	800d44c <USBH_HandleEnum>
 800d158:	4603      	mov	r3, r0
 800d15a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d15c:	7bbb      	ldrb	r3, [r7, #14]
 800d15e:	b2db      	uxtb	r3, r3
 800d160:	2b00      	cmp	r3, #0
 800d162:	f040 8159 	bne.w	800d418 <USBH_Process+0x48c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800d166:	4862      	ldr	r0, [pc, #392]	; (800d2f0 <USBH_Process+0x364>)
 800d168:	f00c ff00 	bl	8019f6c <iprintf>
 800d16c:	200a      	movs	r0, #10
 800d16e:	f00c ff15 	bl	8019f9c <putchar>

        phost->device.current_interface = 0U;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2200      	movs	r2, #0
 800d176:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800d180:	2b01      	cmp	r3, #1
 800d182:	d109      	bne.n	800d198 <USBH_Process+0x20c>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800d184:	485b      	ldr	r0, [pc, #364]	; (800d2f4 <USBH_Process+0x368>)
 800d186:	f00c fef1 	bl	8019f6c <iprintf>
 800d18a:	200a      	movs	r0, #10
 800d18c:	f00c ff06 	bl	8019f9c <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2208      	movs	r2, #8
 800d194:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d196:	e13f      	b.n	800d418 <USBH_Process+0x48c>
          phost->gState = HOST_INPUT;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2207      	movs	r2, #7
 800d19c:	701a      	strb	r2, [r3, #0]
      break;
 800d19e:	e13b      	b.n	800d418 <USBH_Process+0x48c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	f000 8138 	beq.w	800d41c <USBH_Process+0x490>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d1b2:	2101      	movs	r1, #1
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2208      	movs	r2, #8
 800d1bc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800d1be:	e12d      	b.n	800d41c <USBH_Process+0x490>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800d1c6:	b29b      	uxth	r3, r3
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f000 fd4e 	bl	800dc6c <USBH_SetCfg>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	f040 8124 	bne.w	800d420 <USBH_Process+0x494>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2209      	movs	r2, #9
 800d1dc:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800d1de:	4846      	ldr	r0, [pc, #280]	; (800d2f8 <USBH_Process+0x36c>)
 800d1e0:	f00c fec4 	bl	8019f6c <iprintf>
 800d1e4:	200a      	movs	r0, #10
 800d1e6:	f00c fed9 	bl	8019f9c <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d1ea:	e119      	b.n	800d420 <USBH_Process+0x494>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800d1f2:	f003 0320 	and.w	r3, r3, #32
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d011      	beq.n	800d21e <USBH_Process+0x292>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800d1fa:	2101      	movs	r1, #1
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f000 fd58 	bl	800dcb2 <USBH_SetFeature>
 800d202:	4603      	mov	r3, r0
 800d204:	2b00      	cmp	r3, #0
 800d206:	f040 810d 	bne.w	800d424 <USBH_Process+0x498>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800d20a:	483c      	ldr	r0, [pc, #240]	; (800d2fc <USBH_Process+0x370>)
 800d20c:	f00c feae 	bl	8019f6c <iprintf>
 800d210:	200a      	movs	r0, #10
 800d212:	f00c fec3 	bl	8019f9c <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	220a      	movs	r2, #10
 800d21a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d21c:	e102      	b.n	800d424 <USBH_Process+0x498>
        phost->gState = HOST_CHECK_CLASS;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	220a      	movs	r2, #10
 800d222:	701a      	strb	r2, [r3, #0]
      break;
 800d224:	e0fe      	b.n	800d424 <USBH_Process+0x498>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d106      	bne.n	800d23e <USBH_Process+0x2b2>
      {
        USBH_UsrLog("No Class has been registered.");
 800d230:	4833      	ldr	r0, [pc, #204]	; (800d300 <USBH_Process+0x374>)
 800d232:	f00c fe9b 	bl	8019f6c <iprintf>
 800d236:	200a      	movs	r0, #10
 800d238:	f00c feb0 	bl	8019f9c <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d23c:	e0f7      	b.n	800d42e <USBH_Process+0x4a2>
        phost->pActiveClass = NULL;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2200      	movs	r2, #0
 800d242:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d246:	2300      	movs	r3, #0
 800d248:	73fb      	strb	r3, [r7, #15]
 800d24a:	e016      	b.n	800d27a <USBH_Process+0x2ee>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d24c:	7bfa      	ldrb	r2, [r7, #15]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	32de      	adds	r2, #222	; 0xde
 800d252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d256:	791a      	ldrb	r2, [r3, #4]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800d25e:	429a      	cmp	r2, r3
 800d260:	d108      	bne.n	800d274 <USBH_Process+0x2e8>
            phost->pActiveClass = phost->pClass[idx];
 800d262:	7bfa      	ldrb	r2, [r7, #15]
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	32de      	adds	r2, #222	; 0xde
 800d268:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800d272:	e005      	b.n	800d280 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d274:	7bfb      	ldrb	r3, [r7, #15]
 800d276:	3301      	adds	r3, #1
 800d278:	73fb      	strb	r3, [r7, #15]
 800d27a:	7bfb      	ldrb	r3, [r7, #15]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d0e5      	beq.n	800d24c <USBH_Process+0x2c0>
        if (phost->pActiveClass != NULL)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d286:	2b00      	cmp	r3, #0
 800d288:	d040      	beq.n	800d30c <USBH_Process+0x380>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d290:	689b      	ldr	r3, [r3, #8]
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	4798      	blx	r3
 800d296:	4603      	mov	r3, r0
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d114      	bne.n	800d2c6 <USBH_Process+0x33a>
            phost->gState = HOST_CLASS_REQUEST;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2206      	movs	r2, #6
 800d2a0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	4815      	ldr	r0, [pc, #84]	; (800d304 <USBH_Process+0x378>)
 800d2ae:	f00c fe5d 	bl	8019f6c <iprintf>
 800d2b2:	200a      	movs	r0, #10
 800d2b4:	f00c fe72 	bl	8019f9c <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d2be:	2103      	movs	r1, #3
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	4798      	blx	r3
      break;
 800d2c4:	e0b3      	b.n	800d42e <USBH_Process+0x4a2>
            phost->gState = HOST_ABORT_STATE;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	220d      	movs	r2, #13
 800d2ca:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	480c      	ldr	r0, [pc, #48]	; (800d308 <USBH_Process+0x37c>)
 800d2d8:	f00c fe48 	bl	8019f6c <iprintf>
 800d2dc:	200a      	movs	r0, #10
 800d2de:	f00c fe5d 	bl	8019f9c <putchar>
      break;
 800d2e2:	e0a4      	b.n	800d42e <USBH_Process+0x4a2>
 800d2e4:	0801c3c8 	.word	0x0801c3c8
 800d2e8:	0801c3e0 	.word	0x0801c3e0
 800d2ec:	0801c3fc 	.word	0x0801c3fc
 800d2f0:	0801c428 	.word	0x0801c428
 800d2f4:	0801c43c 	.word	0x0801c43c
 800d2f8:	0801c464 	.word	0x0801c464
 800d2fc:	0801c480 	.word	0x0801c480
 800d300:	0801c4a0 	.word	0x0801c4a0
 800d304:	0801c4c0 	.word	0x0801c4c0
 800d308:	0801c4d4 	.word	0x0801c4d4
          phost->gState = HOST_ABORT_STATE;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	220d      	movs	r2, #13
 800d310:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800d312:	4849      	ldr	r0, [pc, #292]	; (800d438 <USBH_Process+0x4ac>)
 800d314:	f00c fe2a 	bl	8019f6c <iprintf>
 800d318:	200a      	movs	r0, #10
 800d31a:	f00c fe3f 	bl	8019f9c <putchar>
      break;
 800d31e:	e086      	b.n	800d42e <USBH_Process+0x4a2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d326:	2b00      	cmp	r3, #0
 800d328:	d020      	beq.n	800d36c <USBH_Process+0x3e0>
      {
        status = phost->pActiveClass->Requests(phost);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d330:	691b      	ldr	r3, [r3, #16]
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	4798      	blx	r3
 800d336:	4603      	mov	r3, r0
 800d338:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d33a:	7bbb      	ldrb	r3, [r7, #14]
 800d33c:	b2db      	uxtb	r3, r3
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d103      	bne.n	800d34a <USBH_Process+0x3be>
        {
          phost->gState = HOST_CLASS;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	220b      	movs	r2, #11
 800d346:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d348:	e06e      	b.n	800d428 <USBH_Process+0x49c>
        else if (status == USBH_FAIL)
 800d34a:	7bbb      	ldrb	r3, [r7, #14]
 800d34c:	b2db      	uxtb	r3, r3
 800d34e:	2b02      	cmp	r3, #2
 800d350:	d16a      	bne.n	800d428 <USBH_Process+0x49c>
          phost->gState = HOST_ABORT_STATE;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	220d      	movs	r2, #13
 800d356:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800d358:	4838      	ldr	r0, [pc, #224]	; (800d43c <USBH_Process+0x4b0>)
 800d35a:	f00c fe07 	bl	8019f6c <iprintf>
 800d35e:	4838      	ldr	r0, [pc, #224]	; (800d440 <USBH_Process+0x4b4>)
 800d360:	f00c fe04 	bl	8019f6c <iprintf>
 800d364:	200a      	movs	r0, #10
 800d366:	f00c fe19 	bl	8019f9c <putchar>
      break;
 800d36a:	e05d      	b.n	800d428 <USBH_Process+0x49c>
        phost->gState = HOST_ABORT_STATE;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	220d      	movs	r2, #13
 800d370:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800d372:	4832      	ldr	r0, [pc, #200]	; (800d43c <USBH_Process+0x4b0>)
 800d374:	f00c fdfa 	bl	8019f6c <iprintf>
 800d378:	4832      	ldr	r0, [pc, #200]	; (800d444 <USBH_Process+0x4b8>)
 800d37a:	f00c fdf7 	bl	8019f6c <iprintf>
 800d37e:	200a      	movs	r0, #10
 800d380:	f00c fe0c 	bl	8019f9c <putchar>
      break;
 800d384:	e050      	b.n	800d428 <USBH_Process+0x49c>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d04d      	beq.n	800d42c <USBH_Process+0x4a0>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d396:	695b      	ldr	r3, [r3, #20]
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	4798      	blx	r3
      }
      break;
 800d39c:	e046      	b.n	800d42c <USBH_Process+0x4a0>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f7ff fc9e 	bl	800cce8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d009      	beq.n	800d3ca <USBH_Process+0x43e>
      {
        phost->pActiveClass->DeInit(phost);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d3bc:	68db      	ldr	r3, [r3, #12]
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d005      	beq.n	800d3e0 <USBH_Process+0x454>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d3da:	2105      	movs	r1, #5
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800d3e0:	4819      	ldr	r0, [pc, #100]	; (800d448 <USBH_Process+0x4bc>)
 800d3e2:	f00c fdc3 	bl	8019f6c <iprintf>
 800d3e6:	200a      	movs	r0, #10
 800d3e8:	f00c fdd8 	bl	8019f9c <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d107      	bne.n	800d408 <USBH_Process+0x47c>
      {
        phost->device.is_ReEnumerated = 0U;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f7ff fdb3 	bl	800cf6c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d406:	e012      	b.n	800d42e <USBH_Process+0x4a2>
        USBH_LL_Start(phost);
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f00b fe5b 	bl	80190c4 <USBH_LL_Start>
      break;
 800d40e:	e00e      	b.n	800d42e <USBH_Process+0x4a2>

    case HOST_ABORT_STATE:
    default :
      break;
 800d410:	bf00      	nop
 800d412:	e00c      	b.n	800d42e <USBH_Process+0x4a2>
      break;
 800d414:	bf00      	nop
 800d416:	e00a      	b.n	800d42e <USBH_Process+0x4a2>
      break;
 800d418:	bf00      	nop
 800d41a:	e008      	b.n	800d42e <USBH_Process+0x4a2>
    break;
 800d41c:	bf00      	nop
 800d41e:	e006      	b.n	800d42e <USBH_Process+0x4a2>
      break;
 800d420:	bf00      	nop
 800d422:	e004      	b.n	800d42e <USBH_Process+0x4a2>
      break;
 800d424:	bf00      	nop
 800d426:	e002      	b.n	800d42e <USBH_Process+0x4a2>
      break;
 800d428:	bf00      	nop
 800d42a:	e000      	b.n	800d42e <USBH_Process+0x4a2>
      break;
 800d42c:	bf00      	nop
  }
  return USBH_OK;
 800d42e:	2300      	movs	r3, #0
}
 800d430:	4618      	mov	r0, r3
 800d432:	3710      	adds	r7, #16
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}
 800d438:	0801c4f4 	.word	0x0801c4f4
 800d43c:	0801c308 	.word	0x0801c308
 800d440:	0801c51c 	.word	0x0801c51c
 800d444:	0801c544 	.word	0x0801c544
 800d448:	0801c55c 	.word	0x0801c55c

0800d44c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b088      	sub	sp, #32
 800d450:	af04      	add	r7, sp, #16
 800d452:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d454:	2301      	movs	r3, #1
 800d456:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d458:	2301      	movs	r3, #1
 800d45a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	785b      	ldrb	r3, [r3, #1]
 800d460:	2b07      	cmp	r3, #7
 800d462:	f200 8280 	bhi.w	800d966 <USBH_HandleEnum+0x51a>
 800d466:	a201      	add	r2, pc, #4	; (adr r2, 800d46c <USBH_HandleEnum+0x20>)
 800d468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d46c:	0800d48d 	.word	0x0800d48d
 800d470:	0800d569 	.word	0x0800d569
 800d474:	0800d619 	.word	0x0800d619
 800d478:	0800d6d9 	.word	0x0800d6d9
 800d47c:	0800d761 	.word	0x0800d761
 800d480:	0800d815 	.word	0x0800d815
 800d484:	0800d889 	.word	0x0800d889
 800d488:	0800d8fb 	.word	0x0800d8fb
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d48c:	2108      	movs	r1, #8
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f000 fb1c 	bl	800dacc <USBH_Get_DevDesc>
 800d494:	4603      	mov	r3, r0
 800d496:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d498:	7bbb      	ldrb	r3, [r7, #14]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d130      	bne.n	800d500 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	7919      	ldrb	r1, [r3, #4]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d4c2:	b292      	uxth	r2, r2
 800d4c4:	9202      	str	r2, [sp, #8]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	9201      	str	r2, [sp, #4]
 800d4ca:	9300      	str	r3, [sp, #0]
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	2280      	movs	r2, #128	; 0x80
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f001 f851 	bl	800e578 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	7959      	ldrb	r1, [r3, #5]
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d4e6:	687a      	ldr	r2, [r7, #4]
 800d4e8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d4ea:	b292      	uxth	r2, r2
 800d4ec:	9202      	str	r2, [sp, #8]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	9201      	str	r2, [sp, #4]
 800d4f2:	9300      	str	r3, [sp, #0]
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f001 f83d 	bl	800e578 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d4fe:	e234      	b.n	800d96a <USBH_HandleEnum+0x51e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d500:	7bbb      	ldrb	r3, [r7, #14]
 800d502:	2b03      	cmp	r3, #3
 800d504:	f040 8231 	bne.w	800d96a <USBH_HandleEnum+0x51e>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800d508:	48b9      	ldr	r0, [pc, #740]	; (800d7f0 <USBH_HandleEnum+0x3a4>)
 800d50a:	f00c fd2f 	bl	8019f6c <iprintf>
 800d50e:	48b9      	ldr	r0, [pc, #740]	; (800d7f4 <USBH_HandleEnum+0x3a8>)
 800d510:	f00c fd2c 	bl	8019f6c <iprintf>
 800d514:	200a      	movs	r0, #10
 800d516:	f00c fd41 	bl	8019f9c <putchar>
        phost->device.EnumCnt++;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d520:	3301      	adds	r3, #1
 800d522:	b2da      	uxtb	r2, r3
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d530:	2b03      	cmp	r3, #3
 800d532:	d909      	bls.n	800d548 <USBH_HandleEnum+0xfc>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d534:	48b0      	ldr	r0, [pc, #704]	; (800d7f8 <USBH_HandleEnum+0x3ac>)
 800d536:	f00c fd19 	bl	8019f6c <iprintf>
 800d53a:	200a      	movs	r0, #10
 800d53c:	f00c fd2e 	bl	8019f9c <putchar>
          phost->gState = HOST_ABORT_STATE;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	220d      	movs	r2, #13
 800d544:	701a      	strb	r2, [r3, #0]
      break;
 800d546:	e210      	b.n	800d96a <USBH_HandleEnum+0x51e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	795b      	ldrb	r3, [r3, #5]
 800d54c:	4619      	mov	r1, r3
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f001 f862 	bl	800e618 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	791b      	ldrb	r3, [r3, #4]
 800d558:	4619      	mov	r1, r3
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f001 f85c 	bl	800e618 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2200      	movs	r2, #0
 800d564:	701a      	strb	r2, [r3, #0]
      break;
 800d566:	e200      	b.n	800d96a <USBH_HandleEnum+0x51e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d568:	2112      	movs	r1, #18
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f000 faae 	bl	800dacc <USBH_Get_DevDesc>
 800d570:	4603      	mov	r3, r0
 800d572:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d574:	7bbb      	ldrb	r3, [r7, #14]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d117      	bne.n	800d5aa <USBH_HandleEnum+0x15e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 800d580:	4619      	mov	r1, r3
 800d582:	489e      	ldr	r0, [pc, #632]	; (800d7fc <USBH_HandleEnum+0x3b0>)
 800d584:	f00c fcf2 	bl	8019f6c <iprintf>
 800d588:	200a      	movs	r0, #10
 800d58a:	f00c fd07 	bl	8019f9c <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
 800d594:	4619      	mov	r1, r3
 800d596:	489a      	ldr	r0, [pc, #616]	; (800d800 <USBH_HandleEnum+0x3b4>)
 800d598:	f00c fce8 	bl	8019f6c <iprintf>
 800d59c:	200a      	movs	r0, #10
 800d59e:	f00c fcfd 	bl	8019f9c <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2202      	movs	r2, #2
 800d5a6:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d5a8:	e1e1      	b.n	800d96e <USBH_HandleEnum+0x522>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d5aa:	7bbb      	ldrb	r3, [r7, #14]
 800d5ac:	2b03      	cmp	r3, #3
 800d5ae:	f040 81de 	bne.w	800d96e <USBH_HandleEnum+0x522>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800d5b2:	488f      	ldr	r0, [pc, #572]	; (800d7f0 <USBH_HandleEnum+0x3a4>)
 800d5b4:	f00c fcda 	bl	8019f6c <iprintf>
 800d5b8:	4892      	ldr	r0, [pc, #584]	; (800d804 <USBH_HandleEnum+0x3b8>)
 800d5ba:	f00c fcd7 	bl	8019f6c <iprintf>
 800d5be:	200a      	movs	r0, #10
 800d5c0:	f00c fcec 	bl	8019f9c <putchar>
        phost->device.EnumCnt++;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	b2da      	uxtb	r2, r3
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d5da:	2b03      	cmp	r3, #3
 800d5dc:	d909      	bls.n	800d5f2 <USBH_HandleEnum+0x1a6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d5de:	4886      	ldr	r0, [pc, #536]	; (800d7f8 <USBH_HandleEnum+0x3ac>)
 800d5e0:	f00c fcc4 	bl	8019f6c <iprintf>
 800d5e4:	200a      	movs	r0, #10
 800d5e6:	f00c fcd9 	bl	8019f9c <putchar>
          phost->gState = HOST_ABORT_STATE;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	220d      	movs	r2, #13
 800d5ee:	701a      	strb	r2, [r3, #0]
      break;
 800d5f0:	e1bd      	b.n	800d96e <USBH_HandleEnum+0x522>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	795b      	ldrb	r3, [r3, #5]
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f001 f80d 	bl	800e618 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	791b      	ldrb	r3, [r3, #4]
 800d602:	4619      	mov	r1, r3
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f001 f807 	bl	800e618 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2200      	movs	r2, #0
 800d60e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2200      	movs	r2, #0
 800d614:	701a      	strb	r2, [r3, #0]
      break;
 800d616:	e1aa      	b.n	800d96e <USBH_HandleEnum+0x522>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d618:	2101      	movs	r1, #1
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f000 fb02 	bl	800dc24 <USBH_SetAddress>
 800d620:	4603      	mov	r3, r0
 800d622:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d624:	7bbb      	ldrb	r3, [r7, #14]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d13c      	bne.n	800d6a4 <USBH_HandleEnum+0x258>
      {
        USBH_Delay(2U);
 800d62a:	2002      	movs	r0, #2
 800d62c:	f00b fede 	bl	80193ec <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2201      	movs	r2, #1
 800d634:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 800d63e:	4619      	mov	r1, r3
 800d640:	4871      	ldr	r0, [pc, #452]	; (800d808 <USBH_HandleEnum+0x3bc>)
 800d642:	f00c fc93 	bl	8019f6c <iprintf>
 800d646:	200a      	movs	r0, #10
 800d648:	f00c fca8 	bl	8019f9c <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2203      	movs	r2, #3
 800d650:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	7919      	ldrb	r1, [r3, #4]
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d662:	687a      	ldr	r2, [r7, #4]
 800d664:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d666:	b292      	uxth	r2, r2
 800d668:	9202      	str	r2, [sp, #8]
 800d66a:	2200      	movs	r2, #0
 800d66c:	9201      	str	r2, [sp, #4]
 800d66e:	9300      	str	r3, [sp, #0]
 800d670:	4603      	mov	r3, r0
 800d672:	2280      	movs	r2, #128	; 0x80
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f000 ff7f 	bl	800e578 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	7959      	ldrb	r1, [r3, #5]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d68e:	b292      	uxth	r2, r2
 800d690:	9202      	str	r2, [sp, #8]
 800d692:	2200      	movs	r2, #0
 800d694:	9201      	str	r2, [sp, #4]
 800d696:	9300      	str	r3, [sp, #0]
 800d698:	4603      	mov	r3, r0
 800d69a:	2200      	movs	r2, #0
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f000 ff6b 	bl	800e578 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d6a2:	e166      	b.n	800d972 <USBH_HandleEnum+0x526>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d6a4:	7bbb      	ldrb	r3, [r7, #14]
 800d6a6:	2b03      	cmp	r3, #3
 800d6a8:	f040 8163 	bne.w	800d972 <USBH_HandleEnum+0x526>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800d6ac:	4850      	ldr	r0, [pc, #320]	; (800d7f0 <USBH_HandleEnum+0x3a4>)
 800d6ae:	f00c fc5d 	bl	8019f6c <iprintf>
 800d6b2:	4856      	ldr	r0, [pc, #344]	; (800d80c <USBH_HandleEnum+0x3c0>)
 800d6b4:	f00c fc5a 	bl	8019f6c <iprintf>
 800d6b8:	200a      	movs	r0, #10
 800d6ba:	f00c fc6f 	bl	8019f9c <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d6be:	484e      	ldr	r0, [pc, #312]	; (800d7f8 <USBH_HandleEnum+0x3ac>)
 800d6c0:	f00c fc54 	bl	8019f6c <iprintf>
 800d6c4:	200a      	movs	r0, #10
 800d6c6:	f00c fc69 	bl	8019f9c <putchar>
        phost->gState = HOST_ABORT_STATE;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	220d      	movs	r2, #13
 800d6ce:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	705a      	strb	r2, [r3, #1]
      break;
 800d6d6:	e14c      	b.n	800d972 <USBH_HandleEnum+0x526>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d6d8:	2109      	movs	r1, #9
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f000 fa1e 	bl	800db1c <USBH_Get_CfgDesc>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d6e4:	7bbb      	ldrb	r3, [r7, #14]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d103      	bne.n	800d6f2 <USBH_HandleEnum+0x2a6>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2204      	movs	r2, #4
 800d6ee:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d6f0:	e141      	b.n	800d976 <USBH_HandleEnum+0x52a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d6f2:	7bbb      	ldrb	r3, [r7, #14]
 800d6f4:	2b03      	cmp	r3, #3
 800d6f6:	f040 813e 	bne.w	800d976 <USBH_HandleEnum+0x52a>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800d6fa:	483d      	ldr	r0, [pc, #244]	; (800d7f0 <USBH_HandleEnum+0x3a4>)
 800d6fc:	f00c fc36 	bl	8019f6c <iprintf>
 800d700:	4843      	ldr	r0, [pc, #268]	; (800d810 <USBH_HandleEnum+0x3c4>)
 800d702:	f00c fc33 	bl	8019f6c <iprintf>
 800d706:	200a      	movs	r0, #10
 800d708:	f00c fc48 	bl	8019f9c <putchar>
        phost->device.EnumCnt++;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d712:	3301      	adds	r3, #1
 800d714:	b2da      	uxtb	r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d722:	2b03      	cmp	r3, #3
 800d724:	d909      	bls.n	800d73a <USBH_HandleEnum+0x2ee>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d726:	4834      	ldr	r0, [pc, #208]	; (800d7f8 <USBH_HandleEnum+0x3ac>)
 800d728:	f00c fc20 	bl	8019f6c <iprintf>
 800d72c:	200a      	movs	r0, #10
 800d72e:	f00c fc35 	bl	8019f9c <putchar>
          phost->gState = HOST_ABORT_STATE;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	220d      	movs	r2, #13
 800d736:	701a      	strb	r2, [r3, #0]
      break;
 800d738:	e11d      	b.n	800d976 <USBH_HandleEnum+0x52a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	795b      	ldrb	r3, [r3, #5]
 800d73e:	4619      	mov	r1, r3
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f000 ff69 	bl	800e618 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	791b      	ldrb	r3, [r3, #4]
 800d74a:	4619      	mov	r1, r3
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f000 ff63 	bl	800e618 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2200      	movs	r2, #0
 800d756:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2200      	movs	r2, #0
 800d75c:	701a      	strb	r2, [r3, #0]
      break;
 800d75e:	e10a      	b.n	800d976 <USBH_HandleEnum+0x52a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800d766:	4619      	mov	r1, r3
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f000 f9d7 	bl	800db1c <USBH_Get_CfgDesc>
 800d76e:	4603      	mov	r3, r0
 800d770:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d772:	7bbb      	ldrb	r3, [r7, #14]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d103      	bne.n	800d780 <USBH_HandleEnum+0x334>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2205      	movs	r2, #5
 800d77c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d77e:	e0fc      	b.n	800d97a <USBH_HandleEnum+0x52e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d780:	7bbb      	ldrb	r3, [r7, #14]
 800d782:	2b03      	cmp	r3, #3
 800d784:	f040 80f9 	bne.w	800d97a <USBH_HandleEnum+0x52e>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800d788:	4819      	ldr	r0, [pc, #100]	; (800d7f0 <USBH_HandleEnum+0x3a4>)
 800d78a:	f00c fbef 	bl	8019f6c <iprintf>
 800d78e:	4820      	ldr	r0, [pc, #128]	; (800d810 <USBH_HandleEnum+0x3c4>)
 800d790:	f00c fbec 	bl	8019f6c <iprintf>
 800d794:	200a      	movs	r0, #10
 800d796:	f00c fc01 	bl	8019f9c <putchar>
        phost->device.EnumCnt++;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	b2da      	uxtb	r2, r3
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d7b0:	2b03      	cmp	r3, #3
 800d7b2:	d909      	bls.n	800d7c8 <USBH_HandleEnum+0x37c>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d7b4:	4810      	ldr	r0, [pc, #64]	; (800d7f8 <USBH_HandleEnum+0x3ac>)
 800d7b6:	f00c fbd9 	bl	8019f6c <iprintf>
 800d7ba:	200a      	movs	r0, #10
 800d7bc:	f00c fbee 	bl	8019f9c <putchar>
          phost->gState = HOST_ABORT_STATE;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	220d      	movs	r2, #13
 800d7c4:	701a      	strb	r2, [r3, #0]
      break;
 800d7c6:	e0d8      	b.n	800d97a <USBH_HandleEnum+0x52e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	795b      	ldrb	r3, [r3, #5]
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f000 ff22 	bl	800e618 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	791b      	ldrb	r3, [r3, #4]
 800d7d8:	4619      	mov	r1, r3
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f000 ff1c 	bl	800e618 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	701a      	strb	r2, [r3, #0]
      break;
 800d7ec:	e0c5      	b.n	800d97a <USBH_HandleEnum+0x52e>
 800d7ee:	bf00      	nop
 800d7f0:	0801c308 	.word	0x0801c308
 800d7f4:	0801c574 	.word	0x0801c574
 800d7f8:	0801c5a8 	.word	0x0801c5a8
 800d7fc:	0801c5e8 	.word	0x0801c5e8
 800d800:	0801c5f4 	.word	0x0801c5f4
 800d804:	0801c600 	.word	0x0801c600
 800d808:	0801c63c 	.word	0x0801c63c
 800d80c:	0801c654 	.word	0x0801c654
 800d810:	0801c688 	.word	0x0801c688

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d02a      	beq.n	800d874 <USBH_HandleEnum+0x428>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d82a:	23ff      	movs	r3, #255	; 0xff
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f000 f999 	bl	800db64 <USBH_Get_StringDesc>
 800d832:	4603      	mov	r3, r0
 800d834:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d836:	7bbb      	ldrb	r3, [r7, #14]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d10d      	bne.n	800d858 <USBH_HandleEnum+0x40c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d842:	4619      	mov	r1, r3
 800d844:	4853      	ldr	r0, [pc, #332]	; (800d994 <USBH_HandleEnum+0x548>)
 800d846:	f00c fb91 	bl	8019f6c <iprintf>
 800d84a:	200a      	movs	r0, #10
 800d84c:	f00c fba6 	bl	8019f9c <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2206      	movs	r2, #6
 800d854:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d856:	e092      	b.n	800d97e <USBH_HandleEnum+0x532>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d858:	7bbb      	ldrb	r3, [r7, #14]
 800d85a:	2b03      	cmp	r3, #3
 800d85c:	f040 808f 	bne.w	800d97e <USBH_HandleEnum+0x532>
          USBH_UsrLog("Manufacturer : N/A");
 800d860:	484d      	ldr	r0, [pc, #308]	; (800d998 <USBH_HandleEnum+0x54c>)
 800d862:	f00c fb83 	bl	8019f6c <iprintf>
 800d866:	200a      	movs	r0, #10
 800d868:	f00c fb98 	bl	8019f9c <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2206      	movs	r2, #6
 800d870:	705a      	strb	r2, [r3, #1]
      break;
 800d872:	e084      	b.n	800d97e <USBH_HandleEnum+0x532>
        USBH_UsrLog("Manufacturer : N/A");
 800d874:	4848      	ldr	r0, [pc, #288]	; (800d998 <USBH_HandleEnum+0x54c>)
 800d876:	f00c fb79 	bl	8019f6c <iprintf>
 800d87a:	200a      	movs	r0, #10
 800d87c:	f00c fb8e 	bl	8019f9c <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2206      	movs	r2, #6
 800d884:	705a      	strb	r2, [r3, #1]
      break;
 800d886:	e07a      	b.n	800d97e <USBH_HandleEnum+0x532>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d029      	beq.n	800d8e6 <USBH_HandleEnum+0x49a>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d89e:	23ff      	movs	r3, #255	; 0xff
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f000 f95f 	bl	800db64 <USBH_Get_StringDesc>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d8aa:	7bbb      	ldrb	r3, [r7, #14]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d10d      	bne.n	800d8cc <USBH_HandleEnum+0x480>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	4838      	ldr	r0, [pc, #224]	; (800d99c <USBH_HandleEnum+0x550>)
 800d8ba:	f00c fb57 	bl	8019f6c <iprintf>
 800d8be:	200a      	movs	r0, #10
 800d8c0:	f00c fb6c 	bl	8019f9c <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2207      	movs	r2, #7
 800d8c8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d8ca:	e05a      	b.n	800d982 <USBH_HandleEnum+0x536>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d8cc:	7bbb      	ldrb	r3, [r7, #14]
 800d8ce:	2b03      	cmp	r3, #3
 800d8d0:	d157      	bne.n	800d982 <USBH_HandleEnum+0x536>
          USBH_UsrLog("Product : N/A");
 800d8d2:	4833      	ldr	r0, [pc, #204]	; (800d9a0 <USBH_HandleEnum+0x554>)
 800d8d4:	f00c fb4a 	bl	8019f6c <iprintf>
 800d8d8:	200a      	movs	r0, #10
 800d8da:	f00c fb5f 	bl	8019f9c <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2207      	movs	r2, #7
 800d8e2:	705a      	strb	r2, [r3, #1]
      break;
 800d8e4:	e04d      	b.n	800d982 <USBH_HandleEnum+0x536>
        USBH_UsrLog("Product : N/A");
 800d8e6:	482e      	ldr	r0, [pc, #184]	; (800d9a0 <USBH_HandleEnum+0x554>)
 800d8e8:	f00c fb40 	bl	8019f6c <iprintf>
 800d8ec:	200a      	movs	r0, #10
 800d8ee:	f00c fb55 	bl	8019f9c <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2207      	movs	r2, #7
 800d8f6:	705a      	strb	r2, [r3, #1]
      break;
 800d8f8:	e043      	b.n	800d982 <USBH_HandleEnum+0x536>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d900:	2b00      	cmp	r3, #0
 800d902:	d027      	beq.n	800d954 <USBH_HandleEnum+0x508>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d910:	23ff      	movs	r3, #255	; 0xff
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f000 f926 	bl	800db64 <USBH_Get_StringDesc>
 800d918:	4603      	mov	r3, r0
 800d91a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d91c:	7bbb      	ldrb	r3, [r7, #14]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d10c      	bne.n	800d93c <USBH_HandleEnum+0x4f0>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d928:	4619      	mov	r1, r3
 800d92a:	481e      	ldr	r0, [pc, #120]	; (800d9a4 <USBH_HandleEnum+0x558>)
 800d92c:	f00c fb1e 	bl	8019f6c <iprintf>
 800d930:	200a      	movs	r0, #10
 800d932:	f00c fb33 	bl	8019f9c <putchar>
          Status = USBH_OK;
 800d936:	2300      	movs	r3, #0
 800d938:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d93a:	e024      	b.n	800d986 <USBH_HandleEnum+0x53a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d93c:	7bbb      	ldrb	r3, [r7, #14]
 800d93e:	2b03      	cmp	r3, #3
 800d940:	d121      	bne.n	800d986 <USBH_HandleEnum+0x53a>
          USBH_UsrLog("Serial Number : N/A");
 800d942:	4819      	ldr	r0, [pc, #100]	; (800d9a8 <USBH_HandleEnum+0x55c>)
 800d944:	f00c fb12 	bl	8019f6c <iprintf>
 800d948:	200a      	movs	r0, #10
 800d94a:	f00c fb27 	bl	8019f9c <putchar>
          Status = USBH_OK;
 800d94e:	2300      	movs	r3, #0
 800d950:	73fb      	strb	r3, [r7, #15]
      break;
 800d952:	e018      	b.n	800d986 <USBH_HandleEnum+0x53a>
        USBH_UsrLog("Serial Number : N/A");
 800d954:	4814      	ldr	r0, [pc, #80]	; (800d9a8 <USBH_HandleEnum+0x55c>)
 800d956:	f00c fb09 	bl	8019f6c <iprintf>
 800d95a:	200a      	movs	r0, #10
 800d95c:	f00c fb1e 	bl	8019f9c <putchar>
        Status = USBH_OK;
 800d960:	2300      	movs	r3, #0
 800d962:	73fb      	strb	r3, [r7, #15]
      break;
 800d964:	e00f      	b.n	800d986 <USBH_HandleEnum+0x53a>

    default:
      break;
 800d966:	bf00      	nop
 800d968:	e00e      	b.n	800d988 <USBH_HandleEnum+0x53c>
      break;
 800d96a:	bf00      	nop
 800d96c:	e00c      	b.n	800d988 <USBH_HandleEnum+0x53c>
      break;
 800d96e:	bf00      	nop
 800d970:	e00a      	b.n	800d988 <USBH_HandleEnum+0x53c>
      break;
 800d972:	bf00      	nop
 800d974:	e008      	b.n	800d988 <USBH_HandleEnum+0x53c>
      break;
 800d976:	bf00      	nop
 800d978:	e006      	b.n	800d988 <USBH_HandleEnum+0x53c>
      break;
 800d97a:	bf00      	nop
 800d97c:	e004      	b.n	800d988 <USBH_HandleEnum+0x53c>
      break;
 800d97e:	bf00      	nop
 800d980:	e002      	b.n	800d988 <USBH_HandleEnum+0x53c>
      break;
 800d982:	bf00      	nop
 800d984:	e000      	b.n	800d988 <USBH_HandleEnum+0x53c>
      break;
 800d986:	bf00      	nop
  }
  return Status;
 800d988:	7bfb      	ldrb	r3, [r7, #15]
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3710      	adds	r7, #16
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
 800d992:	bf00      	nop
 800d994:	0801c6cc 	.word	0x0801c6cc
 800d998:	0801c6e0 	.word	0x0801c6e0
 800d99c:	0801c6f4 	.word	0x0801c6f4
 800d9a0:	0801c704 	.word	0x0801c704
 800d9a4:	0801c714 	.word	0x0801c714
 800d9a8:	0801c728 	.word	0x0801c728

0800d9ac <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b083      	sub	sp, #12
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	683a      	ldr	r2, [r7, #0]
 800d9ba:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d9be:	bf00      	nop
 800d9c0:	370c      	adds	r7, #12
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c8:	4770      	bx	lr

0800d9ca <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d9ca:	b580      	push	{r7, lr}
 800d9cc:	b082      	sub	sp, #8
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d9d8:	1c5a      	adds	r2, r3, #1
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f000 f804 	bl	800d9ee <USBH_HandleSof>
}
 800d9e6:	bf00      	nop
 800d9e8:	3708      	adds	r7, #8
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}

0800d9ee <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d9ee:	b580      	push	{r7, lr}
 800d9f0:	b082      	sub	sp, #8
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	781b      	ldrb	r3, [r3, #0]
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	2b0b      	cmp	r3, #11
 800d9fe:	d10a      	bne.n	800da16 <USBH_HandleSof+0x28>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da06:	2b00      	cmp	r3, #0
 800da08:	d005      	beq.n	800da16 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da10:	699b      	ldr	r3, [r3, #24]
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	4798      	blx	r3
  }
}
 800da16:	bf00      	nop
 800da18:	3708      	adds	r7, #8
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}

0800da1e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800da1e:	b480      	push	{r7}
 800da20:	b083      	sub	sp, #12
 800da22:	af00      	add	r7, sp, #0
 800da24:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2201      	movs	r2, #1
 800da2a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800da2e:	bf00      	nop
}
 800da30:	370c      	adds	r7, #12
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr

0800da3a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800da3a:	b480      	push	{r7}
 800da3c:	b083      	sub	sp, #12
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2200      	movs	r2, #0
 800da46:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800da4a:	bf00      	nop
}
 800da4c:	370c      	adds	r7, #12
 800da4e:	46bd      	mov	sp, r7
 800da50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da54:	4770      	bx	lr

0800da56 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800da56:	b480      	push	{r7}
 800da58:	b083      	sub	sp, #12
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2201      	movs	r2, #1
 800da62:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2200      	movs	r2, #0
 800da6a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2200      	movs	r2, #0
 800da72:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800da76:	2300      	movs	r3, #0
}
 800da78:	4618      	mov	r0, r3
 800da7a:	370c      	adds	r7, #12
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2201      	movs	r2, #1
 800da90:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2200      	movs	r2, #0
 800da98:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2200      	movs	r2, #0
 800daa0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f00b fb28 	bl	80190fa <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	791b      	ldrb	r3, [r3, #4]
 800daae:	4619      	mov	r1, r3
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f000 fdb1 	bl	800e618 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	795b      	ldrb	r3, [r3, #5]
 800daba:	4619      	mov	r1, r3
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f000 fdab 	bl	800e618 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800dac2:	2300      	movs	r3, #0
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3708      	adds	r7, #8
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}

0800dacc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b086      	sub	sp, #24
 800dad0:	af02      	add	r7, sp, #8
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	460b      	mov	r3, r1
 800dad6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800dade:	78fb      	ldrb	r3, [r7, #3]
 800dae0:	b29b      	uxth	r3, r3
 800dae2:	9300      	str	r3, [sp, #0]
 800dae4:	4613      	mov	r3, r2
 800dae6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800daea:	2100      	movs	r1, #0
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f000 f864 	bl	800dbba <USBH_GetDescriptor>
 800daf2:	4603      	mov	r3, r0
 800daf4:	73fb      	strb	r3, [r7, #15]
 800daf6:	7bfb      	ldrb	r3, [r7, #15]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d10a      	bne.n	800db12 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f203 3026 	addw	r0, r3, #806	; 0x326
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800db08:	78fa      	ldrb	r2, [r7, #3]
 800db0a:	b292      	uxth	r2, r2
 800db0c:	4619      	mov	r1, r3
 800db0e:	f000 f918 	bl	800dd42 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800db12:	7bfb      	ldrb	r3, [r7, #15]
}
 800db14:	4618      	mov	r0, r3
 800db16:	3710      	adds	r7, #16
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b086      	sub	sp, #24
 800db20:	af02      	add	r7, sp, #8
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	460b      	mov	r3, r1
 800db26:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	331c      	adds	r3, #28
 800db2c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800db2e:	887b      	ldrh	r3, [r7, #2]
 800db30:	9300      	str	r3, [sp, #0]
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db38:	2100      	movs	r1, #0
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f000 f83d 	bl	800dbba <USBH_GetDescriptor>
 800db40:	4603      	mov	r3, r0
 800db42:	72fb      	strb	r3, [r7, #11]
 800db44:	7afb      	ldrb	r3, [r7, #11]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d107      	bne.n	800db5a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800db50:	887a      	ldrh	r2, [r7, #2]
 800db52:	68f9      	ldr	r1, [r7, #12]
 800db54:	4618      	mov	r0, r3
 800db56:	f000 f964 	bl	800de22 <USBH_ParseCfgDesc>
  }

  return status;
 800db5a:	7afb      	ldrb	r3, [r7, #11]
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3710      	adds	r7, #16
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b088      	sub	sp, #32
 800db68:	af02      	add	r7, sp, #8
 800db6a:	60f8      	str	r0, [r7, #12]
 800db6c:	607a      	str	r2, [r7, #4]
 800db6e:	461a      	mov	r2, r3
 800db70:	460b      	mov	r3, r1
 800db72:	72fb      	strb	r3, [r7, #11]
 800db74:	4613      	mov	r3, r2
 800db76:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800db78:	7afb      	ldrb	r3, [r7, #11]
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800db80:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800db88:	893b      	ldrh	r3, [r7, #8]
 800db8a:	9300      	str	r3, [sp, #0]
 800db8c:	460b      	mov	r3, r1
 800db8e:	2100      	movs	r1, #0
 800db90:	68f8      	ldr	r0, [r7, #12]
 800db92:	f000 f812 	bl	800dbba <USBH_GetDescriptor>
 800db96:	4603      	mov	r3, r0
 800db98:	75fb      	strb	r3, [r7, #23]
 800db9a:	7dfb      	ldrb	r3, [r7, #23]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d107      	bne.n	800dbb0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800dba6:	893a      	ldrh	r2, [r7, #8]
 800dba8:	6879      	ldr	r1, [r7, #4]
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f000 fa37 	bl	800e01e <USBH_ParseStringDesc>
  }

  return status;
 800dbb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3718      	adds	r7, #24
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}

0800dbba <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800dbba:	b580      	push	{r7, lr}
 800dbbc:	b084      	sub	sp, #16
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	60f8      	str	r0, [r7, #12]
 800dbc2:	607b      	str	r3, [r7, #4]
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	72fb      	strb	r3, [r7, #11]
 800dbc8:	4613      	mov	r3, r2
 800dbca:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	789b      	ldrb	r3, [r3, #2]
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d11c      	bne.n	800dc0e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800dbd4:	7afb      	ldrb	r3, [r7, #11]
 800dbd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dbda:	b2da      	uxtb	r2, r3
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2206      	movs	r2, #6
 800dbe4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	893a      	ldrh	r2, [r7, #8]
 800dbea:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800dbec:	893b      	ldrh	r3, [r7, #8]
 800dbee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dbf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dbf6:	d104      	bne.n	800dc02 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f240 4209 	movw	r2, #1033	; 0x409
 800dbfe:	829a      	strh	r2, [r3, #20]
 800dc00:	e002      	b.n	800dc08 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	2200      	movs	r2, #0
 800dc06:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	8b3a      	ldrh	r2, [r7, #24]
 800dc0c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800dc0e:	8b3b      	ldrh	r3, [r7, #24]
 800dc10:	461a      	mov	r2, r3
 800dc12:	6879      	ldr	r1, [r7, #4]
 800dc14:	68f8      	ldr	r0, [r7, #12]
 800dc16:	f000 fa50 	bl	800e0ba <USBH_CtlReq>
 800dc1a:	4603      	mov	r3, r0
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3710      	adds	r7, #16
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	460b      	mov	r3, r1
 800dc2e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	789b      	ldrb	r3, [r3, #2]
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d10f      	bne.n	800dc58 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2205      	movs	r2, #5
 800dc42:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800dc44:	78fb      	ldrb	r3, [r7, #3]
 800dc46:	b29a      	uxth	r2, r3
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2200      	movs	r2, #0
 800dc56:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800dc58:	2200      	movs	r2, #0
 800dc5a:	2100      	movs	r1, #0
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f000 fa2c 	bl	800e0ba <USBH_CtlReq>
 800dc62:	4603      	mov	r3, r0
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	3708      	adds	r7, #8
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}

0800dc6c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	460b      	mov	r3, r1
 800dc76:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	789b      	ldrb	r3, [r3, #2]
 800dc7c:	2b01      	cmp	r3, #1
 800dc7e:	d10e      	bne.n	800dc9e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2200      	movs	r2, #0
 800dc84:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2209      	movs	r2, #9
 800dc8a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	887a      	ldrh	r2, [r7, #2]
 800dc90:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2200      	movs	r2, #0
 800dc96:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800dc9e:	2200      	movs	r2, #0
 800dca0:	2100      	movs	r1, #0
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 fa09 	bl	800e0ba <USBH_CtlReq>
 800dca8:	4603      	mov	r3, r0
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3708      	adds	r7, #8
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}

0800dcb2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800dcb2:	b580      	push	{r7, lr}
 800dcb4:	b082      	sub	sp, #8
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	6078      	str	r0, [r7, #4]
 800dcba:	460b      	mov	r3, r1
 800dcbc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	789b      	ldrb	r3, [r3, #2]
 800dcc2:	2b01      	cmp	r3, #1
 800dcc4:	d10f      	bne.n	800dce6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2203      	movs	r2, #3
 800dcd0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800dcd2:	78fb      	ldrb	r3, [r7, #3]
 800dcd4:	b29a      	uxth	r2, r3
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2200      	movs	r2, #0
 800dce4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800dce6:	2200      	movs	r2, #0
 800dce8:	2100      	movs	r1, #0
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 f9e5 	bl	800e0ba <USBH_CtlReq>
 800dcf0:	4603      	mov	r3, r0
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3708      	adds	r7, #8
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}

0800dcfa <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800dcfa:	b580      	push	{r7, lr}
 800dcfc:	b082      	sub	sp, #8
 800dcfe:	af00      	add	r7, sp, #0
 800dd00:	6078      	str	r0, [r7, #4]
 800dd02:	460b      	mov	r3, r1
 800dd04:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	789b      	ldrb	r3, [r3, #2]
 800dd0a:	2b01      	cmp	r3, #1
 800dd0c:	d10f      	bne.n	800dd2e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2202      	movs	r2, #2
 800dd12:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2201      	movs	r2, #1
 800dd18:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800dd20:	78fb      	ldrb	r3, [r7, #3]
 800dd22:	b29a      	uxth	r2, r3
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800dd2e:	2200      	movs	r2, #0
 800dd30:	2100      	movs	r1, #0
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f000 f9c1 	bl	800e0ba <USBH_CtlReq>
 800dd38:	4603      	mov	r3, r0
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3708      	adds	r7, #8
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}

0800dd42 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800dd42:	b480      	push	{r7}
 800dd44:	b085      	sub	sp, #20
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	60f8      	str	r0, [r7, #12]
 800dd4a:	60b9      	str	r1, [r7, #8]
 800dd4c:	4613      	mov	r3, r2
 800dd4e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	781a      	ldrb	r2, [r3, #0]
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	785a      	ldrb	r2, [r3, #1]
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	3302      	adds	r3, #2
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	b29a      	uxth	r2, r3
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	3303      	adds	r3, #3
 800dd6c:	781b      	ldrb	r3, [r3, #0]
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	021b      	lsls	r3, r3, #8
 800dd72:	b29b      	uxth	r3, r3
 800dd74:	4313      	orrs	r3, r2
 800dd76:	b29a      	uxth	r2, r3
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	791a      	ldrb	r2, [r3, #4]
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	795a      	ldrb	r2, [r3, #5]
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	799a      	ldrb	r2, [r3, #6]
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	79da      	ldrb	r2, [r3, #7]
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800dd9c:	88fb      	ldrh	r3, [r7, #6]
 800dd9e:	2b08      	cmp	r3, #8
 800dda0:	d939      	bls.n	800de16 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	3308      	adds	r3, #8
 800dda6:	781b      	ldrb	r3, [r3, #0]
 800dda8:	b29a      	uxth	r2, r3
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	3309      	adds	r3, #9
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	b29b      	uxth	r3, r3
 800ddb2:	021b      	lsls	r3, r3, #8
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	4313      	orrs	r3, r2
 800ddb8:	b29a      	uxth	r2, r3
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	330a      	adds	r3, #10
 800ddc2:	781b      	ldrb	r3, [r3, #0]
 800ddc4:	b29a      	uxth	r2, r3
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	330b      	adds	r3, #11
 800ddca:	781b      	ldrb	r3, [r3, #0]
 800ddcc:	b29b      	uxth	r3, r3
 800ddce:	021b      	lsls	r3, r3, #8
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	4313      	orrs	r3, r2
 800ddd4:	b29a      	uxth	r2, r3
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	330c      	adds	r3, #12
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	b29a      	uxth	r2, r3
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	330d      	adds	r3, #13
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	b29b      	uxth	r3, r3
 800ddea:	021b      	lsls	r3, r3, #8
 800ddec:	b29b      	uxth	r3, r3
 800ddee:	4313      	orrs	r3, r2
 800ddf0:	b29a      	uxth	r2, r3
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	7b9a      	ldrb	r2, [r3, #14]
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	7bda      	ldrb	r2, [r3, #15]
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	7c1a      	ldrb	r2, [r3, #16]
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	7c5a      	ldrb	r2, [r3, #17]
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	745a      	strb	r2, [r3, #17]
  }
}
 800de16:	bf00      	nop
 800de18:	3714      	adds	r7, #20
 800de1a:	46bd      	mov	sp, r7
 800de1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de20:	4770      	bx	lr

0800de22 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800de22:	b580      	push	{r7, lr}
 800de24:	b08a      	sub	sp, #40	; 0x28
 800de26:	af00      	add	r7, sp, #0
 800de28:	60f8      	str	r0, [r7, #12]
 800de2a:	60b9      	str	r1, [r7, #8]
 800de2c:	4613      	mov	r3, r2
 800de2e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800de34:	2300      	movs	r3, #0
 800de36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800de3a:	2300      	movs	r3, #0
 800de3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	781a      	ldrb	r2, [r3, #0]
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	785a      	ldrb	r2, [r3, #1]
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	3302      	adds	r3, #2
 800de58:	781b      	ldrb	r3, [r3, #0]
 800de5a:	b29a      	uxth	r2, r3
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	3303      	adds	r3, #3
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	b29b      	uxth	r3, r3
 800de64:	021b      	lsls	r3, r3, #8
 800de66:	b29b      	uxth	r3, r3
 800de68:	4313      	orrs	r3, r2
 800de6a:	b29a      	uxth	r2, r3
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	791a      	ldrb	r2, [r3, #4]
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	795a      	ldrb	r2, [r3, #5]
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	799a      	ldrb	r2, [r3, #6]
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	79da      	ldrb	r2, [r3, #7]
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	7a1a      	ldrb	r2, [r3, #8]
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800de98:	88fb      	ldrh	r3, [r7, #6]
 800de9a:	2b09      	cmp	r3, #9
 800de9c:	d95f      	bls.n	800df5e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800de9e:	2309      	movs	r3, #9
 800dea0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800dea2:	2300      	movs	r3, #0
 800dea4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800dea6:	e051      	b.n	800df4c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800dea8:	f107 0316 	add.w	r3, r7, #22
 800deac:	4619      	mov	r1, r3
 800deae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800deb0:	f000 f8e8 	bl	800e084 <USBH_GetNextDesc>
 800deb4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800deb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb8:	785b      	ldrb	r3, [r3, #1]
 800deba:	2b04      	cmp	r3, #4
 800debc:	d146      	bne.n	800df4c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800debe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dec2:	221a      	movs	r2, #26
 800dec4:	fb02 f303 	mul.w	r3, r2, r3
 800dec8:	3308      	adds	r3, #8
 800deca:	68fa      	ldr	r2, [r7, #12]
 800decc:	4413      	add	r3, r2
 800dece:	3302      	adds	r3, #2
 800ded0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ded2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ded4:	69f8      	ldr	r0, [r7, #28]
 800ded6:	f000 f846 	bl	800df66 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800deda:	2300      	movs	r3, #0
 800dedc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800dee0:	2300      	movs	r3, #0
 800dee2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800dee4:	e022      	b.n	800df2c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800dee6:	f107 0316 	add.w	r3, r7, #22
 800deea:	4619      	mov	r1, r3
 800deec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800deee:	f000 f8c9 	bl	800e084 <USBH_GetNextDesc>
 800def2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800def4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def6:	785b      	ldrb	r3, [r3, #1]
 800def8:	2b05      	cmp	r3, #5
 800defa:	d117      	bne.n	800df2c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800defc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df00:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800df04:	3201      	adds	r2, #1
 800df06:	00d2      	lsls	r2, r2, #3
 800df08:	211a      	movs	r1, #26
 800df0a:	fb01 f303 	mul.w	r3, r1, r3
 800df0e:	4413      	add	r3, r2
 800df10:	3308      	adds	r3, #8
 800df12:	68fa      	ldr	r2, [r7, #12]
 800df14:	4413      	add	r3, r2
 800df16:	3304      	adds	r3, #4
 800df18:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800df1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df1c:	69b8      	ldr	r0, [r7, #24]
 800df1e:	f000 f851 	bl	800dfc4 <USBH_ParseEPDesc>
            ep_ix++;
 800df22:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800df26:	3301      	adds	r3, #1
 800df28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800df2c:	69fb      	ldr	r3, [r7, #28]
 800df2e:	791b      	ldrb	r3, [r3, #4]
 800df30:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800df34:	429a      	cmp	r2, r3
 800df36:	d204      	bcs.n	800df42 <USBH_ParseCfgDesc+0x120>
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	885a      	ldrh	r2, [r3, #2]
 800df3c:	8afb      	ldrh	r3, [r7, #22]
 800df3e:	429a      	cmp	r2, r3
 800df40:	d8d1      	bhi.n	800dee6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800df42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df46:	3301      	adds	r3, #1
 800df48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800df4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df50:	2b01      	cmp	r3, #1
 800df52:	d804      	bhi.n	800df5e <USBH_ParseCfgDesc+0x13c>
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	885a      	ldrh	r2, [r3, #2]
 800df58:	8afb      	ldrh	r3, [r7, #22]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d8a4      	bhi.n	800dea8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800df5e:	bf00      	nop
 800df60:	3728      	adds	r7, #40	; 0x28
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}

0800df66 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800df66:	b480      	push	{r7}
 800df68:	b083      	sub	sp, #12
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	6078      	str	r0, [r7, #4]
 800df6e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	781a      	ldrb	r2, [r3, #0]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	785a      	ldrb	r2, [r3, #1]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	789a      	ldrb	r2, [r3, #2]
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	78da      	ldrb	r2, [r3, #3]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	791a      	ldrb	r2, [r3, #4]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	795a      	ldrb	r2, [r3, #5]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	799a      	ldrb	r2, [r3, #6]
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	79da      	ldrb	r2, [r3, #7]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	7a1a      	ldrb	r2, [r3, #8]
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	721a      	strb	r2, [r3, #8]
}
 800dfb8:	bf00      	nop
 800dfba:	370c      	adds	r7, #12
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc2:	4770      	bx	lr

0800dfc4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b083      	sub	sp, #12
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	781a      	ldrb	r2, [r3, #0]
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	785a      	ldrb	r2, [r3, #1]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	789a      	ldrb	r2, [r3, #2]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	78da      	ldrb	r2, [r3, #3]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	3304      	adds	r3, #4
 800dff2:	781b      	ldrb	r3, [r3, #0]
 800dff4:	b29a      	uxth	r2, r3
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	3305      	adds	r3, #5
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	b29b      	uxth	r3, r3
 800dffe:	021b      	lsls	r3, r3, #8
 800e000:	b29b      	uxth	r3, r3
 800e002:	4313      	orrs	r3, r2
 800e004:	b29a      	uxth	r2, r3
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	799a      	ldrb	r2, [r3, #6]
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	719a      	strb	r2, [r3, #6]
}
 800e012:	bf00      	nop
 800e014:	370c      	adds	r7, #12
 800e016:	46bd      	mov	sp, r7
 800e018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01c:	4770      	bx	lr

0800e01e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e01e:	b480      	push	{r7}
 800e020:	b087      	sub	sp, #28
 800e022:	af00      	add	r7, sp, #0
 800e024:	60f8      	str	r0, [r7, #12]
 800e026:	60b9      	str	r1, [r7, #8]
 800e028:	4613      	mov	r3, r2
 800e02a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	3301      	adds	r3, #1
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	2b03      	cmp	r3, #3
 800e034:	d120      	bne.n	800e078 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	1e9a      	subs	r2, r3, #2
 800e03c:	88fb      	ldrh	r3, [r7, #6]
 800e03e:	4293      	cmp	r3, r2
 800e040:	bf28      	it	cs
 800e042:	4613      	movcs	r3, r2
 800e044:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	3302      	adds	r3, #2
 800e04a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e04c:	2300      	movs	r3, #0
 800e04e:	82fb      	strh	r3, [r7, #22]
 800e050:	e00b      	b.n	800e06a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e052:	8afb      	ldrh	r3, [r7, #22]
 800e054:	68fa      	ldr	r2, [r7, #12]
 800e056:	4413      	add	r3, r2
 800e058:	781a      	ldrb	r2, [r3, #0]
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	3301      	adds	r3, #1
 800e062:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e064:	8afb      	ldrh	r3, [r7, #22]
 800e066:	3302      	adds	r3, #2
 800e068:	82fb      	strh	r3, [r7, #22]
 800e06a:	8afa      	ldrh	r2, [r7, #22]
 800e06c:	8abb      	ldrh	r3, [r7, #20]
 800e06e:	429a      	cmp	r2, r3
 800e070:	d3ef      	bcc.n	800e052 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	2200      	movs	r2, #0
 800e076:	701a      	strb	r2, [r3, #0]
  }
}
 800e078:	bf00      	nop
 800e07a:	371c      	adds	r7, #28
 800e07c:	46bd      	mov	sp, r7
 800e07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e082:	4770      	bx	lr

0800e084 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800e084:	b480      	push	{r7}
 800e086:	b085      	sub	sp, #20
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	881a      	ldrh	r2, [r3, #0]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	b29b      	uxth	r3, r3
 800e098:	4413      	add	r3, r2
 800e09a:	b29a      	uxth	r2, r3
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	781b      	ldrb	r3, [r3, #0]
 800e0a4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	4413      	add	r3, r2
 800e0aa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e0ac:	68fb      	ldr	r3, [r7, #12]
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3714      	adds	r7, #20
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b8:	4770      	bx	lr

0800e0ba <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e0ba:	b580      	push	{r7, lr}
 800e0bc:	b086      	sub	sp, #24
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	60f8      	str	r0, [r7, #12]
 800e0c2:	60b9      	str	r1, [r7, #8]
 800e0c4:	4613      	mov	r3, r2
 800e0c6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	789b      	ldrb	r3, [r3, #2]
 800e0d0:	2b01      	cmp	r3, #1
 800e0d2:	d002      	beq.n	800e0da <USBH_CtlReq+0x20>
 800e0d4:	2b02      	cmp	r3, #2
 800e0d6:	d00f      	beq.n	800e0f8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800e0d8:	e027      	b.n	800e12a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	68ba      	ldr	r2, [r7, #8]
 800e0de:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	88fa      	ldrh	r2, [r7, #6]
 800e0e4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	2201      	movs	r2, #1
 800e0ea:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	2202      	movs	r2, #2
 800e0f0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	75fb      	strb	r3, [r7, #23]
      break;
 800e0f6:	e018      	b.n	800e12a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800e0f8:	68f8      	ldr	r0, [r7, #12]
 800e0fa:	f000 f81b 	bl	800e134 <USBH_HandleControl>
 800e0fe:	4603      	mov	r3, r0
 800e100:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e102:	7dfb      	ldrb	r3, [r7, #23]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d002      	beq.n	800e10e <USBH_CtlReq+0x54>
 800e108:	7dfb      	ldrb	r3, [r7, #23]
 800e10a:	2b03      	cmp	r3, #3
 800e10c:	d106      	bne.n	800e11c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2201      	movs	r2, #1
 800e112:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	2200      	movs	r2, #0
 800e118:	761a      	strb	r2, [r3, #24]
      break;
 800e11a:	e005      	b.n	800e128 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800e11c:	7dfb      	ldrb	r3, [r7, #23]
 800e11e:	2b02      	cmp	r3, #2
 800e120:	d102      	bne.n	800e128 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	2201      	movs	r2, #1
 800e126:	709a      	strb	r2, [r3, #2]
      break;
 800e128:	bf00      	nop
  }
  return status;
 800e12a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3718      	adds	r7, #24
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b086      	sub	sp, #24
 800e138:	af02      	add	r7, sp, #8
 800e13a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e13c:	2301      	movs	r3, #1
 800e13e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e140:	2300      	movs	r3, #0
 800e142:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	7e1b      	ldrb	r3, [r3, #24]
 800e148:	3b01      	subs	r3, #1
 800e14a:	2b0a      	cmp	r3, #10
 800e14c:	f200 815f 	bhi.w	800e40e <USBH_HandleControl+0x2da>
 800e150:	a201      	add	r2, pc, #4	; (adr r2, 800e158 <USBH_HandleControl+0x24>)
 800e152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e156:	bf00      	nop
 800e158:	0800e185 	.word	0x0800e185
 800e15c:	0800e19f 	.word	0x0800e19f
 800e160:	0800e209 	.word	0x0800e209
 800e164:	0800e22f 	.word	0x0800e22f
 800e168:	0800e267 	.word	0x0800e267
 800e16c:	0800e291 	.word	0x0800e291
 800e170:	0800e2e3 	.word	0x0800e2e3
 800e174:	0800e305 	.word	0x0800e305
 800e178:	0800e341 	.word	0x0800e341
 800e17c:	0800e367 	.word	0x0800e367
 800e180:	0800e3a5 	.word	0x0800e3a5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f103 0110 	add.w	r1, r3, #16
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	795b      	ldrb	r3, [r3, #5]
 800e18e:	461a      	mov	r2, r3
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f000 f951 	bl	800e438 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2202      	movs	r2, #2
 800e19a:	761a      	strb	r2, [r3, #24]
      break;
 800e19c:	e142      	b.n	800e424 <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	795b      	ldrb	r3, [r3, #5]
 800e1a2:	4619      	mov	r1, r3
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f00b f897 	bl	80192d8 <USBH_LL_GetURBState>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e1ae:	7bbb      	ldrb	r3, [r7, #14]
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	d11e      	bne.n	800e1f2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	7c1b      	ldrb	r3, [r3, #16]
 800e1b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e1bc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	8adb      	ldrh	r3, [r3, #22]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d00a      	beq.n	800e1dc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e1c6:	7b7b      	ldrb	r3, [r7, #13]
 800e1c8:	2b80      	cmp	r3, #128	; 0x80
 800e1ca:	d103      	bne.n	800e1d4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2203      	movs	r2, #3
 800e1d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e1d2:	e11e      	b.n	800e412 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2205      	movs	r2, #5
 800e1d8:	761a      	strb	r2, [r3, #24]
      break;
 800e1da:	e11a      	b.n	800e412 <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 800e1dc:	7b7b      	ldrb	r3, [r7, #13]
 800e1de:	2b80      	cmp	r3, #128	; 0x80
 800e1e0:	d103      	bne.n	800e1ea <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2209      	movs	r2, #9
 800e1e6:	761a      	strb	r2, [r3, #24]
      break;
 800e1e8:	e113      	b.n	800e412 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2207      	movs	r2, #7
 800e1ee:	761a      	strb	r2, [r3, #24]
      break;
 800e1f0:	e10f      	b.n	800e412 <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e1f2:	7bbb      	ldrb	r3, [r7, #14]
 800e1f4:	2b04      	cmp	r3, #4
 800e1f6:	d003      	beq.n	800e200 <USBH_HandleControl+0xcc>
 800e1f8:	7bbb      	ldrb	r3, [r7, #14]
 800e1fa:	2b02      	cmp	r3, #2
 800e1fc:	f040 8109 	bne.w	800e412 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	220b      	movs	r2, #11
 800e204:	761a      	strb	r2, [r3, #24]
      break;
 800e206:	e104      	b.n	800e412 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e20e:	b29a      	uxth	r2, r3
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6899      	ldr	r1, [r3, #8]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	899a      	ldrh	r2, [r3, #12]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	791b      	ldrb	r3, [r3, #4]
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f000 f948 	bl	800e4b6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2204      	movs	r2, #4
 800e22a:	761a      	strb	r2, [r3, #24]
      break;
 800e22c:	e0fa      	b.n	800e424 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	791b      	ldrb	r3, [r3, #4]
 800e232:	4619      	mov	r1, r3
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f00b f84f 	bl	80192d8 <USBH_LL_GetURBState>
 800e23a:	4603      	mov	r3, r0
 800e23c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e23e:	7bbb      	ldrb	r3, [r7, #14]
 800e240:	2b01      	cmp	r3, #1
 800e242:	d102      	bne.n	800e24a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2209      	movs	r2, #9
 800e248:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e24a:	7bbb      	ldrb	r3, [r7, #14]
 800e24c:	2b05      	cmp	r3, #5
 800e24e:	d102      	bne.n	800e256 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e250:	2303      	movs	r3, #3
 800e252:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e254:	e0df      	b.n	800e416 <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 800e256:	7bbb      	ldrb	r3, [r7, #14]
 800e258:	2b04      	cmp	r3, #4
 800e25a:	f040 80dc 	bne.w	800e416 <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	220b      	movs	r2, #11
 800e262:	761a      	strb	r2, [r3, #24]
      break;
 800e264:	e0d7      	b.n	800e416 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6899      	ldr	r1, [r3, #8]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	899a      	ldrh	r2, [r3, #12]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	795b      	ldrb	r3, [r3, #5]
 800e272:	2001      	movs	r0, #1
 800e274:	9000      	str	r0, [sp, #0]
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 f8f8 	bl	800e46c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e282:	b29a      	uxth	r2, r3
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2206      	movs	r2, #6
 800e28c:	761a      	strb	r2, [r3, #24]
      break;
 800e28e:	e0c9      	b.n	800e424 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	795b      	ldrb	r3, [r3, #5]
 800e294:	4619      	mov	r1, r3
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f00b f81e 	bl	80192d8 <USBH_LL_GetURBState>
 800e29c:	4603      	mov	r3, r0
 800e29e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e2a0:	7bbb      	ldrb	r3, [r7, #14]
 800e2a2:	2b01      	cmp	r3, #1
 800e2a4:	d103      	bne.n	800e2ae <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2207      	movs	r2, #7
 800e2aa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e2ac:	e0b5      	b.n	800e41a <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 800e2ae:	7bbb      	ldrb	r3, [r7, #14]
 800e2b0:	2b05      	cmp	r3, #5
 800e2b2:	d105      	bne.n	800e2c0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	220c      	movs	r2, #12
 800e2b8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e2ba:	2303      	movs	r3, #3
 800e2bc:	73fb      	strb	r3, [r7, #15]
      break;
 800e2be:	e0ac      	b.n	800e41a <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e2c0:	7bbb      	ldrb	r3, [r7, #14]
 800e2c2:	2b02      	cmp	r3, #2
 800e2c4:	d103      	bne.n	800e2ce <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2205      	movs	r2, #5
 800e2ca:	761a      	strb	r2, [r3, #24]
      break;
 800e2cc:	e0a5      	b.n	800e41a <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 800e2ce:	7bbb      	ldrb	r3, [r7, #14]
 800e2d0:	2b04      	cmp	r3, #4
 800e2d2:	f040 80a2 	bne.w	800e41a <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	220b      	movs	r2, #11
 800e2da:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e2dc:	2302      	movs	r3, #2
 800e2de:	73fb      	strb	r3, [r7, #15]
      break;
 800e2e0:	e09b      	b.n	800e41a <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	791b      	ldrb	r3, [r3, #4]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	2100      	movs	r1, #0
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f000 f8e3 	bl	800e4b6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e2f6:	b29a      	uxth	r2, r3
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2208      	movs	r2, #8
 800e300:	761a      	strb	r2, [r3, #24]

      break;
 800e302:	e08f      	b.n	800e424 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	791b      	ldrb	r3, [r3, #4]
 800e308:	4619      	mov	r1, r3
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f00a ffe4 	bl	80192d8 <USBH_LL_GetURBState>
 800e310:	4603      	mov	r3, r0
 800e312:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e314:	7bbb      	ldrb	r3, [r7, #14]
 800e316:	2b01      	cmp	r3, #1
 800e318:	d105      	bne.n	800e326 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	220d      	movs	r2, #13
 800e31e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e320:	2300      	movs	r3, #0
 800e322:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e324:	e07b      	b.n	800e41e <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 800e326:	7bbb      	ldrb	r3, [r7, #14]
 800e328:	2b04      	cmp	r3, #4
 800e32a:	d103      	bne.n	800e334 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	220b      	movs	r2, #11
 800e330:	761a      	strb	r2, [r3, #24]
      break;
 800e332:	e074      	b.n	800e41e <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 800e334:	7bbb      	ldrb	r3, [r7, #14]
 800e336:	2b05      	cmp	r3, #5
 800e338:	d171      	bne.n	800e41e <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 800e33a:	2303      	movs	r3, #3
 800e33c:	73fb      	strb	r3, [r7, #15]
      break;
 800e33e:	e06e      	b.n	800e41e <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	795b      	ldrb	r3, [r3, #5]
 800e344:	2201      	movs	r2, #1
 800e346:	9200      	str	r2, [sp, #0]
 800e348:	2200      	movs	r2, #0
 800e34a:	2100      	movs	r1, #0
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f000 f88d 	bl	800e46c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e358:	b29a      	uxth	r2, r3
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	220a      	movs	r2, #10
 800e362:	761a      	strb	r2, [r3, #24]
      break;
 800e364:	e05e      	b.n	800e424 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	795b      	ldrb	r3, [r3, #5]
 800e36a:	4619      	mov	r1, r3
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f00a ffb3 	bl	80192d8 <USBH_LL_GetURBState>
 800e372:	4603      	mov	r3, r0
 800e374:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e376:	7bbb      	ldrb	r3, [r7, #14]
 800e378:	2b01      	cmp	r3, #1
 800e37a:	d105      	bne.n	800e388 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800e37c:	2300      	movs	r3, #0
 800e37e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	220d      	movs	r2, #13
 800e384:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e386:	e04c      	b.n	800e422 <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e388:	7bbb      	ldrb	r3, [r7, #14]
 800e38a:	2b02      	cmp	r3, #2
 800e38c:	d103      	bne.n	800e396 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2209      	movs	r2, #9
 800e392:	761a      	strb	r2, [r3, #24]
      break;
 800e394:	e045      	b.n	800e422 <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 800e396:	7bbb      	ldrb	r3, [r7, #14]
 800e398:	2b04      	cmp	r3, #4
 800e39a:	d142      	bne.n	800e422 <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	220b      	movs	r2, #11
 800e3a0:	761a      	strb	r2, [r3, #24]
      break;
 800e3a2:	e03e      	b.n	800e422 <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	7e5b      	ldrb	r3, [r3, #25]
 800e3a8:	3301      	adds	r3, #1
 800e3aa:	b2da      	uxtb	r2, r3
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	765a      	strb	r2, [r3, #25]
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	7e5b      	ldrb	r3, [r3, #25]
 800e3b4:	2b02      	cmp	r3, #2
 800e3b6:	d806      	bhi.n	800e3c6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2201      	movs	r2, #1
 800e3bc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e3c4:	e02e      	b.n	800e424 <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e3cc:	2106      	movs	r1, #6
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800e3d8:	4815      	ldr	r0, [pc, #84]	; (800e430 <USBH_HandleControl+0x2fc>)
 800e3da:	f00b fdc7 	bl	8019f6c <iprintf>
 800e3de:	4815      	ldr	r0, [pc, #84]	; (800e434 <USBH_HandleControl+0x300>)
 800e3e0:	f00b fdc4 	bl	8019f6c <iprintf>
 800e3e4:	200a      	movs	r0, #10
 800e3e6:	f00b fdd9 	bl	8019f9c <putchar>
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	795b      	ldrb	r3, [r3, #5]
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f000 f911 	bl	800e618 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	791b      	ldrb	r3, [r3, #4]
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f000 f90b 	bl	800e618 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2200      	movs	r2, #0
 800e406:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e408:	2302      	movs	r3, #2
 800e40a:	73fb      	strb	r3, [r7, #15]
      break;
 800e40c:	e00a      	b.n	800e424 <USBH_HandleControl+0x2f0>

    default:
      break;
 800e40e:	bf00      	nop
 800e410:	e008      	b.n	800e424 <USBH_HandleControl+0x2f0>
      break;
 800e412:	bf00      	nop
 800e414:	e006      	b.n	800e424 <USBH_HandleControl+0x2f0>
      break;
 800e416:	bf00      	nop
 800e418:	e004      	b.n	800e424 <USBH_HandleControl+0x2f0>
      break;
 800e41a:	bf00      	nop
 800e41c:	e002      	b.n	800e424 <USBH_HandleControl+0x2f0>
      break;
 800e41e:	bf00      	nop
 800e420:	e000      	b.n	800e424 <USBH_HandleControl+0x2f0>
      break;
 800e422:	bf00      	nop
  }

  return status;
 800e424:	7bfb      	ldrb	r3, [r7, #15]
}
 800e426:	4618      	mov	r0, r3
 800e428:	3710      	adds	r7, #16
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
 800e42e:	bf00      	nop
 800e430:	0801c73c 	.word	0x0801c73c
 800e434:	0801c744 	.word	0x0801c744

0800e438 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b088      	sub	sp, #32
 800e43c:	af04      	add	r7, sp, #16
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	60b9      	str	r1, [r7, #8]
 800e442:	4613      	mov	r3, r2
 800e444:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e446:	79f9      	ldrb	r1, [r7, #7]
 800e448:	2300      	movs	r3, #0
 800e44a:	9303      	str	r3, [sp, #12]
 800e44c:	2308      	movs	r3, #8
 800e44e:	9302      	str	r3, [sp, #8]
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	9301      	str	r3, [sp, #4]
 800e454:	2300      	movs	r3, #0
 800e456:	9300      	str	r3, [sp, #0]
 800e458:	2300      	movs	r3, #0
 800e45a:	2200      	movs	r2, #0
 800e45c:	68f8      	ldr	r0, [r7, #12]
 800e45e:	f00a ff0a 	bl	8019276 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800e462:	2300      	movs	r3, #0
}
 800e464:	4618      	mov	r0, r3
 800e466:	3710      	adds	r7, #16
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}

0800e46c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b088      	sub	sp, #32
 800e470:	af04      	add	r7, sp, #16
 800e472:	60f8      	str	r0, [r7, #12]
 800e474:	60b9      	str	r1, [r7, #8]
 800e476:	4611      	mov	r1, r2
 800e478:	461a      	mov	r2, r3
 800e47a:	460b      	mov	r3, r1
 800e47c:	80fb      	strh	r3, [r7, #6]
 800e47e:	4613      	mov	r3, r2
 800e480:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d001      	beq.n	800e490 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e48c:	2300      	movs	r3, #0
 800e48e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e490:	7979      	ldrb	r1, [r7, #5]
 800e492:	7e3b      	ldrb	r3, [r7, #24]
 800e494:	9303      	str	r3, [sp, #12]
 800e496:	88fb      	ldrh	r3, [r7, #6]
 800e498:	9302      	str	r3, [sp, #8]
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	9301      	str	r3, [sp, #4]
 800e49e:	2301      	movs	r3, #1
 800e4a0:	9300      	str	r3, [sp, #0]
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	68f8      	ldr	r0, [r7, #12]
 800e4a8:	f00a fee5 	bl	8019276 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e4ac:	2300      	movs	r3, #0
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3710      	adds	r7, #16
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}

0800e4b6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e4b6:	b580      	push	{r7, lr}
 800e4b8:	b088      	sub	sp, #32
 800e4ba:	af04      	add	r7, sp, #16
 800e4bc:	60f8      	str	r0, [r7, #12]
 800e4be:	60b9      	str	r1, [r7, #8]
 800e4c0:	4611      	mov	r1, r2
 800e4c2:	461a      	mov	r2, r3
 800e4c4:	460b      	mov	r3, r1
 800e4c6:	80fb      	strh	r3, [r7, #6]
 800e4c8:	4613      	mov	r3, r2
 800e4ca:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e4cc:	7979      	ldrb	r1, [r7, #5]
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	9303      	str	r3, [sp, #12]
 800e4d2:	88fb      	ldrh	r3, [r7, #6]
 800e4d4:	9302      	str	r3, [sp, #8]
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	9301      	str	r3, [sp, #4]
 800e4da:	2301      	movs	r3, #1
 800e4dc:	9300      	str	r3, [sp, #0]
 800e4de:	2300      	movs	r3, #0
 800e4e0:	2201      	movs	r2, #1
 800e4e2:	68f8      	ldr	r0, [r7, #12]
 800e4e4:	f00a fec7 	bl	8019276 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e4e8:	2300      	movs	r3, #0

}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	3710      	adds	r7, #16
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}

0800e4f2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e4f2:	b580      	push	{r7, lr}
 800e4f4:	b088      	sub	sp, #32
 800e4f6:	af04      	add	r7, sp, #16
 800e4f8:	60f8      	str	r0, [r7, #12]
 800e4fa:	60b9      	str	r1, [r7, #8]
 800e4fc:	4611      	mov	r1, r2
 800e4fe:	461a      	mov	r2, r3
 800e500:	460b      	mov	r3, r1
 800e502:	80fb      	strh	r3, [r7, #6]
 800e504:	4613      	mov	r3, r2
 800e506:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d001      	beq.n	800e516 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e512:	2300      	movs	r3, #0
 800e514:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e516:	7979      	ldrb	r1, [r7, #5]
 800e518:	7e3b      	ldrb	r3, [r7, #24]
 800e51a:	9303      	str	r3, [sp, #12]
 800e51c:	88fb      	ldrh	r3, [r7, #6]
 800e51e:	9302      	str	r3, [sp, #8]
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	9301      	str	r3, [sp, #4]
 800e524:	2301      	movs	r3, #1
 800e526:	9300      	str	r3, [sp, #0]
 800e528:	2302      	movs	r3, #2
 800e52a:	2200      	movs	r2, #0
 800e52c:	68f8      	ldr	r0, [r7, #12]
 800e52e:	f00a fea2 	bl	8019276 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e532:	2300      	movs	r3, #0
}
 800e534:	4618      	mov	r0, r3
 800e536:	3710      	adds	r7, #16
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b088      	sub	sp, #32
 800e540:	af04      	add	r7, sp, #16
 800e542:	60f8      	str	r0, [r7, #12]
 800e544:	60b9      	str	r1, [r7, #8]
 800e546:	4611      	mov	r1, r2
 800e548:	461a      	mov	r2, r3
 800e54a:	460b      	mov	r3, r1
 800e54c:	80fb      	strh	r3, [r7, #6]
 800e54e:	4613      	mov	r3, r2
 800e550:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e552:	7979      	ldrb	r1, [r7, #5]
 800e554:	2300      	movs	r3, #0
 800e556:	9303      	str	r3, [sp, #12]
 800e558:	88fb      	ldrh	r3, [r7, #6]
 800e55a:	9302      	str	r3, [sp, #8]
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	9301      	str	r3, [sp, #4]
 800e560:	2301      	movs	r3, #1
 800e562:	9300      	str	r3, [sp, #0]
 800e564:	2302      	movs	r3, #2
 800e566:	2201      	movs	r2, #1
 800e568:	68f8      	ldr	r0, [r7, #12]
 800e56a:	f00a fe84 	bl	8019276 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e56e:	2300      	movs	r3, #0
}
 800e570:	4618      	mov	r0, r3
 800e572:	3710      	adds	r7, #16
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}

0800e578 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b086      	sub	sp, #24
 800e57c:	af04      	add	r7, sp, #16
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	4608      	mov	r0, r1
 800e582:	4611      	mov	r1, r2
 800e584:	461a      	mov	r2, r3
 800e586:	4603      	mov	r3, r0
 800e588:	70fb      	strb	r3, [r7, #3]
 800e58a:	460b      	mov	r3, r1
 800e58c:	70bb      	strb	r3, [r7, #2]
 800e58e:	4613      	mov	r3, r2
 800e590:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e592:	7878      	ldrb	r0, [r7, #1]
 800e594:	78ba      	ldrb	r2, [r7, #2]
 800e596:	78f9      	ldrb	r1, [r7, #3]
 800e598:	8b3b      	ldrh	r3, [r7, #24]
 800e59a:	9302      	str	r3, [sp, #8]
 800e59c:	7d3b      	ldrb	r3, [r7, #20]
 800e59e:	9301      	str	r3, [sp, #4]
 800e5a0:	7c3b      	ldrb	r3, [r7, #16]
 800e5a2:	9300      	str	r3, [sp, #0]
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f00a fe17 	bl	80191da <USBH_LL_OpenPipe>

  return USBH_OK;
 800e5ac:	2300      	movs	r3, #0
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3708      	adds	r7, #8
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}

0800e5b6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e5b6:	b580      	push	{r7, lr}
 800e5b8:	b082      	sub	sp, #8
 800e5ba:	af00      	add	r7, sp, #0
 800e5bc:	6078      	str	r0, [r7, #4]
 800e5be:	460b      	mov	r3, r1
 800e5c0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800e5c2:	78fb      	ldrb	r3, [r7, #3]
 800e5c4:	4619      	mov	r1, r3
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f00a fe36 	bl	8019238 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e5cc:	2300      	movs	r3, #0
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3708      	adds	r7, #8
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}

0800e5d6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e5d6:	b580      	push	{r7, lr}
 800e5d8:	b084      	sub	sp, #16
 800e5da:	af00      	add	r7, sp, #0
 800e5dc:	6078      	str	r0, [r7, #4]
 800e5de:	460b      	mov	r3, r1
 800e5e0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f000 f836 	bl	800e654 <USBH_GetFreePipe>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e5ec:	89fb      	ldrh	r3, [r7, #14]
 800e5ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e5f2:	4293      	cmp	r3, r2
 800e5f4:	d00a      	beq.n	800e60c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800e5f6:	78fa      	ldrb	r2, [r7, #3]
 800e5f8:	89fb      	ldrh	r3, [r7, #14]
 800e5fa:	f003 030f 	and.w	r3, r3, #15
 800e5fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e602:	6879      	ldr	r1, [r7, #4]
 800e604:	33e0      	adds	r3, #224	; 0xe0
 800e606:	009b      	lsls	r3, r3, #2
 800e608:	440b      	add	r3, r1
 800e60a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e60c:	89fb      	ldrh	r3, [r7, #14]
 800e60e:	b2db      	uxtb	r3, r3
}
 800e610:	4618      	mov	r0, r3
 800e612:	3710      	adds	r7, #16
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}

0800e618 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e618:	b480      	push	{r7}
 800e61a:	b083      	sub	sp, #12
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	460b      	mov	r3, r1
 800e622:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800e624:	78fb      	ldrb	r3, [r7, #3]
 800e626:	2b0a      	cmp	r3, #10
 800e628:	d80d      	bhi.n	800e646 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e62a:	78fb      	ldrb	r3, [r7, #3]
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	33e0      	adds	r3, #224	; 0xe0
 800e630:	009b      	lsls	r3, r3, #2
 800e632:	4413      	add	r3, r2
 800e634:	685a      	ldr	r2, [r3, #4]
 800e636:	78fb      	ldrb	r3, [r7, #3]
 800e638:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e63c:	6879      	ldr	r1, [r7, #4]
 800e63e:	33e0      	adds	r3, #224	; 0xe0
 800e640:	009b      	lsls	r3, r3, #2
 800e642:	440b      	add	r3, r1
 800e644:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e646:	2300      	movs	r3, #0
}
 800e648:	4618      	mov	r0, r3
 800e64a:	370c      	adds	r7, #12
 800e64c:	46bd      	mov	sp, r7
 800e64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e652:	4770      	bx	lr

0800e654 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e654:	b480      	push	{r7}
 800e656:	b085      	sub	sp, #20
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e65c:	2300      	movs	r3, #0
 800e65e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800e660:	2300      	movs	r3, #0
 800e662:	73fb      	strb	r3, [r7, #15]
 800e664:	e00f      	b.n	800e686 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e666:	7bfb      	ldrb	r3, [r7, #15]
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	33e0      	adds	r3, #224	; 0xe0
 800e66c:	009b      	lsls	r3, r3, #2
 800e66e:	4413      	add	r3, r2
 800e670:	685b      	ldr	r3, [r3, #4]
 800e672:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e676:	2b00      	cmp	r3, #0
 800e678:	d102      	bne.n	800e680 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e67a:	7bfb      	ldrb	r3, [r7, #15]
 800e67c:	b29b      	uxth	r3, r3
 800e67e:	e007      	b.n	800e690 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800e680:	7bfb      	ldrb	r3, [r7, #15]
 800e682:	3301      	adds	r3, #1
 800e684:	73fb      	strb	r3, [r7, #15]
 800e686:	7bfb      	ldrb	r3, [r7, #15]
 800e688:	2b0a      	cmp	r3, #10
 800e68a:	d9ec      	bls.n	800e666 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e68c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e690:	4618      	mov	r0, r3
 800e692:	3714      	adds	r7, #20
 800e694:	46bd      	mov	sp, r7
 800e696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69a:	4770      	bx	lr

0800e69c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e69c:	b480      	push	{r7}
 800e69e:	b087      	sub	sp, #28
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	60f8      	str	r0, [r7, #12]
 800e6a4:	60b9      	str	r1, [r7, #8]
 800e6a6:	4613      	mov	r3, r2
 800e6a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e6b2:	4b1f      	ldr	r3, [pc, #124]	; (800e730 <FATFS_LinkDriverEx+0x94>)
 800e6b4:	7a5b      	ldrb	r3, [r3, #9]
 800e6b6:	b2db      	uxtb	r3, r3
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d131      	bne.n	800e720 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e6bc:	4b1c      	ldr	r3, [pc, #112]	; (800e730 <FATFS_LinkDriverEx+0x94>)
 800e6be:	7a5b      	ldrb	r3, [r3, #9]
 800e6c0:	b2db      	uxtb	r3, r3
 800e6c2:	461a      	mov	r2, r3
 800e6c4:	4b1a      	ldr	r3, [pc, #104]	; (800e730 <FATFS_LinkDriverEx+0x94>)
 800e6c6:	2100      	movs	r1, #0
 800e6c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e6ca:	4b19      	ldr	r3, [pc, #100]	; (800e730 <FATFS_LinkDriverEx+0x94>)
 800e6cc:	7a5b      	ldrb	r3, [r3, #9]
 800e6ce:	b2db      	uxtb	r3, r3
 800e6d0:	4a17      	ldr	r2, [pc, #92]	; (800e730 <FATFS_LinkDriverEx+0x94>)
 800e6d2:	009b      	lsls	r3, r3, #2
 800e6d4:	4413      	add	r3, r2
 800e6d6:	68fa      	ldr	r2, [r7, #12]
 800e6d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e6da:	4b15      	ldr	r3, [pc, #84]	; (800e730 <FATFS_LinkDriverEx+0x94>)
 800e6dc:	7a5b      	ldrb	r3, [r3, #9]
 800e6de:	b2db      	uxtb	r3, r3
 800e6e0:	461a      	mov	r2, r3
 800e6e2:	4b13      	ldr	r3, [pc, #76]	; (800e730 <FATFS_LinkDriverEx+0x94>)
 800e6e4:	4413      	add	r3, r2
 800e6e6:	79fa      	ldrb	r2, [r7, #7]
 800e6e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e6ea:	4b11      	ldr	r3, [pc, #68]	; (800e730 <FATFS_LinkDriverEx+0x94>)
 800e6ec:	7a5b      	ldrb	r3, [r3, #9]
 800e6ee:	b2db      	uxtb	r3, r3
 800e6f0:	1c5a      	adds	r2, r3, #1
 800e6f2:	b2d1      	uxtb	r1, r2
 800e6f4:	4a0e      	ldr	r2, [pc, #56]	; (800e730 <FATFS_LinkDriverEx+0x94>)
 800e6f6:	7251      	strb	r1, [r2, #9]
 800e6f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e6fa:	7dbb      	ldrb	r3, [r7, #22]
 800e6fc:	3330      	adds	r3, #48	; 0x30
 800e6fe:	b2da      	uxtb	r2, r3
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	3301      	adds	r3, #1
 800e708:	223a      	movs	r2, #58	; 0x3a
 800e70a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	3302      	adds	r3, #2
 800e710:	222f      	movs	r2, #47	; 0x2f
 800e712:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	3303      	adds	r3, #3
 800e718:	2200      	movs	r2, #0
 800e71a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e71c:	2300      	movs	r3, #0
 800e71e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e720:	7dfb      	ldrb	r3, [r7, #23]
}
 800e722:	4618      	mov	r0, r3
 800e724:	371c      	adds	r7, #28
 800e726:	46bd      	mov	sp, r7
 800e728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72c:	4770      	bx	lr
 800e72e:	bf00      	nop
 800e730:	2000075c 	.word	0x2000075c

0800e734 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b082      	sub	sp, #8
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e73e:	2200      	movs	r2, #0
 800e740:	6839      	ldr	r1, [r7, #0]
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f7ff ffaa 	bl	800e69c <FATFS_LinkDriverEx>
 800e748:	4603      	mov	r3, r0
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3708      	adds	r7, #8
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}

0800e752 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800e752:	b480      	push	{r7}
 800e754:	b083      	sub	sp, #12
 800e756:	af00      	add	r7, sp, #0
 800e758:	4603      	mov	r3, r0
 800e75a:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800e75c:	88fb      	ldrh	r3, [r7, #6]
 800e75e:	021b      	lsls	r3, r3, #8
 800e760:	b21a      	sxth	r2, r3
 800e762:	88fb      	ldrh	r3, [r7, #6]
 800e764:	0a1b      	lsrs	r3, r3, #8
 800e766:	b29b      	uxth	r3, r3
 800e768:	b21b      	sxth	r3, r3
 800e76a:	4313      	orrs	r3, r2
 800e76c:	b21b      	sxth	r3, r3
 800e76e:	b29b      	uxth	r3, r3
}
 800e770:	4618      	mov	r0, r3
 800e772:	370c      	adds	r7, #12
 800e774:	46bd      	mov	sp, r7
 800e776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77a:	4770      	bx	lr

0800e77c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800e77c:	b480      	push	{r7}
 800e77e:	b083      	sub	sp, #12
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	061a      	lsls	r2, r3, #24
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	021b      	lsls	r3, r3, #8
 800e78c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e790:	431a      	orrs	r2, r3
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	0a1b      	lsrs	r3, r3, #8
 800e796:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e79a:	431a      	orrs	r2, r3
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	0e1b      	lsrs	r3, r3, #24
 800e7a0:	4313      	orrs	r3, r2
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	370c      	adds	r7, #12
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ac:	4770      	bx	lr

0800e7ae <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800e7ae:	b580      	push	{r7, lr}
 800e7b0:	b082      	sub	sp, #8
 800e7b2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800e7b8:	f000 f8d4 	bl	800e964 <mem_init>
  memp_init();
 800e7bc:	f000 fbda 	bl	800ef74 <memp_init>
  pbuf_init();
  netif_init();
 800e7c0:	f000 fc92 	bl	800f0e8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800e7c4:	f007 fea2 	bl	801650c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800e7c8:	f001 fd96 	bl	80102f8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800e7cc:	f007 fe14 	bl	80163f8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800e7d0:	bf00      	nop
 800e7d2:	3708      	adds	r7, #8
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b083      	sub	sp, #12
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	4603      	mov	r3, r0
 800e7e0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800e7e2:	4b05      	ldr	r3, [pc, #20]	; (800e7f8 <ptr_to_mem+0x20>)
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	88fb      	ldrh	r3, [r7, #6]
 800e7e8:	4413      	add	r3, r2
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	370c      	adds	r7, #12
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f4:	4770      	bx	lr
 800e7f6:	bf00      	nop
 800e7f8:	20000768 	.word	0x20000768

0800e7fc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b083      	sub	sp, #12
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800e804:	4b05      	ldr	r3, [pc, #20]	; (800e81c <mem_to_ptr+0x20>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	687a      	ldr	r2, [r7, #4]
 800e80a:	1ad3      	subs	r3, r2, r3
 800e80c:	b29b      	uxth	r3, r3
}
 800e80e:	4618      	mov	r0, r3
 800e810:	370c      	adds	r7, #12
 800e812:	46bd      	mov	sp, r7
 800e814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e818:	4770      	bx	lr
 800e81a:	bf00      	nop
 800e81c:	20000768 	.word	0x20000768

0800e820 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800e820:	b590      	push	{r4, r7, lr}
 800e822:	b085      	sub	sp, #20
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800e828:	4b45      	ldr	r3, [pc, #276]	; (800e940 <plug_holes+0x120>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	687a      	ldr	r2, [r7, #4]
 800e82e:	429a      	cmp	r2, r3
 800e830:	d206      	bcs.n	800e840 <plug_holes+0x20>
 800e832:	4b44      	ldr	r3, [pc, #272]	; (800e944 <plug_holes+0x124>)
 800e834:	f240 12df 	movw	r2, #479	; 0x1df
 800e838:	4943      	ldr	r1, [pc, #268]	; (800e948 <plug_holes+0x128>)
 800e83a:	4844      	ldr	r0, [pc, #272]	; (800e94c <plug_holes+0x12c>)
 800e83c:	f00b fb96 	bl	8019f6c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800e840:	4b43      	ldr	r3, [pc, #268]	; (800e950 <plug_holes+0x130>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	687a      	ldr	r2, [r7, #4]
 800e846:	429a      	cmp	r2, r3
 800e848:	d306      	bcc.n	800e858 <plug_holes+0x38>
 800e84a:	4b3e      	ldr	r3, [pc, #248]	; (800e944 <plug_holes+0x124>)
 800e84c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e850:	4940      	ldr	r1, [pc, #256]	; (800e954 <plug_holes+0x134>)
 800e852:	483e      	ldr	r0, [pc, #248]	; (800e94c <plug_holes+0x12c>)
 800e854:	f00b fb8a 	bl	8019f6c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	791b      	ldrb	r3, [r3, #4]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d006      	beq.n	800e86e <plug_holes+0x4e>
 800e860:	4b38      	ldr	r3, [pc, #224]	; (800e944 <plug_holes+0x124>)
 800e862:	f240 12e1 	movw	r2, #481	; 0x1e1
 800e866:	493c      	ldr	r1, [pc, #240]	; (800e958 <plug_holes+0x138>)
 800e868:	4838      	ldr	r0, [pc, #224]	; (800e94c <plug_holes+0x12c>)
 800e86a:	f00b fb7f 	bl	8019f6c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	881b      	ldrh	r3, [r3, #0]
 800e872:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 800e876:	d906      	bls.n	800e886 <plug_holes+0x66>
 800e878:	4b32      	ldr	r3, [pc, #200]	; (800e944 <plug_holes+0x124>)
 800e87a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800e87e:	4937      	ldr	r1, [pc, #220]	; (800e95c <plug_holes+0x13c>)
 800e880:	4832      	ldr	r0, [pc, #200]	; (800e94c <plug_holes+0x12c>)
 800e882:	f00b fb73 	bl	8019f6c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	881b      	ldrh	r3, [r3, #0]
 800e88a:	4618      	mov	r0, r3
 800e88c:	f7ff ffa4 	bl	800e7d8 <ptr_to_mem>
 800e890:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800e892:	687a      	ldr	r2, [r7, #4]
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	429a      	cmp	r2, r3
 800e898:	d024      	beq.n	800e8e4 <plug_holes+0xc4>
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	791b      	ldrb	r3, [r3, #4]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d120      	bne.n	800e8e4 <plug_holes+0xc4>
 800e8a2:	4b2b      	ldr	r3, [pc, #172]	; (800e950 <plug_holes+0x130>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	68fa      	ldr	r2, [r7, #12]
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d01b      	beq.n	800e8e4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800e8ac:	4b2c      	ldr	r3, [pc, #176]	; (800e960 <plug_holes+0x140>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	68fa      	ldr	r2, [r7, #12]
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d102      	bne.n	800e8bc <plug_holes+0x9c>
      lfree = mem;
 800e8b6:	4a2a      	ldr	r2, [pc, #168]	; (800e960 <plug_holes+0x140>)
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	881a      	ldrh	r2, [r3, #0]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	881b      	ldrh	r3, [r3, #0]
 800e8c8:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 800e8cc:	d00a      	beq.n	800e8e4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	881b      	ldrh	r3, [r3, #0]
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f7ff ff80 	bl	800e7d8 <ptr_to_mem>
 800e8d8:	4604      	mov	r4, r0
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f7ff ff8e 	bl	800e7fc <mem_to_ptr>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	885b      	ldrh	r3, [r3, #2]
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f7ff ff75 	bl	800e7d8 <ptr_to_mem>
 800e8ee:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800e8f0:	68ba      	ldr	r2, [r7, #8]
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	d01f      	beq.n	800e938 <plug_holes+0x118>
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	791b      	ldrb	r3, [r3, #4]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d11b      	bne.n	800e938 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800e900:	4b17      	ldr	r3, [pc, #92]	; (800e960 <plug_holes+0x140>)
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	687a      	ldr	r2, [r7, #4]
 800e906:	429a      	cmp	r2, r3
 800e908:	d102      	bne.n	800e910 <plug_holes+0xf0>
      lfree = pmem;
 800e90a:	4a15      	ldr	r2, [pc, #84]	; (800e960 <plug_holes+0x140>)
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	881a      	ldrh	r2, [r3, #0]
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	881b      	ldrh	r3, [r3, #0]
 800e91c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 800e920:	d00a      	beq.n	800e938 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	881b      	ldrh	r3, [r3, #0]
 800e926:	4618      	mov	r0, r3
 800e928:	f7ff ff56 	bl	800e7d8 <ptr_to_mem>
 800e92c:	4604      	mov	r4, r0
 800e92e:	68b8      	ldr	r0, [r7, #8]
 800e930:	f7ff ff64 	bl	800e7fc <mem_to_ptr>
 800e934:	4603      	mov	r3, r0
 800e936:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800e938:	bf00      	nop
 800e93a:	3714      	adds	r7, #20
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd90      	pop	{r4, r7, pc}
 800e940:	20000768 	.word	0x20000768
 800e944:	0801c76c 	.word	0x0801c76c
 800e948:	0801c79c 	.word	0x0801c79c
 800e94c:	0801c7b4 	.word	0x0801c7b4
 800e950:	2000076c 	.word	0x2000076c
 800e954:	0801c7dc 	.word	0x0801c7dc
 800e958:	0801c7f8 	.word	0x0801c7f8
 800e95c:	0801c814 	.word	0x0801c814
 800e960:	20000770 	.word	0x20000770

0800e964 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b082      	sub	sp, #8
 800e968:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800e96a:	4b18      	ldr	r3, [pc, #96]	; (800e9cc <mem_init+0x68>)
 800e96c:	3303      	adds	r3, #3
 800e96e:	f023 0303 	bic.w	r3, r3, #3
 800e972:	461a      	mov	r2, r3
 800e974:	4b16      	ldr	r3, [pc, #88]	; (800e9d0 <mem_init+0x6c>)
 800e976:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800e978:	4b15      	ldr	r3, [pc, #84]	; (800e9d0 <mem_init+0x6c>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800e984:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2200      	movs	r2, #0
 800e98a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2200      	movs	r2, #0
 800e990:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800e992:	f44f 4016 	mov.w	r0, #38400	; 0x9600
 800e996:	f7ff ff1f 	bl	800e7d8 <ptr_to_mem>
 800e99a:	4603      	mov	r3, r0
 800e99c:	4a0d      	ldr	r2, [pc, #52]	; (800e9d4 <mem_init+0x70>)
 800e99e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800e9a0:	4b0c      	ldr	r3, [pc, #48]	; (800e9d4 <mem_init+0x70>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	2201      	movs	r2, #1
 800e9a6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800e9a8:	4b0a      	ldr	r3, [pc, #40]	; (800e9d4 <mem_init+0x70>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800e9b0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800e9b2:	4b08      	ldr	r3, [pc, #32]	; (800e9d4 <mem_init+0x70>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800e9ba:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800e9bc:	4b04      	ldr	r3, [pc, #16]	; (800e9d0 <mem_init+0x6c>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	4a05      	ldr	r2, [pc, #20]	; (800e9d8 <mem_init+0x74>)
 800e9c2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800e9c4:	bf00      	nop
 800e9c6:	3708      	adds	r7, #8
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}
 800e9cc:	20007c44 	.word	0x20007c44
 800e9d0:	20000768 	.word	0x20000768
 800e9d4:	2000076c 	.word	0x2000076c
 800e9d8:	20000770 	.word	0x20000770

0800e9dc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b086      	sub	sp, #24
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f7ff ff09 	bl	800e7fc <mem_to_ptr>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	881b      	ldrh	r3, [r3, #0]
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f7ff fef0 	bl	800e7d8 <ptr_to_mem>
 800e9f8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	885b      	ldrh	r3, [r3, #2]
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7ff feea 	bl	800e7d8 <ptr_to_mem>
 800ea04:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	881b      	ldrh	r3, [r3, #0]
 800ea0a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 800ea0e:	d818      	bhi.n	800ea42 <mem_link_valid+0x66>
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	885b      	ldrh	r3, [r3, #2]
 800ea14:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 800ea18:	d813      	bhi.n	800ea42 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ea1e:	8afa      	ldrh	r2, [r7, #22]
 800ea20:	429a      	cmp	r2, r3
 800ea22:	d004      	beq.n	800ea2e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	881b      	ldrh	r3, [r3, #0]
 800ea28:	8afa      	ldrh	r2, [r7, #22]
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d109      	bne.n	800ea42 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ea2e:	4b08      	ldr	r3, [pc, #32]	; (800ea50 <mem_link_valid+0x74>)
 800ea30:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ea32:	693a      	ldr	r2, [r7, #16]
 800ea34:	429a      	cmp	r2, r3
 800ea36:	d006      	beq.n	800ea46 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	885b      	ldrh	r3, [r3, #2]
 800ea3c:	8afa      	ldrh	r2, [r7, #22]
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d001      	beq.n	800ea46 <mem_link_valid+0x6a>
    return 0;
 800ea42:	2300      	movs	r3, #0
 800ea44:	e000      	b.n	800ea48 <mem_link_valid+0x6c>
  }
  return 1;
 800ea46:	2301      	movs	r3, #1
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	3718      	adds	r7, #24
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}
 800ea50:	2000076c 	.word	0x2000076c

0800ea54 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b084      	sub	sp, #16
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d04c      	beq.n	800eafc <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f003 0303 	and.w	r3, r3, #3
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d007      	beq.n	800ea7c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ea6c:	4b25      	ldr	r3, [pc, #148]	; (800eb04 <mem_free+0xb0>)
 800ea6e:	f240 2273 	movw	r2, #627	; 0x273
 800ea72:	4925      	ldr	r1, [pc, #148]	; (800eb08 <mem_free+0xb4>)
 800ea74:	4825      	ldr	r0, [pc, #148]	; (800eb0c <mem_free+0xb8>)
 800ea76:	f00b fa79 	bl	8019f6c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ea7a:	e040      	b.n	800eafe <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	3b08      	subs	r3, #8
 800ea80:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ea82:	4b23      	ldr	r3, [pc, #140]	; (800eb10 <mem_free+0xbc>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	68fa      	ldr	r2, [r7, #12]
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d306      	bcc.n	800ea9a <mem_free+0x46>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f103 020c 	add.w	r2, r3, #12
 800ea92:	4b20      	ldr	r3, [pc, #128]	; (800eb14 <mem_free+0xc0>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d907      	bls.n	800eaaa <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ea9a:	4b1a      	ldr	r3, [pc, #104]	; (800eb04 <mem_free+0xb0>)
 800ea9c:	f240 227f 	movw	r2, #639	; 0x27f
 800eaa0:	491d      	ldr	r1, [pc, #116]	; (800eb18 <mem_free+0xc4>)
 800eaa2:	481a      	ldr	r0, [pc, #104]	; (800eb0c <mem_free+0xb8>)
 800eaa4:	f00b fa62 	bl	8019f6c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800eaa8:	e029      	b.n	800eafe <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	791b      	ldrb	r3, [r3, #4]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d107      	bne.n	800eac2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800eab2:	4b14      	ldr	r3, [pc, #80]	; (800eb04 <mem_free+0xb0>)
 800eab4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800eab8:	4918      	ldr	r1, [pc, #96]	; (800eb1c <mem_free+0xc8>)
 800eaba:	4814      	ldr	r0, [pc, #80]	; (800eb0c <mem_free+0xb8>)
 800eabc:	f00b fa56 	bl	8019f6c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800eac0:	e01d      	b.n	800eafe <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800eac2:	68f8      	ldr	r0, [r7, #12]
 800eac4:	f7ff ff8a 	bl	800e9dc <mem_link_valid>
 800eac8:	4603      	mov	r3, r0
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d107      	bne.n	800eade <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800eace:	4b0d      	ldr	r3, [pc, #52]	; (800eb04 <mem_free+0xb0>)
 800ead0:	f240 2295 	movw	r2, #661	; 0x295
 800ead4:	4912      	ldr	r1, [pc, #72]	; (800eb20 <mem_free+0xcc>)
 800ead6:	480d      	ldr	r0, [pc, #52]	; (800eb0c <mem_free+0xb8>)
 800ead8:	f00b fa48 	bl	8019f6c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800eadc:	e00f      	b.n	800eafe <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	2200      	movs	r2, #0
 800eae2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800eae4:	4b0f      	ldr	r3, [pc, #60]	; (800eb24 <mem_free+0xd0>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	68fa      	ldr	r2, [r7, #12]
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d202      	bcs.n	800eaf4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800eaee:	4a0d      	ldr	r2, [pc, #52]	; (800eb24 <mem_free+0xd0>)
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800eaf4:	68f8      	ldr	r0, [r7, #12]
 800eaf6:	f7ff fe93 	bl	800e820 <plug_holes>
 800eafa:	e000      	b.n	800eafe <mem_free+0xaa>
    return;
 800eafc:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800eafe:	3710      	adds	r7, #16
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	0801c76c 	.word	0x0801c76c
 800eb08:	0801c840 	.word	0x0801c840
 800eb0c:	0801c7b4 	.word	0x0801c7b4
 800eb10:	20000768 	.word	0x20000768
 800eb14:	2000076c 	.word	0x2000076c
 800eb18:	0801c864 	.word	0x0801c864
 800eb1c:	0801c880 	.word	0x0801c880
 800eb20:	0801c8a8 	.word	0x0801c8a8
 800eb24:	20000770 	.word	0x20000770

0800eb28 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b088      	sub	sp, #32
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	460b      	mov	r3, r1
 800eb32:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800eb34:	887b      	ldrh	r3, [r7, #2]
 800eb36:	3303      	adds	r3, #3
 800eb38:	b29b      	uxth	r3, r3
 800eb3a:	f023 0303 	bic.w	r3, r3, #3
 800eb3e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800eb40:	8bfb      	ldrh	r3, [r7, #30]
 800eb42:	2b0b      	cmp	r3, #11
 800eb44:	d801      	bhi.n	800eb4a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800eb46:	230c      	movs	r3, #12
 800eb48:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800eb4a:	8bfb      	ldrh	r3, [r7, #30]
 800eb4c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 800eb50:	d803      	bhi.n	800eb5a <mem_trim+0x32>
 800eb52:	8bfa      	ldrh	r2, [r7, #30]
 800eb54:	887b      	ldrh	r3, [r7, #2]
 800eb56:	429a      	cmp	r2, r3
 800eb58:	d201      	bcs.n	800eb5e <mem_trim+0x36>
    return NULL;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	e0cc      	b.n	800ecf8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800eb5e:	4b68      	ldr	r3, [pc, #416]	; (800ed00 <mem_trim+0x1d8>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d304      	bcc.n	800eb72 <mem_trim+0x4a>
 800eb68:	4b66      	ldr	r3, [pc, #408]	; (800ed04 <mem_trim+0x1dc>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	687a      	ldr	r2, [r7, #4]
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d306      	bcc.n	800eb80 <mem_trim+0x58>
 800eb72:	4b65      	ldr	r3, [pc, #404]	; (800ed08 <mem_trim+0x1e0>)
 800eb74:	f240 22d1 	movw	r2, #721	; 0x2d1
 800eb78:	4964      	ldr	r1, [pc, #400]	; (800ed0c <mem_trim+0x1e4>)
 800eb7a:	4865      	ldr	r0, [pc, #404]	; (800ed10 <mem_trim+0x1e8>)
 800eb7c:	f00b f9f6 	bl	8019f6c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800eb80:	4b5f      	ldr	r3, [pc, #380]	; (800ed00 <mem_trim+0x1d8>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	687a      	ldr	r2, [r7, #4]
 800eb86:	429a      	cmp	r2, r3
 800eb88:	d304      	bcc.n	800eb94 <mem_trim+0x6c>
 800eb8a:	4b5e      	ldr	r3, [pc, #376]	; (800ed04 <mem_trim+0x1dc>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	687a      	ldr	r2, [r7, #4]
 800eb90:	429a      	cmp	r2, r3
 800eb92:	d301      	bcc.n	800eb98 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	e0af      	b.n	800ecf8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	3b08      	subs	r3, #8
 800eb9c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800eb9e:	69b8      	ldr	r0, [r7, #24]
 800eba0:	f7ff fe2c 	bl	800e7fc <mem_to_ptr>
 800eba4:	4603      	mov	r3, r0
 800eba6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800eba8:	69bb      	ldr	r3, [r7, #24]
 800ebaa:	881a      	ldrh	r2, [r3, #0]
 800ebac:	8afb      	ldrh	r3, [r7, #22]
 800ebae:	1ad3      	subs	r3, r2, r3
 800ebb0:	b29b      	uxth	r3, r3
 800ebb2:	3b08      	subs	r3, #8
 800ebb4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ebb6:	8bfa      	ldrh	r2, [r7, #30]
 800ebb8:	8abb      	ldrh	r3, [r7, #20]
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	d906      	bls.n	800ebcc <mem_trim+0xa4>
 800ebbe:	4b52      	ldr	r3, [pc, #328]	; (800ed08 <mem_trim+0x1e0>)
 800ebc0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ebc4:	4953      	ldr	r1, [pc, #332]	; (800ed14 <mem_trim+0x1ec>)
 800ebc6:	4852      	ldr	r0, [pc, #328]	; (800ed10 <mem_trim+0x1e8>)
 800ebc8:	f00b f9d0 	bl	8019f6c <iprintf>
  if (newsize > size) {
 800ebcc:	8bfa      	ldrh	r2, [r7, #30]
 800ebce:	8abb      	ldrh	r3, [r7, #20]
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d901      	bls.n	800ebd8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	e08f      	b.n	800ecf8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800ebd8:	8bfa      	ldrh	r2, [r7, #30]
 800ebda:	8abb      	ldrh	r3, [r7, #20]
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	d101      	bne.n	800ebe4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	e089      	b.n	800ecf8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800ebe4:	69bb      	ldr	r3, [r7, #24]
 800ebe6:	881b      	ldrh	r3, [r3, #0]
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f7ff fdf5 	bl	800e7d8 <ptr_to_mem>
 800ebee:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	791b      	ldrb	r3, [r3, #4]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d13f      	bne.n	800ec78 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ebf8:	69bb      	ldr	r3, [r7, #24]
 800ebfa:	881b      	ldrh	r3, [r3, #0]
 800ebfc:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 800ec00:	d106      	bne.n	800ec10 <mem_trim+0xe8>
 800ec02:	4b41      	ldr	r3, [pc, #260]	; (800ed08 <mem_trim+0x1e0>)
 800ec04:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ec08:	4943      	ldr	r1, [pc, #268]	; (800ed18 <mem_trim+0x1f0>)
 800ec0a:	4841      	ldr	r0, [pc, #260]	; (800ed10 <mem_trim+0x1e8>)
 800ec0c:	f00b f9ae 	bl	8019f6c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	881b      	ldrh	r3, [r3, #0]
 800ec14:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ec16:	8afa      	ldrh	r2, [r7, #22]
 800ec18:	8bfb      	ldrh	r3, [r7, #30]
 800ec1a:	4413      	add	r3, r2
 800ec1c:	b29b      	uxth	r3, r3
 800ec1e:	3308      	adds	r3, #8
 800ec20:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ec22:	4b3e      	ldr	r3, [pc, #248]	; (800ed1c <mem_trim+0x1f4>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	693a      	ldr	r2, [r7, #16]
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d106      	bne.n	800ec3a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800ec2c:	89fb      	ldrh	r3, [r7, #14]
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7ff fdd2 	bl	800e7d8 <ptr_to_mem>
 800ec34:	4603      	mov	r3, r0
 800ec36:	4a39      	ldr	r2, [pc, #228]	; (800ed1c <mem_trim+0x1f4>)
 800ec38:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ec3a:	89fb      	ldrh	r3, [r7, #14]
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f7ff fdcb 	bl	800e7d8 <ptr_to_mem>
 800ec42:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	2200      	movs	r2, #0
 800ec48:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	89ba      	ldrh	r2, [r7, #12]
 800ec4e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	8afa      	ldrh	r2, [r7, #22]
 800ec54:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ec56:	69bb      	ldr	r3, [r7, #24]
 800ec58:	89fa      	ldrh	r2, [r7, #14]
 800ec5a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	881b      	ldrh	r3, [r3, #0]
 800ec60:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 800ec64:	d047      	beq.n	800ecf6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	881b      	ldrh	r3, [r3, #0]
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f7ff fdb4 	bl	800e7d8 <ptr_to_mem>
 800ec70:	4602      	mov	r2, r0
 800ec72:	89fb      	ldrh	r3, [r7, #14]
 800ec74:	8053      	strh	r3, [r2, #2]
 800ec76:	e03e      	b.n	800ecf6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ec78:	8bfb      	ldrh	r3, [r7, #30]
 800ec7a:	f103 0214 	add.w	r2, r3, #20
 800ec7e:	8abb      	ldrh	r3, [r7, #20]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d838      	bhi.n	800ecf6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ec84:	8afa      	ldrh	r2, [r7, #22]
 800ec86:	8bfb      	ldrh	r3, [r7, #30]
 800ec88:	4413      	add	r3, r2
 800ec8a:	b29b      	uxth	r3, r3
 800ec8c:	3308      	adds	r3, #8
 800ec8e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ec90:	69bb      	ldr	r3, [r7, #24]
 800ec92:	881b      	ldrh	r3, [r3, #0]
 800ec94:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 800ec98:	d106      	bne.n	800eca8 <mem_trim+0x180>
 800ec9a:	4b1b      	ldr	r3, [pc, #108]	; (800ed08 <mem_trim+0x1e0>)
 800ec9c:	f240 3216 	movw	r2, #790	; 0x316
 800eca0:	491d      	ldr	r1, [pc, #116]	; (800ed18 <mem_trim+0x1f0>)
 800eca2:	481b      	ldr	r0, [pc, #108]	; (800ed10 <mem_trim+0x1e8>)
 800eca4:	f00b f962 	bl	8019f6c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800eca8:	89fb      	ldrh	r3, [r7, #14]
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7ff fd94 	bl	800e7d8 <ptr_to_mem>
 800ecb0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800ecb2:	4b1a      	ldr	r3, [pc, #104]	; (800ed1c <mem_trim+0x1f4>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	693a      	ldr	r2, [r7, #16]
 800ecb8:	429a      	cmp	r2, r3
 800ecba:	d202      	bcs.n	800ecc2 <mem_trim+0x19a>
      lfree = mem2;
 800ecbc:	4a17      	ldr	r2, [pc, #92]	; (800ed1c <mem_trim+0x1f4>)
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ecc2:	693b      	ldr	r3, [r7, #16]
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ecc8:	69bb      	ldr	r3, [r7, #24]
 800ecca:	881a      	ldrh	r2, [r3, #0]
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	8afa      	ldrh	r2, [r7, #22]
 800ecd4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ecd6:	69bb      	ldr	r3, [r7, #24]
 800ecd8:	89fa      	ldrh	r2, [r7, #14]
 800ecda:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	881b      	ldrh	r3, [r3, #0]
 800ece0:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 800ece4:	d007      	beq.n	800ecf6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ece6:	693b      	ldr	r3, [r7, #16]
 800ece8:	881b      	ldrh	r3, [r3, #0]
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7ff fd74 	bl	800e7d8 <ptr_to_mem>
 800ecf0:	4602      	mov	r2, r0
 800ecf2:	89fb      	ldrh	r3, [r7, #14]
 800ecf4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800ecf6:	687b      	ldr	r3, [r7, #4]
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3720      	adds	r7, #32
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}
 800ed00:	20000768 	.word	0x20000768
 800ed04:	2000076c 	.word	0x2000076c
 800ed08:	0801c76c 	.word	0x0801c76c
 800ed0c:	0801c8dc 	.word	0x0801c8dc
 800ed10:	0801c7b4 	.word	0x0801c7b4
 800ed14:	0801c8f4 	.word	0x0801c8f4
 800ed18:	0801c914 	.word	0x0801c914
 800ed1c:	20000770 	.word	0x20000770

0800ed20 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b088      	sub	sp, #32
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	4603      	mov	r3, r0
 800ed28:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ed2a:	88fb      	ldrh	r3, [r7, #6]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d101      	bne.n	800ed34 <mem_malloc+0x14>
    return NULL;
 800ed30:	2300      	movs	r3, #0
 800ed32:	e0d9      	b.n	800eee8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ed34:	88fb      	ldrh	r3, [r7, #6]
 800ed36:	3303      	adds	r3, #3
 800ed38:	b29b      	uxth	r3, r3
 800ed3a:	f023 0303 	bic.w	r3, r3, #3
 800ed3e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800ed40:	8bbb      	ldrh	r3, [r7, #28]
 800ed42:	2b0b      	cmp	r3, #11
 800ed44:	d801      	bhi.n	800ed4a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ed46:	230c      	movs	r3, #12
 800ed48:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ed4a:	8bbb      	ldrh	r3, [r7, #28]
 800ed4c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 800ed50:	d803      	bhi.n	800ed5a <mem_malloc+0x3a>
 800ed52:	8bba      	ldrh	r2, [r7, #28]
 800ed54:	88fb      	ldrh	r3, [r7, #6]
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d201      	bcs.n	800ed5e <mem_malloc+0x3e>
    return NULL;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	e0c4      	b.n	800eee8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ed5e:	4b64      	ldr	r3, [pc, #400]	; (800eef0 <mem_malloc+0x1d0>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7ff fd4a 	bl	800e7fc <mem_to_ptr>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	83fb      	strh	r3, [r7, #30]
 800ed6c:	e0b4      	b.n	800eed8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ed6e:	8bfb      	ldrh	r3, [r7, #30]
 800ed70:	4618      	mov	r0, r3
 800ed72:	f7ff fd31 	bl	800e7d8 <ptr_to_mem>
 800ed76:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ed78:	697b      	ldr	r3, [r7, #20]
 800ed7a:	791b      	ldrb	r3, [r3, #4]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	f040 80a4 	bne.w	800eeca <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	881b      	ldrh	r3, [r3, #0]
 800ed86:	461a      	mov	r2, r3
 800ed88:	8bfb      	ldrh	r3, [r7, #30]
 800ed8a:	1ad3      	subs	r3, r2, r3
 800ed8c:	f1a3 0208 	sub.w	r2, r3, #8
 800ed90:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ed92:	429a      	cmp	r2, r3
 800ed94:	f0c0 8099 	bcc.w	800eeca <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	881b      	ldrh	r3, [r3, #0]
 800ed9c:	461a      	mov	r2, r3
 800ed9e:	8bfb      	ldrh	r3, [r7, #30]
 800eda0:	1ad3      	subs	r3, r2, r3
 800eda2:	f1a3 0208 	sub.w	r2, r3, #8
 800eda6:	8bbb      	ldrh	r3, [r7, #28]
 800eda8:	3314      	adds	r3, #20
 800edaa:	429a      	cmp	r2, r3
 800edac:	d333      	bcc.n	800ee16 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800edae:	8bfa      	ldrh	r2, [r7, #30]
 800edb0:	8bbb      	ldrh	r3, [r7, #28]
 800edb2:	4413      	add	r3, r2
 800edb4:	b29b      	uxth	r3, r3
 800edb6:	3308      	adds	r3, #8
 800edb8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800edba:	8a7b      	ldrh	r3, [r7, #18]
 800edbc:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 800edc0:	d106      	bne.n	800edd0 <mem_malloc+0xb0>
 800edc2:	4b4c      	ldr	r3, [pc, #304]	; (800eef4 <mem_malloc+0x1d4>)
 800edc4:	f240 3287 	movw	r2, #903	; 0x387
 800edc8:	494b      	ldr	r1, [pc, #300]	; (800eef8 <mem_malloc+0x1d8>)
 800edca:	484c      	ldr	r0, [pc, #304]	; (800eefc <mem_malloc+0x1dc>)
 800edcc:	f00b f8ce 	bl	8019f6c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800edd0:	8a7b      	ldrh	r3, [r7, #18]
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7ff fd00 	bl	800e7d8 <ptr_to_mem>
 800edd8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2200      	movs	r2, #0
 800edde:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ede0:	697b      	ldr	r3, [r7, #20]
 800ede2:	881a      	ldrh	r2, [r3, #0]
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	8bfa      	ldrh	r2, [r7, #30]
 800edec:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800edee:	697b      	ldr	r3, [r7, #20]
 800edf0:	8a7a      	ldrh	r2, [r7, #18]
 800edf2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800edf4:	697b      	ldr	r3, [r7, #20]
 800edf6:	2201      	movs	r2, #1
 800edf8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	881b      	ldrh	r3, [r3, #0]
 800edfe:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 800ee02:	d00b      	beq.n	800ee1c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	881b      	ldrh	r3, [r3, #0]
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7ff fce5 	bl	800e7d8 <ptr_to_mem>
 800ee0e:	4602      	mov	r2, r0
 800ee10:	8a7b      	ldrh	r3, [r7, #18]
 800ee12:	8053      	strh	r3, [r2, #2]
 800ee14:	e002      	b.n	800ee1c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	2201      	movs	r2, #1
 800ee1a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ee1c:	4b34      	ldr	r3, [pc, #208]	; (800eef0 <mem_malloc+0x1d0>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	697a      	ldr	r2, [r7, #20]
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d127      	bne.n	800ee76 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800ee26:	4b32      	ldr	r3, [pc, #200]	; (800eef0 <mem_malloc+0x1d0>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ee2c:	e005      	b.n	800ee3a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ee2e:	69bb      	ldr	r3, [r7, #24]
 800ee30:	881b      	ldrh	r3, [r3, #0]
 800ee32:	4618      	mov	r0, r3
 800ee34:	f7ff fcd0 	bl	800e7d8 <ptr_to_mem>
 800ee38:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ee3a:	69bb      	ldr	r3, [r7, #24]
 800ee3c:	791b      	ldrb	r3, [r3, #4]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d004      	beq.n	800ee4c <mem_malloc+0x12c>
 800ee42:	4b2f      	ldr	r3, [pc, #188]	; (800ef00 <mem_malloc+0x1e0>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	69ba      	ldr	r2, [r7, #24]
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	d1f0      	bne.n	800ee2e <mem_malloc+0x10e>
          }
          lfree = cur;
 800ee4c:	4a28      	ldr	r2, [pc, #160]	; (800eef0 <mem_malloc+0x1d0>)
 800ee4e:	69bb      	ldr	r3, [r7, #24]
 800ee50:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ee52:	4b27      	ldr	r3, [pc, #156]	; (800eef0 <mem_malloc+0x1d0>)
 800ee54:	681a      	ldr	r2, [r3, #0]
 800ee56:	4b2a      	ldr	r3, [pc, #168]	; (800ef00 <mem_malloc+0x1e0>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d00b      	beq.n	800ee76 <mem_malloc+0x156>
 800ee5e:	4b24      	ldr	r3, [pc, #144]	; (800eef0 <mem_malloc+0x1d0>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	791b      	ldrb	r3, [r3, #4]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d006      	beq.n	800ee76 <mem_malloc+0x156>
 800ee68:	4b22      	ldr	r3, [pc, #136]	; (800eef4 <mem_malloc+0x1d4>)
 800ee6a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ee6e:	4925      	ldr	r1, [pc, #148]	; (800ef04 <mem_malloc+0x1e4>)
 800ee70:	4822      	ldr	r0, [pc, #136]	; (800eefc <mem_malloc+0x1dc>)
 800ee72:	f00b f87b 	bl	8019f6c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ee76:	8bba      	ldrh	r2, [r7, #28]
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	4413      	add	r3, r2
 800ee7c:	3308      	adds	r3, #8
 800ee7e:	4a20      	ldr	r2, [pc, #128]	; (800ef00 <mem_malloc+0x1e0>)
 800ee80:	6812      	ldr	r2, [r2, #0]
 800ee82:	4293      	cmp	r3, r2
 800ee84:	d906      	bls.n	800ee94 <mem_malloc+0x174>
 800ee86:	4b1b      	ldr	r3, [pc, #108]	; (800eef4 <mem_malloc+0x1d4>)
 800ee88:	f240 32b9 	movw	r2, #953	; 0x3b9
 800ee8c:	491e      	ldr	r1, [pc, #120]	; (800ef08 <mem_malloc+0x1e8>)
 800ee8e:	481b      	ldr	r0, [pc, #108]	; (800eefc <mem_malloc+0x1dc>)
 800ee90:	f00b f86c 	bl	8019f6c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	f003 0303 	and.w	r3, r3, #3
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d006      	beq.n	800eeac <mem_malloc+0x18c>
 800ee9e:	4b15      	ldr	r3, [pc, #84]	; (800eef4 <mem_malloc+0x1d4>)
 800eea0:	f240 32bb 	movw	r2, #955	; 0x3bb
 800eea4:	4919      	ldr	r1, [pc, #100]	; (800ef0c <mem_malloc+0x1ec>)
 800eea6:	4815      	ldr	r0, [pc, #84]	; (800eefc <mem_malloc+0x1dc>)
 800eea8:	f00b f860 	bl	8019f6c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800eeac:	697b      	ldr	r3, [r7, #20]
 800eeae:	f003 0303 	and.w	r3, r3, #3
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d006      	beq.n	800eec4 <mem_malloc+0x1a4>
 800eeb6:	4b0f      	ldr	r3, [pc, #60]	; (800eef4 <mem_malloc+0x1d4>)
 800eeb8:	f240 32bd 	movw	r2, #957	; 0x3bd
 800eebc:	4914      	ldr	r1, [pc, #80]	; (800ef10 <mem_malloc+0x1f0>)
 800eebe:	480f      	ldr	r0, [pc, #60]	; (800eefc <mem_malloc+0x1dc>)
 800eec0:	f00b f854 	bl	8019f6c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	3308      	adds	r3, #8
 800eec8:	e00e      	b.n	800eee8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800eeca:	8bfb      	ldrh	r3, [r7, #30]
 800eecc:	4618      	mov	r0, r3
 800eece:	f7ff fc83 	bl	800e7d8 <ptr_to_mem>
 800eed2:	4603      	mov	r3, r0
 800eed4:	881b      	ldrh	r3, [r3, #0]
 800eed6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800eed8:	8bfa      	ldrh	r2, [r7, #30]
 800eeda:	8bbb      	ldrh	r3, [r7, #28]
 800eedc:	f5c3 4316 	rsb	r3, r3, #38400	; 0x9600
 800eee0:	429a      	cmp	r2, r3
 800eee2:	f4ff af44 	bcc.w	800ed6e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800eee6:	2300      	movs	r3, #0
}
 800eee8:	4618      	mov	r0, r3
 800eeea:	3720      	adds	r7, #32
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}
 800eef0:	20000770 	.word	0x20000770
 800eef4:	0801c76c 	.word	0x0801c76c
 800eef8:	0801c914 	.word	0x0801c914
 800eefc:	0801c7b4 	.word	0x0801c7b4
 800ef00:	2000076c 	.word	0x2000076c
 800ef04:	0801c928 	.word	0x0801c928
 800ef08:	0801c944 	.word	0x0801c944
 800ef0c:	0801c974 	.word	0x0801c974
 800ef10:	0801c9a4 	.word	0x0801c9a4

0800ef14 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ef14:	b480      	push	{r7}
 800ef16:	b085      	sub	sp, #20
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	689b      	ldr	r3, [r3, #8]
 800ef20:	2200      	movs	r2, #0
 800ef22:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	685b      	ldr	r3, [r3, #4]
 800ef28:	3303      	adds	r3, #3
 800ef2a:	f023 0303 	bic.w	r3, r3, #3
 800ef2e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ef30:	2300      	movs	r3, #0
 800ef32:	60fb      	str	r3, [r7, #12]
 800ef34:	e011      	b.n	800ef5a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	689b      	ldr	r3, [r3, #8]
 800ef3a:	681a      	ldr	r2, [r3, #0]
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	689b      	ldr	r3, [r3, #8]
 800ef44:	68ba      	ldr	r2, [r7, #8]
 800ef46:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	881b      	ldrh	r3, [r3, #0]
 800ef4c:	461a      	mov	r2, r3
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	4413      	add	r3, r2
 800ef52:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	3301      	adds	r3, #1
 800ef58:	60fb      	str	r3, [r7, #12]
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	885b      	ldrh	r3, [r3, #2]
 800ef5e:	461a      	mov	r2, r3
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	4293      	cmp	r3, r2
 800ef64:	dbe7      	blt.n	800ef36 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ef66:	bf00      	nop
 800ef68:	bf00      	nop
 800ef6a:	3714      	adds	r7, #20
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef72:	4770      	bx	lr

0800ef74 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	80fb      	strh	r3, [r7, #6]
 800ef7e:	e009      	b.n	800ef94 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ef80:	88fb      	ldrh	r3, [r7, #6]
 800ef82:	4a08      	ldr	r2, [pc, #32]	; (800efa4 <memp_init+0x30>)
 800ef84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f7ff ffc3 	bl	800ef14 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ef8e:	88fb      	ldrh	r3, [r7, #6]
 800ef90:	3301      	adds	r3, #1
 800ef92:	80fb      	strh	r3, [r7, #6]
 800ef94:	88fb      	ldrh	r3, [r7, #6]
 800ef96:	2b08      	cmp	r3, #8
 800ef98:	d9f2      	bls.n	800ef80 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ef9a:	bf00      	nop
 800ef9c:	bf00      	nop
 800ef9e:	3708      	adds	r7, #8
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}
 800efa4:	0801f30c 	.word	0x0801f30c

0800efa8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b084      	sub	sp, #16
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	689b      	ldr	r3, [r3, #8]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d012      	beq.n	800efe4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	689b      	ldr	r3, [r3, #8]
 800efc2:	68fa      	ldr	r2, [r7, #12]
 800efc4:	6812      	ldr	r2, [r2, #0]
 800efc6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	f003 0303 	and.w	r3, r3, #3
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d006      	beq.n	800efe0 <do_memp_malloc_pool+0x38>
 800efd2:	4b07      	ldr	r3, [pc, #28]	; (800eff0 <do_memp_malloc_pool+0x48>)
 800efd4:	f44f 728c 	mov.w	r2, #280	; 0x118
 800efd8:	4906      	ldr	r1, [pc, #24]	; (800eff4 <do_memp_malloc_pool+0x4c>)
 800efda:	4807      	ldr	r0, [pc, #28]	; (800eff8 <do_memp_malloc_pool+0x50>)
 800efdc:	f00a ffc6 	bl	8019f6c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	e000      	b.n	800efe6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800efe4:	2300      	movs	r3, #0
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3710      	adds	r7, #16
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
 800efee:	bf00      	nop
 800eff0:	0801c9c8 	.word	0x0801c9c8
 800eff4:	0801c9f8 	.word	0x0801c9f8
 800eff8:	0801ca1c 	.word	0x0801ca1c

0800effc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b084      	sub	sp, #16
 800f000:	af00      	add	r7, sp, #0
 800f002:	4603      	mov	r3, r0
 800f004:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f006:	79fb      	ldrb	r3, [r7, #7]
 800f008:	2b08      	cmp	r3, #8
 800f00a:	d908      	bls.n	800f01e <memp_malloc+0x22>
 800f00c:	4b0a      	ldr	r3, [pc, #40]	; (800f038 <memp_malloc+0x3c>)
 800f00e:	f240 1257 	movw	r2, #343	; 0x157
 800f012:	490a      	ldr	r1, [pc, #40]	; (800f03c <memp_malloc+0x40>)
 800f014:	480a      	ldr	r0, [pc, #40]	; (800f040 <memp_malloc+0x44>)
 800f016:	f00a ffa9 	bl	8019f6c <iprintf>
 800f01a:	2300      	movs	r3, #0
 800f01c:	e008      	b.n	800f030 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f01e:	79fb      	ldrb	r3, [r7, #7]
 800f020:	4a08      	ldr	r2, [pc, #32]	; (800f044 <memp_malloc+0x48>)
 800f022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f026:	4618      	mov	r0, r3
 800f028:	f7ff ffbe 	bl	800efa8 <do_memp_malloc_pool>
 800f02c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f02e:	68fb      	ldr	r3, [r7, #12]
}
 800f030:	4618      	mov	r0, r3
 800f032:	3710      	adds	r7, #16
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}
 800f038:	0801c9c8 	.word	0x0801c9c8
 800f03c:	0801ca58 	.word	0x0801ca58
 800f040:	0801ca1c 	.word	0x0801ca1c
 800f044:	0801f30c 	.word	0x0801f30c

0800f048 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b084      	sub	sp, #16
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
 800f050:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	f003 0303 	and.w	r3, r3, #3
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d006      	beq.n	800f06a <do_memp_free_pool+0x22>
 800f05c:	4b0a      	ldr	r3, [pc, #40]	; (800f088 <do_memp_free_pool+0x40>)
 800f05e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800f062:	490a      	ldr	r1, [pc, #40]	; (800f08c <do_memp_free_pool+0x44>)
 800f064:	480a      	ldr	r0, [pc, #40]	; (800f090 <do_memp_free_pool+0x48>)
 800f066:	f00a ff81 	bl	8019f6c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	689b      	ldr	r3, [r3, #8]
 800f072:	681a      	ldr	r2, [r3, #0]
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	689b      	ldr	r3, [r3, #8]
 800f07c:	68fa      	ldr	r2, [r7, #12]
 800f07e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800f080:	bf00      	nop
 800f082:	3710      	adds	r7, #16
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}
 800f088:	0801c9c8 	.word	0x0801c9c8
 800f08c:	0801ca78 	.word	0x0801ca78
 800f090:	0801ca1c 	.word	0x0801ca1c

0800f094 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b082      	sub	sp, #8
 800f098:	af00      	add	r7, sp, #0
 800f09a:	4603      	mov	r3, r0
 800f09c:	6039      	str	r1, [r7, #0]
 800f09e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f0a0:	79fb      	ldrb	r3, [r7, #7]
 800f0a2:	2b08      	cmp	r3, #8
 800f0a4:	d907      	bls.n	800f0b6 <memp_free+0x22>
 800f0a6:	4b0c      	ldr	r3, [pc, #48]	; (800f0d8 <memp_free+0x44>)
 800f0a8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800f0ac:	490b      	ldr	r1, [pc, #44]	; (800f0dc <memp_free+0x48>)
 800f0ae:	480c      	ldr	r0, [pc, #48]	; (800f0e0 <memp_free+0x4c>)
 800f0b0:	f00a ff5c 	bl	8019f6c <iprintf>
 800f0b4:	e00c      	b.n	800f0d0 <memp_free+0x3c>

  if (mem == NULL) {
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d008      	beq.n	800f0ce <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f0bc:	79fb      	ldrb	r3, [r7, #7]
 800f0be:	4a09      	ldr	r2, [pc, #36]	; (800f0e4 <memp_free+0x50>)
 800f0c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0c4:	6839      	ldr	r1, [r7, #0]
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7ff ffbe 	bl	800f048 <do_memp_free_pool>
 800f0cc:	e000      	b.n	800f0d0 <memp_free+0x3c>
    return;
 800f0ce:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f0d0:	3708      	adds	r7, #8
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}
 800f0d6:	bf00      	nop
 800f0d8:	0801c9c8 	.word	0x0801c9c8
 800f0dc:	0801ca98 	.word	0x0801ca98
 800f0e0:	0801ca1c 	.word	0x0801ca1c
 800f0e4:	0801f30c 	.word	0x0801f30c

0800f0e8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f0ec:	bf00      	nop
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f4:	4770      	bx	lr
	...

0800f0f8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b086      	sub	sp, #24
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	60f8      	str	r0, [r7, #12]
 800f100:	60b9      	str	r1, [r7, #8]
 800f102:	607a      	str	r2, [r7, #4]
 800f104:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d108      	bne.n	800f11e <netif_add+0x26>
 800f10c:	4b57      	ldr	r3, [pc, #348]	; (800f26c <netif_add+0x174>)
 800f10e:	f240 1227 	movw	r2, #295	; 0x127
 800f112:	4957      	ldr	r1, [pc, #348]	; (800f270 <netif_add+0x178>)
 800f114:	4857      	ldr	r0, [pc, #348]	; (800f274 <netif_add+0x17c>)
 800f116:	f00a ff29 	bl	8019f6c <iprintf>
 800f11a:	2300      	movs	r3, #0
 800f11c:	e0a2      	b.n	800f264 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800f11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f120:	2b00      	cmp	r3, #0
 800f122:	d108      	bne.n	800f136 <netif_add+0x3e>
 800f124:	4b51      	ldr	r3, [pc, #324]	; (800f26c <netif_add+0x174>)
 800f126:	f44f 7294 	mov.w	r2, #296	; 0x128
 800f12a:	4953      	ldr	r1, [pc, #332]	; (800f278 <netif_add+0x180>)
 800f12c:	4851      	ldr	r0, [pc, #324]	; (800f274 <netif_add+0x17c>)
 800f12e:	f00a ff1d 	bl	8019f6c <iprintf>
 800f132:	2300      	movs	r3, #0
 800f134:	e096      	b.n	800f264 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d101      	bne.n	800f140 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800f13c:	4b4f      	ldr	r3, [pc, #316]	; (800f27c <netif_add+0x184>)
 800f13e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d101      	bne.n	800f14a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800f146:	4b4d      	ldr	r3, [pc, #308]	; (800f27c <netif_add+0x184>)
 800f148:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d101      	bne.n	800f154 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800f150:	4b4a      	ldr	r3, [pc, #296]	; (800f27c <netif_add+0x184>)
 800f152:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	2200      	movs	r2, #0
 800f158:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	2200      	movs	r2, #0
 800f15e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	2200      	movs	r2, #0
 800f164:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	4a45      	ldr	r2, [pc, #276]	; (800f280 <netif_add+0x188>)
 800f16a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	2200      	movs	r2, #0
 800f170:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	2200      	movs	r2, #0
 800f176:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	2200      	movs	r2, #0
 800f17e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	6a3a      	ldr	r2, [r7, #32]
 800f184:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800f186:	4b3f      	ldr	r3, [pc, #252]	; (800f284 <netif_add+0x18c>)
 800f188:	781a      	ldrb	r2, [r3, #0]
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f194:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	687a      	ldr	r2, [r7, #4]
 800f19a:	68b9      	ldr	r1, [r7, #8]
 800f19c:	68f8      	ldr	r0, [r7, #12]
 800f19e:	f000 f913 	bl	800f3c8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a4:	68f8      	ldr	r0, [r7, #12]
 800f1a6:	4798      	blx	r3
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d001      	beq.n	800f1b2 <netif_add+0xba>
    return NULL;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	e058      	b.n	800f264 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f1b8:	2bff      	cmp	r3, #255	; 0xff
 800f1ba:	d103      	bne.n	800f1c4 <netif_add+0xcc>
        netif->num = 0;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	2200      	movs	r2, #0
 800f1c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f1c8:	4b2f      	ldr	r3, [pc, #188]	; (800f288 <netif_add+0x190>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	617b      	str	r3, [r7, #20]
 800f1ce:	e02b      	b.n	800f228 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800f1d0:	697a      	ldr	r2, [r7, #20]
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	d106      	bne.n	800f1e6 <netif_add+0xee>
 800f1d8:	4b24      	ldr	r3, [pc, #144]	; (800f26c <netif_add+0x174>)
 800f1da:	f240 128b 	movw	r2, #395	; 0x18b
 800f1de:	492b      	ldr	r1, [pc, #172]	; (800f28c <netif_add+0x194>)
 800f1e0:	4824      	ldr	r0, [pc, #144]	; (800f274 <netif_add+0x17c>)
 800f1e2:	f00a fec3 	bl	8019f6c <iprintf>
        num_netifs++;
 800f1e6:	693b      	ldr	r3, [r7, #16]
 800f1e8:	3301      	adds	r3, #1
 800f1ea:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	2bff      	cmp	r3, #255	; 0xff
 800f1f0:	dd06      	ble.n	800f200 <netif_add+0x108>
 800f1f2:	4b1e      	ldr	r3, [pc, #120]	; (800f26c <netif_add+0x174>)
 800f1f4:	f240 128d 	movw	r2, #397	; 0x18d
 800f1f8:	4925      	ldr	r1, [pc, #148]	; (800f290 <netif_add+0x198>)
 800f1fa:	481e      	ldr	r0, [pc, #120]	; (800f274 <netif_add+0x17c>)
 800f1fc:	f00a feb6 	bl	8019f6c <iprintf>
        if (netif2->num == netif->num) {
 800f200:	697b      	ldr	r3, [r7, #20]
 800f202:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d108      	bne.n	800f222 <netif_add+0x12a>
          netif->num++;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f216:	3301      	adds	r3, #1
 800f218:	b2da      	uxtb	r2, r3
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800f220:	e005      	b.n	800f22e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	617b      	str	r3, [r7, #20]
 800f228:	697b      	ldr	r3, [r7, #20]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d1d0      	bne.n	800f1d0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d1be      	bne.n	800f1b2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f23a:	2bfe      	cmp	r3, #254	; 0xfe
 800f23c:	d103      	bne.n	800f246 <netif_add+0x14e>
    netif_num = 0;
 800f23e:	4b11      	ldr	r3, [pc, #68]	; (800f284 <netif_add+0x18c>)
 800f240:	2200      	movs	r2, #0
 800f242:	701a      	strb	r2, [r3, #0]
 800f244:	e006      	b.n	800f254 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f24c:	3301      	adds	r3, #1
 800f24e:	b2da      	uxtb	r2, r3
 800f250:	4b0c      	ldr	r3, [pc, #48]	; (800f284 <netif_add+0x18c>)
 800f252:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f254:	4b0c      	ldr	r3, [pc, #48]	; (800f288 <netif_add+0x190>)
 800f256:	681a      	ldr	r2, [r3, #0]
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f25c:	4a0a      	ldr	r2, [pc, #40]	; (800f288 <netif_add+0x190>)
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800f262:	68fb      	ldr	r3, [r7, #12]
}
 800f264:	4618      	mov	r0, r3
 800f266:	3718      	adds	r7, #24
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}
 800f26c:	0801cab4 	.word	0x0801cab4
 800f270:	0801cb48 	.word	0x0801cb48
 800f274:	0801cb04 	.word	0x0801cb04
 800f278:	0801cb64 	.word	0x0801cb64
 800f27c:	0801f370 	.word	0x0801f370
 800f280:	0800f5db 	.word	0x0800f5db
 800f284:	20000798 	.word	0x20000798
 800f288:	2001a9a0 	.word	0x2001a9a0
 800f28c:	0801cb88 	.word	0x0801cb88
 800f290:	0801cb9c 	.word	0x0801cb9c

0800f294 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b082      	sub	sp, #8
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800f29e:	6839      	ldr	r1, [r7, #0]
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f002 fd7f 	bl	8011da4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800f2a6:	6839      	ldr	r1, [r7, #0]
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f007 fab9 	bl	8016820 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800f2ae:	bf00      	nop
 800f2b0:	3708      	adds	r7, #8
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
	...

0800f2b8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b086      	sub	sp, #24
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	60f8      	str	r0, [r7, #12]
 800f2c0:	60b9      	str	r1, [r7, #8]
 800f2c2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d106      	bne.n	800f2d8 <netif_do_set_ipaddr+0x20>
 800f2ca:	4b1d      	ldr	r3, [pc, #116]	; (800f340 <netif_do_set_ipaddr+0x88>)
 800f2cc:	f240 12cb 	movw	r2, #459	; 0x1cb
 800f2d0:	491c      	ldr	r1, [pc, #112]	; (800f344 <netif_do_set_ipaddr+0x8c>)
 800f2d2:	481d      	ldr	r0, [pc, #116]	; (800f348 <netif_do_set_ipaddr+0x90>)
 800f2d4:	f00a fe4a 	bl	8019f6c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d106      	bne.n	800f2ec <netif_do_set_ipaddr+0x34>
 800f2de:	4b18      	ldr	r3, [pc, #96]	; (800f340 <netif_do_set_ipaddr+0x88>)
 800f2e0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800f2e4:	4917      	ldr	r1, [pc, #92]	; (800f344 <netif_do_set_ipaddr+0x8c>)
 800f2e6:	4818      	ldr	r0, [pc, #96]	; (800f348 <netif_do_set_ipaddr+0x90>)
 800f2e8:	f00a fe40 	bl	8019f6c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	681a      	ldr	r2, [r3, #0]
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	3304      	adds	r3, #4
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d01c      	beq.n	800f334 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	3304      	adds	r3, #4
 800f304:	681a      	ldr	r2, [r3, #0]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800f30a:	f107 0314 	add.w	r3, r7, #20
 800f30e:	4619      	mov	r1, r3
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f7ff ffbf 	bl	800f294 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d002      	beq.n	800f322 <netif_do_set_ipaddr+0x6a>
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	e000      	b.n	800f324 <netif_do_set_ipaddr+0x6c>
 800f322:	2300      	movs	r3, #0
 800f324:	68fa      	ldr	r2, [r7, #12]
 800f326:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f328:	2101      	movs	r1, #1
 800f32a:	68f8      	ldr	r0, [r7, #12]
 800f32c:	f000 f8d2 	bl	800f4d4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800f330:	2301      	movs	r3, #1
 800f332:	e000      	b.n	800f336 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800f334:	2300      	movs	r3, #0
}
 800f336:	4618      	mov	r0, r3
 800f338:	3718      	adds	r7, #24
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}
 800f33e:	bf00      	nop
 800f340:	0801cab4 	.word	0x0801cab4
 800f344:	0801cbcc 	.word	0x0801cbcc
 800f348:	0801cb04 	.word	0x0801cb04

0800f34c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800f34c:	b480      	push	{r7}
 800f34e:	b085      	sub	sp, #20
 800f350:	af00      	add	r7, sp, #0
 800f352:	60f8      	str	r0, [r7, #12]
 800f354:	60b9      	str	r1, [r7, #8]
 800f356:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	681a      	ldr	r2, [r3, #0]
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	3308      	adds	r3, #8
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	429a      	cmp	r2, r3
 800f364:	d00a      	beq.n	800f37c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d002      	beq.n	800f372 <netif_do_set_netmask+0x26>
 800f36c:	68bb      	ldr	r3, [r7, #8]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	e000      	b.n	800f374 <netif_do_set_netmask+0x28>
 800f372:	2300      	movs	r3, #0
 800f374:	68fa      	ldr	r2, [r7, #12]
 800f376:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800f378:	2301      	movs	r3, #1
 800f37a:	e000      	b.n	800f37e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800f37c:	2300      	movs	r3, #0
}
 800f37e:	4618      	mov	r0, r3
 800f380:	3714      	adds	r7, #20
 800f382:	46bd      	mov	sp, r7
 800f384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f388:	4770      	bx	lr

0800f38a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800f38a:	b480      	push	{r7}
 800f38c:	b085      	sub	sp, #20
 800f38e:	af00      	add	r7, sp, #0
 800f390:	60f8      	str	r0, [r7, #12]
 800f392:	60b9      	str	r1, [r7, #8]
 800f394:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	681a      	ldr	r2, [r3, #0]
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	330c      	adds	r3, #12
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d00a      	beq.n	800f3ba <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d002      	beq.n	800f3b0 <netif_do_set_gw+0x26>
 800f3aa:	68bb      	ldr	r3, [r7, #8]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	e000      	b.n	800f3b2 <netif_do_set_gw+0x28>
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	68fa      	ldr	r2, [r7, #12]
 800f3b4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	e000      	b.n	800f3bc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800f3ba:	2300      	movs	r3, #0
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3714      	adds	r7, #20
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b088      	sub	sp, #32
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	60f8      	str	r0, [r7, #12]
 800f3d0:	60b9      	str	r1, [r7, #8]
 800f3d2:	607a      	str	r2, [r7, #4]
 800f3d4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800f3da:	2300      	movs	r3, #0
 800f3dc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d101      	bne.n	800f3e8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800f3e4:	4b1c      	ldr	r3, [pc, #112]	; (800f458 <netif_set_addr+0x90>)
 800f3e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d101      	bne.n	800f3f2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800f3ee:	4b1a      	ldr	r3, [pc, #104]	; (800f458 <netif_set_addr+0x90>)
 800f3f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d101      	bne.n	800f3fc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800f3f8:	4b17      	ldr	r3, [pc, #92]	; (800f458 <netif_set_addr+0x90>)
 800f3fa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d003      	beq.n	800f40a <netif_set_addr+0x42>
 800f402:	68bb      	ldr	r3, [r7, #8]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d101      	bne.n	800f40e <netif_set_addr+0x46>
 800f40a:	2301      	movs	r3, #1
 800f40c:	e000      	b.n	800f410 <netif_set_addr+0x48>
 800f40e:	2300      	movs	r3, #0
 800f410:	617b      	str	r3, [r7, #20]
  if (remove) {
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d006      	beq.n	800f426 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f418:	f107 0310 	add.w	r3, r7, #16
 800f41c:	461a      	mov	r2, r3
 800f41e:	68b9      	ldr	r1, [r7, #8]
 800f420:	68f8      	ldr	r0, [r7, #12]
 800f422:	f7ff ff49 	bl	800f2b8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800f426:	69fa      	ldr	r2, [r7, #28]
 800f428:	6879      	ldr	r1, [r7, #4]
 800f42a:	68f8      	ldr	r0, [r7, #12]
 800f42c:	f7ff ff8e 	bl	800f34c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800f430:	69ba      	ldr	r2, [r7, #24]
 800f432:	6839      	ldr	r1, [r7, #0]
 800f434:	68f8      	ldr	r0, [r7, #12]
 800f436:	f7ff ffa8 	bl	800f38a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d106      	bne.n	800f44e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f440:	f107 0310 	add.w	r3, r7, #16
 800f444:	461a      	mov	r2, r3
 800f446:	68b9      	ldr	r1, [r7, #8]
 800f448:	68f8      	ldr	r0, [r7, #12]
 800f44a:	f7ff ff35 	bl	800f2b8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800f44e:	bf00      	nop
 800f450:	3720      	adds	r7, #32
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}
 800f456:	bf00      	nop
 800f458:	0801f370 	.word	0x0801f370

0800f45c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800f45c:	b480      	push	{r7}
 800f45e:	b083      	sub	sp, #12
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800f464:	4a04      	ldr	r2, [pc, #16]	; (800f478 <netif_set_default+0x1c>)
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800f46a:	bf00      	nop
 800f46c:	370c      	adds	r7, #12
 800f46e:	46bd      	mov	sp, r7
 800f470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f474:	4770      	bx	lr
 800f476:	bf00      	nop
 800f478:	2001a9a4 	.word	0x2001a9a4

0800f47c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b082      	sub	sp, #8
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d107      	bne.n	800f49a <netif_set_up+0x1e>
 800f48a:	4b0f      	ldr	r3, [pc, #60]	; (800f4c8 <netif_set_up+0x4c>)
 800f48c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800f490:	490e      	ldr	r1, [pc, #56]	; (800f4cc <netif_set_up+0x50>)
 800f492:	480f      	ldr	r0, [pc, #60]	; (800f4d0 <netif_set_up+0x54>)
 800f494:	f00a fd6a 	bl	8019f6c <iprintf>
 800f498:	e013      	b.n	800f4c2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f4a0:	f003 0301 	and.w	r3, r3, #1
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d10c      	bne.n	800f4c2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f4ae:	f043 0301 	orr.w	r3, r3, #1
 800f4b2:	b2da      	uxtb	r2, r3
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f4ba:	2103      	movs	r1, #3
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f000 f809 	bl	800f4d4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800f4c2:	3708      	adds	r7, #8
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}
 800f4c8:	0801cab4 	.word	0x0801cab4
 800f4cc:	0801cc3c 	.word	0x0801cc3c
 800f4d0:	0801cb04 	.word	0x0801cb04

0800f4d4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b082      	sub	sp, #8
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	460b      	mov	r3, r1
 800f4de:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d106      	bne.n	800f4f4 <netif_issue_reports+0x20>
 800f4e6:	4b18      	ldr	r3, [pc, #96]	; (800f548 <netif_issue_reports+0x74>)
 800f4e8:	f240 326d 	movw	r2, #877	; 0x36d
 800f4ec:	4917      	ldr	r1, [pc, #92]	; (800f54c <netif_issue_reports+0x78>)
 800f4ee:	4818      	ldr	r0, [pc, #96]	; (800f550 <netif_issue_reports+0x7c>)
 800f4f0:	f00a fd3c 	bl	8019f6c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f4fa:	f003 0304 	and.w	r3, r3, #4
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d01e      	beq.n	800f540 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f508:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d017      	beq.n	800f540 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f510:	78fb      	ldrb	r3, [r7, #3]
 800f512:	f003 0301 	and.w	r3, r3, #1
 800f516:	2b00      	cmp	r3, #0
 800f518:	d013      	beq.n	800f542 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	3304      	adds	r3, #4
 800f51e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f520:	2b00      	cmp	r3, #0
 800f522:	d00e      	beq.n	800f542 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f52a:	f003 0308 	and.w	r3, r3, #8
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d007      	beq.n	800f542 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	3304      	adds	r3, #4
 800f536:	4619      	mov	r1, r3
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f008 f8db 	bl	80176f4 <etharp_request>
 800f53e:	e000      	b.n	800f542 <netif_issue_reports+0x6e>
    return;
 800f540:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800f542:	3708      	adds	r7, #8
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}
 800f548:	0801cab4 	.word	0x0801cab4
 800f54c:	0801cc58 	.word	0x0801cc58
 800f550:	0801cb04 	.word	0x0801cb04

0800f554 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b082      	sub	sp, #8
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d107      	bne.n	800f572 <netif_set_down+0x1e>
 800f562:	4b12      	ldr	r3, [pc, #72]	; (800f5ac <netif_set_down+0x58>)
 800f564:	f240 329b 	movw	r2, #923	; 0x39b
 800f568:	4911      	ldr	r1, [pc, #68]	; (800f5b0 <netif_set_down+0x5c>)
 800f56a:	4812      	ldr	r0, [pc, #72]	; (800f5b4 <netif_set_down+0x60>)
 800f56c:	f00a fcfe 	bl	8019f6c <iprintf>
 800f570:	e019      	b.n	800f5a6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f578:	f003 0301 	and.w	r3, r3, #1
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d012      	beq.n	800f5a6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f586:	f023 0301 	bic.w	r3, r3, #1
 800f58a:	b2da      	uxtb	r2, r3
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f598:	f003 0308 	and.w	r3, r3, #8
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d002      	beq.n	800f5a6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f007 fc65 	bl	8016e70 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800f5a6:	3708      	adds	r7, #8
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}
 800f5ac:	0801cab4 	.word	0x0801cab4
 800f5b0:	0801cc7c 	.word	0x0801cc7c
 800f5b4:	0801cb04 	.word	0x0801cb04

0800f5b8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	b083      	sub	sp, #12
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
 800f5c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d002      	beq.n	800f5ce <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	683a      	ldr	r2, [r7, #0]
 800f5cc:	61da      	str	r2, [r3, #28]
  }
}
 800f5ce:	bf00      	nop
 800f5d0:	370c      	adds	r7, #12
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d8:	4770      	bx	lr

0800f5da <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800f5da:	b480      	push	{r7}
 800f5dc:	b085      	sub	sp, #20
 800f5de:	af00      	add	r7, sp, #0
 800f5e0:	60f8      	str	r0, [r7, #12]
 800f5e2:	60b9      	str	r1, [r7, #8]
 800f5e4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800f5e6:	f06f 030b 	mvn.w	r3, #11
}
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	3714      	adds	r7, #20
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f4:	4770      	bx	lr
	...

0800f5f8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b085      	sub	sp, #20
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	4603      	mov	r3, r0
 800f600:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800f602:	79fb      	ldrb	r3, [r7, #7]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d013      	beq.n	800f630 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800f608:	4b0d      	ldr	r3, [pc, #52]	; (800f640 <netif_get_by_index+0x48>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	60fb      	str	r3, [r7, #12]
 800f60e:	e00c      	b.n	800f62a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f616:	3301      	adds	r3, #1
 800f618:	b2db      	uxtb	r3, r3
 800f61a:	79fa      	ldrb	r2, [r7, #7]
 800f61c:	429a      	cmp	r2, r3
 800f61e:	d101      	bne.n	800f624 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	e006      	b.n	800f632 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	60fb      	str	r3, [r7, #12]
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d1ef      	bne.n	800f610 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800f630:	2300      	movs	r3, #0
}
 800f632:	4618      	mov	r0, r3
 800f634:	3714      	adds	r7, #20
 800f636:	46bd      	mov	sp, r7
 800f638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63c:	4770      	bx	lr
 800f63e:	bf00      	nop
 800f640:	2001a9a0 	.word	0x2001a9a0

0800f644 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b082      	sub	sp, #8
 800f648:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800f64a:	4b0c      	ldr	r3, [pc, #48]	; (800f67c <pbuf_free_ooseq+0x38>)
 800f64c:	2200      	movs	r2, #0
 800f64e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f650:	4b0b      	ldr	r3, [pc, #44]	; (800f680 <pbuf_free_ooseq+0x3c>)
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	607b      	str	r3, [r7, #4]
 800f656:	e00a      	b.n	800f66e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d003      	beq.n	800f668 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f002 fbdd 	bl	8011e20 <tcp_free_ooseq>
      return;
 800f666:	e005      	b.n	800f674 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	68db      	ldr	r3, [r3, #12]
 800f66c:	607b      	str	r3, [r7, #4]
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d1f1      	bne.n	800f658 <pbuf_free_ooseq+0x14>
    }
  }
}
 800f674:	3708      	adds	r7, #8
 800f676:	46bd      	mov	sp, r7
 800f678:	bd80      	pop	{r7, pc}
 800f67a:	bf00      	nop
 800f67c:	2001a9a8 	.word	0x2001a9a8
 800f680:	2001a9b0 	.word	0x2001a9b0

0800f684 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800f684:	b480      	push	{r7}
 800f686:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800f688:	4b03      	ldr	r3, [pc, #12]	; (800f698 <pbuf_pool_is_empty+0x14>)
 800f68a:	2201      	movs	r2, #1
 800f68c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800f68e:	bf00      	nop
 800f690:	46bd      	mov	sp, r7
 800f692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f696:	4770      	bx	lr
 800f698:	2001a9a8 	.word	0x2001a9a8

0800f69c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800f69c:	b480      	push	{r7}
 800f69e:	b085      	sub	sp, #20
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	60f8      	str	r0, [r7, #12]
 800f6a4:	60b9      	str	r1, [r7, #8]
 800f6a6:	4611      	mov	r1, r2
 800f6a8:	461a      	mov	r2, r3
 800f6aa:	460b      	mov	r3, r1
 800f6ac:	80fb      	strh	r3, [r7, #6]
 800f6ae:	4613      	mov	r3, r2
 800f6b0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	68ba      	ldr	r2, [r7, #8]
 800f6bc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	88fa      	ldrh	r2, [r7, #6]
 800f6c2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	88ba      	ldrh	r2, [r7, #4]
 800f6c8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800f6ca:	8b3b      	ldrh	r3, [r7, #24]
 800f6cc:	b2da      	uxtb	r2, r3
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	7f3a      	ldrb	r2, [r7, #28]
 800f6d6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	2201      	movs	r2, #1
 800f6dc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	73da      	strb	r2, [r3, #15]
}
 800f6e4:	bf00      	nop
 800f6e6:	3714      	adds	r7, #20
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr

0800f6f0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b08c      	sub	sp, #48	; 0x30
 800f6f4:	af02      	add	r7, sp, #8
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	71fb      	strb	r3, [r7, #7]
 800f6fa:	460b      	mov	r3, r1
 800f6fc:	80bb      	strh	r3, [r7, #4]
 800f6fe:	4613      	mov	r3, r2
 800f700:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800f702:	79fb      	ldrb	r3, [r7, #7]
 800f704:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800f706:	887b      	ldrh	r3, [r7, #2]
 800f708:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800f70c:	d07f      	beq.n	800f80e <pbuf_alloc+0x11e>
 800f70e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800f712:	f300 80c8 	bgt.w	800f8a6 <pbuf_alloc+0x1b6>
 800f716:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800f71a:	d010      	beq.n	800f73e <pbuf_alloc+0x4e>
 800f71c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800f720:	f300 80c1 	bgt.w	800f8a6 <pbuf_alloc+0x1b6>
 800f724:	2b01      	cmp	r3, #1
 800f726:	d002      	beq.n	800f72e <pbuf_alloc+0x3e>
 800f728:	2b41      	cmp	r3, #65	; 0x41
 800f72a:	f040 80bc 	bne.w	800f8a6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800f72e:	887a      	ldrh	r2, [r7, #2]
 800f730:	88bb      	ldrh	r3, [r7, #4]
 800f732:	4619      	mov	r1, r3
 800f734:	2000      	movs	r0, #0
 800f736:	f000 f8d1 	bl	800f8dc <pbuf_alloc_reference>
 800f73a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800f73c:	e0bd      	b.n	800f8ba <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800f73e:	2300      	movs	r3, #0
 800f740:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800f742:	2300      	movs	r3, #0
 800f744:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800f746:	88bb      	ldrh	r3, [r7, #4]
 800f748:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f74a:	2008      	movs	r0, #8
 800f74c:	f7ff fc56 	bl	800effc <memp_malloc>
 800f750:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800f752:	693b      	ldr	r3, [r7, #16]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d109      	bne.n	800f76c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800f758:	f7ff ff94 	bl	800f684 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800f75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d002      	beq.n	800f768 <pbuf_alloc+0x78>
            pbuf_free(p);
 800f762:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f764:	f000 faa8 	bl	800fcb8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800f768:	2300      	movs	r3, #0
 800f76a:	e0a7      	b.n	800f8bc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800f76c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f76e:	3303      	adds	r3, #3
 800f770:	b29b      	uxth	r3, r3
 800f772:	f023 0303 	bic.w	r3, r3, #3
 800f776:	b29b      	uxth	r3, r3
 800f778:	f5c3 63a0 	rsb	r3, r3, #1280	; 0x500
 800f77c:	b29b      	uxth	r3, r3
 800f77e:	8b7a      	ldrh	r2, [r7, #26]
 800f780:	4293      	cmp	r3, r2
 800f782:	bf28      	it	cs
 800f784:	4613      	movcs	r3, r2
 800f786:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800f788:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f78a:	3310      	adds	r3, #16
 800f78c:	693a      	ldr	r2, [r7, #16]
 800f78e:	4413      	add	r3, r2
 800f790:	3303      	adds	r3, #3
 800f792:	f023 0303 	bic.w	r3, r3, #3
 800f796:	4618      	mov	r0, r3
 800f798:	89f9      	ldrh	r1, [r7, #14]
 800f79a:	8b7a      	ldrh	r2, [r7, #26]
 800f79c:	2300      	movs	r3, #0
 800f79e:	9301      	str	r3, [sp, #4]
 800f7a0:	887b      	ldrh	r3, [r7, #2]
 800f7a2:	9300      	str	r3, [sp, #0]
 800f7a4:	460b      	mov	r3, r1
 800f7a6:	4601      	mov	r1, r0
 800f7a8:	6938      	ldr	r0, [r7, #16]
 800f7aa:	f7ff ff77 	bl	800f69c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800f7ae:	693b      	ldr	r3, [r7, #16]
 800f7b0:	685b      	ldr	r3, [r3, #4]
 800f7b2:	f003 0303 	and.w	r3, r3, #3
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d006      	beq.n	800f7c8 <pbuf_alloc+0xd8>
 800f7ba:	4b42      	ldr	r3, [pc, #264]	; (800f8c4 <pbuf_alloc+0x1d4>)
 800f7bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f7c0:	4941      	ldr	r1, [pc, #260]	; (800f8c8 <pbuf_alloc+0x1d8>)
 800f7c2:	4842      	ldr	r0, [pc, #264]	; (800f8cc <pbuf_alloc+0x1dc>)
 800f7c4:	f00a fbd2 	bl	8019f6c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800f7c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f7ca:	3303      	adds	r3, #3
 800f7cc:	f023 0303 	bic.w	r3, r3, #3
 800f7d0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800f7d4:	d106      	bne.n	800f7e4 <pbuf_alloc+0xf4>
 800f7d6:	4b3b      	ldr	r3, [pc, #236]	; (800f8c4 <pbuf_alloc+0x1d4>)
 800f7d8:	f44f 7281 	mov.w	r2, #258	; 0x102
 800f7dc:	493c      	ldr	r1, [pc, #240]	; (800f8d0 <pbuf_alloc+0x1e0>)
 800f7de:	483b      	ldr	r0, [pc, #236]	; (800f8cc <pbuf_alloc+0x1dc>)
 800f7e0:	f00a fbc4 	bl	8019f6c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800f7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d102      	bne.n	800f7f0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800f7ea:	693b      	ldr	r3, [r7, #16]
 800f7ec:	627b      	str	r3, [r7, #36]	; 0x24
 800f7ee:	e002      	b.n	800f7f6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800f7f0:	69fb      	ldr	r3, [r7, #28]
 800f7f2:	693a      	ldr	r2, [r7, #16]
 800f7f4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800f7f6:	693b      	ldr	r3, [r7, #16]
 800f7f8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800f7fa:	8b7a      	ldrh	r2, [r7, #26]
 800f7fc:	89fb      	ldrh	r3, [r7, #14]
 800f7fe:	1ad3      	subs	r3, r2, r3
 800f800:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800f802:	2300      	movs	r3, #0
 800f804:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800f806:	8b7b      	ldrh	r3, [r7, #26]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d19e      	bne.n	800f74a <pbuf_alloc+0x5a>
      break;
 800f80c:	e055      	b.n	800f8ba <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800f80e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f810:	3303      	adds	r3, #3
 800f812:	b29b      	uxth	r3, r3
 800f814:	f023 0303 	bic.w	r3, r3, #3
 800f818:	b29a      	uxth	r2, r3
 800f81a:	88bb      	ldrh	r3, [r7, #4]
 800f81c:	3303      	adds	r3, #3
 800f81e:	b29b      	uxth	r3, r3
 800f820:	f023 0303 	bic.w	r3, r3, #3
 800f824:	b29b      	uxth	r3, r3
 800f826:	4413      	add	r3, r2
 800f828:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800f82a:	8b3b      	ldrh	r3, [r7, #24]
 800f82c:	3310      	adds	r3, #16
 800f82e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f830:	8b3a      	ldrh	r2, [r7, #24]
 800f832:	88bb      	ldrh	r3, [r7, #4]
 800f834:	3303      	adds	r3, #3
 800f836:	f023 0303 	bic.w	r3, r3, #3
 800f83a:	429a      	cmp	r2, r3
 800f83c:	d306      	bcc.n	800f84c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800f83e:	8afa      	ldrh	r2, [r7, #22]
 800f840:	88bb      	ldrh	r3, [r7, #4]
 800f842:	3303      	adds	r3, #3
 800f844:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f848:	429a      	cmp	r2, r3
 800f84a:	d201      	bcs.n	800f850 <pbuf_alloc+0x160>
        return NULL;
 800f84c:	2300      	movs	r3, #0
 800f84e:	e035      	b.n	800f8bc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800f850:	8afb      	ldrh	r3, [r7, #22]
 800f852:	4618      	mov	r0, r3
 800f854:	f7ff fa64 	bl	800ed20 <mem_malloc>
 800f858:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800f85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d101      	bne.n	800f864 <pbuf_alloc+0x174>
        return NULL;
 800f860:	2300      	movs	r3, #0
 800f862:	e02b      	b.n	800f8bc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800f864:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f866:	3310      	adds	r3, #16
 800f868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f86a:	4413      	add	r3, r2
 800f86c:	3303      	adds	r3, #3
 800f86e:	f023 0303 	bic.w	r3, r3, #3
 800f872:	4618      	mov	r0, r3
 800f874:	88b9      	ldrh	r1, [r7, #4]
 800f876:	88ba      	ldrh	r2, [r7, #4]
 800f878:	2300      	movs	r3, #0
 800f87a:	9301      	str	r3, [sp, #4]
 800f87c:	887b      	ldrh	r3, [r7, #2]
 800f87e:	9300      	str	r3, [sp, #0]
 800f880:	460b      	mov	r3, r1
 800f882:	4601      	mov	r1, r0
 800f884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f886:	f7ff ff09 	bl	800f69c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800f88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88c:	685b      	ldr	r3, [r3, #4]
 800f88e:	f003 0303 	and.w	r3, r3, #3
 800f892:	2b00      	cmp	r3, #0
 800f894:	d010      	beq.n	800f8b8 <pbuf_alloc+0x1c8>
 800f896:	4b0b      	ldr	r3, [pc, #44]	; (800f8c4 <pbuf_alloc+0x1d4>)
 800f898:	f44f 7291 	mov.w	r2, #290	; 0x122
 800f89c:	490d      	ldr	r1, [pc, #52]	; (800f8d4 <pbuf_alloc+0x1e4>)
 800f89e:	480b      	ldr	r0, [pc, #44]	; (800f8cc <pbuf_alloc+0x1dc>)
 800f8a0:	f00a fb64 	bl	8019f6c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800f8a4:	e008      	b.n	800f8b8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800f8a6:	4b07      	ldr	r3, [pc, #28]	; (800f8c4 <pbuf_alloc+0x1d4>)
 800f8a8:	f240 1227 	movw	r2, #295	; 0x127
 800f8ac:	490a      	ldr	r1, [pc, #40]	; (800f8d8 <pbuf_alloc+0x1e8>)
 800f8ae:	4807      	ldr	r0, [pc, #28]	; (800f8cc <pbuf_alloc+0x1dc>)
 800f8b0:	f00a fb5c 	bl	8019f6c <iprintf>
      return NULL;
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	e001      	b.n	800f8bc <pbuf_alloc+0x1cc>
      break;
 800f8b8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800f8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3728      	adds	r7, #40	; 0x28
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}
 800f8c4:	0801cce4 	.word	0x0801cce4
 800f8c8:	0801cd14 	.word	0x0801cd14
 800f8cc:	0801cd44 	.word	0x0801cd44
 800f8d0:	0801cd6c 	.word	0x0801cd6c
 800f8d4:	0801cda0 	.word	0x0801cda0
 800f8d8:	0801cdcc 	.word	0x0801cdcc

0800f8dc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b086      	sub	sp, #24
 800f8e0:	af02      	add	r7, sp, #8
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	460b      	mov	r3, r1
 800f8e6:	807b      	strh	r3, [r7, #2]
 800f8e8:	4613      	mov	r3, r2
 800f8ea:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800f8ec:	883b      	ldrh	r3, [r7, #0]
 800f8ee:	2b41      	cmp	r3, #65	; 0x41
 800f8f0:	d009      	beq.n	800f906 <pbuf_alloc_reference+0x2a>
 800f8f2:	883b      	ldrh	r3, [r7, #0]
 800f8f4:	2b01      	cmp	r3, #1
 800f8f6:	d006      	beq.n	800f906 <pbuf_alloc_reference+0x2a>
 800f8f8:	4b0f      	ldr	r3, [pc, #60]	; (800f938 <pbuf_alloc_reference+0x5c>)
 800f8fa:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800f8fe:	490f      	ldr	r1, [pc, #60]	; (800f93c <pbuf_alloc_reference+0x60>)
 800f900:	480f      	ldr	r0, [pc, #60]	; (800f940 <pbuf_alloc_reference+0x64>)
 800f902:	f00a fb33 	bl	8019f6c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800f906:	2007      	movs	r0, #7
 800f908:	f7ff fb78 	bl	800effc <memp_malloc>
 800f90c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d101      	bne.n	800f918 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800f914:	2300      	movs	r3, #0
 800f916:	e00b      	b.n	800f930 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800f918:	8879      	ldrh	r1, [r7, #2]
 800f91a:	887a      	ldrh	r2, [r7, #2]
 800f91c:	2300      	movs	r3, #0
 800f91e:	9301      	str	r3, [sp, #4]
 800f920:	883b      	ldrh	r3, [r7, #0]
 800f922:	9300      	str	r3, [sp, #0]
 800f924:	460b      	mov	r3, r1
 800f926:	6879      	ldr	r1, [r7, #4]
 800f928:	68f8      	ldr	r0, [r7, #12]
 800f92a:	f7ff feb7 	bl	800f69c <pbuf_init_alloced_pbuf>
  return p;
 800f92e:	68fb      	ldr	r3, [r7, #12]
}
 800f930:	4618      	mov	r0, r3
 800f932:	3710      	adds	r7, #16
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}
 800f938:	0801cce4 	.word	0x0801cce4
 800f93c:	0801cde8 	.word	0x0801cde8
 800f940:	0801cd44 	.word	0x0801cd44

0800f944 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b088      	sub	sp, #32
 800f948:	af02      	add	r7, sp, #8
 800f94a:	607b      	str	r3, [r7, #4]
 800f94c:	4603      	mov	r3, r0
 800f94e:	73fb      	strb	r3, [r7, #15]
 800f950:	460b      	mov	r3, r1
 800f952:	81bb      	strh	r3, [r7, #12]
 800f954:	4613      	mov	r3, r2
 800f956:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800f958:	7bfb      	ldrb	r3, [r7, #15]
 800f95a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f95c:	8a7b      	ldrh	r3, [r7, #18]
 800f95e:	3303      	adds	r3, #3
 800f960:	f023 0203 	bic.w	r2, r3, #3
 800f964:	89bb      	ldrh	r3, [r7, #12]
 800f966:	441a      	add	r2, r3
 800f968:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f96a:	429a      	cmp	r2, r3
 800f96c:	d901      	bls.n	800f972 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800f96e:	2300      	movs	r3, #0
 800f970:	e018      	b.n	800f9a4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800f972:	6a3b      	ldr	r3, [r7, #32]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d007      	beq.n	800f988 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800f978:	8a7b      	ldrh	r3, [r7, #18]
 800f97a:	3303      	adds	r3, #3
 800f97c:	f023 0303 	bic.w	r3, r3, #3
 800f980:	6a3a      	ldr	r2, [r7, #32]
 800f982:	4413      	add	r3, r2
 800f984:	617b      	str	r3, [r7, #20]
 800f986:	e001      	b.n	800f98c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800f988:	2300      	movs	r3, #0
 800f98a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	89b9      	ldrh	r1, [r7, #12]
 800f990:	89ba      	ldrh	r2, [r7, #12]
 800f992:	2302      	movs	r3, #2
 800f994:	9301      	str	r3, [sp, #4]
 800f996:	897b      	ldrh	r3, [r7, #10]
 800f998:	9300      	str	r3, [sp, #0]
 800f99a:	460b      	mov	r3, r1
 800f99c:	6979      	ldr	r1, [r7, #20]
 800f99e:	f7ff fe7d 	bl	800f69c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800f9a2:	687b      	ldr	r3, [r7, #4]
}
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	3718      	adds	r7, #24
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}

0800f9ac <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b084      	sub	sp, #16
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
 800f9b4:	460b      	mov	r3, r1
 800f9b6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d106      	bne.n	800f9cc <pbuf_realloc+0x20>
 800f9be:	4b3a      	ldr	r3, [pc, #232]	; (800faa8 <pbuf_realloc+0xfc>)
 800f9c0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800f9c4:	4939      	ldr	r1, [pc, #228]	; (800faac <pbuf_realloc+0x100>)
 800f9c6:	483a      	ldr	r0, [pc, #232]	; (800fab0 <pbuf_realloc+0x104>)
 800f9c8:	f00a fad0 	bl	8019f6c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	891b      	ldrh	r3, [r3, #8]
 800f9d0:	887a      	ldrh	r2, [r7, #2]
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d263      	bcs.n	800fa9e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	891a      	ldrh	r2, [r3, #8]
 800f9da:	887b      	ldrh	r3, [r7, #2]
 800f9dc:	1ad3      	subs	r3, r2, r3
 800f9de:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800f9e0:	887b      	ldrh	r3, [r7, #2]
 800f9e2:	817b      	strh	r3, [r7, #10]
  q = p;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800f9e8:	e018      	b.n	800fa1c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	895b      	ldrh	r3, [r3, #10]
 800f9ee:	897a      	ldrh	r2, [r7, #10]
 800f9f0:	1ad3      	subs	r3, r2, r3
 800f9f2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	891a      	ldrh	r2, [r3, #8]
 800f9f8:	893b      	ldrh	r3, [r7, #8]
 800f9fa:	1ad3      	subs	r3, r2, r3
 800f9fc:	b29a      	uxth	r2, r3
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d106      	bne.n	800fa1c <pbuf_realloc+0x70>
 800fa0e:	4b26      	ldr	r3, [pc, #152]	; (800faa8 <pbuf_realloc+0xfc>)
 800fa10:	f240 12af 	movw	r2, #431	; 0x1af
 800fa14:	4927      	ldr	r1, [pc, #156]	; (800fab4 <pbuf_realloc+0x108>)
 800fa16:	4826      	ldr	r0, [pc, #152]	; (800fab0 <pbuf_realloc+0x104>)
 800fa18:	f00a faa8 	bl	8019f6c <iprintf>
  while (rem_len > q->len) {
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	895b      	ldrh	r3, [r3, #10]
 800fa20:	897a      	ldrh	r2, [r7, #10]
 800fa22:	429a      	cmp	r2, r3
 800fa24:	d8e1      	bhi.n	800f9ea <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	7b1b      	ldrb	r3, [r3, #12]
 800fa2a:	f003 030f 	and.w	r3, r3, #15
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d121      	bne.n	800fa76 <pbuf_realloc+0xca>
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	895b      	ldrh	r3, [r3, #10]
 800fa36:	897a      	ldrh	r2, [r7, #10]
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	d01c      	beq.n	800fa76 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	7b5b      	ldrb	r3, [r3, #13]
 800fa40:	f003 0302 	and.w	r3, r3, #2
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d116      	bne.n	800fa76 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	685a      	ldr	r2, [r3, #4]
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	1ad3      	subs	r3, r2, r3
 800fa50:	b29a      	uxth	r2, r3
 800fa52:	897b      	ldrh	r3, [r7, #10]
 800fa54:	4413      	add	r3, r2
 800fa56:	b29b      	uxth	r3, r3
 800fa58:	4619      	mov	r1, r3
 800fa5a:	68f8      	ldr	r0, [r7, #12]
 800fa5c:	f7ff f864 	bl	800eb28 <mem_trim>
 800fa60:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d106      	bne.n	800fa76 <pbuf_realloc+0xca>
 800fa68:	4b0f      	ldr	r3, [pc, #60]	; (800faa8 <pbuf_realloc+0xfc>)
 800fa6a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800fa6e:	4912      	ldr	r1, [pc, #72]	; (800fab8 <pbuf_realloc+0x10c>)
 800fa70:	480f      	ldr	r0, [pc, #60]	; (800fab0 <pbuf_realloc+0x104>)
 800fa72:	f00a fa7b 	bl	8019f6c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	897a      	ldrh	r2, [r7, #10]
 800fa7a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	895a      	ldrh	r2, [r3, #10]
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d004      	beq.n	800fa96 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	4618      	mov	r0, r3
 800fa92:	f000 f911 	bl	800fcb8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	2200      	movs	r2, #0
 800fa9a:	601a      	str	r2, [r3, #0]
 800fa9c:	e000      	b.n	800faa0 <pbuf_realloc+0xf4>
    return;
 800fa9e:	bf00      	nop

}
 800faa0:	3710      	adds	r7, #16
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}
 800faa6:	bf00      	nop
 800faa8:	0801cce4 	.word	0x0801cce4
 800faac:	0801cdfc 	.word	0x0801cdfc
 800fab0:	0801cd44 	.word	0x0801cd44
 800fab4:	0801ce14 	.word	0x0801ce14
 800fab8:	0801ce2c 	.word	0x0801ce2c

0800fabc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b086      	sub	sp, #24
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	60f8      	str	r0, [r7, #12]
 800fac4:	60b9      	str	r1, [r7, #8]
 800fac6:	4613      	mov	r3, r2
 800fac8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	2b00      	cmp	r3, #0
 800face:	d106      	bne.n	800fade <pbuf_add_header_impl+0x22>
 800fad0:	4b2b      	ldr	r3, [pc, #172]	; (800fb80 <pbuf_add_header_impl+0xc4>)
 800fad2:	f240 12df 	movw	r2, #479	; 0x1df
 800fad6:	492b      	ldr	r1, [pc, #172]	; (800fb84 <pbuf_add_header_impl+0xc8>)
 800fad8:	482b      	ldr	r0, [pc, #172]	; (800fb88 <pbuf_add_header_impl+0xcc>)
 800fada:	f00a fa47 	bl	8019f6c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d003      	beq.n	800faec <pbuf_add_header_impl+0x30>
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800faea:	d301      	bcc.n	800faf0 <pbuf_add_header_impl+0x34>
    return 1;
 800faec:	2301      	movs	r3, #1
 800faee:	e043      	b.n	800fb78 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d101      	bne.n	800fafa <pbuf_add_header_impl+0x3e>
    return 0;
 800faf6:	2300      	movs	r3, #0
 800faf8:	e03e      	b.n	800fb78 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	891a      	ldrh	r2, [r3, #8]
 800fb02:	8a7b      	ldrh	r3, [r7, #18]
 800fb04:	4413      	add	r3, r2
 800fb06:	b29b      	uxth	r3, r3
 800fb08:	8a7a      	ldrh	r2, [r7, #18]
 800fb0a:	429a      	cmp	r2, r3
 800fb0c:	d901      	bls.n	800fb12 <pbuf_add_header_impl+0x56>
    return 1;
 800fb0e:	2301      	movs	r3, #1
 800fb10:	e032      	b.n	800fb78 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	7b1b      	ldrb	r3, [r3, #12]
 800fb16:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800fb18:	8a3b      	ldrh	r3, [r7, #16]
 800fb1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d00c      	beq.n	800fb3c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	685a      	ldr	r2, [r3, #4]
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	425b      	negs	r3, r3
 800fb2a:	4413      	add	r3, r2
 800fb2c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	3310      	adds	r3, #16
 800fb32:	697a      	ldr	r2, [r7, #20]
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d20d      	bcs.n	800fb54 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800fb38:	2301      	movs	r3, #1
 800fb3a:	e01d      	b.n	800fb78 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800fb3c:	79fb      	ldrb	r3, [r7, #7]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d006      	beq.n	800fb50 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	685a      	ldr	r2, [r3, #4]
 800fb46:	68bb      	ldr	r3, [r7, #8]
 800fb48:	425b      	negs	r3, r3
 800fb4a:	4413      	add	r3, r2
 800fb4c:	617b      	str	r3, [r7, #20]
 800fb4e:	e001      	b.n	800fb54 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800fb50:	2301      	movs	r3, #1
 800fb52:	e011      	b.n	800fb78 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	697a      	ldr	r2, [r7, #20]
 800fb58:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	895a      	ldrh	r2, [r3, #10]
 800fb5e:	8a7b      	ldrh	r3, [r7, #18]
 800fb60:	4413      	add	r3, r2
 800fb62:	b29a      	uxth	r2, r3
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	891a      	ldrh	r2, [r3, #8]
 800fb6c:	8a7b      	ldrh	r3, [r7, #18]
 800fb6e:	4413      	add	r3, r2
 800fb70:	b29a      	uxth	r2, r3
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	811a      	strh	r2, [r3, #8]


  return 0;
 800fb76:	2300      	movs	r3, #0
}
 800fb78:	4618      	mov	r0, r3
 800fb7a:	3718      	adds	r7, #24
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}
 800fb80:	0801cce4 	.word	0x0801cce4
 800fb84:	0801ce48 	.word	0x0801ce48
 800fb88:	0801cd44 	.word	0x0801cd44

0800fb8c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b082      	sub	sp, #8
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
 800fb94:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800fb96:	2200      	movs	r2, #0
 800fb98:	6839      	ldr	r1, [r7, #0]
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f7ff ff8e 	bl	800fabc <pbuf_add_header_impl>
 800fba0:	4603      	mov	r3, r0
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	3708      	adds	r7, #8
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}
	...

0800fbac <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b084      	sub	sp, #16
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
 800fbb4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d106      	bne.n	800fbca <pbuf_remove_header+0x1e>
 800fbbc:	4b20      	ldr	r3, [pc, #128]	; (800fc40 <pbuf_remove_header+0x94>)
 800fbbe:	f240 224b 	movw	r2, #587	; 0x24b
 800fbc2:	4920      	ldr	r1, [pc, #128]	; (800fc44 <pbuf_remove_header+0x98>)
 800fbc4:	4820      	ldr	r0, [pc, #128]	; (800fc48 <pbuf_remove_header+0x9c>)
 800fbc6:	f00a f9d1 	bl	8019f6c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d003      	beq.n	800fbd8 <pbuf_remove_header+0x2c>
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fbd6:	d301      	bcc.n	800fbdc <pbuf_remove_header+0x30>
    return 1;
 800fbd8:	2301      	movs	r3, #1
 800fbda:	e02c      	b.n	800fc36 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d101      	bne.n	800fbe6 <pbuf_remove_header+0x3a>
    return 0;
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	e027      	b.n	800fc36 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	895b      	ldrh	r3, [r3, #10]
 800fbee:	89fa      	ldrh	r2, [r7, #14]
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	d908      	bls.n	800fc06 <pbuf_remove_header+0x5a>
 800fbf4:	4b12      	ldr	r3, [pc, #72]	; (800fc40 <pbuf_remove_header+0x94>)
 800fbf6:	f240 2255 	movw	r2, #597	; 0x255
 800fbfa:	4914      	ldr	r1, [pc, #80]	; (800fc4c <pbuf_remove_header+0xa0>)
 800fbfc:	4812      	ldr	r0, [pc, #72]	; (800fc48 <pbuf_remove_header+0x9c>)
 800fbfe:	f00a f9b5 	bl	8019f6c <iprintf>
 800fc02:	2301      	movs	r3, #1
 800fc04:	e017      	b.n	800fc36 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	685b      	ldr	r3, [r3, #4]
 800fc0a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	685a      	ldr	r2, [r3, #4]
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	441a      	add	r2, r3
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	895a      	ldrh	r2, [r3, #10]
 800fc1c:	89fb      	ldrh	r3, [r7, #14]
 800fc1e:	1ad3      	subs	r3, r2, r3
 800fc20:	b29a      	uxth	r2, r3
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	891a      	ldrh	r2, [r3, #8]
 800fc2a:	89fb      	ldrh	r3, [r7, #14]
 800fc2c:	1ad3      	subs	r3, r2, r3
 800fc2e:	b29a      	uxth	r2, r3
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800fc34:	2300      	movs	r3, #0
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	3710      	adds	r7, #16
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}
 800fc3e:	bf00      	nop
 800fc40:	0801cce4 	.word	0x0801cce4
 800fc44:	0801ce48 	.word	0x0801ce48
 800fc48:	0801cd44 	.word	0x0801cd44
 800fc4c:	0801ce54 	.word	0x0801ce54

0800fc50 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b082      	sub	sp, #8
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
 800fc58:	460b      	mov	r3, r1
 800fc5a:	807b      	strh	r3, [r7, #2]
 800fc5c:	4613      	mov	r3, r2
 800fc5e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800fc60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	da08      	bge.n	800fc7a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800fc68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fc6c:	425b      	negs	r3, r3
 800fc6e:	4619      	mov	r1, r3
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f7ff ff9b 	bl	800fbac <pbuf_remove_header>
 800fc76:	4603      	mov	r3, r0
 800fc78:	e007      	b.n	800fc8a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800fc7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fc7e:	787a      	ldrb	r2, [r7, #1]
 800fc80:	4619      	mov	r1, r3
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f7ff ff1a 	bl	800fabc <pbuf_add_header_impl>
 800fc88:	4603      	mov	r3, r0
  }
}
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	3708      	adds	r7, #8
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}

0800fc92 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800fc92:	b580      	push	{r7, lr}
 800fc94:	b082      	sub	sp, #8
 800fc96:	af00      	add	r7, sp, #0
 800fc98:	6078      	str	r0, [r7, #4]
 800fc9a:	460b      	mov	r3, r1
 800fc9c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800fc9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fca2:	2201      	movs	r2, #1
 800fca4:	4619      	mov	r1, r3
 800fca6:	6878      	ldr	r0, [r7, #4]
 800fca8:	f7ff ffd2 	bl	800fc50 <pbuf_header_impl>
 800fcac:	4603      	mov	r3, r0
}
 800fcae:	4618      	mov	r0, r3
 800fcb0:	3708      	adds	r7, #8
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}
	...

0800fcb8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b086      	sub	sp, #24
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d10b      	bne.n	800fcde <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d106      	bne.n	800fcda <pbuf_free+0x22>
 800fccc:	4b38      	ldr	r3, [pc, #224]	; (800fdb0 <pbuf_free+0xf8>)
 800fcce:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800fcd2:	4938      	ldr	r1, [pc, #224]	; (800fdb4 <pbuf_free+0xfc>)
 800fcd4:	4838      	ldr	r0, [pc, #224]	; (800fdb8 <pbuf_free+0x100>)
 800fcd6:	f00a f949 	bl	8019f6c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	e063      	b.n	800fda6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800fcde:	2300      	movs	r3, #0
 800fce0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800fce2:	e05c      	b.n	800fd9e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	7b9b      	ldrb	r3, [r3, #14]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d106      	bne.n	800fcfa <pbuf_free+0x42>
 800fcec:	4b30      	ldr	r3, [pc, #192]	; (800fdb0 <pbuf_free+0xf8>)
 800fcee:	f240 22f1 	movw	r2, #753	; 0x2f1
 800fcf2:	4932      	ldr	r1, [pc, #200]	; (800fdbc <pbuf_free+0x104>)
 800fcf4:	4830      	ldr	r0, [pc, #192]	; (800fdb8 <pbuf_free+0x100>)
 800fcf6:	f00a f939 	bl	8019f6c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	7b9b      	ldrb	r3, [r3, #14]
 800fcfe:	3b01      	subs	r3, #1
 800fd00:	b2da      	uxtb	r2, r3
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	739a      	strb	r2, [r3, #14]
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	7b9b      	ldrb	r3, [r3, #14]
 800fd0a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800fd0c:	7dbb      	ldrb	r3, [r7, #22]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d143      	bne.n	800fd9a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	7b1b      	ldrb	r3, [r3, #12]
 800fd1c:	f003 030f 	and.w	r3, r3, #15
 800fd20:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	7b5b      	ldrb	r3, [r3, #13]
 800fd26:	f003 0302 	and.w	r3, r3, #2
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d011      	beq.n	800fd52 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	691b      	ldr	r3, [r3, #16]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d106      	bne.n	800fd48 <pbuf_free+0x90>
 800fd3a:	4b1d      	ldr	r3, [pc, #116]	; (800fdb0 <pbuf_free+0xf8>)
 800fd3c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800fd40:	491f      	ldr	r1, [pc, #124]	; (800fdc0 <pbuf_free+0x108>)
 800fd42:	481d      	ldr	r0, [pc, #116]	; (800fdb8 <pbuf_free+0x100>)
 800fd44:	f00a f912 	bl	8019f6c <iprintf>
        pc->custom_free_function(p);
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	691b      	ldr	r3, [r3, #16]
 800fd4c:	6878      	ldr	r0, [r7, #4]
 800fd4e:	4798      	blx	r3
 800fd50:	e01d      	b.n	800fd8e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800fd52:	7bfb      	ldrb	r3, [r7, #15]
 800fd54:	2b02      	cmp	r3, #2
 800fd56:	d104      	bne.n	800fd62 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800fd58:	6879      	ldr	r1, [r7, #4]
 800fd5a:	2008      	movs	r0, #8
 800fd5c:	f7ff f99a 	bl	800f094 <memp_free>
 800fd60:	e015      	b.n	800fd8e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800fd62:	7bfb      	ldrb	r3, [r7, #15]
 800fd64:	2b01      	cmp	r3, #1
 800fd66:	d104      	bne.n	800fd72 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800fd68:	6879      	ldr	r1, [r7, #4]
 800fd6a:	2007      	movs	r0, #7
 800fd6c:	f7ff f992 	bl	800f094 <memp_free>
 800fd70:	e00d      	b.n	800fd8e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800fd72:	7bfb      	ldrb	r3, [r7, #15]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d103      	bne.n	800fd80 <pbuf_free+0xc8>
          mem_free(p);
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f7fe fe6b 	bl	800ea54 <mem_free>
 800fd7e:	e006      	b.n	800fd8e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800fd80:	4b0b      	ldr	r3, [pc, #44]	; (800fdb0 <pbuf_free+0xf8>)
 800fd82:	f240 320f 	movw	r2, #783	; 0x30f
 800fd86:	490f      	ldr	r1, [pc, #60]	; (800fdc4 <pbuf_free+0x10c>)
 800fd88:	480b      	ldr	r0, [pc, #44]	; (800fdb8 <pbuf_free+0x100>)
 800fd8a:	f00a f8ef 	bl	8019f6c <iprintf>
        }
      }
      count++;
 800fd8e:	7dfb      	ldrb	r3, [r7, #23]
 800fd90:	3301      	adds	r3, #1
 800fd92:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800fd94:	693b      	ldr	r3, [r7, #16]
 800fd96:	607b      	str	r3, [r7, #4]
 800fd98:	e001      	b.n	800fd9e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d19f      	bne.n	800fce4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800fda4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fda6:	4618      	mov	r0, r3
 800fda8:	3718      	adds	r7, #24
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bd80      	pop	{r7, pc}
 800fdae:	bf00      	nop
 800fdb0:	0801cce4 	.word	0x0801cce4
 800fdb4:	0801ce48 	.word	0x0801ce48
 800fdb8:	0801cd44 	.word	0x0801cd44
 800fdbc:	0801ce74 	.word	0x0801ce74
 800fdc0:	0801ce8c 	.word	0x0801ce8c
 800fdc4:	0801ceb0 	.word	0x0801ceb0

0800fdc8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800fdc8:	b480      	push	{r7}
 800fdca:	b085      	sub	sp, #20
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800fdd4:	e005      	b.n	800fde2 <pbuf_clen+0x1a>
    ++len;
 800fdd6:	89fb      	ldrh	r3, [r7, #14]
 800fdd8:	3301      	adds	r3, #1
 800fdda:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d1f6      	bne.n	800fdd6 <pbuf_clen+0xe>
  }
  return len;
 800fde8:	89fb      	ldrh	r3, [r7, #14]
}
 800fdea:	4618      	mov	r0, r3
 800fdec:	3714      	adds	r7, #20
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf4:	4770      	bx	lr
	...

0800fdf8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b082      	sub	sp, #8
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d010      	beq.n	800fe28 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	7b9b      	ldrb	r3, [r3, #14]
 800fe0a:	3301      	adds	r3, #1
 800fe0c:	b2da      	uxtb	r2, r3
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	7b9b      	ldrb	r3, [r3, #14]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d106      	bne.n	800fe28 <pbuf_ref+0x30>
 800fe1a:	4b05      	ldr	r3, [pc, #20]	; (800fe30 <pbuf_ref+0x38>)
 800fe1c:	f240 3242 	movw	r2, #834	; 0x342
 800fe20:	4904      	ldr	r1, [pc, #16]	; (800fe34 <pbuf_ref+0x3c>)
 800fe22:	4805      	ldr	r0, [pc, #20]	; (800fe38 <pbuf_ref+0x40>)
 800fe24:	f00a f8a2 	bl	8019f6c <iprintf>
  }
}
 800fe28:	bf00      	nop
 800fe2a:	3708      	adds	r7, #8
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}
 800fe30:	0801cce4 	.word	0x0801cce4
 800fe34:	0801cec4 	.word	0x0801cec4
 800fe38:	0801cd44 	.word	0x0801cd44

0800fe3c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b084      	sub	sp, #16
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d002      	beq.n	800fe52 <pbuf_cat+0x16>
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d107      	bne.n	800fe62 <pbuf_cat+0x26>
 800fe52:	4b20      	ldr	r3, [pc, #128]	; (800fed4 <pbuf_cat+0x98>)
 800fe54:	f240 3259 	movw	r2, #857	; 0x359
 800fe58:	491f      	ldr	r1, [pc, #124]	; (800fed8 <pbuf_cat+0x9c>)
 800fe5a:	4820      	ldr	r0, [pc, #128]	; (800fedc <pbuf_cat+0xa0>)
 800fe5c:	f00a f886 	bl	8019f6c <iprintf>
 800fe60:	e034      	b.n	800fecc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	60fb      	str	r3, [r7, #12]
 800fe66:	e00a      	b.n	800fe7e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	891a      	ldrh	r2, [r3, #8]
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	891b      	ldrh	r3, [r3, #8]
 800fe70:	4413      	add	r3, r2
 800fe72:	b29a      	uxth	r2, r3
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	60fb      	str	r3, [r7, #12]
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d1f0      	bne.n	800fe68 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	891a      	ldrh	r2, [r3, #8]
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	895b      	ldrh	r3, [r3, #10]
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	d006      	beq.n	800fea0 <pbuf_cat+0x64>
 800fe92:	4b10      	ldr	r3, [pc, #64]	; (800fed4 <pbuf_cat+0x98>)
 800fe94:	f240 3262 	movw	r2, #866	; 0x362
 800fe98:	4911      	ldr	r1, [pc, #68]	; (800fee0 <pbuf_cat+0xa4>)
 800fe9a:	4810      	ldr	r0, [pc, #64]	; (800fedc <pbuf_cat+0xa0>)
 800fe9c:	f00a f866 	bl	8019f6c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d006      	beq.n	800feb6 <pbuf_cat+0x7a>
 800fea8:	4b0a      	ldr	r3, [pc, #40]	; (800fed4 <pbuf_cat+0x98>)
 800feaa:	f240 3263 	movw	r2, #867	; 0x363
 800feae:	490d      	ldr	r1, [pc, #52]	; (800fee4 <pbuf_cat+0xa8>)
 800feb0:	480a      	ldr	r0, [pc, #40]	; (800fedc <pbuf_cat+0xa0>)
 800feb2:	f00a f85b 	bl	8019f6c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	891a      	ldrh	r2, [r3, #8]
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	891b      	ldrh	r3, [r3, #8]
 800febe:	4413      	add	r3, r2
 800fec0:	b29a      	uxth	r2, r3
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	683a      	ldr	r2, [r7, #0]
 800feca:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800fecc:	3710      	adds	r7, #16
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}
 800fed2:	bf00      	nop
 800fed4:	0801cce4 	.word	0x0801cce4
 800fed8:	0801ced8 	.word	0x0801ced8
 800fedc:	0801cd44 	.word	0x0801cd44
 800fee0:	0801cf10 	.word	0x0801cf10
 800fee4:	0801cf40 	.word	0x0801cf40

0800fee8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b086      	sub	sp, #24
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
 800fef0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800fef2:	2300      	movs	r3, #0
 800fef4:	617b      	str	r3, [r7, #20]
 800fef6:	2300      	movs	r3, #0
 800fef8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d008      	beq.n	800ff12 <pbuf_copy+0x2a>
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d005      	beq.n	800ff12 <pbuf_copy+0x2a>
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	891a      	ldrh	r2, [r3, #8]
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	891b      	ldrh	r3, [r3, #8]
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	d209      	bcs.n	800ff26 <pbuf_copy+0x3e>
 800ff12:	4b57      	ldr	r3, [pc, #348]	; (8010070 <pbuf_copy+0x188>)
 800ff14:	f240 32c9 	movw	r2, #969	; 0x3c9
 800ff18:	4956      	ldr	r1, [pc, #344]	; (8010074 <pbuf_copy+0x18c>)
 800ff1a:	4857      	ldr	r0, [pc, #348]	; (8010078 <pbuf_copy+0x190>)
 800ff1c:	f00a f826 	bl	8019f6c <iprintf>
 800ff20:	f06f 030f 	mvn.w	r3, #15
 800ff24:	e09f      	b.n	8010066 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	895b      	ldrh	r3, [r3, #10]
 800ff2a:	461a      	mov	r2, r3
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	1ad2      	subs	r2, r2, r3
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	895b      	ldrh	r3, [r3, #10]
 800ff34:	4619      	mov	r1, r3
 800ff36:	693b      	ldr	r3, [r7, #16]
 800ff38:	1acb      	subs	r3, r1, r3
 800ff3a:	429a      	cmp	r2, r3
 800ff3c:	d306      	bcc.n	800ff4c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ff3e:	683b      	ldr	r3, [r7, #0]
 800ff40:	895b      	ldrh	r3, [r3, #10]
 800ff42:	461a      	mov	r2, r3
 800ff44:	693b      	ldr	r3, [r7, #16]
 800ff46:	1ad3      	subs	r3, r2, r3
 800ff48:	60fb      	str	r3, [r7, #12]
 800ff4a:	e005      	b.n	800ff58 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	895b      	ldrh	r3, [r3, #10]
 800ff50:	461a      	mov	r2, r3
 800ff52:	697b      	ldr	r3, [r7, #20]
 800ff54:	1ad3      	subs	r3, r2, r3
 800ff56:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	685a      	ldr	r2, [r3, #4]
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	18d0      	adds	r0, r2, r3
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	685a      	ldr	r2, [r3, #4]
 800ff64:	693b      	ldr	r3, [r7, #16]
 800ff66:	4413      	add	r3, r2
 800ff68:	68fa      	ldr	r2, [r7, #12]
 800ff6a:	4619      	mov	r1, r3
 800ff6c:	f009 fad4 	bl	8019518 <memcpy>
    offset_to += len;
 800ff70:	697a      	ldr	r2, [r7, #20]
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	4413      	add	r3, r2
 800ff76:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ff78:	693a      	ldr	r2, [r7, #16]
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	4413      	add	r3, r2
 800ff7e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	895b      	ldrh	r3, [r3, #10]
 800ff84:	461a      	mov	r2, r3
 800ff86:	697b      	ldr	r3, [r7, #20]
 800ff88:	4293      	cmp	r3, r2
 800ff8a:	d906      	bls.n	800ff9a <pbuf_copy+0xb2>
 800ff8c:	4b38      	ldr	r3, [pc, #224]	; (8010070 <pbuf_copy+0x188>)
 800ff8e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800ff92:	493a      	ldr	r1, [pc, #232]	; (801007c <pbuf_copy+0x194>)
 800ff94:	4838      	ldr	r0, [pc, #224]	; (8010078 <pbuf_copy+0x190>)
 800ff96:	f009 ffe9 	bl	8019f6c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	895b      	ldrh	r3, [r3, #10]
 800ff9e:	461a      	mov	r2, r3
 800ffa0:	693b      	ldr	r3, [r7, #16]
 800ffa2:	4293      	cmp	r3, r2
 800ffa4:	d906      	bls.n	800ffb4 <pbuf_copy+0xcc>
 800ffa6:	4b32      	ldr	r3, [pc, #200]	; (8010070 <pbuf_copy+0x188>)
 800ffa8:	f240 32da 	movw	r2, #986	; 0x3da
 800ffac:	4934      	ldr	r1, [pc, #208]	; (8010080 <pbuf_copy+0x198>)
 800ffae:	4832      	ldr	r0, [pc, #200]	; (8010078 <pbuf_copy+0x190>)
 800ffb0:	f009 ffdc 	bl	8019f6c <iprintf>
    if (offset_from >= p_from->len) {
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	895b      	ldrh	r3, [r3, #10]
 800ffb8:	461a      	mov	r2, r3
 800ffba:	693b      	ldr	r3, [r7, #16]
 800ffbc:	4293      	cmp	r3, r2
 800ffbe:	d304      	bcc.n	800ffca <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	895b      	ldrh	r3, [r3, #10]
 800ffce:	461a      	mov	r2, r3
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	4293      	cmp	r3, r2
 800ffd4:	d114      	bne.n	8010000 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d10c      	bne.n	8010000 <pbuf_copy+0x118>
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d009      	beq.n	8010000 <pbuf_copy+0x118>
 800ffec:	4b20      	ldr	r3, [pc, #128]	; (8010070 <pbuf_copy+0x188>)
 800ffee:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800fff2:	4924      	ldr	r1, [pc, #144]	; (8010084 <pbuf_copy+0x19c>)
 800fff4:	4820      	ldr	r0, [pc, #128]	; (8010078 <pbuf_copy+0x190>)
 800fff6:	f009 ffb9 	bl	8019f6c <iprintf>
 800fffa:	f06f 030f 	mvn.w	r3, #15
 800fffe:	e032      	b.n	8010066 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d013      	beq.n	801002e <pbuf_copy+0x146>
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	895a      	ldrh	r2, [r3, #10]
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	891b      	ldrh	r3, [r3, #8]
 801000e:	429a      	cmp	r2, r3
 8010010:	d10d      	bne.n	801002e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d009      	beq.n	801002e <pbuf_copy+0x146>
 801001a:	4b15      	ldr	r3, [pc, #84]	; (8010070 <pbuf_copy+0x188>)
 801001c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8010020:	4919      	ldr	r1, [pc, #100]	; (8010088 <pbuf_copy+0x1a0>)
 8010022:	4815      	ldr	r0, [pc, #84]	; (8010078 <pbuf_copy+0x190>)
 8010024:	f009 ffa2 	bl	8019f6c <iprintf>
 8010028:	f06f 0305 	mvn.w	r3, #5
 801002c:	e01b      	b.n	8010066 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d013      	beq.n	801005c <pbuf_copy+0x174>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	895a      	ldrh	r2, [r3, #10]
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	891b      	ldrh	r3, [r3, #8]
 801003c:	429a      	cmp	r2, r3
 801003e:	d10d      	bne.n	801005c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d009      	beq.n	801005c <pbuf_copy+0x174>
 8010048:	4b09      	ldr	r3, [pc, #36]	; (8010070 <pbuf_copy+0x188>)
 801004a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801004e:	490e      	ldr	r1, [pc, #56]	; (8010088 <pbuf_copy+0x1a0>)
 8010050:	4809      	ldr	r0, [pc, #36]	; (8010078 <pbuf_copy+0x190>)
 8010052:	f009 ff8b 	bl	8019f6c <iprintf>
 8010056:	f06f 0305 	mvn.w	r3, #5
 801005a:	e004      	b.n	8010066 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	2b00      	cmp	r3, #0
 8010060:	f47f af61 	bne.w	800ff26 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010064:	2300      	movs	r3, #0
}
 8010066:	4618      	mov	r0, r3
 8010068:	3718      	adds	r7, #24
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}
 801006e:	bf00      	nop
 8010070:	0801cce4 	.word	0x0801cce4
 8010074:	0801cf8c 	.word	0x0801cf8c
 8010078:	0801cd44 	.word	0x0801cd44
 801007c:	0801cfbc 	.word	0x0801cfbc
 8010080:	0801cfd4 	.word	0x0801cfd4
 8010084:	0801cff0 	.word	0x0801cff0
 8010088:	0801d000 	.word	0x0801d000

0801008c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b088      	sub	sp, #32
 8010090:	af00      	add	r7, sp, #0
 8010092:	60f8      	str	r0, [r7, #12]
 8010094:	60b9      	str	r1, [r7, #8]
 8010096:	4611      	mov	r1, r2
 8010098:	461a      	mov	r2, r3
 801009a:	460b      	mov	r3, r1
 801009c:	80fb      	strh	r3, [r7, #6]
 801009e:	4613      	mov	r3, r2
 80100a0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80100a2:	2300      	movs	r3, #0
 80100a4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80100a6:	2300      	movs	r3, #0
 80100a8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d108      	bne.n	80100c2 <pbuf_copy_partial+0x36>
 80100b0:	4b2b      	ldr	r3, [pc, #172]	; (8010160 <pbuf_copy_partial+0xd4>)
 80100b2:	f240 420a 	movw	r2, #1034	; 0x40a
 80100b6:	492b      	ldr	r1, [pc, #172]	; (8010164 <pbuf_copy_partial+0xd8>)
 80100b8:	482b      	ldr	r0, [pc, #172]	; (8010168 <pbuf_copy_partial+0xdc>)
 80100ba:	f009 ff57 	bl	8019f6c <iprintf>
 80100be:	2300      	movs	r3, #0
 80100c0:	e04a      	b.n	8010158 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80100c2:	68bb      	ldr	r3, [r7, #8]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d108      	bne.n	80100da <pbuf_copy_partial+0x4e>
 80100c8:	4b25      	ldr	r3, [pc, #148]	; (8010160 <pbuf_copy_partial+0xd4>)
 80100ca:	f240 420b 	movw	r2, #1035	; 0x40b
 80100ce:	4927      	ldr	r1, [pc, #156]	; (801016c <pbuf_copy_partial+0xe0>)
 80100d0:	4825      	ldr	r0, [pc, #148]	; (8010168 <pbuf_copy_partial+0xdc>)
 80100d2:	f009 ff4b 	bl	8019f6c <iprintf>
 80100d6:	2300      	movs	r3, #0
 80100d8:	e03e      	b.n	8010158 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	61fb      	str	r3, [r7, #28]
 80100de:	e034      	b.n	801014a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80100e0:	88bb      	ldrh	r3, [r7, #4]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d00a      	beq.n	80100fc <pbuf_copy_partial+0x70>
 80100e6:	69fb      	ldr	r3, [r7, #28]
 80100e8:	895b      	ldrh	r3, [r3, #10]
 80100ea:	88ba      	ldrh	r2, [r7, #4]
 80100ec:	429a      	cmp	r2, r3
 80100ee:	d305      	bcc.n	80100fc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80100f0:	69fb      	ldr	r3, [r7, #28]
 80100f2:	895b      	ldrh	r3, [r3, #10]
 80100f4:	88ba      	ldrh	r2, [r7, #4]
 80100f6:	1ad3      	subs	r3, r2, r3
 80100f8:	80bb      	strh	r3, [r7, #4]
 80100fa:	e023      	b.n	8010144 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80100fc:	69fb      	ldr	r3, [r7, #28]
 80100fe:	895a      	ldrh	r2, [r3, #10]
 8010100:	88bb      	ldrh	r3, [r7, #4]
 8010102:	1ad3      	subs	r3, r2, r3
 8010104:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010106:	8b3a      	ldrh	r2, [r7, #24]
 8010108:	88fb      	ldrh	r3, [r7, #6]
 801010a:	429a      	cmp	r2, r3
 801010c:	d901      	bls.n	8010112 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801010e:	88fb      	ldrh	r3, [r7, #6]
 8010110:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010112:	8b7b      	ldrh	r3, [r7, #26]
 8010114:	68ba      	ldr	r2, [r7, #8]
 8010116:	18d0      	adds	r0, r2, r3
 8010118:	69fb      	ldr	r3, [r7, #28]
 801011a:	685a      	ldr	r2, [r3, #4]
 801011c:	88bb      	ldrh	r3, [r7, #4]
 801011e:	4413      	add	r3, r2
 8010120:	8b3a      	ldrh	r2, [r7, #24]
 8010122:	4619      	mov	r1, r3
 8010124:	f009 f9f8 	bl	8019518 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010128:	8afa      	ldrh	r2, [r7, #22]
 801012a:	8b3b      	ldrh	r3, [r7, #24]
 801012c:	4413      	add	r3, r2
 801012e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010130:	8b7a      	ldrh	r2, [r7, #26]
 8010132:	8b3b      	ldrh	r3, [r7, #24]
 8010134:	4413      	add	r3, r2
 8010136:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010138:	88fa      	ldrh	r2, [r7, #6]
 801013a:	8b3b      	ldrh	r3, [r7, #24]
 801013c:	1ad3      	subs	r3, r2, r3
 801013e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010140:	2300      	movs	r3, #0
 8010142:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010144:	69fb      	ldr	r3, [r7, #28]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	61fb      	str	r3, [r7, #28]
 801014a:	88fb      	ldrh	r3, [r7, #6]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d002      	beq.n	8010156 <pbuf_copy_partial+0xca>
 8010150:	69fb      	ldr	r3, [r7, #28]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d1c4      	bne.n	80100e0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8010156:	8afb      	ldrh	r3, [r7, #22]
}
 8010158:	4618      	mov	r0, r3
 801015a:	3720      	adds	r7, #32
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}
 8010160:	0801cce4 	.word	0x0801cce4
 8010164:	0801d02c 	.word	0x0801d02c
 8010168:	0801cd44 	.word	0x0801cd44
 801016c:	0801d04c 	.word	0x0801d04c

08010170 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b088      	sub	sp, #32
 8010174:	af00      	add	r7, sp, #0
 8010176:	60f8      	str	r0, [r7, #12]
 8010178:	60b9      	str	r1, [r7, #8]
 801017a:	4613      	mov	r3, r2
 801017c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 801017e:	88fb      	ldrh	r3, [r7, #6]
 8010180:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8010182:	2300      	movs	r3, #0
 8010184:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d109      	bne.n	80101a0 <pbuf_take+0x30>
 801018c:	4b3a      	ldr	r3, [pc, #232]	; (8010278 <pbuf_take+0x108>)
 801018e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8010192:	493a      	ldr	r1, [pc, #232]	; (801027c <pbuf_take+0x10c>)
 8010194:	483a      	ldr	r0, [pc, #232]	; (8010280 <pbuf_take+0x110>)
 8010196:	f009 fee9 	bl	8019f6c <iprintf>
 801019a:	f06f 030f 	mvn.w	r3, #15
 801019e:	e067      	b.n	8010270 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d109      	bne.n	80101ba <pbuf_take+0x4a>
 80101a6:	4b34      	ldr	r3, [pc, #208]	; (8010278 <pbuf_take+0x108>)
 80101a8:	f240 42b4 	movw	r2, #1204	; 0x4b4
 80101ac:	4935      	ldr	r1, [pc, #212]	; (8010284 <pbuf_take+0x114>)
 80101ae:	4834      	ldr	r0, [pc, #208]	; (8010280 <pbuf_take+0x110>)
 80101b0:	f009 fedc 	bl	8019f6c <iprintf>
 80101b4:	f06f 030f 	mvn.w	r3, #15
 80101b8:	e05a      	b.n	8010270 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	891b      	ldrh	r3, [r3, #8]
 80101be:	88fa      	ldrh	r2, [r7, #6]
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d909      	bls.n	80101d8 <pbuf_take+0x68>
 80101c4:	4b2c      	ldr	r3, [pc, #176]	; (8010278 <pbuf_take+0x108>)
 80101c6:	f240 42b5 	movw	r2, #1205	; 0x4b5
 80101ca:	492f      	ldr	r1, [pc, #188]	; (8010288 <pbuf_take+0x118>)
 80101cc:	482c      	ldr	r0, [pc, #176]	; (8010280 <pbuf_take+0x110>)
 80101ce:	f009 fecd 	bl	8019f6c <iprintf>
 80101d2:	f04f 33ff 	mov.w	r3, #4294967295
 80101d6:	e04b      	b.n	8010270 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d007      	beq.n	80101ee <pbuf_take+0x7e>
 80101de:	68bb      	ldr	r3, [r7, #8]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d004      	beq.n	80101ee <pbuf_take+0x7e>
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	891b      	ldrh	r3, [r3, #8]
 80101e8:	88fa      	ldrh	r2, [r7, #6]
 80101ea:	429a      	cmp	r2, r3
 80101ec:	d902      	bls.n	80101f4 <pbuf_take+0x84>
    return ERR_ARG;
 80101ee:	f06f 030f 	mvn.w	r3, #15
 80101f2:	e03d      	b.n	8010270 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	61fb      	str	r3, [r7, #28]
 80101f8:	e028      	b.n	801024c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80101fa:	69fb      	ldr	r3, [r7, #28]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d106      	bne.n	801020e <pbuf_take+0x9e>
 8010200:	4b1d      	ldr	r3, [pc, #116]	; (8010278 <pbuf_take+0x108>)
 8010202:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8010206:	4921      	ldr	r1, [pc, #132]	; (801028c <pbuf_take+0x11c>)
 8010208:	481d      	ldr	r0, [pc, #116]	; (8010280 <pbuf_take+0x110>)
 801020a:	f009 feaf 	bl	8019f6c <iprintf>
    buf_copy_len = total_copy_len;
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8010212:	69fb      	ldr	r3, [r7, #28]
 8010214:	895b      	ldrh	r3, [r3, #10]
 8010216:	461a      	mov	r2, r3
 8010218:	69bb      	ldr	r3, [r7, #24]
 801021a:	4293      	cmp	r3, r2
 801021c:	d902      	bls.n	8010224 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 801021e:	69fb      	ldr	r3, [r7, #28]
 8010220:	895b      	ldrh	r3, [r3, #10]
 8010222:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8010224:	69fb      	ldr	r3, [r7, #28]
 8010226:	6858      	ldr	r0, [r3, #4]
 8010228:	68ba      	ldr	r2, [r7, #8]
 801022a:	693b      	ldr	r3, [r7, #16]
 801022c:	4413      	add	r3, r2
 801022e:	69ba      	ldr	r2, [r7, #24]
 8010230:	4619      	mov	r1, r3
 8010232:	f009 f971 	bl	8019518 <memcpy>
    total_copy_len -= buf_copy_len;
 8010236:	697a      	ldr	r2, [r7, #20]
 8010238:	69bb      	ldr	r3, [r7, #24]
 801023a:	1ad3      	subs	r3, r2, r3
 801023c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 801023e:	693a      	ldr	r2, [r7, #16]
 8010240:	69bb      	ldr	r3, [r7, #24]
 8010242:	4413      	add	r3, r2
 8010244:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8010246:	69fb      	ldr	r3, [r7, #28]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	61fb      	str	r3, [r7, #28]
 801024c:	697b      	ldr	r3, [r7, #20]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d1d3      	bne.n	80101fa <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d103      	bne.n	8010260 <pbuf_take+0xf0>
 8010258:	88fb      	ldrh	r3, [r7, #6]
 801025a:	693a      	ldr	r2, [r7, #16]
 801025c:	429a      	cmp	r2, r3
 801025e:	d006      	beq.n	801026e <pbuf_take+0xfe>
 8010260:	4b05      	ldr	r3, [pc, #20]	; (8010278 <pbuf_take+0x108>)
 8010262:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8010266:	490a      	ldr	r1, [pc, #40]	; (8010290 <pbuf_take+0x120>)
 8010268:	4805      	ldr	r0, [pc, #20]	; (8010280 <pbuf_take+0x110>)
 801026a:	f009 fe7f 	bl	8019f6c <iprintf>
  return ERR_OK;
 801026e:	2300      	movs	r3, #0
}
 8010270:	4618      	mov	r0, r3
 8010272:	3720      	adds	r7, #32
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}
 8010278:	0801cce4 	.word	0x0801cce4
 801027c:	0801d0bc 	.word	0x0801d0bc
 8010280:	0801cd44 	.word	0x0801cd44
 8010284:	0801d0d4 	.word	0x0801d0d4
 8010288:	0801d0f0 	.word	0x0801d0f0
 801028c:	0801d110 	.word	0x0801d110
 8010290:	0801d128 	.word	0x0801d128

08010294 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b084      	sub	sp, #16
 8010298:	af00      	add	r7, sp, #0
 801029a:	4603      	mov	r3, r0
 801029c:	603a      	str	r2, [r7, #0]
 801029e:	71fb      	strb	r3, [r7, #7]
 80102a0:	460b      	mov	r3, r1
 80102a2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	8919      	ldrh	r1, [r3, #8]
 80102a8:	88ba      	ldrh	r2, [r7, #4]
 80102aa:	79fb      	ldrb	r3, [r7, #7]
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7ff fa1f 	bl	800f6f0 <pbuf_alloc>
 80102b2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d101      	bne.n	80102be <pbuf_clone+0x2a>
    return NULL;
 80102ba:	2300      	movs	r3, #0
 80102bc:	e011      	b.n	80102e2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80102be:	6839      	ldr	r1, [r7, #0]
 80102c0:	68f8      	ldr	r0, [r7, #12]
 80102c2:	f7ff fe11 	bl	800fee8 <pbuf_copy>
 80102c6:	4603      	mov	r3, r0
 80102c8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80102ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d006      	beq.n	80102e0 <pbuf_clone+0x4c>
 80102d2:	4b06      	ldr	r3, [pc, #24]	; (80102ec <pbuf_clone+0x58>)
 80102d4:	f240 5224 	movw	r2, #1316	; 0x524
 80102d8:	4905      	ldr	r1, [pc, #20]	; (80102f0 <pbuf_clone+0x5c>)
 80102da:	4806      	ldr	r0, [pc, #24]	; (80102f4 <pbuf_clone+0x60>)
 80102dc:	f009 fe46 	bl	8019f6c <iprintf>
  return q;
 80102e0:	68fb      	ldr	r3, [r7, #12]
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	3710      	adds	r7, #16
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}
 80102ea:	bf00      	nop
 80102ec:	0801cce4 	.word	0x0801cce4
 80102f0:	0801d158 	.word	0x0801d158
 80102f4:	0801cd44 	.word	0x0801cd44

080102f8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80102fc:	f009 fe64 	bl	8019fc8 <rand>
 8010300:	4603      	mov	r3, r0
 8010302:	b29b      	uxth	r3, r3
 8010304:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010308:	b29b      	uxth	r3, r3
 801030a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801030e:	b29a      	uxth	r2, r3
 8010310:	4b01      	ldr	r3, [pc, #4]	; (8010318 <tcp_init+0x20>)
 8010312:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010314:	bf00      	nop
 8010316:	bd80      	pop	{r7, pc}
 8010318:	20000534 	.word	0x20000534

0801031c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b082      	sub	sp, #8
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	7d1b      	ldrb	r3, [r3, #20]
 8010328:	2b01      	cmp	r3, #1
 801032a:	d105      	bne.n	8010338 <tcp_free+0x1c>
 801032c:	4b06      	ldr	r3, [pc, #24]	; (8010348 <tcp_free+0x2c>)
 801032e:	22d4      	movs	r2, #212	; 0xd4
 8010330:	4906      	ldr	r1, [pc, #24]	; (801034c <tcp_free+0x30>)
 8010332:	4807      	ldr	r0, [pc, #28]	; (8010350 <tcp_free+0x34>)
 8010334:	f009 fe1a 	bl	8019f6c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010338:	6879      	ldr	r1, [r7, #4]
 801033a:	2001      	movs	r0, #1
 801033c:	f7fe feaa 	bl	800f094 <memp_free>
}
 8010340:	bf00      	nop
 8010342:	3708      	adds	r7, #8
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}
 8010348:	0801d1e4 	.word	0x0801d1e4
 801034c:	0801d214 	.word	0x0801d214
 8010350:	0801d228 	.word	0x0801d228

08010354 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b082      	sub	sp, #8
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	7d1b      	ldrb	r3, [r3, #20]
 8010360:	2b01      	cmp	r3, #1
 8010362:	d105      	bne.n	8010370 <tcp_free_listen+0x1c>
 8010364:	4b06      	ldr	r3, [pc, #24]	; (8010380 <tcp_free_listen+0x2c>)
 8010366:	22df      	movs	r2, #223	; 0xdf
 8010368:	4906      	ldr	r1, [pc, #24]	; (8010384 <tcp_free_listen+0x30>)
 801036a:	4807      	ldr	r0, [pc, #28]	; (8010388 <tcp_free_listen+0x34>)
 801036c:	f009 fdfe 	bl	8019f6c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010370:	6879      	ldr	r1, [r7, #4]
 8010372:	2002      	movs	r0, #2
 8010374:	f7fe fe8e 	bl	800f094 <memp_free>
}
 8010378:	bf00      	nop
 801037a:	3708      	adds	r7, #8
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}
 8010380:	0801d1e4 	.word	0x0801d1e4
 8010384:	0801d250 	.word	0x0801d250
 8010388:	0801d228 	.word	0x0801d228

0801038c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010390:	f001 f800 	bl	8011394 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010394:	4b07      	ldr	r3, [pc, #28]	; (80103b4 <tcp_tmr+0x28>)
 8010396:	781b      	ldrb	r3, [r3, #0]
 8010398:	3301      	adds	r3, #1
 801039a:	b2da      	uxtb	r2, r3
 801039c:	4b05      	ldr	r3, [pc, #20]	; (80103b4 <tcp_tmr+0x28>)
 801039e:	701a      	strb	r2, [r3, #0]
 80103a0:	4b04      	ldr	r3, [pc, #16]	; (80103b4 <tcp_tmr+0x28>)
 80103a2:	781b      	ldrb	r3, [r3, #0]
 80103a4:	f003 0301 	and.w	r3, r3, #1
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d001      	beq.n	80103b0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80103ac:	f000 fcb2 	bl	8010d14 <tcp_slowtmr>
  }
}
 80103b0:	bf00      	nop
 80103b2:	bd80      	pop	{r7, pc}
 80103b4:	20000799 	.word	0x20000799

080103b8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b084      	sub	sp, #16
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d105      	bne.n	80103d4 <tcp_remove_listener+0x1c>
 80103c8:	4b0d      	ldr	r3, [pc, #52]	; (8010400 <tcp_remove_listener+0x48>)
 80103ca:	22ff      	movs	r2, #255	; 0xff
 80103cc:	490d      	ldr	r1, [pc, #52]	; (8010404 <tcp_remove_listener+0x4c>)
 80103ce:	480e      	ldr	r0, [pc, #56]	; (8010408 <tcp_remove_listener+0x50>)
 80103d0:	f009 fdcc 	bl	8019f6c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	60fb      	str	r3, [r7, #12]
 80103d8:	e00a      	b.n	80103f0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80103de:	683a      	ldr	r2, [r7, #0]
 80103e0:	429a      	cmp	r2, r3
 80103e2:	d102      	bne.n	80103ea <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	2200      	movs	r2, #0
 80103e8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	68db      	ldr	r3, [r3, #12]
 80103ee:	60fb      	str	r3, [r7, #12]
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d1f1      	bne.n	80103da <tcp_remove_listener+0x22>
    }
  }
}
 80103f6:	bf00      	nop
 80103f8:	bf00      	nop
 80103fa:	3710      	adds	r7, #16
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}
 8010400:	0801d1e4 	.word	0x0801d1e4
 8010404:	0801d26c 	.word	0x0801d26c
 8010408:	0801d228 	.word	0x0801d228

0801040c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b084      	sub	sp, #16
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d106      	bne.n	8010428 <tcp_listen_closed+0x1c>
 801041a:	4b14      	ldr	r3, [pc, #80]	; (801046c <tcp_listen_closed+0x60>)
 801041c:	f240 1211 	movw	r2, #273	; 0x111
 8010420:	4913      	ldr	r1, [pc, #76]	; (8010470 <tcp_listen_closed+0x64>)
 8010422:	4814      	ldr	r0, [pc, #80]	; (8010474 <tcp_listen_closed+0x68>)
 8010424:	f009 fda2 	bl	8019f6c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	7d1b      	ldrb	r3, [r3, #20]
 801042c:	2b01      	cmp	r3, #1
 801042e:	d006      	beq.n	801043e <tcp_listen_closed+0x32>
 8010430:	4b0e      	ldr	r3, [pc, #56]	; (801046c <tcp_listen_closed+0x60>)
 8010432:	f44f 7289 	mov.w	r2, #274	; 0x112
 8010436:	4910      	ldr	r1, [pc, #64]	; (8010478 <tcp_listen_closed+0x6c>)
 8010438:	480e      	ldr	r0, [pc, #56]	; (8010474 <tcp_listen_closed+0x68>)
 801043a:	f009 fd97 	bl	8019f6c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801043e:	2301      	movs	r3, #1
 8010440:	60fb      	str	r3, [r7, #12]
 8010442:	e00b      	b.n	801045c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010444:	4a0d      	ldr	r2, [pc, #52]	; (801047c <tcp_listen_closed+0x70>)
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	6879      	ldr	r1, [r7, #4]
 8010450:	4618      	mov	r0, r3
 8010452:	f7ff ffb1 	bl	80103b8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	3301      	adds	r3, #1
 801045a:	60fb      	str	r3, [r7, #12]
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	2b03      	cmp	r3, #3
 8010460:	d9f0      	bls.n	8010444 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010462:	bf00      	nop
 8010464:	bf00      	nop
 8010466:	3710      	adds	r7, #16
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}
 801046c:	0801d1e4 	.word	0x0801d1e4
 8010470:	0801d294 	.word	0x0801d294
 8010474:	0801d228 	.word	0x0801d228
 8010478:	0801d2a0 	.word	0x0801d2a0
 801047c:	0801f348 	.word	0x0801f348

08010480 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010480:	b5b0      	push	{r4, r5, r7, lr}
 8010482:	b088      	sub	sp, #32
 8010484:	af04      	add	r7, sp, #16
 8010486:	6078      	str	r0, [r7, #4]
 8010488:	460b      	mov	r3, r1
 801048a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d106      	bne.n	80104a0 <tcp_close_shutdown+0x20>
 8010492:	4b63      	ldr	r3, [pc, #396]	; (8010620 <tcp_close_shutdown+0x1a0>)
 8010494:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8010498:	4962      	ldr	r1, [pc, #392]	; (8010624 <tcp_close_shutdown+0x1a4>)
 801049a:	4863      	ldr	r0, [pc, #396]	; (8010628 <tcp_close_shutdown+0x1a8>)
 801049c:	f009 fd66 	bl	8019f6c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80104a0:	78fb      	ldrb	r3, [r7, #3]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d066      	beq.n	8010574 <tcp_close_shutdown+0xf4>
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	7d1b      	ldrb	r3, [r3, #20]
 80104aa:	2b04      	cmp	r3, #4
 80104ac:	d003      	beq.n	80104b6 <tcp_close_shutdown+0x36>
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	7d1b      	ldrb	r3, [r3, #20]
 80104b2:	2b07      	cmp	r3, #7
 80104b4:	d15e      	bne.n	8010574 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d104      	bne.n	80104c8 <tcp_close_shutdown+0x48>
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80104c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80104c6:	d055      	beq.n	8010574 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	8b5b      	ldrh	r3, [r3, #26]
 80104cc:	f003 0310 	and.w	r3, r3, #16
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d106      	bne.n	80104e2 <tcp_close_shutdown+0x62>
 80104d4:	4b52      	ldr	r3, [pc, #328]	; (8010620 <tcp_close_shutdown+0x1a0>)
 80104d6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80104da:	4954      	ldr	r1, [pc, #336]	; (801062c <tcp_close_shutdown+0x1ac>)
 80104dc:	4852      	ldr	r0, [pc, #328]	; (8010628 <tcp_close_shutdown+0x1a8>)
 80104de:	f009 fd45 	bl	8019f6c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80104ea:	687d      	ldr	r5, [r7, #4]
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	3304      	adds	r3, #4
 80104f0:	687a      	ldr	r2, [r7, #4]
 80104f2:	8ad2      	ldrh	r2, [r2, #22]
 80104f4:	6879      	ldr	r1, [r7, #4]
 80104f6:	8b09      	ldrh	r1, [r1, #24]
 80104f8:	9102      	str	r1, [sp, #8]
 80104fa:	9201      	str	r2, [sp, #4]
 80104fc:	9300      	str	r3, [sp, #0]
 80104fe:	462b      	mov	r3, r5
 8010500:	4622      	mov	r2, r4
 8010502:	4601      	mov	r1, r0
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f005 fcf7 	bl	8015ef8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801050a:	6878      	ldr	r0, [r7, #4]
 801050c:	f001 fad4 	bl	8011ab8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010510:	4b47      	ldr	r3, [pc, #284]	; (8010630 <tcp_close_shutdown+0x1b0>)
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	687a      	ldr	r2, [r7, #4]
 8010516:	429a      	cmp	r2, r3
 8010518:	d105      	bne.n	8010526 <tcp_close_shutdown+0xa6>
 801051a:	4b45      	ldr	r3, [pc, #276]	; (8010630 <tcp_close_shutdown+0x1b0>)
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	68db      	ldr	r3, [r3, #12]
 8010520:	4a43      	ldr	r2, [pc, #268]	; (8010630 <tcp_close_shutdown+0x1b0>)
 8010522:	6013      	str	r3, [r2, #0]
 8010524:	e013      	b.n	801054e <tcp_close_shutdown+0xce>
 8010526:	4b42      	ldr	r3, [pc, #264]	; (8010630 <tcp_close_shutdown+0x1b0>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	60fb      	str	r3, [r7, #12]
 801052c:	e00c      	b.n	8010548 <tcp_close_shutdown+0xc8>
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	68db      	ldr	r3, [r3, #12]
 8010532:	687a      	ldr	r2, [r7, #4]
 8010534:	429a      	cmp	r2, r3
 8010536:	d104      	bne.n	8010542 <tcp_close_shutdown+0xc2>
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	68da      	ldr	r2, [r3, #12]
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	60da      	str	r2, [r3, #12]
 8010540:	e005      	b.n	801054e <tcp_close_shutdown+0xce>
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	68db      	ldr	r3, [r3, #12]
 8010546:	60fb      	str	r3, [r7, #12]
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d1ef      	bne.n	801052e <tcp_close_shutdown+0xae>
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	2200      	movs	r2, #0
 8010552:	60da      	str	r2, [r3, #12]
 8010554:	4b37      	ldr	r3, [pc, #220]	; (8010634 <tcp_close_shutdown+0x1b4>)
 8010556:	2201      	movs	r2, #1
 8010558:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801055a:	4b37      	ldr	r3, [pc, #220]	; (8010638 <tcp_close_shutdown+0x1b8>)
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	687a      	ldr	r2, [r7, #4]
 8010560:	429a      	cmp	r2, r3
 8010562:	d102      	bne.n	801056a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010564:	f003 ff68 	bl	8014438 <tcp_trigger_input_pcb_close>
 8010568:	e002      	b.n	8010570 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f7ff fed6 	bl	801031c <tcp_free>
      }
      return ERR_OK;
 8010570:	2300      	movs	r3, #0
 8010572:	e050      	b.n	8010616 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	7d1b      	ldrb	r3, [r3, #20]
 8010578:	2b02      	cmp	r3, #2
 801057a:	d03b      	beq.n	80105f4 <tcp_close_shutdown+0x174>
 801057c:	2b02      	cmp	r3, #2
 801057e:	dc44      	bgt.n	801060a <tcp_close_shutdown+0x18a>
 8010580:	2b00      	cmp	r3, #0
 8010582:	d002      	beq.n	801058a <tcp_close_shutdown+0x10a>
 8010584:	2b01      	cmp	r3, #1
 8010586:	d02a      	beq.n	80105de <tcp_close_shutdown+0x15e>
 8010588:	e03f      	b.n	801060a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	8adb      	ldrh	r3, [r3, #22]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d021      	beq.n	80105d6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010592:	4b2a      	ldr	r3, [pc, #168]	; (801063c <tcp_close_shutdown+0x1bc>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	687a      	ldr	r2, [r7, #4]
 8010598:	429a      	cmp	r2, r3
 801059a:	d105      	bne.n	80105a8 <tcp_close_shutdown+0x128>
 801059c:	4b27      	ldr	r3, [pc, #156]	; (801063c <tcp_close_shutdown+0x1bc>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	68db      	ldr	r3, [r3, #12]
 80105a2:	4a26      	ldr	r2, [pc, #152]	; (801063c <tcp_close_shutdown+0x1bc>)
 80105a4:	6013      	str	r3, [r2, #0]
 80105a6:	e013      	b.n	80105d0 <tcp_close_shutdown+0x150>
 80105a8:	4b24      	ldr	r3, [pc, #144]	; (801063c <tcp_close_shutdown+0x1bc>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	60bb      	str	r3, [r7, #8]
 80105ae:	e00c      	b.n	80105ca <tcp_close_shutdown+0x14a>
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	68db      	ldr	r3, [r3, #12]
 80105b4:	687a      	ldr	r2, [r7, #4]
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d104      	bne.n	80105c4 <tcp_close_shutdown+0x144>
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	68da      	ldr	r2, [r3, #12]
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	60da      	str	r2, [r3, #12]
 80105c2:	e005      	b.n	80105d0 <tcp_close_shutdown+0x150>
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	68db      	ldr	r3, [r3, #12]
 80105c8:	60bb      	str	r3, [r7, #8]
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d1ef      	bne.n	80105b0 <tcp_close_shutdown+0x130>
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2200      	movs	r2, #0
 80105d4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80105d6:	6878      	ldr	r0, [r7, #4]
 80105d8:	f7ff fea0 	bl	801031c <tcp_free>
      break;
 80105dc:	e01a      	b.n	8010614 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80105de:	6878      	ldr	r0, [r7, #4]
 80105e0:	f7ff ff14 	bl	801040c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80105e4:	6879      	ldr	r1, [r7, #4]
 80105e6:	4816      	ldr	r0, [pc, #88]	; (8010640 <tcp_close_shutdown+0x1c0>)
 80105e8:	f001 fab6 	bl	8011b58 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f7ff feb1 	bl	8010354 <tcp_free_listen>
      break;
 80105f2:	e00f      	b.n	8010614 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80105f4:	6879      	ldr	r1, [r7, #4]
 80105f6:	480e      	ldr	r0, [pc, #56]	; (8010630 <tcp_close_shutdown+0x1b0>)
 80105f8:	f001 faae 	bl	8011b58 <tcp_pcb_remove>
 80105fc:	4b0d      	ldr	r3, [pc, #52]	; (8010634 <tcp_close_shutdown+0x1b4>)
 80105fe:	2201      	movs	r2, #1
 8010600:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8010602:	6878      	ldr	r0, [r7, #4]
 8010604:	f7ff fe8a 	bl	801031c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8010608:	e004      	b.n	8010614 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f000 f81a 	bl	8010644 <tcp_close_shutdown_fin>
 8010610:	4603      	mov	r3, r0
 8010612:	e000      	b.n	8010616 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8010614:	2300      	movs	r3, #0
}
 8010616:	4618      	mov	r0, r3
 8010618:	3710      	adds	r7, #16
 801061a:	46bd      	mov	sp, r7
 801061c:	bdb0      	pop	{r4, r5, r7, pc}
 801061e:	bf00      	nop
 8010620:	0801d1e4 	.word	0x0801d1e4
 8010624:	0801d2b8 	.word	0x0801d2b8
 8010628:	0801d228 	.word	0x0801d228
 801062c:	0801d2d8 	.word	0x0801d2d8
 8010630:	2001a9b0 	.word	0x2001a9b0
 8010634:	2001a9ac 	.word	0x2001a9ac
 8010638:	2001a9c4 	.word	0x2001a9c4
 801063c:	2001a9bc 	.word	0x2001a9bc
 8010640:	2001a9b8 	.word	0x2001a9b8

08010644 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b084      	sub	sp, #16
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d106      	bne.n	8010660 <tcp_close_shutdown_fin+0x1c>
 8010652:	4b2e      	ldr	r3, [pc, #184]	; (801070c <tcp_close_shutdown_fin+0xc8>)
 8010654:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8010658:	492d      	ldr	r1, [pc, #180]	; (8010710 <tcp_close_shutdown_fin+0xcc>)
 801065a:	482e      	ldr	r0, [pc, #184]	; (8010714 <tcp_close_shutdown_fin+0xd0>)
 801065c:	f009 fc86 	bl	8019f6c <iprintf>

  switch (pcb->state) {
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	7d1b      	ldrb	r3, [r3, #20]
 8010664:	2b07      	cmp	r3, #7
 8010666:	d020      	beq.n	80106aa <tcp_close_shutdown_fin+0x66>
 8010668:	2b07      	cmp	r3, #7
 801066a:	dc2b      	bgt.n	80106c4 <tcp_close_shutdown_fin+0x80>
 801066c:	2b03      	cmp	r3, #3
 801066e:	d002      	beq.n	8010676 <tcp_close_shutdown_fin+0x32>
 8010670:	2b04      	cmp	r3, #4
 8010672:	d00d      	beq.n	8010690 <tcp_close_shutdown_fin+0x4c>
 8010674:	e026      	b.n	80106c4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f004 fd4c 	bl	8015114 <tcp_send_fin>
 801067c:	4603      	mov	r3, r0
 801067e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d11f      	bne.n	80106c8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2205      	movs	r2, #5
 801068c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801068e:	e01b      	b.n	80106c8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010690:	6878      	ldr	r0, [r7, #4]
 8010692:	f004 fd3f 	bl	8015114 <tcp_send_fin>
 8010696:	4603      	mov	r3, r0
 8010698:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801069a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d114      	bne.n	80106cc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2205      	movs	r2, #5
 80106a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80106a8:	e010      	b.n	80106cc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	f004 fd32 	bl	8015114 <tcp_send_fin>
 80106b0:	4603      	mov	r3, r0
 80106b2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80106b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d109      	bne.n	80106d0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2209      	movs	r2, #9
 80106c0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80106c2:	e005      	b.n	80106d0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80106c4:	2300      	movs	r3, #0
 80106c6:	e01c      	b.n	8010702 <tcp_close_shutdown_fin+0xbe>
      break;
 80106c8:	bf00      	nop
 80106ca:	e002      	b.n	80106d2 <tcp_close_shutdown_fin+0x8e>
      break;
 80106cc:	bf00      	nop
 80106ce:	e000      	b.n	80106d2 <tcp_close_shutdown_fin+0x8e>
      break;
 80106d0:	bf00      	nop
  }

  if (err == ERR_OK) {
 80106d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d103      	bne.n	80106e2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80106da:	6878      	ldr	r0, [r7, #4]
 80106dc:	f004 fe58 	bl	8015390 <tcp_output>
 80106e0:	e00d      	b.n	80106fe <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80106e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80106e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106ea:	d108      	bne.n	80106fe <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	8b5b      	ldrh	r3, [r3, #26]
 80106f0:	f043 0308 	orr.w	r3, r3, #8
 80106f4:	b29a      	uxth	r2, r3
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80106fa:	2300      	movs	r3, #0
 80106fc:	e001      	b.n	8010702 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80106fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010702:	4618      	mov	r0, r3
 8010704:	3710      	adds	r7, #16
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}
 801070a:	bf00      	nop
 801070c:	0801d1e4 	.word	0x0801d1e4
 8010710:	0801d294 	.word	0x0801d294
 8010714:	0801d228 	.word	0x0801d228

08010718 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b082      	sub	sp, #8
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d109      	bne.n	801073a <tcp_close+0x22>
 8010726:	4b0f      	ldr	r3, [pc, #60]	; (8010764 <tcp_close+0x4c>)
 8010728:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801072c:	490e      	ldr	r1, [pc, #56]	; (8010768 <tcp_close+0x50>)
 801072e:	480f      	ldr	r0, [pc, #60]	; (801076c <tcp_close+0x54>)
 8010730:	f009 fc1c 	bl	8019f6c <iprintf>
 8010734:	f06f 030f 	mvn.w	r3, #15
 8010738:	e00f      	b.n	801075a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	7d1b      	ldrb	r3, [r3, #20]
 801073e:	2b01      	cmp	r3, #1
 8010740:	d006      	beq.n	8010750 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	8b5b      	ldrh	r3, [r3, #26]
 8010746:	f043 0310 	orr.w	r3, r3, #16
 801074a:	b29a      	uxth	r2, r3
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010750:	2101      	movs	r1, #1
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	f7ff fe94 	bl	8010480 <tcp_close_shutdown>
 8010758:	4603      	mov	r3, r0
}
 801075a:	4618      	mov	r0, r3
 801075c:	3708      	adds	r7, #8
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}
 8010762:	bf00      	nop
 8010764:	0801d1e4 	.word	0x0801d1e4
 8010768:	0801d2f4 	.word	0x0801d2f4
 801076c:	0801d228 	.word	0x0801d228

08010770 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b08e      	sub	sp, #56	; 0x38
 8010774:	af04      	add	r7, sp, #16
 8010776:	6078      	str	r0, [r7, #4]
 8010778:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d107      	bne.n	8010790 <tcp_abandon+0x20>
 8010780:	4b52      	ldr	r3, [pc, #328]	; (80108cc <tcp_abandon+0x15c>)
 8010782:	f240 223d 	movw	r2, #573	; 0x23d
 8010786:	4952      	ldr	r1, [pc, #328]	; (80108d0 <tcp_abandon+0x160>)
 8010788:	4852      	ldr	r0, [pc, #328]	; (80108d4 <tcp_abandon+0x164>)
 801078a:	f009 fbef 	bl	8019f6c <iprintf>
 801078e:	e099      	b.n	80108c4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	7d1b      	ldrb	r3, [r3, #20]
 8010794:	2b01      	cmp	r3, #1
 8010796:	d106      	bne.n	80107a6 <tcp_abandon+0x36>
 8010798:	4b4c      	ldr	r3, [pc, #304]	; (80108cc <tcp_abandon+0x15c>)
 801079a:	f44f 7210 	mov.w	r2, #576	; 0x240
 801079e:	494e      	ldr	r1, [pc, #312]	; (80108d8 <tcp_abandon+0x168>)
 80107a0:	484c      	ldr	r0, [pc, #304]	; (80108d4 <tcp_abandon+0x164>)
 80107a2:	f009 fbe3 	bl	8019f6c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	7d1b      	ldrb	r3, [r3, #20]
 80107aa:	2b0a      	cmp	r3, #10
 80107ac:	d107      	bne.n	80107be <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80107ae:	6879      	ldr	r1, [r7, #4]
 80107b0:	484a      	ldr	r0, [pc, #296]	; (80108dc <tcp_abandon+0x16c>)
 80107b2:	f001 f9d1 	bl	8011b58 <tcp_pcb_remove>
    tcp_free(pcb);
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	f7ff fdb0 	bl	801031c <tcp_free>
 80107bc:	e082      	b.n	80108c4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80107be:	2300      	movs	r3, #0
 80107c0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80107c2:	2300      	movs	r3, #0
 80107c4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107ca:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107d0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107d8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	691b      	ldr	r3, [r3, #16]
 80107de:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	7d1b      	ldrb	r3, [r3, #20]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d126      	bne.n	8010836 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	8adb      	ldrh	r3, [r3, #22]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d02e      	beq.n	801084e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80107f0:	4b3b      	ldr	r3, [pc, #236]	; (80108e0 <tcp_abandon+0x170>)
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	687a      	ldr	r2, [r7, #4]
 80107f6:	429a      	cmp	r2, r3
 80107f8:	d105      	bne.n	8010806 <tcp_abandon+0x96>
 80107fa:	4b39      	ldr	r3, [pc, #228]	; (80108e0 <tcp_abandon+0x170>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	68db      	ldr	r3, [r3, #12]
 8010800:	4a37      	ldr	r2, [pc, #220]	; (80108e0 <tcp_abandon+0x170>)
 8010802:	6013      	str	r3, [r2, #0]
 8010804:	e013      	b.n	801082e <tcp_abandon+0xbe>
 8010806:	4b36      	ldr	r3, [pc, #216]	; (80108e0 <tcp_abandon+0x170>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	61fb      	str	r3, [r7, #28]
 801080c:	e00c      	b.n	8010828 <tcp_abandon+0xb8>
 801080e:	69fb      	ldr	r3, [r7, #28]
 8010810:	68db      	ldr	r3, [r3, #12]
 8010812:	687a      	ldr	r2, [r7, #4]
 8010814:	429a      	cmp	r2, r3
 8010816:	d104      	bne.n	8010822 <tcp_abandon+0xb2>
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	68da      	ldr	r2, [r3, #12]
 801081c:	69fb      	ldr	r3, [r7, #28]
 801081e:	60da      	str	r2, [r3, #12]
 8010820:	e005      	b.n	801082e <tcp_abandon+0xbe>
 8010822:	69fb      	ldr	r3, [r7, #28]
 8010824:	68db      	ldr	r3, [r3, #12]
 8010826:	61fb      	str	r3, [r7, #28]
 8010828:	69fb      	ldr	r3, [r7, #28]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d1ef      	bne.n	801080e <tcp_abandon+0x9e>
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2200      	movs	r2, #0
 8010832:	60da      	str	r2, [r3, #12]
 8010834:	e00b      	b.n	801084e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	8adb      	ldrh	r3, [r3, #22]
 801083e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010840:	6879      	ldr	r1, [r7, #4]
 8010842:	4828      	ldr	r0, [pc, #160]	; (80108e4 <tcp_abandon+0x174>)
 8010844:	f001 f988 	bl	8011b58 <tcp_pcb_remove>
 8010848:	4b27      	ldr	r3, [pc, #156]	; (80108e8 <tcp_abandon+0x178>)
 801084a:	2201      	movs	r2, #1
 801084c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010852:	2b00      	cmp	r3, #0
 8010854:	d004      	beq.n	8010860 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801085a:	4618      	mov	r0, r3
 801085c:	f000 fe7a 	bl	8011554 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010864:	2b00      	cmp	r3, #0
 8010866:	d004      	beq.n	8010872 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801086c:	4618      	mov	r0, r3
 801086e:	f000 fe71 	bl	8011554 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010876:	2b00      	cmp	r3, #0
 8010878:	d004      	beq.n	8010884 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801087e:	4618      	mov	r0, r3
 8010880:	f000 fe68 	bl	8011554 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010886:	2b00      	cmp	r3, #0
 8010888:	d00e      	beq.n	80108a8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801088a:	6879      	ldr	r1, [r7, #4]
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	3304      	adds	r3, #4
 8010890:	687a      	ldr	r2, [r7, #4]
 8010892:	8b12      	ldrh	r2, [r2, #24]
 8010894:	9202      	str	r2, [sp, #8]
 8010896:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010898:	9201      	str	r2, [sp, #4]
 801089a:	9300      	str	r3, [sp, #0]
 801089c:	460b      	mov	r3, r1
 801089e:	697a      	ldr	r2, [r7, #20]
 80108a0:	69b9      	ldr	r1, [r7, #24]
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f005 fb28 	bl	8015ef8 <tcp_rst>
    }
    last_state = pcb->state;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	7d1b      	ldrb	r3, [r3, #20]
 80108ac:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f7ff fd34 	bl	801031c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80108b4:	693b      	ldr	r3, [r7, #16]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d004      	beq.n	80108c4 <tcp_abandon+0x154>
 80108ba:	693b      	ldr	r3, [r7, #16]
 80108bc:	f06f 010c 	mvn.w	r1, #12
 80108c0:	68f8      	ldr	r0, [r7, #12]
 80108c2:	4798      	blx	r3
  }
}
 80108c4:	3728      	adds	r7, #40	; 0x28
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}
 80108ca:	bf00      	nop
 80108cc:	0801d1e4 	.word	0x0801d1e4
 80108d0:	0801d328 	.word	0x0801d328
 80108d4:	0801d228 	.word	0x0801d228
 80108d8:	0801d344 	.word	0x0801d344
 80108dc:	2001a9c0 	.word	0x2001a9c0
 80108e0:	2001a9bc 	.word	0x2001a9bc
 80108e4:	2001a9b0 	.word	0x2001a9b0
 80108e8:	2001a9ac 	.word	0x2001a9ac

080108ec <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b082      	sub	sp, #8
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80108f4:	2101      	movs	r1, #1
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f7ff ff3a 	bl	8010770 <tcp_abandon>
}
 80108fc:	bf00      	nop
 80108fe:	3708      	adds	r7, #8
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}

08010904 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b084      	sub	sp, #16
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d106      	bne.n	8010920 <tcp_update_rcv_ann_wnd+0x1c>
 8010912:	4b25      	ldr	r3, [pc, #148]	; (80109a8 <tcp_update_rcv_ann_wnd+0xa4>)
 8010914:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010918:	4924      	ldr	r1, [pc, #144]	; (80109ac <tcp_update_rcv_ann_wnd+0xa8>)
 801091a:	4825      	ldr	r0, [pc, #148]	; (80109b0 <tcp_update_rcv_ann_wnd+0xac>)
 801091c:	f009 fb26 	bl	8019f6c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010924:	687a      	ldr	r2, [r7, #4]
 8010926:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010928:	4413      	add	r3, r2
 801092a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010930:	687a      	ldr	r2, [r7, #4]
 8010932:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8010934:	f5b2 6ff0 	cmp.w	r2, #1920	; 0x780
 8010938:	bf28      	it	cs
 801093a:	f44f 62f0 	movcs.w	r2, #1920	; 0x780
 801093e:	b292      	uxth	r2, r2
 8010940:	4413      	add	r3, r2
 8010942:	68fa      	ldr	r2, [r7, #12]
 8010944:	1ad3      	subs	r3, r2, r3
 8010946:	2b00      	cmp	r3, #0
 8010948:	db08      	blt.n	801095c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010956:	68fa      	ldr	r2, [r7, #12]
 8010958:	1ad3      	subs	r3, r2, r3
 801095a:	e020      	b.n	801099e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010964:	1ad3      	subs	r3, r2, r3
 8010966:	2b00      	cmp	r3, #0
 8010968:	dd03      	ble.n	8010972 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	2200      	movs	r2, #0
 801096e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010970:	e014      	b.n	801099c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801097a:	1ad3      	subs	r3, r2, r3
 801097c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801097e:	68bb      	ldr	r3, [r7, #8]
 8010980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010984:	d306      	bcc.n	8010994 <tcp_update_rcv_ann_wnd+0x90>
 8010986:	4b08      	ldr	r3, [pc, #32]	; (80109a8 <tcp_update_rcv_ann_wnd+0xa4>)
 8010988:	f240 32b6 	movw	r2, #950	; 0x3b6
 801098c:	4909      	ldr	r1, [pc, #36]	; (80109b4 <tcp_update_rcv_ann_wnd+0xb0>)
 801098e:	4808      	ldr	r0, [pc, #32]	; (80109b0 <tcp_update_rcv_ann_wnd+0xac>)
 8010990:	f009 faec 	bl	8019f6c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8010994:	68bb      	ldr	r3, [r7, #8]
 8010996:	b29a      	uxth	r2, r3
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801099c:	2300      	movs	r3, #0
  }
}
 801099e:	4618      	mov	r0, r3
 80109a0:	3710      	adds	r7, #16
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}
 80109a6:	bf00      	nop
 80109a8:	0801d1e4 	.word	0x0801d1e4
 80109ac:	0801d440 	.word	0x0801d440
 80109b0:	0801d228 	.word	0x0801d228
 80109b4:	0801d464 	.word	0x0801d464

080109b8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b084      	sub	sp, #16
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
 80109c0:	460b      	mov	r3, r1
 80109c2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d107      	bne.n	80109da <tcp_recved+0x22>
 80109ca:	4b1f      	ldr	r3, [pc, #124]	; (8010a48 <tcp_recved+0x90>)
 80109cc:	f240 32cf 	movw	r2, #975	; 0x3cf
 80109d0:	491e      	ldr	r1, [pc, #120]	; (8010a4c <tcp_recved+0x94>)
 80109d2:	481f      	ldr	r0, [pc, #124]	; (8010a50 <tcp_recved+0x98>)
 80109d4:	f009 faca 	bl	8019f6c <iprintf>
 80109d8:	e032      	b.n	8010a40 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	7d1b      	ldrb	r3, [r3, #20]
 80109de:	2b01      	cmp	r3, #1
 80109e0:	d106      	bne.n	80109f0 <tcp_recved+0x38>
 80109e2:	4b19      	ldr	r3, [pc, #100]	; (8010a48 <tcp_recved+0x90>)
 80109e4:	f240 32d2 	movw	r2, #978	; 0x3d2
 80109e8:	491a      	ldr	r1, [pc, #104]	; (8010a54 <tcp_recved+0x9c>)
 80109ea:	4819      	ldr	r0, [pc, #100]	; (8010a50 <tcp_recved+0x98>)
 80109ec:	f009 fabe 	bl	8019f6c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80109f4:	887b      	ldrh	r3, [r7, #2]
 80109f6:	4413      	add	r3, r2
 80109f8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80109fa:	89fb      	ldrh	r3, [r7, #14]
 80109fc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8010a00:	d804      	bhi.n	8010a0c <tcp_recved+0x54>
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010a06:	89fa      	ldrh	r2, [r7, #14]
 8010a08:	429a      	cmp	r2, r3
 8010a0a:	d204      	bcs.n	8010a16 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8010a12:	851a      	strh	r2, [r3, #40]	; 0x28
 8010a14:	e002      	b.n	8010a1c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	89fa      	ldrh	r2, [r7, #14]
 8010a1a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f7ff ff71 	bl	8010904 <tcp_update_rcv_ann_wnd>
 8010a22:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010a24:	68bb      	ldr	r3, [r7, #8]
 8010a26:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8010a2a:	d309      	bcc.n	8010a40 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	8b5b      	ldrh	r3, [r3, #26]
 8010a30:	f043 0302 	orr.w	r3, r3, #2
 8010a34:	b29a      	uxth	r2, r3
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f004 fca8 	bl	8015390 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010a40:	3710      	adds	r7, #16
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd80      	pop	{r7, pc}
 8010a46:	bf00      	nop
 8010a48:	0801d1e4 	.word	0x0801d1e4
 8010a4c:	0801d480 	.word	0x0801d480
 8010a50:	0801d228 	.word	0x0801d228
 8010a54:	0801d498 	.word	0x0801d498

08010a58 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8010a58:	b480      	push	{r7}
 8010a5a:	b083      	sub	sp, #12
 8010a5c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8010a5e:	2300      	movs	r3, #0
 8010a60:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8010a62:	4b1e      	ldr	r3, [pc, #120]	; (8010adc <tcp_new_port+0x84>)
 8010a64:	881b      	ldrh	r3, [r3, #0]
 8010a66:	3301      	adds	r3, #1
 8010a68:	b29a      	uxth	r2, r3
 8010a6a:	4b1c      	ldr	r3, [pc, #112]	; (8010adc <tcp_new_port+0x84>)
 8010a6c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8010a6e:	4b1b      	ldr	r3, [pc, #108]	; (8010adc <tcp_new_port+0x84>)
 8010a70:	881b      	ldrh	r3, [r3, #0]
 8010a72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a76:	4293      	cmp	r3, r2
 8010a78:	d103      	bne.n	8010a82 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8010a7a:	4b18      	ldr	r3, [pc, #96]	; (8010adc <tcp_new_port+0x84>)
 8010a7c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8010a80:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010a82:	2300      	movs	r3, #0
 8010a84:	71fb      	strb	r3, [r7, #7]
 8010a86:	e01e      	b.n	8010ac6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010a88:	79fb      	ldrb	r3, [r7, #7]
 8010a8a:	4a15      	ldr	r2, [pc, #84]	; (8010ae0 <tcp_new_port+0x88>)
 8010a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	603b      	str	r3, [r7, #0]
 8010a94:	e011      	b.n	8010aba <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8010a96:	683b      	ldr	r3, [r7, #0]
 8010a98:	8ada      	ldrh	r2, [r3, #22]
 8010a9a:	4b10      	ldr	r3, [pc, #64]	; (8010adc <tcp_new_port+0x84>)
 8010a9c:	881b      	ldrh	r3, [r3, #0]
 8010a9e:	429a      	cmp	r2, r3
 8010aa0:	d108      	bne.n	8010ab4 <tcp_new_port+0x5c>
        n++;
 8010aa2:	88bb      	ldrh	r3, [r7, #4]
 8010aa4:	3301      	adds	r3, #1
 8010aa6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8010aa8:	88bb      	ldrh	r3, [r7, #4]
 8010aaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010aae:	d3d8      	bcc.n	8010a62 <tcp_new_port+0xa>
          return 0;
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	e00d      	b.n	8010ad0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	68db      	ldr	r3, [r3, #12]
 8010ab8:	603b      	str	r3, [r7, #0]
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d1ea      	bne.n	8010a96 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010ac0:	79fb      	ldrb	r3, [r7, #7]
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	71fb      	strb	r3, [r7, #7]
 8010ac6:	79fb      	ldrb	r3, [r7, #7]
 8010ac8:	2b03      	cmp	r3, #3
 8010aca:	d9dd      	bls.n	8010a88 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8010acc:	4b03      	ldr	r3, [pc, #12]	; (8010adc <tcp_new_port+0x84>)
 8010ace:	881b      	ldrh	r3, [r3, #0]
}
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	370c      	adds	r7, #12
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ada:	4770      	bx	lr
 8010adc:	20000534 	.word	0x20000534
 8010ae0:	0801f348 	.word	0x0801f348

08010ae4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b08a      	sub	sp, #40	; 0x28
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	60f8      	str	r0, [r7, #12]
 8010aec:	60b9      	str	r1, [r7, #8]
 8010aee:	603b      	str	r3, [r7, #0]
 8010af0:	4613      	mov	r3, r2
 8010af2:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8010af4:	2300      	movs	r3, #0
 8010af6:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d109      	bne.n	8010b12 <tcp_connect+0x2e>
 8010afe:	4b7d      	ldr	r3, [pc, #500]	; (8010cf4 <tcp_connect+0x210>)
 8010b00:	f240 4235 	movw	r2, #1077	; 0x435
 8010b04:	497c      	ldr	r1, [pc, #496]	; (8010cf8 <tcp_connect+0x214>)
 8010b06:	487d      	ldr	r0, [pc, #500]	; (8010cfc <tcp_connect+0x218>)
 8010b08:	f009 fa30 	bl	8019f6c <iprintf>
 8010b0c:	f06f 030f 	mvn.w	r3, #15
 8010b10:	e0ec      	b.n	8010cec <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d109      	bne.n	8010b2c <tcp_connect+0x48>
 8010b18:	4b76      	ldr	r3, [pc, #472]	; (8010cf4 <tcp_connect+0x210>)
 8010b1a:	f240 4236 	movw	r2, #1078	; 0x436
 8010b1e:	4978      	ldr	r1, [pc, #480]	; (8010d00 <tcp_connect+0x21c>)
 8010b20:	4876      	ldr	r0, [pc, #472]	; (8010cfc <tcp_connect+0x218>)
 8010b22:	f009 fa23 	bl	8019f6c <iprintf>
 8010b26:	f06f 030f 	mvn.w	r3, #15
 8010b2a:	e0df      	b.n	8010cec <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	7d1b      	ldrb	r3, [r3, #20]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d009      	beq.n	8010b48 <tcp_connect+0x64>
 8010b34:	4b6f      	ldr	r3, [pc, #444]	; (8010cf4 <tcp_connect+0x210>)
 8010b36:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8010b3a:	4972      	ldr	r1, [pc, #456]	; (8010d04 <tcp_connect+0x220>)
 8010b3c:	486f      	ldr	r0, [pc, #444]	; (8010cfc <tcp_connect+0x218>)
 8010b3e:	f009 fa15 	bl	8019f6c <iprintf>
 8010b42:	f06f 0309 	mvn.w	r3, #9
 8010b46:	e0d1      	b.n	8010cec <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d002      	beq.n	8010b54 <tcp_connect+0x70>
 8010b4e:	68bb      	ldr	r3, [r7, #8]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	e000      	b.n	8010b56 <tcp_connect+0x72>
 8010b54:	2300      	movs	r3, #0
 8010b56:	68fa      	ldr	r2, [r7, #12]
 8010b58:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	88fa      	ldrh	r2, [r7, #6]
 8010b5e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	7a1b      	ldrb	r3, [r3, #8]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d006      	beq.n	8010b76 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	7a1b      	ldrb	r3, [r3, #8]
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7fe fd43 	bl	800f5f8 <netif_get_by_index>
 8010b72:	6278      	str	r0, [r7, #36]	; 0x24
 8010b74:	e005      	b.n	8010b82 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	3304      	adds	r3, #4
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f006 ff5a 	bl	8017a34 <ip4_route>
 8010b80:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8010b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d102      	bne.n	8010b8e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8010b88:	f06f 0303 	mvn.w	r3, #3
 8010b8c:	e0ae      	b.n	8010cec <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d003      	beq.n	8010b9c <tcp_connect+0xb8>
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d111      	bne.n	8010bc0 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8010b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d002      	beq.n	8010ba8 <tcp_connect+0xc4>
 8010ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba4:	3304      	adds	r3, #4
 8010ba6:	e000      	b.n	8010baa <tcp_connect+0xc6>
 8010ba8:	2300      	movs	r3, #0
 8010baa:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8010bac:	69fb      	ldr	r3, [r7, #28]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d102      	bne.n	8010bb8 <tcp_connect+0xd4>
      return ERR_RTE;
 8010bb2:	f06f 0303 	mvn.w	r3, #3
 8010bb6:	e099      	b.n	8010cec <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010bb8:	69fb      	ldr	r3, [r7, #28]
 8010bba:	681a      	ldr	r2, [r3, #0]
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	8adb      	ldrh	r3, [r3, #22]
 8010bc4:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	8adb      	ldrh	r3, [r3, #22]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d10c      	bne.n	8010be8 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8010bce:	f7ff ff43 	bl	8010a58 <tcp_new_port>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	461a      	mov	r2, r3
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	8adb      	ldrh	r3, [r3, #22]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d102      	bne.n	8010be8 <tcp_connect+0x104>
      return ERR_BUF;
 8010be2:	f06f 0301 	mvn.w	r3, #1
 8010be6:	e081      	b.n	8010cec <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8010be8:	68f8      	ldr	r0, [r7, #12]
 8010bea:	f001 f849 	bl	8011c80 <tcp_next_iss>
 8010bee:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	697a      	ldr	r2, [r7, #20]
 8010bfa:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	1e5a      	subs	r2, r3, #1
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8010c04:	697b      	ldr	r3, [r7, #20]
 8010c06:	1e5a      	subs	r2, r3, #1
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8010c0c:	697b      	ldr	r3, [r7, #20]
 8010c0e:	1e5a      	subs	r2, r3, #1
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8010c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8010c32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010c3c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	3304      	adds	r3, #4
 8010c46:	461a      	mov	r2, r3
 8010c48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010c4a:	f001 f83f 	bl	8011ccc <tcp_eff_send_mss_netif>
 8010c4e:	4603      	mov	r3, r0
 8010c50:	461a      	mov	r2, r3
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	2201      	movs	r2, #1
 8010c5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	683a      	ldr	r2, [r7, #0]
 8010c62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8010c66:	2102      	movs	r1, #2
 8010c68:	68f8      	ldr	r0, [r7, #12]
 8010c6a:	f004 faa3 	bl	80151b4 <tcp_enqueue_flags>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8010c72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d136      	bne.n	8010ce8 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	2202      	movs	r2, #2
 8010c7e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8010c80:	8b7b      	ldrh	r3, [r7, #26]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d021      	beq.n	8010cca <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8010c86:	4b20      	ldr	r3, [pc, #128]	; (8010d08 <tcp_connect+0x224>)
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	68fa      	ldr	r2, [r7, #12]
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	d105      	bne.n	8010c9c <tcp_connect+0x1b8>
 8010c90:	4b1d      	ldr	r3, [pc, #116]	; (8010d08 <tcp_connect+0x224>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	68db      	ldr	r3, [r3, #12]
 8010c96:	4a1c      	ldr	r2, [pc, #112]	; (8010d08 <tcp_connect+0x224>)
 8010c98:	6013      	str	r3, [r2, #0]
 8010c9a:	e013      	b.n	8010cc4 <tcp_connect+0x1e0>
 8010c9c:	4b1a      	ldr	r3, [pc, #104]	; (8010d08 <tcp_connect+0x224>)
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	623b      	str	r3, [r7, #32]
 8010ca2:	e00c      	b.n	8010cbe <tcp_connect+0x1da>
 8010ca4:	6a3b      	ldr	r3, [r7, #32]
 8010ca6:	68db      	ldr	r3, [r3, #12]
 8010ca8:	68fa      	ldr	r2, [r7, #12]
 8010caa:	429a      	cmp	r2, r3
 8010cac:	d104      	bne.n	8010cb8 <tcp_connect+0x1d4>
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	68da      	ldr	r2, [r3, #12]
 8010cb2:	6a3b      	ldr	r3, [r7, #32]
 8010cb4:	60da      	str	r2, [r3, #12]
 8010cb6:	e005      	b.n	8010cc4 <tcp_connect+0x1e0>
 8010cb8:	6a3b      	ldr	r3, [r7, #32]
 8010cba:	68db      	ldr	r3, [r3, #12]
 8010cbc:	623b      	str	r3, [r7, #32]
 8010cbe:	6a3b      	ldr	r3, [r7, #32]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d1ef      	bne.n	8010ca4 <tcp_connect+0x1c0>
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8010cca:	4b10      	ldr	r3, [pc, #64]	; (8010d0c <tcp_connect+0x228>)
 8010ccc:	681a      	ldr	r2, [r3, #0]
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	60da      	str	r2, [r3, #12]
 8010cd2:	4a0e      	ldr	r2, [pc, #56]	; (8010d0c <tcp_connect+0x228>)
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	6013      	str	r3, [r2, #0]
 8010cd8:	f005 face 	bl	8016278 <tcp_timer_needed>
 8010cdc:	4b0c      	ldr	r3, [pc, #48]	; (8010d10 <tcp_connect+0x22c>)
 8010cde:	2201      	movs	r2, #1
 8010ce0:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8010ce2:	68f8      	ldr	r0, [r7, #12]
 8010ce4:	f004 fb54 	bl	8015390 <tcp_output>
  }
  return ret;
 8010ce8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8010cec:	4618      	mov	r0, r3
 8010cee:	3728      	adds	r7, #40	; 0x28
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}
 8010cf4:	0801d1e4 	.word	0x0801d1e4
 8010cf8:	0801d4c0 	.word	0x0801d4c0
 8010cfc:	0801d228 	.word	0x0801d228
 8010d00:	0801d4dc 	.word	0x0801d4dc
 8010d04:	0801d4f8 	.word	0x0801d4f8
 8010d08:	2001a9bc 	.word	0x2001a9bc
 8010d0c:	2001a9b0 	.word	0x2001a9b0
 8010d10:	2001a9ac 	.word	0x2001a9ac

08010d14 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8010d14:	b5b0      	push	{r4, r5, r7, lr}
 8010d16:	b090      	sub	sp, #64	; 0x40
 8010d18:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8010d20:	4b94      	ldr	r3, [pc, #592]	; (8010f74 <tcp_slowtmr+0x260>)
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	3301      	adds	r3, #1
 8010d26:	4a93      	ldr	r2, [pc, #588]	; (8010f74 <tcp_slowtmr+0x260>)
 8010d28:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010d2a:	4b93      	ldr	r3, [pc, #588]	; (8010f78 <tcp_slowtmr+0x264>)
 8010d2c:	781b      	ldrb	r3, [r3, #0]
 8010d2e:	3301      	adds	r3, #1
 8010d30:	b2da      	uxtb	r2, r3
 8010d32:	4b91      	ldr	r3, [pc, #580]	; (8010f78 <tcp_slowtmr+0x264>)
 8010d34:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8010d36:	2300      	movs	r3, #0
 8010d38:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8010d3a:	4b90      	ldr	r3, [pc, #576]	; (8010f7c <tcp_slowtmr+0x268>)
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8010d40:	e29f      	b.n	8011282 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8010d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d44:	7d1b      	ldrb	r3, [r3, #20]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d106      	bne.n	8010d58 <tcp_slowtmr+0x44>
 8010d4a:	4b8d      	ldr	r3, [pc, #564]	; (8010f80 <tcp_slowtmr+0x26c>)
 8010d4c:	f240 42be 	movw	r2, #1214	; 0x4be
 8010d50:	498c      	ldr	r1, [pc, #560]	; (8010f84 <tcp_slowtmr+0x270>)
 8010d52:	488d      	ldr	r0, [pc, #564]	; (8010f88 <tcp_slowtmr+0x274>)
 8010d54:	f009 f90a 	bl	8019f6c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d5a:	7d1b      	ldrb	r3, [r3, #20]
 8010d5c:	2b01      	cmp	r3, #1
 8010d5e:	d106      	bne.n	8010d6e <tcp_slowtmr+0x5a>
 8010d60:	4b87      	ldr	r3, [pc, #540]	; (8010f80 <tcp_slowtmr+0x26c>)
 8010d62:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8010d66:	4989      	ldr	r1, [pc, #548]	; (8010f8c <tcp_slowtmr+0x278>)
 8010d68:	4887      	ldr	r0, [pc, #540]	; (8010f88 <tcp_slowtmr+0x274>)
 8010d6a:	f009 f8ff 	bl	8019f6c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8010d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d70:	7d1b      	ldrb	r3, [r3, #20]
 8010d72:	2b0a      	cmp	r3, #10
 8010d74:	d106      	bne.n	8010d84 <tcp_slowtmr+0x70>
 8010d76:	4b82      	ldr	r3, [pc, #520]	; (8010f80 <tcp_slowtmr+0x26c>)
 8010d78:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8010d7c:	4984      	ldr	r1, [pc, #528]	; (8010f90 <tcp_slowtmr+0x27c>)
 8010d7e:	4882      	ldr	r0, [pc, #520]	; (8010f88 <tcp_slowtmr+0x274>)
 8010d80:	f009 f8f4 	bl	8019f6c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d86:	7f9a      	ldrb	r2, [r3, #30]
 8010d88:	4b7b      	ldr	r3, [pc, #492]	; (8010f78 <tcp_slowtmr+0x264>)
 8010d8a:	781b      	ldrb	r3, [r3, #0]
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	d105      	bne.n	8010d9c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8010d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d92:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d96:	68db      	ldr	r3, [r3, #12]
 8010d98:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8010d9a:	e272      	b.n	8011282 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8010d9c:	4b76      	ldr	r3, [pc, #472]	; (8010f78 <tcp_slowtmr+0x264>)
 8010d9e:	781a      	ldrb	r2, [r3, #0]
 8010da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010da2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8010da4:	2300      	movs	r3, #0
 8010da6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8010daa:	2300      	movs	r3, #0
 8010dac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8010db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010db2:	7d1b      	ldrb	r3, [r3, #20]
 8010db4:	2b02      	cmp	r3, #2
 8010db6:	d10a      	bne.n	8010dce <tcp_slowtmr+0xba>
 8010db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010dbe:	2b05      	cmp	r3, #5
 8010dc0:	d905      	bls.n	8010dce <tcp_slowtmr+0xba>
      ++pcb_remove;
 8010dc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010dc6:	3301      	adds	r3, #1
 8010dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010dcc:	e11e      	b.n	801100c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8010dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dd0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010dd4:	2b0b      	cmp	r3, #11
 8010dd6:	d905      	bls.n	8010de4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8010dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ddc:	3301      	adds	r3, #1
 8010dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010de2:	e113      	b.n	801100c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8010de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010de6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d075      	beq.n	8010eda <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8010dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d006      	beq.n	8010e04 <tcp_slowtmr+0xf0>
 8010df6:	4b62      	ldr	r3, [pc, #392]	; (8010f80 <tcp_slowtmr+0x26c>)
 8010df8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8010dfc:	4965      	ldr	r1, [pc, #404]	; (8010f94 <tcp_slowtmr+0x280>)
 8010dfe:	4862      	ldr	r0, [pc, #392]	; (8010f88 <tcp_slowtmr+0x274>)
 8010e00:	f009 f8b4 	bl	8019f6c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8010e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d106      	bne.n	8010e1a <tcp_slowtmr+0x106>
 8010e0c:	4b5c      	ldr	r3, [pc, #368]	; (8010f80 <tcp_slowtmr+0x26c>)
 8010e0e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8010e12:	4961      	ldr	r1, [pc, #388]	; (8010f98 <tcp_slowtmr+0x284>)
 8010e14:	485c      	ldr	r0, [pc, #368]	; (8010f88 <tcp_slowtmr+0x274>)
 8010e16:	f009 f8a9 	bl	8019f6c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8010e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e1c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010e20:	2b0b      	cmp	r3, #11
 8010e22:	d905      	bls.n	8010e30 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8010e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e28:	3301      	adds	r3, #1
 8010e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010e2e:	e0ed      	b.n	801100c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8010e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e32:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010e36:	3b01      	subs	r3, #1
 8010e38:	4a58      	ldr	r2, [pc, #352]	; (8010f9c <tcp_slowtmr+0x288>)
 8010e3a:	5cd3      	ldrb	r3, [r2, r3]
 8010e3c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8010e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e40:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010e44:	7c7a      	ldrb	r2, [r7, #17]
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d907      	bls.n	8010e5a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8010e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e4c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010e50:	3301      	adds	r3, #1
 8010e52:	b2da      	uxtb	r2, r3
 8010e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e56:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8010e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e5c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010e60:	7c7a      	ldrb	r2, [r7, #17]
 8010e62:	429a      	cmp	r2, r3
 8010e64:	f200 80d2 	bhi.w	801100c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8010e68:	2301      	movs	r3, #1
 8010e6a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8010e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d108      	bne.n	8010e88 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010e76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e78:	f005 f930 	bl	80160dc <tcp_zero_window_probe>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d014      	beq.n	8010eac <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8010e82:	2300      	movs	r3, #0
 8010e84:	623b      	str	r3, [r7, #32]
 8010e86:	e011      	b.n	8010eac <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010e8e:	4619      	mov	r1, r3
 8010e90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e92:	f003 fff7 	bl	8014e84 <tcp_split_unsent_seg>
 8010e96:	4603      	mov	r3, r0
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d107      	bne.n	8010eac <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8010e9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e9e:	f004 fa77 	bl	8015390 <tcp_output>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d101      	bne.n	8010eac <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8010eac:	6a3b      	ldr	r3, [r7, #32]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	f000 80ac 	beq.w	801100c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8010eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ebe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010ec2:	2b06      	cmp	r3, #6
 8010ec4:	f200 80a2 	bhi.w	801100c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8010ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010ece:	3301      	adds	r3, #1
 8010ed0:	b2da      	uxtb	r2, r3
 8010ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ed4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8010ed8:	e098      	b.n	801100c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8010eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010edc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	db0f      	blt.n	8010f04 <tcp_slowtmr+0x1f0>
 8010ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ee6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010eea:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010eee:	4293      	cmp	r3, r2
 8010ef0:	d008      	beq.n	8010f04 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8010ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ef4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010ef8:	b29b      	uxth	r3, r3
 8010efa:	3301      	adds	r3, #1
 8010efc:	b29b      	uxth	r3, r3
 8010efe:	b21a      	sxth	r2, r3
 8010f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f02:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8010f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f06:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8010f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f0c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010f10:	429a      	cmp	r2, r3
 8010f12:	db7b      	blt.n	801100c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8010f14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f16:	f004 fd2d 	bl	8015974 <tcp_rexmit_rto_prepare>
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d007      	beq.n	8010f30 <tcp_slowtmr+0x21c>
 8010f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d171      	bne.n	801100c <tcp_slowtmr+0x2f8>
 8010f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d06d      	beq.n	801100c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8010f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f32:	7d1b      	ldrb	r3, [r3, #20]
 8010f34:	2b02      	cmp	r3, #2
 8010f36:	d03a      	beq.n	8010fae <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8010f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010f3e:	2b0c      	cmp	r3, #12
 8010f40:	bf28      	it	cs
 8010f42:	230c      	movcs	r3, #12
 8010f44:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f4c:	10db      	asrs	r3, r3, #3
 8010f4e:	b21b      	sxth	r3, r3
 8010f50:	461a      	mov	r2, r3
 8010f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f54:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010f58:	4413      	add	r3, r2
 8010f5a:	7efa      	ldrb	r2, [r7, #27]
 8010f5c:	4910      	ldr	r1, [pc, #64]	; (8010fa0 <tcp_slowtmr+0x28c>)
 8010f5e:	5c8a      	ldrb	r2, [r1, r2]
 8010f60:	4093      	lsls	r3, r2
 8010f62:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8010f6a:	4293      	cmp	r3, r2
 8010f6c:	dc1a      	bgt.n	8010fa4 <tcp_slowtmr+0x290>
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	b21a      	sxth	r2, r3
 8010f72:	e019      	b.n	8010fa8 <tcp_slowtmr+0x294>
 8010f74:	2001a9b4 	.word	0x2001a9b4
 8010f78:	2000079a 	.word	0x2000079a
 8010f7c:	2001a9b0 	.word	0x2001a9b0
 8010f80:	0801d1e4 	.word	0x0801d1e4
 8010f84:	0801d528 	.word	0x0801d528
 8010f88:	0801d228 	.word	0x0801d228
 8010f8c:	0801d554 	.word	0x0801d554
 8010f90:	0801d580 	.word	0x0801d580
 8010f94:	0801d5b0 	.word	0x0801d5b0
 8010f98:	0801d5e4 	.word	0x0801d5e4
 8010f9c:	0801f340 	.word	0x0801f340
 8010fa0:	0801f330 	.word	0x0801f330
 8010fa4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010faa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8010fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fbc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010fc0:	4293      	cmp	r3, r2
 8010fc2:	bf28      	it	cs
 8010fc4:	4613      	movcs	r3, r2
 8010fc6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8010fc8:	8a7b      	ldrh	r3, [r7, #18]
 8010fca:	085b      	lsrs	r3, r3, #1
 8010fcc:	b29a      	uxth	r2, r3
 8010fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fde:	005b      	lsls	r3, r3, #1
 8010fe0:	b29b      	uxth	r3, r3
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	d206      	bcs.n	8010ff4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8010fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fea:	005b      	lsls	r3, r3, #1
 8010fec:	b29a      	uxth	r2, r3
 8010fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ff0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8010ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ff6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ffa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8010ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011000:	2200      	movs	r2, #0
 8011002:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8011006:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011008:	f004 fd24 	bl	8015a54 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801100c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801100e:	7d1b      	ldrb	r3, [r3, #20]
 8011010:	2b06      	cmp	r3, #6
 8011012:	d111      	bne.n	8011038 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011016:	8b5b      	ldrh	r3, [r3, #26]
 8011018:	f003 0310 	and.w	r3, r3, #16
 801101c:	2b00      	cmp	r3, #0
 801101e:	d00b      	beq.n	8011038 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011020:	4b9d      	ldr	r3, [pc, #628]	; (8011298 <tcp_slowtmr+0x584>)
 8011022:	681a      	ldr	r2, [r3, #0]
 8011024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011026:	6a1b      	ldr	r3, [r3, #32]
 8011028:	1ad3      	subs	r3, r2, r3
 801102a:	2b28      	cmp	r3, #40	; 0x28
 801102c:	d904      	bls.n	8011038 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801102e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011032:	3301      	adds	r3, #1
 8011034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801103a:	7a5b      	ldrb	r3, [r3, #9]
 801103c:	f003 0308 	and.w	r3, r3, #8
 8011040:	2b00      	cmp	r3, #0
 8011042:	d04c      	beq.n	80110de <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8011044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011046:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011048:	2b04      	cmp	r3, #4
 801104a:	d003      	beq.n	8011054 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801104c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801104e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011050:	2b07      	cmp	r3, #7
 8011052:	d144      	bne.n	80110de <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011054:	4b90      	ldr	r3, [pc, #576]	; (8011298 <tcp_slowtmr+0x584>)
 8011056:	681a      	ldr	r2, [r3, #0]
 8011058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801105a:	6a1b      	ldr	r3, [r3, #32]
 801105c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801105e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011064:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8011068:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 801106c:	498b      	ldr	r1, [pc, #556]	; (801129c <tcp_slowtmr+0x588>)
 801106e:	fba1 1303 	umull	r1, r3, r1, r3
 8011072:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011074:	429a      	cmp	r2, r3
 8011076:	d90a      	bls.n	801108e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801107c:	3301      	adds	r3, #1
 801107e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8011082:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011086:	3301      	adds	r3, #1
 8011088:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801108c:	e027      	b.n	80110de <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801108e:	4b82      	ldr	r3, [pc, #520]	; (8011298 <tcp_slowtmr+0x584>)
 8011090:	681a      	ldr	r2, [r3, #0]
 8011092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011094:	6a1b      	ldr	r3, [r3, #32]
 8011096:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801109a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801109e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110a0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80110a4:	4618      	mov	r0, r3
 80110a6:	4b7e      	ldr	r3, [pc, #504]	; (80112a0 <tcp_slowtmr+0x58c>)
 80110a8:	fb03 f300 	mul.w	r3, r3, r0
 80110ac:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80110ae:	497b      	ldr	r1, [pc, #492]	; (801129c <tcp_slowtmr+0x588>)
 80110b0:	fba1 1303 	umull	r1, r3, r1, r3
 80110b4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80110b6:	429a      	cmp	r2, r3
 80110b8:	d911      	bls.n	80110de <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80110ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110bc:	f004 ffce 	bl	801605c <tcp_keepalive>
 80110c0:	4603      	mov	r3, r0
 80110c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80110c6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d107      	bne.n	80110de <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80110ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80110d4:	3301      	adds	r3, #1
 80110d6:	b2da      	uxtb	r2, r3
 80110d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110da:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80110de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d011      	beq.n	801110a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80110e6:	4b6c      	ldr	r3, [pc, #432]	; (8011298 <tcp_slowtmr+0x584>)
 80110e8:	681a      	ldr	r2, [r3, #0]
 80110ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ec:	6a1b      	ldr	r3, [r3, #32]
 80110ee:	1ad2      	subs	r2, r2, r3
 80110f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110f2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80110f6:	4619      	mov	r1, r3
 80110f8:	460b      	mov	r3, r1
 80110fa:	005b      	lsls	r3, r3, #1
 80110fc:	440b      	add	r3, r1
 80110fe:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011100:	429a      	cmp	r2, r3
 8011102:	d302      	bcc.n	801110a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011104:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011106:	f000 fe8b 	bl	8011e20 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801110a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801110c:	7d1b      	ldrb	r3, [r3, #20]
 801110e:	2b03      	cmp	r3, #3
 8011110:	d10b      	bne.n	801112a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011112:	4b61      	ldr	r3, [pc, #388]	; (8011298 <tcp_slowtmr+0x584>)
 8011114:	681a      	ldr	r2, [r3, #0]
 8011116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011118:	6a1b      	ldr	r3, [r3, #32]
 801111a:	1ad3      	subs	r3, r2, r3
 801111c:	2b28      	cmp	r3, #40	; 0x28
 801111e:	d904      	bls.n	801112a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011124:	3301      	adds	r3, #1
 8011126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801112a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801112c:	7d1b      	ldrb	r3, [r3, #20]
 801112e:	2b09      	cmp	r3, #9
 8011130:	d10b      	bne.n	801114a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011132:	4b59      	ldr	r3, [pc, #356]	; (8011298 <tcp_slowtmr+0x584>)
 8011134:	681a      	ldr	r2, [r3, #0]
 8011136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011138:	6a1b      	ldr	r3, [r3, #32]
 801113a:	1ad3      	subs	r3, r2, r3
 801113c:	2bf0      	cmp	r3, #240	; 0xf0
 801113e:	d904      	bls.n	801114a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8011140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011144:	3301      	adds	r3, #1
 8011146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801114a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801114e:	2b00      	cmp	r3, #0
 8011150:	d060      	beq.n	8011214 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011158:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801115a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801115c:	f000 fcac 	bl	8011ab8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011162:	2b00      	cmp	r3, #0
 8011164:	d010      	beq.n	8011188 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011166:	4b4f      	ldr	r3, [pc, #316]	; (80112a4 <tcp_slowtmr+0x590>)
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801116c:	429a      	cmp	r2, r3
 801116e:	d106      	bne.n	801117e <tcp_slowtmr+0x46a>
 8011170:	4b4d      	ldr	r3, [pc, #308]	; (80112a8 <tcp_slowtmr+0x594>)
 8011172:	f240 526d 	movw	r2, #1389	; 0x56d
 8011176:	494d      	ldr	r1, [pc, #308]	; (80112ac <tcp_slowtmr+0x598>)
 8011178:	484d      	ldr	r0, [pc, #308]	; (80112b0 <tcp_slowtmr+0x59c>)
 801117a:	f008 fef7 	bl	8019f6c <iprintf>
        prev->next = pcb->next;
 801117e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011180:	68da      	ldr	r2, [r3, #12]
 8011182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011184:	60da      	str	r2, [r3, #12]
 8011186:	e00f      	b.n	80111a8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011188:	4b46      	ldr	r3, [pc, #280]	; (80112a4 <tcp_slowtmr+0x590>)
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801118e:	429a      	cmp	r2, r3
 8011190:	d006      	beq.n	80111a0 <tcp_slowtmr+0x48c>
 8011192:	4b45      	ldr	r3, [pc, #276]	; (80112a8 <tcp_slowtmr+0x594>)
 8011194:	f240 5271 	movw	r2, #1393	; 0x571
 8011198:	4946      	ldr	r1, [pc, #280]	; (80112b4 <tcp_slowtmr+0x5a0>)
 801119a:	4845      	ldr	r0, [pc, #276]	; (80112b0 <tcp_slowtmr+0x59c>)
 801119c:	f008 fee6 	bl	8019f6c <iprintf>
        tcp_active_pcbs = pcb->next;
 80111a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a2:	68db      	ldr	r3, [r3, #12]
 80111a4:	4a3f      	ldr	r2, [pc, #252]	; (80112a4 <tcp_slowtmr+0x590>)
 80111a6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80111a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d013      	beq.n	80111d8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80111b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111b2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80111b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111b6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80111b8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80111ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111bc:	3304      	adds	r3, #4
 80111be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111c0:	8ad2      	ldrh	r2, [r2, #22]
 80111c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80111c4:	8b09      	ldrh	r1, [r1, #24]
 80111c6:	9102      	str	r1, [sp, #8]
 80111c8:	9201      	str	r2, [sp, #4]
 80111ca:	9300      	str	r3, [sp, #0]
 80111cc:	462b      	mov	r3, r5
 80111ce:	4622      	mov	r2, r4
 80111d0:	4601      	mov	r1, r0
 80111d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80111d4:	f004 fe90 	bl	8015ef8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80111d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111da:	691b      	ldr	r3, [r3, #16]
 80111dc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80111de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e0:	7d1b      	ldrb	r3, [r3, #20]
 80111e2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80111e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80111e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ea:	68db      	ldr	r3, [r3, #12]
 80111ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80111ee:	6838      	ldr	r0, [r7, #0]
 80111f0:	f7ff f894 	bl	801031c <tcp_free>

      tcp_active_pcbs_changed = 0;
 80111f4:	4b30      	ldr	r3, [pc, #192]	; (80112b8 <tcp_slowtmr+0x5a4>)
 80111f6:	2200      	movs	r2, #0
 80111f8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d004      	beq.n	801120a <tcp_slowtmr+0x4f6>
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	f06f 010c 	mvn.w	r1, #12
 8011206:	68b8      	ldr	r0, [r7, #8]
 8011208:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801120a:	4b2b      	ldr	r3, [pc, #172]	; (80112b8 <tcp_slowtmr+0x5a4>)
 801120c:	781b      	ldrb	r3, [r3, #0]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d037      	beq.n	8011282 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8011212:	e590      	b.n	8010d36 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011216:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121a:	68db      	ldr	r3, [r3, #12]
 801121c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801121e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011220:	7f1b      	ldrb	r3, [r3, #28]
 8011222:	3301      	adds	r3, #1
 8011224:	b2da      	uxtb	r2, r3
 8011226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011228:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801122a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801122c:	7f1a      	ldrb	r2, [r3, #28]
 801122e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011230:	7f5b      	ldrb	r3, [r3, #29]
 8011232:	429a      	cmp	r2, r3
 8011234:	d325      	bcc.n	8011282 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8011236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011238:	2200      	movs	r2, #0
 801123a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801123c:	4b1e      	ldr	r3, [pc, #120]	; (80112b8 <tcp_slowtmr+0x5a4>)
 801123e:	2200      	movs	r2, #0
 8011240:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011248:	2b00      	cmp	r3, #0
 801124a:	d00b      	beq.n	8011264 <tcp_slowtmr+0x550>
 801124c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801124e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011252:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011254:	6912      	ldr	r2, [r2, #16]
 8011256:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011258:	4610      	mov	r0, r2
 801125a:	4798      	blx	r3
 801125c:	4603      	mov	r3, r0
 801125e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8011262:	e002      	b.n	801126a <tcp_slowtmr+0x556>
 8011264:	2300      	movs	r3, #0
 8011266:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801126a:	4b13      	ldr	r3, [pc, #76]	; (80112b8 <tcp_slowtmr+0x5a4>)
 801126c:	781b      	ldrb	r3, [r3, #0]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d000      	beq.n	8011274 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8011272:	e560      	b.n	8010d36 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011274:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011278:	2b00      	cmp	r3, #0
 801127a:	d102      	bne.n	8011282 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801127c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801127e:	f004 f887 	bl	8015390 <tcp_output>
  while (pcb != NULL) {
 8011282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011284:	2b00      	cmp	r3, #0
 8011286:	f47f ad5c 	bne.w	8010d42 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801128a:	2300      	movs	r3, #0
 801128c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801128e:	4b0b      	ldr	r3, [pc, #44]	; (80112bc <tcp_slowtmr+0x5a8>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011294:	e067      	b.n	8011366 <tcp_slowtmr+0x652>
 8011296:	bf00      	nop
 8011298:	2001a9b4 	.word	0x2001a9b4
 801129c:	10624dd3 	.word	0x10624dd3
 80112a0:	000124f8 	.word	0x000124f8
 80112a4:	2001a9b0 	.word	0x2001a9b0
 80112a8:	0801d1e4 	.word	0x0801d1e4
 80112ac:	0801d61c 	.word	0x0801d61c
 80112b0:	0801d228 	.word	0x0801d228
 80112b4:	0801d648 	.word	0x0801d648
 80112b8:	2001a9ac 	.word	0x2001a9ac
 80112bc:	2001a9c0 	.word	0x2001a9c0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80112c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c2:	7d1b      	ldrb	r3, [r3, #20]
 80112c4:	2b0a      	cmp	r3, #10
 80112c6:	d006      	beq.n	80112d6 <tcp_slowtmr+0x5c2>
 80112c8:	4b2b      	ldr	r3, [pc, #172]	; (8011378 <tcp_slowtmr+0x664>)
 80112ca:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80112ce:	492b      	ldr	r1, [pc, #172]	; (801137c <tcp_slowtmr+0x668>)
 80112d0:	482b      	ldr	r0, [pc, #172]	; (8011380 <tcp_slowtmr+0x66c>)
 80112d2:	f008 fe4b 	bl	8019f6c <iprintf>
    pcb_remove = 0;
 80112d6:	2300      	movs	r3, #0
 80112d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80112dc:	4b29      	ldr	r3, [pc, #164]	; (8011384 <tcp_slowtmr+0x670>)
 80112de:	681a      	ldr	r2, [r3, #0]
 80112e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112e2:	6a1b      	ldr	r3, [r3, #32]
 80112e4:	1ad3      	subs	r3, r2, r3
 80112e6:	2bf0      	cmp	r3, #240	; 0xf0
 80112e8:	d904      	bls.n	80112f4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80112ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112ee:	3301      	adds	r3, #1
 80112f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80112f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d02f      	beq.n	801135c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80112fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112fe:	f000 fbdb 	bl	8011ab8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011304:	2b00      	cmp	r3, #0
 8011306:	d010      	beq.n	801132a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011308:	4b1f      	ldr	r3, [pc, #124]	; (8011388 <tcp_slowtmr+0x674>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801130e:	429a      	cmp	r2, r3
 8011310:	d106      	bne.n	8011320 <tcp_slowtmr+0x60c>
 8011312:	4b19      	ldr	r3, [pc, #100]	; (8011378 <tcp_slowtmr+0x664>)
 8011314:	f240 52af 	movw	r2, #1455	; 0x5af
 8011318:	491c      	ldr	r1, [pc, #112]	; (801138c <tcp_slowtmr+0x678>)
 801131a:	4819      	ldr	r0, [pc, #100]	; (8011380 <tcp_slowtmr+0x66c>)
 801131c:	f008 fe26 	bl	8019f6c <iprintf>
        prev->next = pcb->next;
 8011320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011322:	68da      	ldr	r2, [r3, #12]
 8011324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011326:	60da      	str	r2, [r3, #12]
 8011328:	e00f      	b.n	801134a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801132a:	4b17      	ldr	r3, [pc, #92]	; (8011388 <tcp_slowtmr+0x674>)
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011330:	429a      	cmp	r2, r3
 8011332:	d006      	beq.n	8011342 <tcp_slowtmr+0x62e>
 8011334:	4b10      	ldr	r3, [pc, #64]	; (8011378 <tcp_slowtmr+0x664>)
 8011336:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801133a:	4915      	ldr	r1, [pc, #84]	; (8011390 <tcp_slowtmr+0x67c>)
 801133c:	4810      	ldr	r0, [pc, #64]	; (8011380 <tcp_slowtmr+0x66c>)
 801133e:	f008 fe15 	bl	8019f6c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011344:	68db      	ldr	r3, [r3, #12]
 8011346:	4a10      	ldr	r2, [pc, #64]	; (8011388 <tcp_slowtmr+0x674>)
 8011348:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801134a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801134c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801134e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011350:	68db      	ldr	r3, [r3, #12]
 8011352:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011354:	69f8      	ldr	r0, [r7, #28]
 8011356:	f7fe ffe1 	bl	801031c <tcp_free>
 801135a:	e004      	b.n	8011366 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801135c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801135e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011362:	68db      	ldr	r3, [r3, #12]
 8011364:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011368:	2b00      	cmp	r3, #0
 801136a:	d1a9      	bne.n	80112c0 <tcp_slowtmr+0x5ac>
    }
  }
}
 801136c:	bf00      	nop
 801136e:	bf00      	nop
 8011370:	3730      	adds	r7, #48	; 0x30
 8011372:	46bd      	mov	sp, r7
 8011374:	bdb0      	pop	{r4, r5, r7, pc}
 8011376:	bf00      	nop
 8011378:	0801d1e4 	.word	0x0801d1e4
 801137c:	0801d674 	.word	0x0801d674
 8011380:	0801d228 	.word	0x0801d228
 8011384:	2001a9b4 	.word	0x2001a9b4
 8011388:	2001a9c0 	.word	0x2001a9c0
 801138c:	0801d6a4 	.word	0x0801d6a4
 8011390:	0801d6cc 	.word	0x0801d6cc

08011394 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b082      	sub	sp, #8
 8011398:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801139a:	4b2d      	ldr	r3, [pc, #180]	; (8011450 <tcp_fasttmr+0xbc>)
 801139c:	781b      	ldrb	r3, [r3, #0]
 801139e:	3301      	adds	r3, #1
 80113a0:	b2da      	uxtb	r2, r3
 80113a2:	4b2b      	ldr	r3, [pc, #172]	; (8011450 <tcp_fasttmr+0xbc>)
 80113a4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80113a6:	4b2b      	ldr	r3, [pc, #172]	; (8011454 <tcp_fasttmr+0xc0>)
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80113ac:	e048      	b.n	8011440 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	7f9a      	ldrb	r2, [r3, #30]
 80113b2:	4b27      	ldr	r3, [pc, #156]	; (8011450 <tcp_fasttmr+0xbc>)
 80113b4:	781b      	ldrb	r3, [r3, #0]
 80113b6:	429a      	cmp	r2, r3
 80113b8:	d03f      	beq.n	801143a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80113ba:	4b25      	ldr	r3, [pc, #148]	; (8011450 <tcp_fasttmr+0xbc>)
 80113bc:	781a      	ldrb	r2, [r3, #0]
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	8b5b      	ldrh	r3, [r3, #26]
 80113c6:	f003 0301 	and.w	r3, r3, #1
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d010      	beq.n	80113f0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	8b5b      	ldrh	r3, [r3, #26]
 80113d2:	f043 0302 	orr.w	r3, r3, #2
 80113d6:	b29a      	uxth	r2, r3
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	f003 ffd7 	bl	8015390 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	8b5b      	ldrh	r3, [r3, #26]
 80113e6:	f023 0303 	bic.w	r3, r3, #3
 80113ea:	b29a      	uxth	r2, r3
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	8b5b      	ldrh	r3, [r3, #26]
 80113f4:	f003 0308 	and.w	r3, r3, #8
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d009      	beq.n	8011410 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	8b5b      	ldrh	r3, [r3, #26]
 8011400:	f023 0308 	bic.w	r3, r3, #8
 8011404:	b29a      	uxth	r2, r3
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801140a:	6878      	ldr	r0, [r7, #4]
 801140c:	f7ff f91a 	bl	8010644 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	68db      	ldr	r3, [r3, #12]
 8011414:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801141a:	2b00      	cmp	r3, #0
 801141c:	d00a      	beq.n	8011434 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801141e:	4b0e      	ldr	r3, [pc, #56]	; (8011458 <tcp_fasttmr+0xc4>)
 8011420:	2200      	movs	r2, #0
 8011422:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011424:	6878      	ldr	r0, [r7, #4]
 8011426:	f000 f819 	bl	801145c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801142a:	4b0b      	ldr	r3, [pc, #44]	; (8011458 <tcp_fasttmr+0xc4>)
 801142c:	781b      	ldrb	r3, [r3, #0]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d000      	beq.n	8011434 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011432:	e7b8      	b.n	80113a6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011434:	683b      	ldr	r3, [r7, #0]
 8011436:	607b      	str	r3, [r7, #4]
 8011438:	e002      	b.n	8011440 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	68db      	ldr	r3, [r3, #12]
 801143e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d1b3      	bne.n	80113ae <tcp_fasttmr+0x1a>
    }
  }
}
 8011446:	bf00      	nop
 8011448:	bf00      	nop
 801144a:	3708      	adds	r7, #8
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}
 8011450:	2000079a 	.word	0x2000079a
 8011454:	2001a9b0 	.word	0x2001a9b0
 8011458:	2001a9ac 	.word	0x2001a9ac

0801145c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801145c:	b590      	push	{r4, r7, lr}
 801145e:	b085      	sub	sp, #20
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d109      	bne.n	801147e <tcp_process_refused_data+0x22>
 801146a:	4b37      	ldr	r3, [pc, #220]	; (8011548 <tcp_process_refused_data+0xec>)
 801146c:	f240 6209 	movw	r2, #1545	; 0x609
 8011470:	4936      	ldr	r1, [pc, #216]	; (801154c <tcp_process_refused_data+0xf0>)
 8011472:	4837      	ldr	r0, [pc, #220]	; (8011550 <tcp_process_refused_data+0xf4>)
 8011474:	f008 fd7a 	bl	8019f6c <iprintf>
 8011478:	f06f 030f 	mvn.w	r3, #15
 801147c:	e060      	b.n	8011540 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011482:	7b5b      	ldrb	r3, [r3, #13]
 8011484:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801148a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	2200      	movs	r2, #0
 8011490:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011498:	2b00      	cmp	r3, #0
 801149a:	d00b      	beq.n	80114b4 <tcp_process_refused_data+0x58>
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	6918      	ldr	r0, [r3, #16]
 80114a6:	2300      	movs	r3, #0
 80114a8:	68ba      	ldr	r2, [r7, #8]
 80114aa:	6879      	ldr	r1, [r7, #4]
 80114ac:	47a0      	blx	r4
 80114ae:	4603      	mov	r3, r0
 80114b0:	73fb      	strb	r3, [r7, #15]
 80114b2:	e007      	b.n	80114c4 <tcp_process_refused_data+0x68>
 80114b4:	2300      	movs	r3, #0
 80114b6:	68ba      	ldr	r2, [r7, #8]
 80114b8:	6879      	ldr	r1, [r7, #4]
 80114ba:	2000      	movs	r0, #0
 80114bc:	f000 f8a4 	bl	8011608 <tcp_recv_null>
 80114c0:	4603      	mov	r3, r0
 80114c2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80114c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d12a      	bne.n	8011522 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80114cc:	7bbb      	ldrb	r3, [r7, #14]
 80114ce:	f003 0320 	and.w	r3, r3, #32
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d033      	beq.n	801153e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80114da:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80114de:	d005      	beq.n	80114ec <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80114e4:	3301      	adds	r3, #1
 80114e6:	b29a      	uxth	r2, r3
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d00b      	beq.n	801150e <tcp_process_refused_data+0xb2>
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	6918      	ldr	r0, [r3, #16]
 8011500:	2300      	movs	r3, #0
 8011502:	2200      	movs	r2, #0
 8011504:	6879      	ldr	r1, [r7, #4]
 8011506:	47a0      	blx	r4
 8011508:	4603      	mov	r3, r0
 801150a:	73fb      	strb	r3, [r7, #15]
 801150c:	e001      	b.n	8011512 <tcp_process_refused_data+0xb6>
 801150e:	2300      	movs	r3, #0
 8011510:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011516:	f113 0f0d 	cmn.w	r3, #13
 801151a:	d110      	bne.n	801153e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801151c:	f06f 030c 	mvn.w	r3, #12
 8011520:	e00e      	b.n	8011540 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8011522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011526:	f113 0f0d 	cmn.w	r3, #13
 801152a:	d102      	bne.n	8011532 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801152c:	f06f 030c 	mvn.w	r3, #12
 8011530:	e006      	b.n	8011540 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	68ba      	ldr	r2, [r7, #8]
 8011536:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8011538:	f06f 0304 	mvn.w	r3, #4
 801153c:	e000      	b.n	8011540 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801153e:	2300      	movs	r3, #0
}
 8011540:	4618      	mov	r0, r3
 8011542:	3714      	adds	r7, #20
 8011544:	46bd      	mov	sp, r7
 8011546:	bd90      	pop	{r4, r7, pc}
 8011548:	0801d1e4 	.word	0x0801d1e4
 801154c:	0801d6f4 	.word	0x0801d6f4
 8011550:	0801d228 	.word	0x0801d228

08011554 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b084      	sub	sp, #16
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801155c:	e007      	b.n	801156e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011564:	6878      	ldr	r0, [r7, #4]
 8011566:	f000 f80a 	bl	801157e <tcp_seg_free>
    seg = next;
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d1f4      	bne.n	801155e <tcp_segs_free+0xa>
  }
}
 8011574:	bf00      	nop
 8011576:	bf00      	nop
 8011578:	3710      	adds	r7, #16
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}

0801157e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801157e:	b580      	push	{r7, lr}
 8011580:	b082      	sub	sp, #8
 8011582:	af00      	add	r7, sp, #0
 8011584:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d00c      	beq.n	80115a6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	685b      	ldr	r3, [r3, #4]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d004      	beq.n	801159e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	685b      	ldr	r3, [r3, #4]
 8011598:	4618      	mov	r0, r3
 801159a:	f7fe fb8d 	bl	800fcb8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801159e:	6879      	ldr	r1, [r7, #4]
 80115a0:	2003      	movs	r0, #3
 80115a2:	f7fd fd77 	bl	800f094 <memp_free>
  }
}
 80115a6:	bf00      	nop
 80115a8:	3708      	adds	r7, #8
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}
	...

080115b0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b084      	sub	sp, #16
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d106      	bne.n	80115cc <tcp_seg_copy+0x1c>
 80115be:	4b0f      	ldr	r3, [pc, #60]	; (80115fc <tcp_seg_copy+0x4c>)
 80115c0:	f240 6282 	movw	r2, #1666	; 0x682
 80115c4:	490e      	ldr	r1, [pc, #56]	; (8011600 <tcp_seg_copy+0x50>)
 80115c6:	480f      	ldr	r0, [pc, #60]	; (8011604 <tcp_seg_copy+0x54>)
 80115c8:	f008 fcd0 	bl	8019f6c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80115cc:	2003      	movs	r0, #3
 80115ce:	f7fd fd15 	bl	800effc <memp_malloc>
 80115d2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d101      	bne.n	80115de <tcp_seg_copy+0x2e>
    return NULL;
 80115da:	2300      	movs	r3, #0
 80115dc:	e00a      	b.n	80115f4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80115de:	2210      	movs	r2, #16
 80115e0:	6879      	ldr	r1, [r7, #4]
 80115e2:	68f8      	ldr	r0, [r7, #12]
 80115e4:	f007 ff98 	bl	8019518 <memcpy>
  pbuf_ref(cseg->p);
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	685b      	ldr	r3, [r3, #4]
 80115ec:	4618      	mov	r0, r3
 80115ee:	f7fe fc03 	bl	800fdf8 <pbuf_ref>
  return cseg;
 80115f2:	68fb      	ldr	r3, [r7, #12]
}
 80115f4:	4618      	mov	r0, r3
 80115f6:	3710      	adds	r7, #16
 80115f8:	46bd      	mov	sp, r7
 80115fa:	bd80      	pop	{r7, pc}
 80115fc:	0801d1e4 	.word	0x0801d1e4
 8011600:	0801d738 	.word	0x0801d738
 8011604:	0801d228 	.word	0x0801d228

08011608 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b084      	sub	sp, #16
 801160c:	af00      	add	r7, sp, #0
 801160e:	60f8      	str	r0, [r7, #12]
 8011610:	60b9      	str	r1, [r7, #8]
 8011612:	607a      	str	r2, [r7, #4]
 8011614:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011616:	68bb      	ldr	r3, [r7, #8]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d109      	bne.n	8011630 <tcp_recv_null+0x28>
 801161c:	4b12      	ldr	r3, [pc, #72]	; (8011668 <tcp_recv_null+0x60>)
 801161e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011622:	4912      	ldr	r1, [pc, #72]	; (801166c <tcp_recv_null+0x64>)
 8011624:	4812      	ldr	r0, [pc, #72]	; (8011670 <tcp_recv_null+0x68>)
 8011626:	f008 fca1 	bl	8019f6c <iprintf>
 801162a:	f06f 030f 	mvn.w	r3, #15
 801162e:	e016      	b.n	801165e <tcp_recv_null+0x56>

  if (p != NULL) {
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d009      	beq.n	801164a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	891b      	ldrh	r3, [r3, #8]
 801163a:	4619      	mov	r1, r3
 801163c:	68b8      	ldr	r0, [r7, #8]
 801163e:	f7ff f9bb 	bl	80109b8 <tcp_recved>
    pbuf_free(p);
 8011642:	6878      	ldr	r0, [r7, #4]
 8011644:	f7fe fb38 	bl	800fcb8 <pbuf_free>
 8011648:	e008      	b.n	801165c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801164a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d104      	bne.n	801165c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8011652:	68b8      	ldr	r0, [r7, #8]
 8011654:	f7ff f860 	bl	8010718 <tcp_close>
 8011658:	4603      	mov	r3, r0
 801165a:	e000      	b.n	801165e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801165c:	2300      	movs	r3, #0
}
 801165e:	4618      	mov	r0, r3
 8011660:	3710      	adds	r7, #16
 8011662:	46bd      	mov	sp, r7
 8011664:	bd80      	pop	{r7, pc}
 8011666:	bf00      	nop
 8011668:	0801d1e4 	.word	0x0801d1e4
 801166c:	0801d754 	.word	0x0801d754
 8011670:	0801d228 	.word	0x0801d228

08011674 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b086      	sub	sp, #24
 8011678:	af00      	add	r7, sp, #0
 801167a:	4603      	mov	r3, r0
 801167c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011682:	2b00      	cmp	r3, #0
 8011684:	db01      	blt.n	801168a <tcp_kill_prio+0x16>
 8011686:	79fb      	ldrb	r3, [r7, #7]
 8011688:	e000      	b.n	801168c <tcp_kill_prio+0x18>
 801168a:	237f      	movs	r3, #127	; 0x7f
 801168c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801168e:	7afb      	ldrb	r3, [r7, #11]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d034      	beq.n	80116fe <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011694:	7afb      	ldrb	r3, [r7, #11]
 8011696:	3b01      	subs	r3, #1
 8011698:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801169a:	2300      	movs	r3, #0
 801169c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801169e:	2300      	movs	r3, #0
 80116a0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80116a2:	4b19      	ldr	r3, [pc, #100]	; (8011708 <tcp_kill_prio+0x94>)
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	617b      	str	r3, [r7, #20]
 80116a8:	e01f      	b.n	80116ea <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80116aa:	697b      	ldr	r3, [r7, #20]
 80116ac:	7d5b      	ldrb	r3, [r3, #21]
 80116ae:	7afa      	ldrb	r2, [r7, #11]
 80116b0:	429a      	cmp	r2, r3
 80116b2:	d80c      	bhi.n	80116ce <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80116b4:	697b      	ldr	r3, [r7, #20]
 80116b6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80116b8:	7afa      	ldrb	r2, [r7, #11]
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d112      	bne.n	80116e4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80116be:	4b13      	ldr	r3, [pc, #76]	; (801170c <tcp_kill_prio+0x98>)
 80116c0:	681a      	ldr	r2, [r3, #0]
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	6a1b      	ldr	r3, [r3, #32]
 80116c6:	1ad3      	subs	r3, r2, r3
 80116c8:	68fa      	ldr	r2, [r7, #12]
 80116ca:	429a      	cmp	r2, r3
 80116cc:	d80a      	bhi.n	80116e4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80116ce:	4b0f      	ldr	r3, [pc, #60]	; (801170c <tcp_kill_prio+0x98>)
 80116d0:	681a      	ldr	r2, [r3, #0]
 80116d2:	697b      	ldr	r3, [r7, #20]
 80116d4:	6a1b      	ldr	r3, [r3, #32]
 80116d6:	1ad3      	subs	r3, r2, r3
 80116d8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80116da:	697b      	ldr	r3, [r7, #20]
 80116dc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80116de:	697b      	ldr	r3, [r7, #20]
 80116e0:	7d5b      	ldrb	r3, [r3, #21]
 80116e2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80116e4:	697b      	ldr	r3, [r7, #20]
 80116e6:	68db      	ldr	r3, [r3, #12]
 80116e8:	617b      	str	r3, [r7, #20]
 80116ea:	697b      	ldr	r3, [r7, #20]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d1dc      	bne.n	80116aa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80116f0:	693b      	ldr	r3, [r7, #16]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d004      	beq.n	8011700 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80116f6:	6938      	ldr	r0, [r7, #16]
 80116f8:	f7ff f8f8 	bl	80108ec <tcp_abort>
 80116fc:	e000      	b.n	8011700 <tcp_kill_prio+0x8c>
    return;
 80116fe:	bf00      	nop
  }
}
 8011700:	3718      	adds	r7, #24
 8011702:	46bd      	mov	sp, r7
 8011704:	bd80      	pop	{r7, pc}
 8011706:	bf00      	nop
 8011708:	2001a9b0 	.word	0x2001a9b0
 801170c:	2001a9b4 	.word	0x2001a9b4

08011710 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b086      	sub	sp, #24
 8011714:	af00      	add	r7, sp, #0
 8011716:	4603      	mov	r3, r0
 8011718:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801171a:	79fb      	ldrb	r3, [r7, #7]
 801171c:	2b08      	cmp	r3, #8
 801171e:	d009      	beq.n	8011734 <tcp_kill_state+0x24>
 8011720:	79fb      	ldrb	r3, [r7, #7]
 8011722:	2b09      	cmp	r3, #9
 8011724:	d006      	beq.n	8011734 <tcp_kill_state+0x24>
 8011726:	4b1a      	ldr	r3, [pc, #104]	; (8011790 <tcp_kill_state+0x80>)
 8011728:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801172c:	4919      	ldr	r1, [pc, #100]	; (8011794 <tcp_kill_state+0x84>)
 801172e:	481a      	ldr	r0, [pc, #104]	; (8011798 <tcp_kill_state+0x88>)
 8011730:	f008 fc1c 	bl	8019f6c <iprintf>

  inactivity = 0;
 8011734:	2300      	movs	r3, #0
 8011736:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011738:	2300      	movs	r3, #0
 801173a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801173c:	4b17      	ldr	r3, [pc, #92]	; (801179c <tcp_kill_state+0x8c>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	617b      	str	r3, [r7, #20]
 8011742:	e017      	b.n	8011774 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011744:	697b      	ldr	r3, [r7, #20]
 8011746:	7d1b      	ldrb	r3, [r3, #20]
 8011748:	79fa      	ldrb	r2, [r7, #7]
 801174a:	429a      	cmp	r2, r3
 801174c:	d10f      	bne.n	801176e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801174e:	4b14      	ldr	r3, [pc, #80]	; (80117a0 <tcp_kill_state+0x90>)
 8011750:	681a      	ldr	r2, [r3, #0]
 8011752:	697b      	ldr	r3, [r7, #20]
 8011754:	6a1b      	ldr	r3, [r3, #32]
 8011756:	1ad3      	subs	r3, r2, r3
 8011758:	68fa      	ldr	r2, [r7, #12]
 801175a:	429a      	cmp	r2, r3
 801175c:	d807      	bhi.n	801176e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801175e:	4b10      	ldr	r3, [pc, #64]	; (80117a0 <tcp_kill_state+0x90>)
 8011760:	681a      	ldr	r2, [r3, #0]
 8011762:	697b      	ldr	r3, [r7, #20]
 8011764:	6a1b      	ldr	r3, [r3, #32]
 8011766:	1ad3      	subs	r3, r2, r3
 8011768:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801176a:	697b      	ldr	r3, [r7, #20]
 801176c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801176e:	697b      	ldr	r3, [r7, #20]
 8011770:	68db      	ldr	r3, [r3, #12]
 8011772:	617b      	str	r3, [r7, #20]
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d1e4      	bne.n	8011744 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801177a:	693b      	ldr	r3, [r7, #16]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d003      	beq.n	8011788 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011780:	2100      	movs	r1, #0
 8011782:	6938      	ldr	r0, [r7, #16]
 8011784:	f7fe fff4 	bl	8010770 <tcp_abandon>
  }
}
 8011788:	bf00      	nop
 801178a:	3718      	adds	r7, #24
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}
 8011790:	0801d1e4 	.word	0x0801d1e4
 8011794:	0801d770 	.word	0x0801d770
 8011798:	0801d228 	.word	0x0801d228
 801179c:	2001a9b0 	.word	0x2001a9b0
 80117a0:	2001a9b4 	.word	0x2001a9b4

080117a4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b084      	sub	sp, #16
 80117a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80117aa:	2300      	movs	r3, #0
 80117ac:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80117ae:	2300      	movs	r3, #0
 80117b0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80117b2:	4b12      	ldr	r3, [pc, #72]	; (80117fc <tcp_kill_timewait+0x58>)
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	60fb      	str	r3, [r7, #12]
 80117b8:	e012      	b.n	80117e0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80117ba:	4b11      	ldr	r3, [pc, #68]	; (8011800 <tcp_kill_timewait+0x5c>)
 80117bc:	681a      	ldr	r2, [r3, #0]
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	6a1b      	ldr	r3, [r3, #32]
 80117c2:	1ad3      	subs	r3, r2, r3
 80117c4:	687a      	ldr	r2, [r7, #4]
 80117c6:	429a      	cmp	r2, r3
 80117c8:	d807      	bhi.n	80117da <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80117ca:	4b0d      	ldr	r3, [pc, #52]	; (8011800 <tcp_kill_timewait+0x5c>)
 80117cc:	681a      	ldr	r2, [r3, #0]
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	6a1b      	ldr	r3, [r3, #32]
 80117d2:	1ad3      	subs	r3, r2, r3
 80117d4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	68db      	ldr	r3, [r3, #12]
 80117de:	60fb      	str	r3, [r7, #12]
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d1e9      	bne.n	80117ba <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80117e6:	68bb      	ldr	r3, [r7, #8]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d002      	beq.n	80117f2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80117ec:	68b8      	ldr	r0, [r7, #8]
 80117ee:	f7ff f87d 	bl	80108ec <tcp_abort>
  }
}
 80117f2:	bf00      	nop
 80117f4:	3710      	adds	r7, #16
 80117f6:	46bd      	mov	sp, r7
 80117f8:	bd80      	pop	{r7, pc}
 80117fa:	bf00      	nop
 80117fc:	2001a9c0 	.word	0x2001a9c0
 8011800:	2001a9b4 	.word	0x2001a9b4

08011804 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8011804:	b580      	push	{r7, lr}
 8011806:	b082      	sub	sp, #8
 8011808:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801180a:	4b10      	ldr	r3, [pc, #64]	; (801184c <tcp_handle_closepend+0x48>)
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011810:	e014      	b.n	801183c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	68db      	ldr	r3, [r3, #12]
 8011816:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	8b5b      	ldrh	r3, [r3, #26]
 801181c:	f003 0308 	and.w	r3, r3, #8
 8011820:	2b00      	cmp	r3, #0
 8011822:	d009      	beq.n	8011838 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	8b5b      	ldrh	r3, [r3, #26]
 8011828:	f023 0308 	bic.w	r3, r3, #8
 801182c:	b29a      	uxth	r2, r3
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8011832:	6878      	ldr	r0, [r7, #4]
 8011834:	f7fe ff06 	bl	8010644 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011838:	683b      	ldr	r3, [r7, #0]
 801183a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d1e7      	bne.n	8011812 <tcp_handle_closepend+0xe>
  }
}
 8011842:	bf00      	nop
 8011844:	bf00      	nop
 8011846:	3708      	adds	r7, #8
 8011848:	46bd      	mov	sp, r7
 801184a:	bd80      	pop	{r7, pc}
 801184c:	2001a9b0 	.word	0x2001a9b0

08011850 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b084      	sub	sp, #16
 8011854:	af00      	add	r7, sp, #0
 8011856:	4603      	mov	r3, r0
 8011858:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801185a:	2001      	movs	r0, #1
 801185c:	f7fd fbce 	bl	800effc <memp_malloc>
 8011860:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d126      	bne.n	80118b6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011868:	f7ff ffcc 	bl	8011804 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801186c:	f7ff ff9a 	bl	80117a4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011870:	2001      	movs	r0, #1
 8011872:	f7fd fbc3 	bl	800effc <memp_malloc>
 8011876:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d11b      	bne.n	80118b6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801187e:	2009      	movs	r0, #9
 8011880:	f7ff ff46 	bl	8011710 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011884:	2001      	movs	r0, #1
 8011886:	f7fd fbb9 	bl	800effc <memp_malloc>
 801188a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d111      	bne.n	80118b6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011892:	2008      	movs	r0, #8
 8011894:	f7ff ff3c 	bl	8011710 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011898:	2001      	movs	r0, #1
 801189a:	f7fd fbaf 	bl	800effc <memp_malloc>
 801189e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d107      	bne.n	80118b6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80118a6:	79fb      	ldrb	r3, [r7, #7]
 80118a8:	4618      	mov	r0, r3
 80118aa:	f7ff fee3 	bl	8011674 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80118ae:	2001      	movs	r0, #1
 80118b0:	f7fd fba4 	bl	800effc <memp_malloc>
 80118b4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d03f      	beq.n	801193c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80118bc:	229c      	movs	r2, #156	; 0x9c
 80118be:	2100      	movs	r1, #0
 80118c0:	68f8      	ldr	r0, [r7, #12]
 80118c2:	f007 fe37 	bl	8019534 <memset>
    pcb->prio = prio;
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	79fa      	ldrb	r2, [r7, #7]
 80118ca:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80118d2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80118dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	22ff      	movs	r2, #255	; 0xff
 80118ea:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	f44f 7206 	mov.w	r2, #536	; 0x218
 80118f2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	2206      	movs	r2, #6
 80118f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	2206      	movs	r2, #6
 8011900:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011908:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	2201      	movs	r2, #1
 801190e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8011912:	4b0d      	ldr	r3, [pc, #52]	; (8011948 <tcp_alloc+0xf8>)
 8011914:	681a      	ldr	r2, [r3, #0]
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801191a:	4b0c      	ldr	r3, [pc, #48]	; (801194c <tcp_alloc+0xfc>)
 801191c:	781a      	ldrb	r2, [r3, #0]
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8011928:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	4a08      	ldr	r2, [pc, #32]	; (8011950 <tcp_alloc+0x100>)
 8011930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	4a07      	ldr	r2, [pc, #28]	; (8011954 <tcp_alloc+0x104>)
 8011938:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801193c:	68fb      	ldr	r3, [r7, #12]
}
 801193e:	4618      	mov	r0, r3
 8011940:	3710      	adds	r7, #16
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}
 8011946:	bf00      	nop
 8011948:	2001a9b4 	.word	0x2001a9b4
 801194c:	2000079a 	.word	0x2000079a
 8011950:	08011609 	.word	0x08011609
 8011954:	006ddd00 	.word	0x006ddd00

08011958 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 801195c:	2040      	movs	r0, #64	; 0x40
 801195e:	f7ff ff77 	bl	8011850 <tcp_alloc>
 8011962:	4603      	mov	r3, r0
}
 8011964:	4618      	mov	r0, r3
 8011966:	bd80      	pop	{r7, pc}

08011968 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8011968:	b480      	push	{r7}
 801196a:	b083      	sub	sp, #12
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
 8011970:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d002      	beq.n	801197e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	683a      	ldr	r2, [r7, #0]
 801197c:	611a      	str	r2, [r3, #16]
  }
}
 801197e:	bf00      	nop
 8011980:	370c      	adds	r7, #12
 8011982:	46bd      	mov	sp, r7
 8011984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011988:	4770      	bx	lr
	...

0801198c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b082      	sub	sp, #8
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
 8011994:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d00e      	beq.n	80119ba <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	7d1b      	ldrb	r3, [r3, #20]
 80119a0:	2b01      	cmp	r3, #1
 80119a2:	d106      	bne.n	80119b2 <tcp_recv+0x26>
 80119a4:	4b07      	ldr	r3, [pc, #28]	; (80119c4 <tcp_recv+0x38>)
 80119a6:	f240 72df 	movw	r2, #2015	; 0x7df
 80119aa:	4907      	ldr	r1, [pc, #28]	; (80119c8 <tcp_recv+0x3c>)
 80119ac:	4807      	ldr	r0, [pc, #28]	; (80119cc <tcp_recv+0x40>)
 80119ae:	f008 fadd 	bl	8019f6c <iprintf>
    pcb->recv = recv;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	683a      	ldr	r2, [r7, #0]
 80119b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80119ba:	bf00      	nop
 80119bc:	3708      	adds	r7, #8
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd80      	pop	{r7, pc}
 80119c2:	bf00      	nop
 80119c4:	0801d1e4 	.word	0x0801d1e4
 80119c8:	0801d780 	.word	0x0801d780
 80119cc:	0801d228 	.word	0x0801d228

080119d0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b082      	sub	sp, #8
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
 80119d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d00e      	beq.n	80119fe <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	7d1b      	ldrb	r3, [r3, #20]
 80119e4:	2b01      	cmp	r3, #1
 80119e6:	d106      	bne.n	80119f6 <tcp_sent+0x26>
 80119e8:	4b07      	ldr	r3, [pc, #28]	; (8011a08 <tcp_sent+0x38>)
 80119ea:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80119ee:	4907      	ldr	r1, [pc, #28]	; (8011a0c <tcp_sent+0x3c>)
 80119f0:	4807      	ldr	r0, [pc, #28]	; (8011a10 <tcp_sent+0x40>)
 80119f2:	f008 fabb 	bl	8019f6c <iprintf>
    pcb->sent = sent;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	683a      	ldr	r2, [r7, #0]
 80119fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80119fe:	bf00      	nop
 8011a00:	3708      	adds	r7, #8
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bd80      	pop	{r7, pc}
 8011a06:	bf00      	nop
 8011a08:	0801d1e4 	.word	0x0801d1e4
 8011a0c:	0801d7a8 	.word	0x0801d7a8
 8011a10:	0801d228 	.word	0x0801d228

08011a14 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b082      	sub	sp, #8
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
 8011a1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d00e      	beq.n	8011a42 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	7d1b      	ldrb	r3, [r3, #20]
 8011a28:	2b01      	cmp	r3, #1
 8011a2a:	d106      	bne.n	8011a3a <tcp_err+0x26>
 8011a2c:	4b07      	ldr	r3, [pc, #28]	; (8011a4c <tcp_err+0x38>)
 8011a2e:	f640 020d 	movw	r2, #2061	; 0x80d
 8011a32:	4907      	ldr	r1, [pc, #28]	; (8011a50 <tcp_err+0x3c>)
 8011a34:	4807      	ldr	r0, [pc, #28]	; (8011a54 <tcp_err+0x40>)
 8011a36:	f008 fa99 	bl	8019f6c <iprintf>
    pcb->errf = err;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	683a      	ldr	r2, [r7, #0]
 8011a3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8011a42:	bf00      	nop
 8011a44:	3708      	adds	r7, #8
 8011a46:	46bd      	mov	sp, r7
 8011a48:	bd80      	pop	{r7, pc}
 8011a4a:	bf00      	nop
 8011a4c:	0801d1e4 	.word	0x0801d1e4
 8011a50:	0801d7d0 	.word	0x0801d7d0
 8011a54:	0801d228 	.word	0x0801d228

08011a58 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b084      	sub	sp, #16
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	60f8      	str	r0, [r7, #12]
 8011a60:	60b9      	str	r1, [r7, #8]
 8011a62:	4613      	mov	r3, r2
 8011a64:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d107      	bne.n	8011a7c <tcp_poll+0x24>
 8011a6c:	4b0e      	ldr	r3, [pc, #56]	; (8011aa8 <tcp_poll+0x50>)
 8011a6e:	f640 023d 	movw	r2, #2109	; 0x83d
 8011a72:	490e      	ldr	r1, [pc, #56]	; (8011aac <tcp_poll+0x54>)
 8011a74:	480e      	ldr	r0, [pc, #56]	; (8011ab0 <tcp_poll+0x58>)
 8011a76:	f008 fa79 	bl	8019f6c <iprintf>
 8011a7a:	e011      	b.n	8011aa0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	7d1b      	ldrb	r3, [r3, #20]
 8011a80:	2b01      	cmp	r3, #1
 8011a82:	d106      	bne.n	8011a92 <tcp_poll+0x3a>
 8011a84:	4b08      	ldr	r3, [pc, #32]	; (8011aa8 <tcp_poll+0x50>)
 8011a86:	f640 023e 	movw	r2, #2110	; 0x83e
 8011a8a:	490a      	ldr	r1, [pc, #40]	; (8011ab4 <tcp_poll+0x5c>)
 8011a8c:	4808      	ldr	r0, [pc, #32]	; (8011ab0 <tcp_poll+0x58>)
 8011a8e:	f008 fa6d 	bl	8019f6c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	68ba      	ldr	r2, [r7, #8]
 8011a96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	79fa      	ldrb	r2, [r7, #7]
 8011a9e:	775a      	strb	r2, [r3, #29]
}
 8011aa0:	3710      	adds	r7, #16
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}
 8011aa6:	bf00      	nop
 8011aa8:	0801d1e4 	.word	0x0801d1e4
 8011aac:	0801d7f8 	.word	0x0801d7f8
 8011ab0:	0801d228 	.word	0x0801d228
 8011ab4:	0801d810 	.word	0x0801d810

08011ab8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b082      	sub	sp, #8
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d107      	bne.n	8011ad6 <tcp_pcb_purge+0x1e>
 8011ac6:	4b21      	ldr	r3, [pc, #132]	; (8011b4c <tcp_pcb_purge+0x94>)
 8011ac8:	f640 0251 	movw	r2, #2129	; 0x851
 8011acc:	4920      	ldr	r1, [pc, #128]	; (8011b50 <tcp_pcb_purge+0x98>)
 8011ace:	4821      	ldr	r0, [pc, #132]	; (8011b54 <tcp_pcb_purge+0x9c>)
 8011ad0:	f008 fa4c 	bl	8019f6c <iprintf>
 8011ad4:	e037      	b.n	8011b46 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	7d1b      	ldrb	r3, [r3, #20]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d033      	beq.n	8011b46 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011ae2:	2b0a      	cmp	r3, #10
 8011ae4:	d02f      	beq.n	8011b46 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011aea:	2b01      	cmp	r3, #1
 8011aec:	d02b      	beq.n	8011b46 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d007      	beq.n	8011b06 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011afa:	4618      	mov	r0, r3
 8011afc:	f7fe f8dc 	bl	800fcb8 <pbuf_free>
      pcb->refused_data = NULL;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	2200      	movs	r2, #0
 8011b04:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d002      	beq.n	8011b14 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011b0e:	6878      	ldr	r0, [r7, #4]
 8011b10:	f000 f986 	bl	8011e20 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b1a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b20:	4618      	mov	r0, r3
 8011b22:	f7ff fd17 	bl	8011554 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f7ff fd12 	bl	8011554 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2200      	movs	r2, #0
 8011b34:	66da      	str	r2, [r3, #108]	; 0x6c
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	2200      	movs	r2, #0
 8011b42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8011b46:	3708      	adds	r7, #8
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd80      	pop	{r7, pc}
 8011b4c:	0801d1e4 	.word	0x0801d1e4
 8011b50:	0801d830 	.word	0x0801d830
 8011b54:	0801d228 	.word	0x0801d228

08011b58 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b084      	sub	sp, #16
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
 8011b60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8011b62:	683b      	ldr	r3, [r7, #0]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d106      	bne.n	8011b76 <tcp_pcb_remove+0x1e>
 8011b68:	4b3e      	ldr	r3, [pc, #248]	; (8011c64 <tcp_pcb_remove+0x10c>)
 8011b6a:	f640 0283 	movw	r2, #2179	; 0x883
 8011b6e:	493e      	ldr	r1, [pc, #248]	; (8011c68 <tcp_pcb_remove+0x110>)
 8011b70:	483e      	ldr	r0, [pc, #248]	; (8011c6c <tcp_pcb_remove+0x114>)
 8011b72:	f008 f9fb 	bl	8019f6c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d106      	bne.n	8011b8a <tcp_pcb_remove+0x32>
 8011b7c:	4b39      	ldr	r3, [pc, #228]	; (8011c64 <tcp_pcb_remove+0x10c>)
 8011b7e:	f640 0284 	movw	r2, #2180	; 0x884
 8011b82:	493b      	ldr	r1, [pc, #236]	; (8011c70 <tcp_pcb_remove+0x118>)
 8011b84:	4839      	ldr	r0, [pc, #228]	; (8011c6c <tcp_pcb_remove+0x114>)
 8011b86:	f008 f9f1 	bl	8019f6c <iprintf>

  TCP_RMV(pcblist, pcb);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	683a      	ldr	r2, [r7, #0]
 8011b90:	429a      	cmp	r2, r3
 8011b92:	d105      	bne.n	8011ba0 <tcp_pcb_remove+0x48>
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	68da      	ldr	r2, [r3, #12]
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	601a      	str	r2, [r3, #0]
 8011b9e:	e013      	b.n	8011bc8 <tcp_pcb_remove+0x70>
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	60fb      	str	r3, [r7, #12]
 8011ba6:	e00c      	b.n	8011bc2 <tcp_pcb_remove+0x6a>
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	68db      	ldr	r3, [r3, #12]
 8011bac:	683a      	ldr	r2, [r7, #0]
 8011bae:	429a      	cmp	r2, r3
 8011bb0:	d104      	bne.n	8011bbc <tcp_pcb_remove+0x64>
 8011bb2:	683b      	ldr	r3, [r7, #0]
 8011bb4:	68da      	ldr	r2, [r3, #12]
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	60da      	str	r2, [r3, #12]
 8011bba:	e005      	b.n	8011bc8 <tcp_pcb_remove+0x70>
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	68db      	ldr	r3, [r3, #12]
 8011bc0:	60fb      	str	r3, [r7, #12]
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d1ef      	bne.n	8011ba8 <tcp_pcb_remove+0x50>
 8011bc8:	683b      	ldr	r3, [r7, #0]
 8011bca:	2200      	movs	r2, #0
 8011bcc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011bce:	6838      	ldr	r0, [r7, #0]
 8011bd0:	f7ff ff72 	bl	8011ab8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011bd4:	683b      	ldr	r3, [r7, #0]
 8011bd6:	7d1b      	ldrb	r3, [r3, #20]
 8011bd8:	2b0a      	cmp	r3, #10
 8011bda:	d013      	beq.n	8011c04 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011be0:	2b01      	cmp	r3, #1
 8011be2:	d00f      	beq.n	8011c04 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	8b5b      	ldrh	r3, [r3, #26]
 8011be8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d009      	beq.n	8011c04 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	8b5b      	ldrh	r3, [r3, #26]
 8011bf4:	f043 0302 	orr.w	r3, r3, #2
 8011bf8:	b29a      	uxth	r2, r3
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011bfe:	6838      	ldr	r0, [r7, #0]
 8011c00:	f003 fbc6 	bl	8015390 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011c04:	683b      	ldr	r3, [r7, #0]
 8011c06:	7d1b      	ldrb	r3, [r3, #20]
 8011c08:	2b01      	cmp	r3, #1
 8011c0a:	d020      	beq.n	8011c4e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d006      	beq.n	8011c22 <tcp_pcb_remove+0xca>
 8011c14:	4b13      	ldr	r3, [pc, #76]	; (8011c64 <tcp_pcb_remove+0x10c>)
 8011c16:	f640 0293 	movw	r2, #2195	; 0x893
 8011c1a:	4916      	ldr	r1, [pc, #88]	; (8011c74 <tcp_pcb_remove+0x11c>)
 8011c1c:	4813      	ldr	r0, [pc, #76]	; (8011c6c <tcp_pcb_remove+0x114>)
 8011c1e:	f008 f9a5 	bl	8019f6c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d006      	beq.n	8011c38 <tcp_pcb_remove+0xe0>
 8011c2a:	4b0e      	ldr	r3, [pc, #56]	; (8011c64 <tcp_pcb_remove+0x10c>)
 8011c2c:	f640 0294 	movw	r2, #2196	; 0x894
 8011c30:	4911      	ldr	r1, [pc, #68]	; (8011c78 <tcp_pcb_remove+0x120>)
 8011c32:	480e      	ldr	r0, [pc, #56]	; (8011c6c <tcp_pcb_remove+0x114>)
 8011c34:	f008 f99a 	bl	8019f6c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011c38:	683b      	ldr	r3, [r7, #0]
 8011c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d006      	beq.n	8011c4e <tcp_pcb_remove+0xf6>
 8011c40:	4b08      	ldr	r3, [pc, #32]	; (8011c64 <tcp_pcb_remove+0x10c>)
 8011c42:	f640 0296 	movw	r2, #2198	; 0x896
 8011c46:	490d      	ldr	r1, [pc, #52]	; (8011c7c <tcp_pcb_remove+0x124>)
 8011c48:	4808      	ldr	r0, [pc, #32]	; (8011c6c <tcp_pcb_remove+0x114>)
 8011c4a:	f008 f98f 	bl	8019f6c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011c4e:	683b      	ldr	r3, [r7, #0]
 8011c50:	2200      	movs	r2, #0
 8011c52:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	2200      	movs	r2, #0
 8011c58:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011c5a:	bf00      	nop
 8011c5c:	3710      	adds	r7, #16
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	bd80      	pop	{r7, pc}
 8011c62:	bf00      	nop
 8011c64:	0801d1e4 	.word	0x0801d1e4
 8011c68:	0801d84c 	.word	0x0801d84c
 8011c6c:	0801d228 	.word	0x0801d228
 8011c70:	0801d868 	.word	0x0801d868
 8011c74:	0801d888 	.word	0x0801d888
 8011c78:	0801d8a0 	.word	0x0801d8a0
 8011c7c:	0801d8bc 	.word	0x0801d8bc

08011c80 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b082      	sub	sp, #8
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d106      	bne.n	8011c9c <tcp_next_iss+0x1c>
 8011c8e:	4b0a      	ldr	r3, [pc, #40]	; (8011cb8 <tcp_next_iss+0x38>)
 8011c90:	f640 02af 	movw	r2, #2223	; 0x8af
 8011c94:	4909      	ldr	r1, [pc, #36]	; (8011cbc <tcp_next_iss+0x3c>)
 8011c96:	480a      	ldr	r0, [pc, #40]	; (8011cc0 <tcp_next_iss+0x40>)
 8011c98:	f008 f968 	bl	8019f6c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011c9c:	4b09      	ldr	r3, [pc, #36]	; (8011cc4 <tcp_next_iss+0x44>)
 8011c9e:	681a      	ldr	r2, [r3, #0]
 8011ca0:	4b09      	ldr	r3, [pc, #36]	; (8011cc8 <tcp_next_iss+0x48>)
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	4413      	add	r3, r2
 8011ca6:	4a07      	ldr	r2, [pc, #28]	; (8011cc4 <tcp_next_iss+0x44>)
 8011ca8:	6013      	str	r3, [r2, #0]
  return iss;
 8011caa:	4b06      	ldr	r3, [pc, #24]	; (8011cc4 <tcp_next_iss+0x44>)
 8011cac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011cae:	4618      	mov	r0, r3
 8011cb0:	3708      	adds	r7, #8
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	bd80      	pop	{r7, pc}
 8011cb6:	bf00      	nop
 8011cb8:	0801d1e4 	.word	0x0801d1e4
 8011cbc:	0801d8d4 	.word	0x0801d8d4
 8011cc0:	0801d228 	.word	0x0801d228
 8011cc4:	20000538 	.word	0x20000538
 8011cc8:	2001a9b4 	.word	0x2001a9b4

08011ccc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b086      	sub	sp, #24
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	60b9      	str	r1, [r7, #8]
 8011cd6:	607a      	str	r2, [r7, #4]
 8011cd8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d106      	bne.n	8011cee <tcp_eff_send_mss_netif+0x22>
 8011ce0:	4b14      	ldr	r3, [pc, #80]	; (8011d34 <tcp_eff_send_mss_netif+0x68>)
 8011ce2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8011ce6:	4914      	ldr	r1, [pc, #80]	; (8011d38 <tcp_eff_send_mss_netif+0x6c>)
 8011ce8:	4814      	ldr	r0, [pc, #80]	; (8011d3c <tcp_eff_send_mss_netif+0x70>)
 8011cea:	f008 f93f 	bl	8019f6c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011cee:	68bb      	ldr	r3, [r7, #8]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d101      	bne.n	8011cf8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8011cf4:	89fb      	ldrh	r3, [r7, #14]
 8011cf6:	e019      	b.n	8011d2c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011cf8:	68bb      	ldr	r3, [r7, #8]
 8011cfa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011cfc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011cfe:	8afb      	ldrh	r3, [r7, #22]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d012      	beq.n	8011d2a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8011d04:	2328      	movs	r3, #40	; 0x28
 8011d06:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011d08:	8afa      	ldrh	r2, [r7, #22]
 8011d0a:	8abb      	ldrh	r3, [r7, #20]
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d904      	bls.n	8011d1a <tcp_eff_send_mss_netif+0x4e>
 8011d10:	8afa      	ldrh	r2, [r7, #22]
 8011d12:	8abb      	ldrh	r3, [r7, #20]
 8011d14:	1ad3      	subs	r3, r2, r3
 8011d16:	b29b      	uxth	r3, r3
 8011d18:	e000      	b.n	8011d1c <tcp_eff_send_mss_netif+0x50>
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011d1e:	8a7a      	ldrh	r2, [r7, #18]
 8011d20:	89fb      	ldrh	r3, [r7, #14]
 8011d22:	4293      	cmp	r3, r2
 8011d24:	bf28      	it	cs
 8011d26:	4613      	movcs	r3, r2
 8011d28:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011d2a:	89fb      	ldrh	r3, [r7, #14]
}
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	3718      	adds	r7, #24
 8011d30:	46bd      	mov	sp, r7
 8011d32:	bd80      	pop	{r7, pc}
 8011d34:	0801d1e4 	.word	0x0801d1e4
 8011d38:	0801d8f0 	.word	0x0801d8f0
 8011d3c:	0801d228 	.word	0x0801d228

08011d40 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b084      	sub	sp, #16
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
 8011d48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d119      	bne.n	8011d88 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011d54:	4b10      	ldr	r3, [pc, #64]	; (8011d98 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8011d56:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8011d5a:	4910      	ldr	r1, [pc, #64]	; (8011d9c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011d5c:	4810      	ldr	r0, [pc, #64]	; (8011da0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8011d5e:	f008 f905 	bl	8019f6c <iprintf>

  while (pcb != NULL) {
 8011d62:	e011      	b.n	8011d88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	681a      	ldr	r2, [r3, #0]
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	429a      	cmp	r2, r3
 8011d6e:	d108      	bne.n	8011d82 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	68db      	ldr	r3, [r3, #12]
 8011d74:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011d76:	68f8      	ldr	r0, [r7, #12]
 8011d78:	f7fe fdb8 	bl	80108ec <tcp_abort>
      pcb = next;
 8011d7c:	68bb      	ldr	r3, [r7, #8]
 8011d7e:	60fb      	str	r3, [r7, #12]
 8011d80:	e002      	b.n	8011d88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	68db      	ldr	r3, [r3, #12]
 8011d86:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d1ea      	bne.n	8011d64 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8011d8e:	bf00      	nop
 8011d90:	bf00      	nop
 8011d92:	3710      	adds	r7, #16
 8011d94:	46bd      	mov	sp, r7
 8011d96:	bd80      	pop	{r7, pc}
 8011d98:	0801d1e4 	.word	0x0801d1e4
 8011d9c:	0801d918 	.word	0x0801d918
 8011da0:	0801d228 	.word	0x0801d228

08011da4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b084      	sub	sp, #16
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
 8011dac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d02a      	beq.n	8011e0a <tcp_netif_ip_addr_changed+0x66>
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d026      	beq.n	8011e0a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011dbc:	4b15      	ldr	r3, [pc, #84]	; (8011e14 <tcp_netif_ip_addr_changed+0x70>)
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	4619      	mov	r1, r3
 8011dc2:	6878      	ldr	r0, [r7, #4]
 8011dc4:	f7ff ffbc 	bl	8011d40 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011dc8:	4b13      	ldr	r3, [pc, #76]	; (8011e18 <tcp_netif_ip_addr_changed+0x74>)
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	4619      	mov	r1, r3
 8011dce:	6878      	ldr	r0, [r7, #4]
 8011dd0:	f7ff ffb6 	bl	8011d40 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d017      	beq.n	8011e0a <tcp_netif_ip_addr_changed+0x66>
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d013      	beq.n	8011e0a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011de2:	4b0e      	ldr	r3, [pc, #56]	; (8011e1c <tcp_netif_ip_addr_changed+0x78>)
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	60fb      	str	r3, [r7, #12]
 8011de8:	e00c      	b.n	8011e04 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	681a      	ldr	r2, [r3, #0]
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	429a      	cmp	r2, r3
 8011df4:	d103      	bne.n	8011dfe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8011df6:	683b      	ldr	r3, [r7, #0]
 8011df8:	681a      	ldr	r2, [r3, #0]
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	68db      	ldr	r3, [r3, #12]
 8011e02:	60fb      	str	r3, [r7, #12]
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d1ef      	bne.n	8011dea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011e0a:	bf00      	nop
 8011e0c:	3710      	adds	r7, #16
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}
 8011e12:	bf00      	nop
 8011e14:	2001a9b0 	.word	0x2001a9b0
 8011e18:	2001a9bc 	.word	0x2001a9bc
 8011e1c:	2001a9b8 	.word	0x2001a9b8

08011e20 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b082      	sub	sp, #8
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d007      	beq.n	8011e40 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e34:	4618      	mov	r0, r3
 8011e36:	f7ff fb8d 	bl	8011554 <tcp_segs_free>
    pcb->ooseq = NULL;
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011e40:	bf00      	nop
 8011e42:	3708      	adds	r7, #8
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}

08011e48 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011e48:	b590      	push	{r4, r7, lr}
 8011e4a:	b08d      	sub	sp, #52	; 0x34
 8011e4c:	af04      	add	r7, sp, #16
 8011e4e:	6078      	str	r0, [r7, #4]
 8011e50:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d105      	bne.n	8011e64 <tcp_input+0x1c>
 8011e58:	4b9b      	ldr	r3, [pc, #620]	; (80120c8 <tcp_input+0x280>)
 8011e5a:	2283      	movs	r2, #131	; 0x83
 8011e5c:	499b      	ldr	r1, [pc, #620]	; (80120cc <tcp_input+0x284>)
 8011e5e:	489c      	ldr	r0, [pc, #624]	; (80120d0 <tcp_input+0x288>)
 8011e60:	f008 f884 	bl	8019f6c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	685b      	ldr	r3, [r3, #4]
 8011e68:	4a9a      	ldr	r2, [pc, #616]	; (80120d4 <tcp_input+0x28c>)
 8011e6a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	895b      	ldrh	r3, [r3, #10]
 8011e70:	2b13      	cmp	r3, #19
 8011e72:	f240 83c4 	bls.w	80125fe <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011e76:	4b98      	ldr	r3, [pc, #608]	; (80120d8 <tcp_input+0x290>)
 8011e78:	695b      	ldr	r3, [r3, #20]
 8011e7a:	4a97      	ldr	r2, [pc, #604]	; (80120d8 <tcp_input+0x290>)
 8011e7c:	6812      	ldr	r2, [r2, #0]
 8011e7e:	4611      	mov	r1, r2
 8011e80:	4618      	mov	r0, r3
 8011e82:	f006 f86d 	bl	8017f60 <ip4_addr_isbroadcast_u32>
 8011e86:	4603      	mov	r3, r0
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	f040 83ba 	bne.w	8012602 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011e8e:	4b92      	ldr	r3, [pc, #584]	; (80120d8 <tcp_input+0x290>)
 8011e90:	695b      	ldr	r3, [r3, #20]
 8011e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011e96:	2be0      	cmp	r3, #224	; 0xe0
 8011e98:	f000 83b3 	beq.w	8012602 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8011e9c:	4b8d      	ldr	r3, [pc, #564]	; (80120d4 <tcp_input+0x28c>)
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	899b      	ldrh	r3, [r3, #12]
 8011ea2:	b29b      	uxth	r3, r3
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	f7fc fc54 	bl	800e752 <lwip_htons>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	0b1b      	lsrs	r3, r3, #12
 8011eae:	b29b      	uxth	r3, r3
 8011eb0:	b2db      	uxtb	r3, r3
 8011eb2:	009b      	lsls	r3, r3, #2
 8011eb4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8011eb6:	7cbb      	ldrb	r3, [r7, #18]
 8011eb8:	2b13      	cmp	r3, #19
 8011eba:	f240 83a4 	bls.w	8012606 <tcp_input+0x7be>
 8011ebe:	7cbb      	ldrb	r3, [r7, #18]
 8011ec0:	b29a      	uxth	r2, r3
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	891b      	ldrh	r3, [r3, #8]
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	f200 839d 	bhi.w	8012606 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8011ecc:	7cbb      	ldrb	r3, [r7, #18]
 8011ece:	b29b      	uxth	r3, r3
 8011ed0:	3b14      	subs	r3, #20
 8011ed2:	b29a      	uxth	r2, r3
 8011ed4:	4b81      	ldr	r3, [pc, #516]	; (80120dc <tcp_input+0x294>)
 8011ed6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8011ed8:	4b81      	ldr	r3, [pc, #516]	; (80120e0 <tcp_input+0x298>)
 8011eda:	2200      	movs	r2, #0
 8011edc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	895a      	ldrh	r2, [r3, #10]
 8011ee2:	7cbb      	ldrb	r3, [r7, #18]
 8011ee4:	b29b      	uxth	r3, r3
 8011ee6:	429a      	cmp	r2, r3
 8011ee8:	d309      	bcc.n	8011efe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011eea:	4b7c      	ldr	r3, [pc, #496]	; (80120dc <tcp_input+0x294>)
 8011eec:	881a      	ldrh	r2, [r3, #0]
 8011eee:	4b7d      	ldr	r3, [pc, #500]	; (80120e4 <tcp_input+0x29c>)
 8011ef0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8011ef2:	7cbb      	ldrb	r3, [r7, #18]
 8011ef4:	4619      	mov	r1, r3
 8011ef6:	6878      	ldr	r0, [r7, #4]
 8011ef8:	f7fd fe58 	bl	800fbac <pbuf_remove_header>
 8011efc:	e04e      	b.n	8011f9c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d105      	bne.n	8011f12 <tcp_input+0xca>
 8011f06:	4b70      	ldr	r3, [pc, #448]	; (80120c8 <tcp_input+0x280>)
 8011f08:	22c2      	movs	r2, #194	; 0xc2
 8011f0a:	4977      	ldr	r1, [pc, #476]	; (80120e8 <tcp_input+0x2a0>)
 8011f0c:	4870      	ldr	r0, [pc, #448]	; (80120d0 <tcp_input+0x288>)
 8011f0e:	f008 f82d 	bl	8019f6c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8011f12:	2114      	movs	r1, #20
 8011f14:	6878      	ldr	r0, [r7, #4]
 8011f16:	f7fd fe49 	bl	800fbac <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	895a      	ldrh	r2, [r3, #10]
 8011f1e:	4b71      	ldr	r3, [pc, #452]	; (80120e4 <tcp_input+0x29c>)
 8011f20:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8011f22:	4b6e      	ldr	r3, [pc, #440]	; (80120dc <tcp_input+0x294>)
 8011f24:	881a      	ldrh	r2, [r3, #0]
 8011f26:	4b6f      	ldr	r3, [pc, #444]	; (80120e4 <tcp_input+0x29c>)
 8011f28:	881b      	ldrh	r3, [r3, #0]
 8011f2a:	1ad3      	subs	r3, r2, r3
 8011f2c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8011f2e:	4b6d      	ldr	r3, [pc, #436]	; (80120e4 <tcp_input+0x29c>)
 8011f30:	881b      	ldrh	r3, [r3, #0]
 8011f32:	4619      	mov	r1, r3
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f7fd fe39 	bl	800fbac <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	895b      	ldrh	r3, [r3, #10]
 8011f40:	8a3a      	ldrh	r2, [r7, #16]
 8011f42:	429a      	cmp	r2, r3
 8011f44:	f200 8361 	bhi.w	801260a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	685b      	ldr	r3, [r3, #4]
 8011f4e:	4a64      	ldr	r2, [pc, #400]	; (80120e0 <tcp_input+0x298>)
 8011f50:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	8a3a      	ldrh	r2, [r7, #16]
 8011f58:	4611      	mov	r1, r2
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f7fd fe26 	bl	800fbac <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	891a      	ldrh	r2, [r3, #8]
 8011f64:	8a3b      	ldrh	r3, [r7, #16]
 8011f66:	1ad3      	subs	r3, r2, r3
 8011f68:	b29a      	uxth	r2, r3
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	895b      	ldrh	r3, [r3, #10]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d005      	beq.n	8011f82 <tcp_input+0x13a>
 8011f76:	4b54      	ldr	r3, [pc, #336]	; (80120c8 <tcp_input+0x280>)
 8011f78:	22df      	movs	r2, #223	; 0xdf
 8011f7a:	495c      	ldr	r1, [pc, #368]	; (80120ec <tcp_input+0x2a4>)
 8011f7c:	4854      	ldr	r0, [pc, #336]	; (80120d0 <tcp_input+0x288>)
 8011f7e:	f007 fff5 	bl	8019f6c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	891a      	ldrh	r2, [r3, #8]
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	891b      	ldrh	r3, [r3, #8]
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	d005      	beq.n	8011f9c <tcp_input+0x154>
 8011f90:	4b4d      	ldr	r3, [pc, #308]	; (80120c8 <tcp_input+0x280>)
 8011f92:	22e0      	movs	r2, #224	; 0xe0
 8011f94:	4956      	ldr	r1, [pc, #344]	; (80120f0 <tcp_input+0x2a8>)
 8011f96:	484e      	ldr	r0, [pc, #312]	; (80120d0 <tcp_input+0x288>)
 8011f98:	f007 ffe8 	bl	8019f6c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8011f9c:	4b4d      	ldr	r3, [pc, #308]	; (80120d4 <tcp_input+0x28c>)
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	881b      	ldrh	r3, [r3, #0]
 8011fa2:	b29b      	uxth	r3, r3
 8011fa4:	4a4b      	ldr	r2, [pc, #300]	; (80120d4 <tcp_input+0x28c>)
 8011fa6:	6814      	ldr	r4, [r2, #0]
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f7fc fbd2 	bl	800e752 <lwip_htons>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011fb2:	4b48      	ldr	r3, [pc, #288]	; (80120d4 <tcp_input+0x28c>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	885b      	ldrh	r3, [r3, #2]
 8011fb8:	b29b      	uxth	r3, r3
 8011fba:	4a46      	ldr	r2, [pc, #280]	; (80120d4 <tcp_input+0x28c>)
 8011fbc:	6814      	ldr	r4, [r2, #0]
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f7fc fbc7 	bl	800e752 <lwip_htons>
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011fc8:	4b42      	ldr	r3, [pc, #264]	; (80120d4 <tcp_input+0x28c>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	685b      	ldr	r3, [r3, #4]
 8011fce:	4a41      	ldr	r2, [pc, #260]	; (80120d4 <tcp_input+0x28c>)
 8011fd0:	6814      	ldr	r4, [r2, #0]
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	f7fc fbd2 	bl	800e77c <lwip_htonl>
 8011fd8:	4603      	mov	r3, r0
 8011fda:	6063      	str	r3, [r4, #4]
 8011fdc:	6863      	ldr	r3, [r4, #4]
 8011fde:	4a45      	ldr	r2, [pc, #276]	; (80120f4 <tcp_input+0x2ac>)
 8011fe0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011fe2:	4b3c      	ldr	r3, [pc, #240]	; (80120d4 <tcp_input+0x28c>)
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	689b      	ldr	r3, [r3, #8]
 8011fe8:	4a3a      	ldr	r2, [pc, #232]	; (80120d4 <tcp_input+0x28c>)
 8011fea:	6814      	ldr	r4, [r2, #0]
 8011fec:	4618      	mov	r0, r3
 8011fee:	f7fc fbc5 	bl	800e77c <lwip_htonl>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	60a3      	str	r3, [r4, #8]
 8011ff6:	68a3      	ldr	r3, [r4, #8]
 8011ff8:	4a3f      	ldr	r2, [pc, #252]	; (80120f8 <tcp_input+0x2b0>)
 8011ffa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011ffc:	4b35      	ldr	r3, [pc, #212]	; (80120d4 <tcp_input+0x28c>)
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	89db      	ldrh	r3, [r3, #14]
 8012002:	b29b      	uxth	r3, r3
 8012004:	4a33      	ldr	r2, [pc, #204]	; (80120d4 <tcp_input+0x28c>)
 8012006:	6814      	ldr	r4, [r2, #0]
 8012008:	4618      	mov	r0, r3
 801200a:	f7fc fba2 	bl	800e752 <lwip_htons>
 801200e:	4603      	mov	r3, r0
 8012010:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012012:	4b30      	ldr	r3, [pc, #192]	; (80120d4 <tcp_input+0x28c>)
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	899b      	ldrh	r3, [r3, #12]
 8012018:	b29b      	uxth	r3, r3
 801201a:	4618      	mov	r0, r3
 801201c:	f7fc fb99 	bl	800e752 <lwip_htons>
 8012020:	4603      	mov	r3, r0
 8012022:	b2db      	uxtb	r3, r3
 8012024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012028:	b2da      	uxtb	r2, r3
 801202a:	4b34      	ldr	r3, [pc, #208]	; (80120fc <tcp_input+0x2b4>)
 801202c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	891a      	ldrh	r2, [r3, #8]
 8012032:	4b33      	ldr	r3, [pc, #204]	; (8012100 <tcp_input+0x2b8>)
 8012034:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012036:	4b31      	ldr	r3, [pc, #196]	; (80120fc <tcp_input+0x2b4>)
 8012038:	781b      	ldrb	r3, [r3, #0]
 801203a:	f003 0303 	and.w	r3, r3, #3
 801203e:	2b00      	cmp	r3, #0
 8012040:	d00c      	beq.n	801205c <tcp_input+0x214>
    tcplen++;
 8012042:	4b2f      	ldr	r3, [pc, #188]	; (8012100 <tcp_input+0x2b8>)
 8012044:	881b      	ldrh	r3, [r3, #0]
 8012046:	3301      	adds	r3, #1
 8012048:	b29a      	uxth	r2, r3
 801204a:	4b2d      	ldr	r3, [pc, #180]	; (8012100 <tcp_input+0x2b8>)
 801204c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	891a      	ldrh	r2, [r3, #8]
 8012052:	4b2b      	ldr	r3, [pc, #172]	; (8012100 <tcp_input+0x2b8>)
 8012054:	881b      	ldrh	r3, [r3, #0]
 8012056:	429a      	cmp	r2, r3
 8012058:	f200 82d9 	bhi.w	801260e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801205c:	2300      	movs	r3, #0
 801205e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012060:	4b28      	ldr	r3, [pc, #160]	; (8012104 <tcp_input+0x2bc>)
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	61fb      	str	r3, [r7, #28]
 8012066:	e09d      	b.n	80121a4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012068:	69fb      	ldr	r3, [r7, #28]
 801206a:	7d1b      	ldrb	r3, [r3, #20]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d105      	bne.n	801207c <tcp_input+0x234>
 8012070:	4b15      	ldr	r3, [pc, #84]	; (80120c8 <tcp_input+0x280>)
 8012072:	22fb      	movs	r2, #251	; 0xfb
 8012074:	4924      	ldr	r1, [pc, #144]	; (8012108 <tcp_input+0x2c0>)
 8012076:	4816      	ldr	r0, [pc, #88]	; (80120d0 <tcp_input+0x288>)
 8012078:	f007 ff78 	bl	8019f6c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801207c:	69fb      	ldr	r3, [r7, #28]
 801207e:	7d1b      	ldrb	r3, [r3, #20]
 8012080:	2b0a      	cmp	r3, #10
 8012082:	d105      	bne.n	8012090 <tcp_input+0x248>
 8012084:	4b10      	ldr	r3, [pc, #64]	; (80120c8 <tcp_input+0x280>)
 8012086:	22fc      	movs	r2, #252	; 0xfc
 8012088:	4920      	ldr	r1, [pc, #128]	; (801210c <tcp_input+0x2c4>)
 801208a:	4811      	ldr	r0, [pc, #68]	; (80120d0 <tcp_input+0x288>)
 801208c:	f007 ff6e 	bl	8019f6c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012090:	69fb      	ldr	r3, [r7, #28]
 8012092:	7d1b      	ldrb	r3, [r3, #20]
 8012094:	2b01      	cmp	r3, #1
 8012096:	d105      	bne.n	80120a4 <tcp_input+0x25c>
 8012098:	4b0b      	ldr	r3, [pc, #44]	; (80120c8 <tcp_input+0x280>)
 801209a:	22fd      	movs	r2, #253	; 0xfd
 801209c:	491c      	ldr	r1, [pc, #112]	; (8012110 <tcp_input+0x2c8>)
 801209e:	480c      	ldr	r0, [pc, #48]	; (80120d0 <tcp_input+0x288>)
 80120a0:	f007 ff64 	bl	8019f6c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80120a4:	69fb      	ldr	r3, [r7, #28]
 80120a6:	7a1b      	ldrb	r3, [r3, #8]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d033      	beq.n	8012114 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80120ac:	69fb      	ldr	r3, [r7, #28]
 80120ae:	7a1a      	ldrb	r2, [r3, #8]
 80120b0:	4b09      	ldr	r3, [pc, #36]	; (80120d8 <tcp_input+0x290>)
 80120b2:	685b      	ldr	r3, [r3, #4]
 80120b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80120b8:	3301      	adds	r3, #1
 80120ba:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80120bc:	429a      	cmp	r2, r3
 80120be:	d029      	beq.n	8012114 <tcp_input+0x2cc>
      prev = pcb;
 80120c0:	69fb      	ldr	r3, [r7, #28]
 80120c2:	61bb      	str	r3, [r7, #24]
      continue;
 80120c4:	e06b      	b.n	801219e <tcp_input+0x356>
 80120c6:	bf00      	nop
 80120c8:	0801d94c 	.word	0x0801d94c
 80120cc:	0801d980 	.word	0x0801d980
 80120d0:	0801d998 	.word	0x0801d998
 80120d4:	200007ac 	.word	0x200007ac
 80120d8:	20007c2c 	.word	0x20007c2c
 80120dc:	200007b0 	.word	0x200007b0
 80120e0:	200007b4 	.word	0x200007b4
 80120e4:	200007b2 	.word	0x200007b2
 80120e8:	0801d9c0 	.word	0x0801d9c0
 80120ec:	0801d9d0 	.word	0x0801d9d0
 80120f0:	0801d9dc 	.word	0x0801d9dc
 80120f4:	200007bc 	.word	0x200007bc
 80120f8:	200007c0 	.word	0x200007c0
 80120fc:	200007c8 	.word	0x200007c8
 8012100:	200007c6 	.word	0x200007c6
 8012104:	2001a9b0 	.word	0x2001a9b0
 8012108:	0801d9fc 	.word	0x0801d9fc
 801210c:	0801da24 	.word	0x0801da24
 8012110:	0801da50 	.word	0x0801da50
    }

    if (pcb->remote_port == tcphdr->src &&
 8012114:	69fb      	ldr	r3, [r7, #28]
 8012116:	8b1a      	ldrh	r2, [r3, #24]
 8012118:	4b94      	ldr	r3, [pc, #592]	; (801236c <tcp_input+0x524>)
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	881b      	ldrh	r3, [r3, #0]
 801211e:	b29b      	uxth	r3, r3
 8012120:	429a      	cmp	r2, r3
 8012122:	d13a      	bne.n	801219a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012124:	69fb      	ldr	r3, [r7, #28]
 8012126:	8ada      	ldrh	r2, [r3, #22]
 8012128:	4b90      	ldr	r3, [pc, #576]	; (801236c <tcp_input+0x524>)
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	885b      	ldrh	r3, [r3, #2]
 801212e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012130:	429a      	cmp	r2, r3
 8012132:	d132      	bne.n	801219a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012134:	69fb      	ldr	r3, [r7, #28]
 8012136:	685a      	ldr	r2, [r3, #4]
 8012138:	4b8d      	ldr	r3, [pc, #564]	; (8012370 <tcp_input+0x528>)
 801213a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801213c:	429a      	cmp	r2, r3
 801213e:	d12c      	bne.n	801219a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012140:	69fb      	ldr	r3, [r7, #28]
 8012142:	681a      	ldr	r2, [r3, #0]
 8012144:	4b8a      	ldr	r3, [pc, #552]	; (8012370 <tcp_input+0x528>)
 8012146:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012148:	429a      	cmp	r2, r3
 801214a:	d126      	bne.n	801219a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801214c:	69fb      	ldr	r3, [r7, #28]
 801214e:	68db      	ldr	r3, [r3, #12]
 8012150:	69fa      	ldr	r2, [r7, #28]
 8012152:	429a      	cmp	r2, r3
 8012154:	d106      	bne.n	8012164 <tcp_input+0x31c>
 8012156:	4b87      	ldr	r3, [pc, #540]	; (8012374 <tcp_input+0x52c>)
 8012158:	f240 120d 	movw	r2, #269	; 0x10d
 801215c:	4986      	ldr	r1, [pc, #536]	; (8012378 <tcp_input+0x530>)
 801215e:	4887      	ldr	r0, [pc, #540]	; (801237c <tcp_input+0x534>)
 8012160:	f007 ff04 	bl	8019f6c <iprintf>
      if (prev != NULL) {
 8012164:	69bb      	ldr	r3, [r7, #24]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d00a      	beq.n	8012180 <tcp_input+0x338>
        prev->next = pcb->next;
 801216a:	69fb      	ldr	r3, [r7, #28]
 801216c:	68da      	ldr	r2, [r3, #12]
 801216e:	69bb      	ldr	r3, [r7, #24]
 8012170:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012172:	4b83      	ldr	r3, [pc, #524]	; (8012380 <tcp_input+0x538>)
 8012174:	681a      	ldr	r2, [r3, #0]
 8012176:	69fb      	ldr	r3, [r7, #28]
 8012178:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801217a:	4a81      	ldr	r2, [pc, #516]	; (8012380 <tcp_input+0x538>)
 801217c:	69fb      	ldr	r3, [r7, #28]
 801217e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012180:	69fb      	ldr	r3, [r7, #28]
 8012182:	68db      	ldr	r3, [r3, #12]
 8012184:	69fa      	ldr	r2, [r7, #28]
 8012186:	429a      	cmp	r2, r3
 8012188:	d111      	bne.n	80121ae <tcp_input+0x366>
 801218a:	4b7a      	ldr	r3, [pc, #488]	; (8012374 <tcp_input+0x52c>)
 801218c:	f240 1215 	movw	r2, #277	; 0x115
 8012190:	497c      	ldr	r1, [pc, #496]	; (8012384 <tcp_input+0x53c>)
 8012192:	487a      	ldr	r0, [pc, #488]	; (801237c <tcp_input+0x534>)
 8012194:	f007 feea 	bl	8019f6c <iprintf>
      break;
 8012198:	e009      	b.n	80121ae <tcp_input+0x366>
    }
    prev = pcb;
 801219a:	69fb      	ldr	r3, [r7, #28]
 801219c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801219e:	69fb      	ldr	r3, [r7, #28]
 80121a0:	68db      	ldr	r3, [r3, #12]
 80121a2:	61fb      	str	r3, [r7, #28]
 80121a4:	69fb      	ldr	r3, [r7, #28]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	f47f af5e 	bne.w	8012068 <tcp_input+0x220>
 80121ac:	e000      	b.n	80121b0 <tcp_input+0x368>
      break;
 80121ae:	bf00      	nop
  }

  if (pcb == NULL) {
 80121b0:	69fb      	ldr	r3, [r7, #28]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	f040 8095 	bne.w	80122e2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80121b8:	4b73      	ldr	r3, [pc, #460]	; (8012388 <tcp_input+0x540>)
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	61fb      	str	r3, [r7, #28]
 80121be:	e03f      	b.n	8012240 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80121c0:	69fb      	ldr	r3, [r7, #28]
 80121c2:	7d1b      	ldrb	r3, [r3, #20]
 80121c4:	2b0a      	cmp	r3, #10
 80121c6:	d006      	beq.n	80121d6 <tcp_input+0x38e>
 80121c8:	4b6a      	ldr	r3, [pc, #424]	; (8012374 <tcp_input+0x52c>)
 80121ca:	f240 121f 	movw	r2, #287	; 0x11f
 80121ce:	496f      	ldr	r1, [pc, #444]	; (801238c <tcp_input+0x544>)
 80121d0:	486a      	ldr	r0, [pc, #424]	; (801237c <tcp_input+0x534>)
 80121d2:	f007 fecb 	bl	8019f6c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80121d6:	69fb      	ldr	r3, [r7, #28]
 80121d8:	7a1b      	ldrb	r3, [r3, #8]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d009      	beq.n	80121f2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80121de:	69fb      	ldr	r3, [r7, #28]
 80121e0:	7a1a      	ldrb	r2, [r3, #8]
 80121e2:	4b63      	ldr	r3, [pc, #396]	; (8012370 <tcp_input+0x528>)
 80121e4:	685b      	ldr	r3, [r3, #4]
 80121e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80121ea:	3301      	adds	r3, #1
 80121ec:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80121ee:	429a      	cmp	r2, r3
 80121f0:	d122      	bne.n	8012238 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80121f2:	69fb      	ldr	r3, [r7, #28]
 80121f4:	8b1a      	ldrh	r2, [r3, #24]
 80121f6:	4b5d      	ldr	r3, [pc, #372]	; (801236c <tcp_input+0x524>)
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	881b      	ldrh	r3, [r3, #0]
 80121fc:	b29b      	uxth	r3, r3
 80121fe:	429a      	cmp	r2, r3
 8012200:	d11b      	bne.n	801223a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012202:	69fb      	ldr	r3, [r7, #28]
 8012204:	8ada      	ldrh	r2, [r3, #22]
 8012206:	4b59      	ldr	r3, [pc, #356]	; (801236c <tcp_input+0x524>)
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	885b      	ldrh	r3, [r3, #2]
 801220c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801220e:	429a      	cmp	r2, r3
 8012210:	d113      	bne.n	801223a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012212:	69fb      	ldr	r3, [r7, #28]
 8012214:	685a      	ldr	r2, [r3, #4]
 8012216:	4b56      	ldr	r3, [pc, #344]	; (8012370 <tcp_input+0x528>)
 8012218:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801221a:	429a      	cmp	r2, r3
 801221c:	d10d      	bne.n	801223a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801221e:	69fb      	ldr	r3, [r7, #28]
 8012220:	681a      	ldr	r2, [r3, #0]
 8012222:	4b53      	ldr	r3, [pc, #332]	; (8012370 <tcp_input+0x528>)
 8012224:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012226:	429a      	cmp	r2, r3
 8012228:	d107      	bne.n	801223a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801222a:	69f8      	ldr	r0, [r7, #28]
 801222c:	f000 fb54 	bl	80128d8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012230:	6878      	ldr	r0, [r7, #4]
 8012232:	f7fd fd41 	bl	800fcb8 <pbuf_free>
        return;
 8012236:	e1f0      	b.n	801261a <tcp_input+0x7d2>
        continue;
 8012238:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801223a:	69fb      	ldr	r3, [r7, #28]
 801223c:	68db      	ldr	r3, [r3, #12]
 801223e:	61fb      	str	r3, [r7, #28]
 8012240:	69fb      	ldr	r3, [r7, #28]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d1bc      	bne.n	80121c0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012246:	2300      	movs	r3, #0
 8012248:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801224a:	4b51      	ldr	r3, [pc, #324]	; (8012390 <tcp_input+0x548>)
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	617b      	str	r3, [r7, #20]
 8012250:	e02a      	b.n	80122a8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012252:	697b      	ldr	r3, [r7, #20]
 8012254:	7a1b      	ldrb	r3, [r3, #8]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d00c      	beq.n	8012274 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	7a1a      	ldrb	r2, [r3, #8]
 801225e:	4b44      	ldr	r3, [pc, #272]	; (8012370 <tcp_input+0x528>)
 8012260:	685b      	ldr	r3, [r3, #4]
 8012262:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012266:	3301      	adds	r3, #1
 8012268:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801226a:	429a      	cmp	r2, r3
 801226c:	d002      	beq.n	8012274 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801226e:	697b      	ldr	r3, [r7, #20]
 8012270:	61bb      	str	r3, [r7, #24]
        continue;
 8012272:	e016      	b.n	80122a2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012274:	697b      	ldr	r3, [r7, #20]
 8012276:	8ada      	ldrh	r2, [r3, #22]
 8012278:	4b3c      	ldr	r3, [pc, #240]	; (801236c <tcp_input+0x524>)
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	885b      	ldrh	r3, [r3, #2]
 801227e:	b29b      	uxth	r3, r3
 8012280:	429a      	cmp	r2, r3
 8012282:	d10c      	bne.n	801229e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012284:	697b      	ldr	r3, [r7, #20]
 8012286:	681a      	ldr	r2, [r3, #0]
 8012288:	4b39      	ldr	r3, [pc, #228]	; (8012370 <tcp_input+0x528>)
 801228a:	695b      	ldr	r3, [r3, #20]
 801228c:	429a      	cmp	r2, r3
 801228e:	d00f      	beq.n	80122b0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012290:	697b      	ldr	r3, [r7, #20]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d00d      	beq.n	80122b2 <tcp_input+0x46a>
 8012296:	697b      	ldr	r3, [r7, #20]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d009      	beq.n	80122b2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801229e:	697b      	ldr	r3, [r7, #20]
 80122a0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80122a2:	697b      	ldr	r3, [r7, #20]
 80122a4:	68db      	ldr	r3, [r3, #12]
 80122a6:	617b      	str	r3, [r7, #20]
 80122a8:	697b      	ldr	r3, [r7, #20]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d1d1      	bne.n	8012252 <tcp_input+0x40a>
 80122ae:	e000      	b.n	80122b2 <tcp_input+0x46a>
            break;
 80122b0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80122b2:	697b      	ldr	r3, [r7, #20]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d014      	beq.n	80122e2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80122b8:	69bb      	ldr	r3, [r7, #24]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d00a      	beq.n	80122d4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	68da      	ldr	r2, [r3, #12]
 80122c2:	69bb      	ldr	r3, [r7, #24]
 80122c4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80122c6:	4b32      	ldr	r3, [pc, #200]	; (8012390 <tcp_input+0x548>)
 80122c8:	681a      	ldr	r2, [r3, #0]
 80122ca:	697b      	ldr	r3, [r7, #20]
 80122cc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80122ce:	4a30      	ldr	r2, [pc, #192]	; (8012390 <tcp_input+0x548>)
 80122d0:	697b      	ldr	r3, [r7, #20]
 80122d2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80122d4:	6978      	ldr	r0, [r7, #20]
 80122d6:	f000 fa01 	bl	80126dc <tcp_listen_input>
      }
      pbuf_free(p);
 80122da:	6878      	ldr	r0, [r7, #4]
 80122dc:	f7fd fcec 	bl	800fcb8 <pbuf_free>
      return;
 80122e0:	e19b      	b.n	801261a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80122e2:	69fb      	ldr	r3, [r7, #28]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	f000 8160 	beq.w	80125aa <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80122ea:	4b2a      	ldr	r3, [pc, #168]	; (8012394 <tcp_input+0x54c>)
 80122ec:	2200      	movs	r2, #0
 80122ee:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	891a      	ldrh	r2, [r3, #8]
 80122f4:	4b27      	ldr	r3, [pc, #156]	; (8012394 <tcp_input+0x54c>)
 80122f6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80122f8:	4a26      	ldr	r2, [pc, #152]	; (8012394 <tcp_input+0x54c>)
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80122fe:	4b1b      	ldr	r3, [pc, #108]	; (801236c <tcp_input+0x524>)
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	4a24      	ldr	r2, [pc, #144]	; (8012394 <tcp_input+0x54c>)
 8012304:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012306:	4b24      	ldr	r3, [pc, #144]	; (8012398 <tcp_input+0x550>)
 8012308:	2200      	movs	r2, #0
 801230a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801230c:	4b23      	ldr	r3, [pc, #140]	; (801239c <tcp_input+0x554>)
 801230e:	2200      	movs	r2, #0
 8012310:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012312:	4b23      	ldr	r3, [pc, #140]	; (80123a0 <tcp_input+0x558>)
 8012314:	2200      	movs	r2, #0
 8012316:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012318:	4b22      	ldr	r3, [pc, #136]	; (80123a4 <tcp_input+0x55c>)
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	f003 0308 	and.w	r3, r3, #8
 8012320:	2b00      	cmp	r3, #0
 8012322:	d006      	beq.n	8012332 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	7b5b      	ldrb	r3, [r3, #13]
 8012328:	f043 0301 	orr.w	r3, r3, #1
 801232c:	b2da      	uxtb	r2, r3
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012332:	69fb      	ldr	r3, [r7, #28]
 8012334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012336:	2b00      	cmp	r3, #0
 8012338:	d038      	beq.n	80123ac <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801233a:	69f8      	ldr	r0, [r7, #28]
 801233c:	f7ff f88e 	bl	801145c <tcp_process_refused_data>
 8012340:	4603      	mov	r3, r0
 8012342:	f113 0f0d 	cmn.w	r3, #13
 8012346:	d007      	beq.n	8012358 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012348:	69fb      	ldr	r3, [r7, #28]
 801234a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801234c:	2b00      	cmp	r3, #0
 801234e:	d02d      	beq.n	80123ac <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012350:	4b15      	ldr	r3, [pc, #84]	; (80123a8 <tcp_input+0x560>)
 8012352:	881b      	ldrh	r3, [r3, #0]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d029      	beq.n	80123ac <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012358:	69fb      	ldr	r3, [r7, #28]
 801235a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801235c:	2b00      	cmp	r3, #0
 801235e:	f040 8104 	bne.w	801256a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012362:	69f8      	ldr	r0, [r7, #28]
 8012364:	f003 fe18 	bl	8015f98 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012368:	e0ff      	b.n	801256a <tcp_input+0x722>
 801236a:	bf00      	nop
 801236c:	200007ac 	.word	0x200007ac
 8012370:	20007c2c 	.word	0x20007c2c
 8012374:	0801d94c 	.word	0x0801d94c
 8012378:	0801da78 	.word	0x0801da78
 801237c:	0801d998 	.word	0x0801d998
 8012380:	2001a9b0 	.word	0x2001a9b0
 8012384:	0801daa4 	.word	0x0801daa4
 8012388:	2001a9c0 	.word	0x2001a9c0
 801238c:	0801dad0 	.word	0x0801dad0
 8012390:	2001a9b8 	.word	0x2001a9b8
 8012394:	2000079c 	.word	0x2000079c
 8012398:	200007cc 	.word	0x200007cc
 801239c:	200007c9 	.word	0x200007c9
 80123a0:	200007c4 	.word	0x200007c4
 80123a4:	200007c8 	.word	0x200007c8
 80123a8:	200007c6 	.word	0x200007c6
      }
    }
    tcp_input_pcb = pcb;
 80123ac:	4a9c      	ldr	r2, [pc, #624]	; (8012620 <tcp_input+0x7d8>)
 80123ae:	69fb      	ldr	r3, [r7, #28]
 80123b0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80123b2:	69f8      	ldr	r0, [r7, #28]
 80123b4:	f000 fb0a 	bl	80129cc <tcp_process>
 80123b8:	4603      	mov	r3, r0
 80123ba:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80123bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80123c0:	f113 0f0d 	cmn.w	r3, #13
 80123c4:	f000 80d3 	beq.w	801256e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80123c8:	4b96      	ldr	r3, [pc, #600]	; (8012624 <tcp_input+0x7dc>)
 80123ca:	781b      	ldrb	r3, [r3, #0]
 80123cc:	f003 0308 	and.w	r3, r3, #8
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d015      	beq.n	8012400 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80123d4:	69fb      	ldr	r3, [r7, #28]
 80123d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d008      	beq.n	80123f0 <tcp_input+0x5a8>
 80123de:	69fb      	ldr	r3, [r7, #28]
 80123e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80123e4:	69fa      	ldr	r2, [r7, #28]
 80123e6:	6912      	ldr	r2, [r2, #16]
 80123e8:	f06f 010d 	mvn.w	r1, #13
 80123ec:	4610      	mov	r0, r2
 80123ee:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80123f0:	69f9      	ldr	r1, [r7, #28]
 80123f2:	488d      	ldr	r0, [pc, #564]	; (8012628 <tcp_input+0x7e0>)
 80123f4:	f7ff fbb0 	bl	8011b58 <tcp_pcb_remove>
        tcp_free(pcb);
 80123f8:	69f8      	ldr	r0, [r7, #28]
 80123fa:	f7fd ff8f 	bl	801031c <tcp_free>
 80123fe:	e0c1      	b.n	8012584 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8012400:	2300      	movs	r3, #0
 8012402:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012404:	4b89      	ldr	r3, [pc, #548]	; (801262c <tcp_input+0x7e4>)
 8012406:	881b      	ldrh	r3, [r3, #0]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d01d      	beq.n	8012448 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801240c:	4b87      	ldr	r3, [pc, #540]	; (801262c <tcp_input+0x7e4>)
 801240e:	881b      	ldrh	r3, [r3, #0]
 8012410:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012412:	69fb      	ldr	r3, [r7, #28]
 8012414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012418:	2b00      	cmp	r3, #0
 801241a:	d00a      	beq.n	8012432 <tcp_input+0x5ea>
 801241c:	69fb      	ldr	r3, [r7, #28]
 801241e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012422:	69fa      	ldr	r2, [r7, #28]
 8012424:	6910      	ldr	r0, [r2, #16]
 8012426:	89fa      	ldrh	r2, [r7, #14]
 8012428:	69f9      	ldr	r1, [r7, #28]
 801242a:	4798      	blx	r3
 801242c:	4603      	mov	r3, r0
 801242e:	74fb      	strb	r3, [r7, #19]
 8012430:	e001      	b.n	8012436 <tcp_input+0x5ee>
 8012432:	2300      	movs	r3, #0
 8012434:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012436:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801243a:	f113 0f0d 	cmn.w	r3, #13
 801243e:	f000 8098 	beq.w	8012572 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012442:	4b7a      	ldr	r3, [pc, #488]	; (801262c <tcp_input+0x7e4>)
 8012444:	2200      	movs	r2, #0
 8012446:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012448:	69f8      	ldr	r0, [r7, #28]
 801244a:	f000 f907 	bl	801265c <tcp_input_delayed_close>
 801244e:	4603      	mov	r3, r0
 8012450:	2b00      	cmp	r3, #0
 8012452:	f040 8090 	bne.w	8012576 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012456:	4b76      	ldr	r3, [pc, #472]	; (8012630 <tcp_input+0x7e8>)
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d041      	beq.n	80124e2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801245e:	69fb      	ldr	r3, [r7, #28]
 8012460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012462:	2b00      	cmp	r3, #0
 8012464:	d006      	beq.n	8012474 <tcp_input+0x62c>
 8012466:	4b73      	ldr	r3, [pc, #460]	; (8012634 <tcp_input+0x7ec>)
 8012468:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801246c:	4972      	ldr	r1, [pc, #456]	; (8012638 <tcp_input+0x7f0>)
 801246e:	4873      	ldr	r0, [pc, #460]	; (801263c <tcp_input+0x7f4>)
 8012470:	f007 fd7c 	bl	8019f6c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012474:	69fb      	ldr	r3, [r7, #28]
 8012476:	8b5b      	ldrh	r3, [r3, #26]
 8012478:	f003 0310 	and.w	r3, r3, #16
 801247c:	2b00      	cmp	r3, #0
 801247e:	d008      	beq.n	8012492 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012480:	4b6b      	ldr	r3, [pc, #428]	; (8012630 <tcp_input+0x7e8>)
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	4618      	mov	r0, r3
 8012486:	f7fd fc17 	bl	800fcb8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801248a:	69f8      	ldr	r0, [r7, #28]
 801248c:	f7fe fa2e 	bl	80108ec <tcp_abort>
            goto aborted;
 8012490:	e078      	b.n	8012584 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012492:	69fb      	ldr	r3, [r7, #28]
 8012494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012498:	2b00      	cmp	r3, #0
 801249a:	d00c      	beq.n	80124b6 <tcp_input+0x66e>
 801249c:	69fb      	ldr	r3, [r7, #28]
 801249e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80124a2:	69fb      	ldr	r3, [r7, #28]
 80124a4:	6918      	ldr	r0, [r3, #16]
 80124a6:	4b62      	ldr	r3, [pc, #392]	; (8012630 <tcp_input+0x7e8>)
 80124a8:	681a      	ldr	r2, [r3, #0]
 80124aa:	2300      	movs	r3, #0
 80124ac:	69f9      	ldr	r1, [r7, #28]
 80124ae:	47a0      	blx	r4
 80124b0:	4603      	mov	r3, r0
 80124b2:	74fb      	strb	r3, [r7, #19]
 80124b4:	e008      	b.n	80124c8 <tcp_input+0x680>
 80124b6:	4b5e      	ldr	r3, [pc, #376]	; (8012630 <tcp_input+0x7e8>)
 80124b8:	681a      	ldr	r2, [r3, #0]
 80124ba:	2300      	movs	r3, #0
 80124bc:	69f9      	ldr	r1, [r7, #28]
 80124be:	2000      	movs	r0, #0
 80124c0:	f7ff f8a2 	bl	8011608 <tcp_recv_null>
 80124c4:	4603      	mov	r3, r0
 80124c6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80124c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80124cc:	f113 0f0d 	cmn.w	r3, #13
 80124d0:	d053      	beq.n	801257a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80124d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d003      	beq.n	80124e2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80124da:	4b55      	ldr	r3, [pc, #340]	; (8012630 <tcp_input+0x7e8>)
 80124dc:	681a      	ldr	r2, [r3, #0]
 80124de:	69fb      	ldr	r3, [r7, #28]
 80124e0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80124e2:	4b50      	ldr	r3, [pc, #320]	; (8012624 <tcp_input+0x7dc>)
 80124e4:	781b      	ldrb	r3, [r3, #0]
 80124e6:	f003 0320 	and.w	r3, r3, #32
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d030      	beq.n	8012550 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80124ee:	69fb      	ldr	r3, [r7, #28]
 80124f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d009      	beq.n	801250a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80124f6:	69fb      	ldr	r3, [r7, #28]
 80124f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80124fa:	7b5a      	ldrb	r2, [r3, #13]
 80124fc:	69fb      	ldr	r3, [r7, #28]
 80124fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012500:	f042 0220 	orr.w	r2, r2, #32
 8012504:	b2d2      	uxtb	r2, r2
 8012506:	735a      	strb	r2, [r3, #13]
 8012508:	e022      	b.n	8012550 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801250a:	69fb      	ldr	r3, [r7, #28]
 801250c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801250e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8012512:	d005      	beq.n	8012520 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8012514:	69fb      	ldr	r3, [r7, #28]
 8012516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012518:	3301      	adds	r3, #1
 801251a:	b29a      	uxth	r2, r3
 801251c:	69fb      	ldr	r3, [r7, #28]
 801251e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012520:	69fb      	ldr	r3, [r7, #28]
 8012522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012526:	2b00      	cmp	r3, #0
 8012528:	d00b      	beq.n	8012542 <tcp_input+0x6fa>
 801252a:	69fb      	ldr	r3, [r7, #28]
 801252c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012530:	69fb      	ldr	r3, [r7, #28]
 8012532:	6918      	ldr	r0, [r3, #16]
 8012534:	2300      	movs	r3, #0
 8012536:	2200      	movs	r2, #0
 8012538:	69f9      	ldr	r1, [r7, #28]
 801253a:	47a0      	blx	r4
 801253c:	4603      	mov	r3, r0
 801253e:	74fb      	strb	r3, [r7, #19]
 8012540:	e001      	b.n	8012546 <tcp_input+0x6fe>
 8012542:	2300      	movs	r3, #0
 8012544:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012546:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801254a:	f113 0f0d 	cmn.w	r3, #13
 801254e:	d016      	beq.n	801257e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012550:	4b33      	ldr	r3, [pc, #204]	; (8012620 <tcp_input+0x7d8>)
 8012552:	2200      	movs	r2, #0
 8012554:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012556:	69f8      	ldr	r0, [r7, #28]
 8012558:	f000 f880 	bl	801265c <tcp_input_delayed_close>
 801255c:	4603      	mov	r3, r0
 801255e:	2b00      	cmp	r3, #0
 8012560:	d10f      	bne.n	8012582 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012562:	69f8      	ldr	r0, [r7, #28]
 8012564:	f002 ff14 	bl	8015390 <tcp_output>
 8012568:	e00c      	b.n	8012584 <tcp_input+0x73c>
        goto aborted;
 801256a:	bf00      	nop
 801256c:	e00a      	b.n	8012584 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801256e:	bf00      	nop
 8012570:	e008      	b.n	8012584 <tcp_input+0x73c>
              goto aborted;
 8012572:	bf00      	nop
 8012574:	e006      	b.n	8012584 <tcp_input+0x73c>
          goto aborted;
 8012576:	bf00      	nop
 8012578:	e004      	b.n	8012584 <tcp_input+0x73c>
            goto aborted;
 801257a:	bf00      	nop
 801257c:	e002      	b.n	8012584 <tcp_input+0x73c>
              goto aborted;
 801257e:	bf00      	nop
 8012580:	e000      	b.n	8012584 <tcp_input+0x73c>
          goto aborted;
 8012582:	bf00      	nop
    tcp_input_pcb = NULL;
 8012584:	4b26      	ldr	r3, [pc, #152]	; (8012620 <tcp_input+0x7d8>)
 8012586:	2200      	movs	r2, #0
 8012588:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801258a:	4b29      	ldr	r3, [pc, #164]	; (8012630 <tcp_input+0x7e8>)
 801258c:	2200      	movs	r2, #0
 801258e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012590:	4b2b      	ldr	r3, [pc, #172]	; (8012640 <tcp_input+0x7f8>)
 8012592:	685b      	ldr	r3, [r3, #4]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d03f      	beq.n	8012618 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8012598:	4b29      	ldr	r3, [pc, #164]	; (8012640 <tcp_input+0x7f8>)
 801259a:	685b      	ldr	r3, [r3, #4]
 801259c:	4618      	mov	r0, r3
 801259e:	f7fd fb8b 	bl	800fcb8 <pbuf_free>
      inseg.p = NULL;
 80125a2:	4b27      	ldr	r3, [pc, #156]	; (8012640 <tcp_input+0x7f8>)
 80125a4:	2200      	movs	r2, #0
 80125a6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80125a8:	e036      	b.n	8012618 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80125aa:	4b26      	ldr	r3, [pc, #152]	; (8012644 <tcp_input+0x7fc>)
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	899b      	ldrh	r3, [r3, #12]
 80125b0:	b29b      	uxth	r3, r3
 80125b2:	4618      	mov	r0, r3
 80125b4:	f7fc f8cd 	bl	800e752 <lwip_htons>
 80125b8:	4603      	mov	r3, r0
 80125ba:	b2db      	uxtb	r3, r3
 80125bc:	f003 0304 	and.w	r3, r3, #4
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d118      	bne.n	80125f6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80125c4:	4b20      	ldr	r3, [pc, #128]	; (8012648 <tcp_input+0x800>)
 80125c6:	6819      	ldr	r1, [r3, #0]
 80125c8:	4b20      	ldr	r3, [pc, #128]	; (801264c <tcp_input+0x804>)
 80125ca:	881b      	ldrh	r3, [r3, #0]
 80125cc:	461a      	mov	r2, r3
 80125ce:	4b20      	ldr	r3, [pc, #128]	; (8012650 <tcp_input+0x808>)
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80125d4:	4b1b      	ldr	r3, [pc, #108]	; (8012644 <tcp_input+0x7fc>)
 80125d6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80125d8:	885b      	ldrh	r3, [r3, #2]
 80125da:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80125dc:	4a19      	ldr	r2, [pc, #100]	; (8012644 <tcp_input+0x7fc>)
 80125de:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80125e0:	8812      	ldrh	r2, [r2, #0]
 80125e2:	b292      	uxth	r2, r2
 80125e4:	9202      	str	r2, [sp, #8]
 80125e6:	9301      	str	r3, [sp, #4]
 80125e8:	4b1a      	ldr	r3, [pc, #104]	; (8012654 <tcp_input+0x80c>)
 80125ea:	9300      	str	r3, [sp, #0]
 80125ec:	4b1a      	ldr	r3, [pc, #104]	; (8012658 <tcp_input+0x810>)
 80125ee:	4602      	mov	r2, r0
 80125f0:	2000      	movs	r0, #0
 80125f2:	f003 fc81 	bl	8015ef8 <tcp_rst>
    pbuf_free(p);
 80125f6:	6878      	ldr	r0, [r7, #4]
 80125f8:	f7fd fb5e 	bl	800fcb8 <pbuf_free>
  return;
 80125fc:	e00c      	b.n	8012618 <tcp_input+0x7d0>
    goto dropped;
 80125fe:	bf00      	nop
 8012600:	e006      	b.n	8012610 <tcp_input+0x7c8>
    goto dropped;
 8012602:	bf00      	nop
 8012604:	e004      	b.n	8012610 <tcp_input+0x7c8>
    goto dropped;
 8012606:	bf00      	nop
 8012608:	e002      	b.n	8012610 <tcp_input+0x7c8>
      goto dropped;
 801260a:	bf00      	nop
 801260c:	e000      	b.n	8012610 <tcp_input+0x7c8>
      goto dropped;
 801260e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012610:	6878      	ldr	r0, [r7, #4]
 8012612:	f7fd fb51 	bl	800fcb8 <pbuf_free>
 8012616:	e000      	b.n	801261a <tcp_input+0x7d2>
  return;
 8012618:	bf00      	nop
}
 801261a:	3724      	adds	r7, #36	; 0x24
 801261c:	46bd      	mov	sp, r7
 801261e:	bd90      	pop	{r4, r7, pc}
 8012620:	2001a9c4 	.word	0x2001a9c4
 8012624:	200007c9 	.word	0x200007c9
 8012628:	2001a9b0 	.word	0x2001a9b0
 801262c:	200007c4 	.word	0x200007c4
 8012630:	200007cc 	.word	0x200007cc
 8012634:	0801d94c 	.word	0x0801d94c
 8012638:	0801db00 	.word	0x0801db00
 801263c:	0801d998 	.word	0x0801d998
 8012640:	2000079c 	.word	0x2000079c
 8012644:	200007ac 	.word	0x200007ac
 8012648:	200007c0 	.word	0x200007c0
 801264c:	200007c6 	.word	0x200007c6
 8012650:	200007bc 	.word	0x200007bc
 8012654:	20007c3c 	.word	0x20007c3c
 8012658:	20007c40 	.word	0x20007c40

0801265c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b082      	sub	sp, #8
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d106      	bne.n	8012678 <tcp_input_delayed_close+0x1c>
 801266a:	4b17      	ldr	r3, [pc, #92]	; (80126c8 <tcp_input_delayed_close+0x6c>)
 801266c:	f240 225a 	movw	r2, #602	; 0x25a
 8012670:	4916      	ldr	r1, [pc, #88]	; (80126cc <tcp_input_delayed_close+0x70>)
 8012672:	4817      	ldr	r0, [pc, #92]	; (80126d0 <tcp_input_delayed_close+0x74>)
 8012674:	f007 fc7a 	bl	8019f6c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012678:	4b16      	ldr	r3, [pc, #88]	; (80126d4 <tcp_input_delayed_close+0x78>)
 801267a:	781b      	ldrb	r3, [r3, #0]
 801267c:	f003 0310 	and.w	r3, r3, #16
 8012680:	2b00      	cmp	r3, #0
 8012682:	d01c      	beq.n	80126be <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	8b5b      	ldrh	r3, [r3, #26]
 8012688:	f003 0310 	and.w	r3, r3, #16
 801268c:	2b00      	cmp	r3, #0
 801268e:	d10d      	bne.n	80126ac <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012696:	2b00      	cmp	r3, #0
 8012698:	d008      	beq.n	80126ac <tcp_input_delayed_close+0x50>
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80126a0:	687a      	ldr	r2, [r7, #4]
 80126a2:	6912      	ldr	r2, [r2, #16]
 80126a4:	f06f 010e 	mvn.w	r1, #14
 80126a8:	4610      	mov	r0, r2
 80126aa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80126ac:	6879      	ldr	r1, [r7, #4]
 80126ae:	480a      	ldr	r0, [pc, #40]	; (80126d8 <tcp_input_delayed_close+0x7c>)
 80126b0:	f7ff fa52 	bl	8011b58 <tcp_pcb_remove>
    tcp_free(pcb);
 80126b4:	6878      	ldr	r0, [r7, #4]
 80126b6:	f7fd fe31 	bl	801031c <tcp_free>
    return 1;
 80126ba:	2301      	movs	r3, #1
 80126bc:	e000      	b.n	80126c0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80126be:	2300      	movs	r3, #0
}
 80126c0:	4618      	mov	r0, r3
 80126c2:	3708      	adds	r7, #8
 80126c4:	46bd      	mov	sp, r7
 80126c6:	bd80      	pop	{r7, pc}
 80126c8:	0801d94c 	.word	0x0801d94c
 80126cc:	0801db1c 	.word	0x0801db1c
 80126d0:	0801d998 	.word	0x0801d998
 80126d4:	200007c9 	.word	0x200007c9
 80126d8:	2001a9b0 	.word	0x2001a9b0

080126dc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80126dc:	b590      	push	{r4, r7, lr}
 80126de:	b08b      	sub	sp, #44	; 0x2c
 80126e0:	af04      	add	r7, sp, #16
 80126e2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80126e4:	4b6f      	ldr	r3, [pc, #444]	; (80128a4 <tcp_listen_input+0x1c8>)
 80126e6:	781b      	ldrb	r3, [r3, #0]
 80126e8:	f003 0304 	and.w	r3, r3, #4
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	f040 80d2 	bne.w	8012896 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d106      	bne.n	8012706 <tcp_listen_input+0x2a>
 80126f8:	4b6b      	ldr	r3, [pc, #428]	; (80128a8 <tcp_listen_input+0x1cc>)
 80126fa:	f240 2281 	movw	r2, #641	; 0x281
 80126fe:	496b      	ldr	r1, [pc, #428]	; (80128ac <tcp_listen_input+0x1d0>)
 8012700:	486b      	ldr	r0, [pc, #428]	; (80128b0 <tcp_listen_input+0x1d4>)
 8012702:	f007 fc33 	bl	8019f6c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012706:	4b67      	ldr	r3, [pc, #412]	; (80128a4 <tcp_listen_input+0x1c8>)
 8012708:	781b      	ldrb	r3, [r3, #0]
 801270a:	f003 0310 	and.w	r3, r3, #16
 801270e:	2b00      	cmp	r3, #0
 8012710:	d019      	beq.n	8012746 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012712:	4b68      	ldr	r3, [pc, #416]	; (80128b4 <tcp_listen_input+0x1d8>)
 8012714:	6819      	ldr	r1, [r3, #0]
 8012716:	4b68      	ldr	r3, [pc, #416]	; (80128b8 <tcp_listen_input+0x1dc>)
 8012718:	881b      	ldrh	r3, [r3, #0]
 801271a:	461a      	mov	r2, r3
 801271c:	4b67      	ldr	r3, [pc, #412]	; (80128bc <tcp_listen_input+0x1e0>)
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012722:	4b67      	ldr	r3, [pc, #412]	; (80128c0 <tcp_listen_input+0x1e4>)
 8012724:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012726:	885b      	ldrh	r3, [r3, #2]
 8012728:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801272a:	4a65      	ldr	r2, [pc, #404]	; (80128c0 <tcp_listen_input+0x1e4>)
 801272c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801272e:	8812      	ldrh	r2, [r2, #0]
 8012730:	b292      	uxth	r2, r2
 8012732:	9202      	str	r2, [sp, #8]
 8012734:	9301      	str	r3, [sp, #4]
 8012736:	4b63      	ldr	r3, [pc, #396]	; (80128c4 <tcp_listen_input+0x1e8>)
 8012738:	9300      	str	r3, [sp, #0]
 801273a:	4b63      	ldr	r3, [pc, #396]	; (80128c8 <tcp_listen_input+0x1ec>)
 801273c:	4602      	mov	r2, r0
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f003 fbda 	bl	8015ef8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012744:	e0a9      	b.n	801289a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8012746:	4b57      	ldr	r3, [pc, #348]	; (80128a4 <tcp_listen_input+0x1c8>)
 8012748:	781b      	ldrb	r3, [r3, #0]
 801274a:	f003 0302 	and.w	r3, r3, #2
 801274e:	2b00      	cmp	r3, #0
 8012750:	f000 80a3 	beq.w	801289a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	7d5b      	ldrb	r3, [r3, #21]
 8012758:	4618      	mov	r0, r3
 801275a:	f7ff f879 	bl	8011850 <tcp_alloc>
 801275e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012760:	697b      	ldr	r3, [r7, #20]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d111      	bne.n	801278a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	699b      	ldr	r3, [r3, #24]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d00a      	beq.n	8012784 <tcp_listen_input+0xa8>
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	699b      	ldr	r3, [r3, #24]
 8012772:	687a      	ldr	r2, [r7, #4]
 8012774:	6910      	ldr	r0, [r2, #16]
 8012776:	f04f 32ff 	mov.w	r2, #4294967295
 801277a:	2100      	movs	r1, #0
 801277c:	4798      	blx	r3
 801277e:	4603      	mov	r3, r0
 8012780:	73bb      	strb	r3, [r7, #14]
      return;
 8012782:	e08b      	b.n	801289c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012784:	23f0      	movs	r3, #240	; 0xf0
 8012786:	73bb      	strb	r3, [r7, #14]
      return;
 8012788:	e088      	b.n	801289c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801278a:	4b50      	ldr	r3, [pc, #320]	; (80128cc <tcp_listen_input+0x1f0>)
 801278c:	695a      	ldr	r2, [r3, #20]
 801278e:	697b      	ldr	r3, [r7, #20]
 8012790:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012792:	4b4e      	ldr	r3, [pc, #312]	; (80128cc <tcp_listen_input+0x1f0>)
 8012794:	691a      	ldr	r2, [r3, #16]
 8012796:	697b      	ldr	r3, [r7, #20]
 8012798:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	8ada      	ldrh	r2, [r3, #22]
 801279e:	697b      	ldr	r3, [r7, #20]
 80127a0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80127a2:	4b47      	ldr	r3, [pc, #284]	; (80128c0 <tcp_listen_input+0x1e4>)
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	881b      	ldrh	r3, [r3, #0]
 80127a8:	b29a      	uxth	r2, r3
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80127ae:	697b      	ldr	r3, [r7, #20]
 80127b0:	2203      	movs	r2, #3
 80127b2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80127b4:	4b41      	ldr	r3, [pc, #260]	; (80128bc <tcp_listen_input+0x1e0>)
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	1c5a      	adds	r2, r3, #1
 80127ba:	697b      	ldr	r3, [r7, #20]
 80127bc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80127be:	697b      	ldr	r3, [r7, #20]
 80127c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80127c2:	697b      	ldr	r3, [r7, #20]
 80127c4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80127c6:	6978      	ldr	r0, [r7, #20]
 80127c8:	f7ff fa5a 	bl	8011c80 <tcp_next_iss>
 80127cc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80127ce:	697b      	ldr	r3, [r7, #20]
 80127d0:	693a      	ldr	r2, [r7, #16]
 80127d2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	693a      	ldr	r2, [r7, #16]
 80127d8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80127da:	697b      	ldr	r3, [r7, #20]
 80127dc:	693a      	ldr	r2, [r7, #16]
 80127de:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80127e0:	697b      	ldr	r3, [r7, #20]
 80127e2:	693a      	ldr	r2, [r7, #16]
 80127e4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80127e6:	4b35      	ldr	r3, [pc, #212]	; (80128bc <tcp_listen_input+0x1e0>)
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	1e5a      	subs	r2, r3, #1
 80127ec:	697b      	ldr	r3, [r7, #20]
 80127ee:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	691a      	ldr	r2, [r3, #16]
 80127f4:	697b      	ldr	r3, [r7, #20]
 80127f6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80127f8:	697b      	ldr	r3, [r7, #20]
 80127fa:	687a      	ldr	r2, [r7, #4]
 80127fc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	7a5b      	ldrb	r3, [r3, #9]
 8012802:	f003 030c 	and.w	r3, r3, #12
 8012806:	b2da      	uxtb	r2, r3
 8012808:	697b      	ldr	r3, [r7, #20]
 801280a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	7a1a      	ldrb	r2, [r3, #8]
 8012810:	697b      	ldr	r3, [r7, #20]
 8012812:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012814:	4b2e      	ldr	r3, [pc, #184]	; (80128d0 <tcp_listen_input+0x1f4>)
 8012816:	681a      	ldr	r2, [r3, #0]
 8012818:	697b      	ldr	r3, [r7, #20]
 801281a:	60da      	str	r2, [r3, #12]
 801281c:	4a2c      	ldr	r2, [pc, #176]	; (80128d0 <tcp_listen_input+0x1f4>)
 801281e:	697b      	ldr	r3, [r7, #20]
 8012820:	6013      	str	r3, [r2, #0]
 8012822:	f003 fd29 	bl	8016278 <tcp_timer_needed>
 8012826:	4b2b      	ldr	r3, [pc, #172]	; (80128d4 <tcp_listen_input+0x1f8>)
 8012828:	2201      	movs	r2, #1
 801282a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801282c:	6978      	ldr	r0, [r7, #20]
 801282e:	f001 fd8d 	bl	801434c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8012832:	4b23      	ldr	r3, [pc, #140]	; (80128c0 <tcp_listen_input+0x1e4>)
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	89db      	ldrh	r3, [r3, #14]
 8012838:	b29a      	uxth	r2, r3
 801283a:	697b      	ldr	r3, [r7, #20]
 801283c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012846:	697b      	ldr	r3, [r7, #20]
 8012848:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801284c:	697b      	ldr	r3, [r7, #20]
 801284e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012850:	697b      	ldr	r3, [r7, #20]
 8012852:	3304      	adds	r3, #4
 8012854:	4618      	mov	r0, r3
 8012856:	f005 f8ed 	bl	8017a34 <ip4_route>
 801285a:	4601      	mov	r1, r0
 801285c:	697b      	ldr	r3, [r7, #20]
 801285e:	3304      	adds	r3, #4
 8012860:	461a      	mov	r2, r3
 8012862:	4620      	mov	r0, r4
 8012864:	f7ff fa32 	bl	8011ccc <tcp_eff_send_mss_netif>
 8012868:	4603      	mov	r3, r0
 801286a:	461a      	mov	r2, r3
 801286c:	697b      	ldr	r3, [r7, #20]
 801286e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012870:	2112      	movs	r1, #18
 8012872:	6978      	ldr	r0, [r7, #20]
 8012874:	f002 fc9e 	bl	80151b4 <tcp_enqueue_flags>
 8012878:	4603      	mov	r3, r0
 801287a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801287c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d004      	beq.n	801288e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8012884:	2100      	movs	r1, #0
 8012886:	6978      	ldr	r0, [r7, #20]
 8012888:	f7fd ff72 	bl	8010770 <tcp_abandon>
      return;
 801288c:	e006      	b.n	801289c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801288e:	6978      	ldr	r0, [r7, #20]
 8012890:	f002 fd7e 	bl	8015390 <tcp_output>
  return;
 8012894:	e001      	b.n	801289a <tcp_listen_input+0x1be>
    return;
 8012896:	bf00      	nop
 8012898:	e000      	b.n	801289c <tcp_listen_input+0x1c0>
  return;
 801289a:	bf00      	nop
}
 801289c:	371c      	adds	r7, #28
 801289e:	46bd      	mov	sp, r7
 80128a0:	bd90      	pop	{r4, r7, pc}
 80128a2:	bf00      	nop
 80128a4:	200007c8 	.word	0x200007c8
 80128a8:	0801d94c 	.word	0x0801d94c
 80128ac:	0801db44 	.word	0x0801db44
 80128b0:	0801d998 	.word	0x0801d998
 80128b4:	200007c0 	.word	0x200007c0
 80128b8:	200007c6 	.word	0x200007c6
 80128bc:	200007bc 	.word	0x200007bc
 80128c0:	200007ac 	.word	0x200007ac
 80128c4:	20007c3c 	.word	0x20007c3c
 80128c8:	20007c40 	.word	0x20007c40
 80128cc:	20007c2c 	.word	0x20007c2c
 80128d0:	2001a9b0 	.word	0x2001a9b0
 80128d4:	2001a9ac 	.word	0x2001a9ac

080128d8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b086      	sub	sp, #24
 80128dc:	af04      	add	r7, sp, #16
 80128de:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80128e0:	4b2f      	ldr	r3, [pc, #188]	; (80129a0 <tcp_timewait_input+0xc8>)
 80128e2:	781b      	ldrb	r3, [r3, #0]
 80128e4:	f003 0304 	and.w	r3, r3, #4
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d153      	bne.n	8012994 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d106      	bne.n	8012900 <tcp_timewait_input+0x28>
 80128f2:	4b2c      	ldr	r3, [pc, #176]	; (80129a4 <tcp_timewait_input+0xcc>)
 80128f4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80128f8:	492b      	ldr	r1, [pc, #172]	; (80129a8 <tcp_timewait_input+0xd0>)
 80128fa:	482c      	ldr	r0, [pc, #176]	; (80129ac <tcp_timewait_input+0xd4>)
 80128fc:	f007 fb36 	bl	8019f6c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8012900:	4b27      	ldr	r3, [pc, #156]	; (80129a0 <tcp_timewait_input+0xc8>)
 8012902:	781b      	ldrb	r3, [r3, #0]
 8012904:	f003 0302 	and.w	r3, r3, #2
 8012908:	2b00      	cmp	r3, #0
 801290a:	d02a      	beq.n	8012962 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801290c:	4b28      	ldr	r3, [pc, #160]	; (80129b0 <tcp_timewait_input+0xd8>)
 801290e:	681a      	ldr	r2, [r3, #0]
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012914:	1ad3      	subs	r3, r2, r3
 8012916:	2b00      	cmp	r3, #0
 8012918:	db2d      	blt.n	8012976 <tcp_timewait_input+0x9e>
 801291a:	4b25      	ldr	r3, [pc, #148]	; (80129b0 <tcp_timewait_input+0xd8>)
 801291c:	681a      	ldr	r2, [r3, #0]
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012922:	6879      	ldr	r1, [r7, #4]
 8012924:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012926:	440b      	add	r3, r1
 8012928:	1ad3      	subs	r3, r2, r3
 801292a:	2b00      	cmp	r3, #0
 801292c:	dc23      	bgt.n	8012976 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801292e:	4b21      	ldr	r3, [pc, #132]	; (80129b4 <tcp_timewait_input+0xdc>)
 8012930:	6819      	ldr	r1, [r3, #0]
 8012932:	4b21      	ldr	r3, [pc, #132]	; (80129b8 <tcp_timewait_input+0xe0>)
 8012934:	881b      	ldrh	r3, [r3, #0]
 8012936:	461a      	mov	r2, r3
 8012938:	4b1d      	ldr	r3, [pc, #116]	; (80129b0 <tcp_timewait_input+0xd8>)
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801293e:	4b1f      	ldr	r3, [pc, #124]	; (80129bc <tcp_timewait_input+0xe4>)
 8012940:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012942:	885b      	ldrh	r3, [r3, #2]
 8012944:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012946:	4a1d      	ldr	r2, [pc, #116]	; (80129bc <tcp_timewait_input+0xe4>)
 8012948:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801294a:	8812      	ldrh	r2, [r2, #0]
 801294c:	b292      	uxth	r2, r2
 801294e:	9202      	str	r2, [sp, #8]
 8012950:	9301      	str	r3, [sp, #4]
 8012952:	4b1b      	ldr	r3, [pc, #108]	; (80129c0 <tcp_timewait_input+0xe8>)
 8012954:	9300      	str	r3, [sp, #0]
 8012956:	4b1b      	ldr	r3, [pc, #108]	; (80129c4 <tcp_timewait_input+0xec>)
 8012958:	4602      	mov	r2, r0
 801295a:	6878      	ldr	r0, [r7, #4]
 801295c:	f003 facc 	bl	8015ef8 <tcp_rst>
      return;
 8012960:	e01b      	b.n	801299a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8012962:	4b0f      	ldr	r3, [pc, #60]	; (80129a0 <tcp_timewait_input+0xc8>)
 8012964:	781b      	ldrb	r3, [r3, #0]
 8012966:	f003 0301 	and.w	r3, r3, #1
 801296a:	2b00      	cmp	r3, #0
 801296c:	d003      	beq.n	8012976 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801296e:	4b16      	ldr	r3, [pc, #88]	; (80129c8 <tcp_timewait_input+0xf0>)
 8012970:	681a      	ldr	r2, [r3, #0]
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012976:	4b10      	ldr	r3, [pc, #64]	; (80129b8 <tcp_timewait_input+0xe0>)
 8012978:	881b      	ldrh	r3, [r3, #0]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d00c      	beq.n	8012998 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	8b5b      	ldrh	r3, [r3, #26]
 8012982:	f043 0302 	orr.w	r3, r3, #2
 8012986:	b29a      	uxth	r2, r3
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801298c:	6878      	ldr	r0, [r7, #4]
 801298e:	f002 fcff 	bl	8015390 <tcp_output>
  }
  return;
 8012992:	e001      	b.n	8012998 <tcp_timewait_input+0xc0>
    return;
 8012994:	bf00      	nop
 8012996:	e000      	b.n	801299a <tcp_timewait_input+0xc2>
  return;
 8012998:	bf00      	nop
}
 801299a:	3708      	adds	r7, #8
 801299c:	46bd      	mov	sp, r7
 801299e:	bd80      	pop	{r7, pc}
 80129a0:	200007c8 	.word	0x200007c8
 80129a4:	0801d94c 	.word	0x0801d94c
 80129a8:	0801db64 	.word	0x0801db64
 80129ac:	0801d998 	.word	0x0801d998
 80129b0:	200007bc 	.word	0x200007bc
 80129b4:	200007c0 	.word	0x200007c0
 80129b8:	200007c6 	.word	0x200007c6
 80129bc:	200007ac 	.word	0x200007ac
 80129c0:	20007c3c 	.word	0x20007c3c
 80129c4:	20007c40 	.word	0x20007c40
 80129c8:	2001a9b4 	.word	0x2001a9b4

080129cc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80129cc:	b590      	push	{r4, r7, lr}
 80129ce:	b08d      	sub	sp, #52	; 0x34
 80129d0:	af04      	add	r7, sp, #16
 80129d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80129d4:	2300      	movs	r3, #0
 80129d6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80129d8:	2300      	movs	r3, #0
 80129da:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d106      	bne.n	80129f0 <tcp_process+0x24>
 80129e2:	4ba5      	ldr	r3, [pc, #660]	; (8012c78 <tcp_process+0x2ac>)
 80129e4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80129e8:	49a4      	ldr	r1, [pc, #656]	; (8012c7c <tcp_process+0x2b0>)
 80129ea:	48a5      	ldr	r0, [pc, #660]	; (8012c80 <tcp_process+0x2b4>)
 80129ec:	f007 fabe 	bl	8019f6c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80129f0:	4ba4      	ldr	r3, [pc, #656]	; (8012c84 <tcp_process+0x2b8>)
 80129f2:	781b      	ldrb	r3, [r3, #0]
 80129f4:	f003 0304 	and.w	r3, r3, #4
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d04e      	beq.n	8012a9a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	7d1b      	ldrb	r3, [r3, #20]
 8012a00:	2b02      	cmp	r3, #2
 8012a02:	d108      	bne.n	8012a16 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012a08:	4b9f      	ldr	r3, [pc, #636]	; (8012c88 <tcp_process+0x2bc>)
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	429a      	cmp	r2, r3
 8012a0e:	d123      	bne.n	8012a58 <tcp_process+0x8c>
        acceptable = 1;
 8012a10:	2301      	movs	r3, #1
 8012a12:	76fb      	strb	r3, [r7, #27]
 8012a14:	e020      	b.n	8012a58 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012a1a:	4b9c      	ldr	r3, [pc, #624]	; (8012c8c <tcp_process+0x2c0>)
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	429a      	cmp	r2, r3
 8012a20:	d102      	bne.n	8012a28 <tcp_process+0x5c>
        acceptable = 1;
 8012a22:	2301      	movs	r3, #1
 8012a24:	76fb      	strb	r3, [r7, #27]
 8012a26:	e017      	b.n	8012a58 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012a28:	4b98      	ldr	r3, [pc, #608]	; (8012c8c <tcp_process+0x2c0>)
 8012a2a:	681a      	ldr	r2, [r3, #0]
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a30:	1ad3      	subs	r3, r2, r3
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	db10      	blt.n	8012a58 <tcp_process+0x8c>
 8012a36:	4b95      	ldr	r3, [pc, #596]	; (8012c8c <tcp_process+0x2c0>)
 8012a38:	681a      	ldr	r2, [r3, #0]
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a3e:	6879      	ldr	r1, [r7, #4]
 8012a40:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012a42:	440b      	add	r3, r1
 8012a44:	1ad3      	subs	r3, r2, r3
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	dc06      	bgt.n	8012a58 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	8b5b      	ldrh	r3, [r3, #26]
 8012a4e:	f043 0302 	orr.w	r3, r3, #2
 8012a52:	b29a      	uxth	r2, r3
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8012a58:	7efb      	ldrb	r3, [r7, #27]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d01b      	beq.n	8012a96 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	7d1b      	ldrb	r3, [r3, #20]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d106      	bne.n	8012a74 <tcp_process+0xa8>
 8012a66:	4b84      	ldr	r3, [pc, #528]	; (8012c78 <tcp_process+0x2ac>)
 8012a68:	f44f 724e 	mov.w	r2, #824	; 0x338
 8012a6c:	4988      	ldr	r1, [pc, #544]	; (8012c90 <tcp_process+0x2c4>)
 8012a6e:	4884      	ldr	r0, [pc, #528]	; (8012c80 <tcp_process+0x2b4>)
 8012a70:	f007 fa7c 	bl	8019f6c <iprintf>
      recv_flags |= TF_RESET;
 8012a74:	4b87      	ldr	r3, [pc, #540]	; (8012c94 <tcp_process+0x2c8>)
 8012a76:	781b      	ldrb	r3, [r3, #0]
 8012a78:	f043 0308 	orr.w	r3, r3, #8
 8012a7c:	b2da      	uxtb	r2, r3
 8012a7e:	4b85      	ldr	r3, [pc, #532]	; (8012c94 <tcp_process+0x2c8>)
 8012a80:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	8b5b      	ldrh	r3, [r3, #26]
 8012a86:	f023 0301 	bic.w	r3, r3, #1
 8012a8a:	b29a      	uxth	r2, r3
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8012a90:	f06f 030d 	mvn.w	r3, #13
 8012a94:	e37a      	b.n	801318c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8012a96:	2300      	movs	r3, #0
 8012a98:	e378      	b.n	801318c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012a9a:	4b7a      	ldr	r3, [pc, #488]	; (8012c84 <tcp_process+0x2b8>)
 8012a9c:	781b      	ldrb	r3, [r3, #0]
 8012a9e:	f003 0302 	and.w	r3, r3, #2
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d010      	beq.n	8012ac8 <tcp_process+0xfc>
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	7d1b      	ldrb	r3, [r3, #20]
 8012aaa:	2b02      	cmp	r3, #2
 8012aac:	d00c      	beq.n	8012ac8 <tcp_process+0xfc>
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	7d1b      	ldrb	r3, [r3, #20]
 8012ab2:	2b03      	cmp	r3, #3
 8012ab4:	d008      	beq.n	8012ac8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	8b5b      	ldrh	r3, [r3, #26]
 8012aba:	f043 0302 	orr.w	r3, r3, #2
 8012abe:	b29a      	uxth	r2, r3
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	e361      	b.n	801318c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	8b5b      	ldrh	r3, [r3, #26]
 8012acc:	f003 0310 	and.w	r3, r3, #16
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d103      	bne.n	8012adc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012ad4:	4b70      	ldr	r3, [pc, #448]	; (8012c98 <tcp_process+0x2cc>)
 8012ad6:	681a      	ldr	r2, [r3, #0]
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	2200      	movs	r2, #0
 8012ae0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8012aec:	6878      	ldr	r0, [r7, #4]
 8012aee:	f001 fc2d 	bl	801434c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	7d1b      	ldrb	r3, [r3, #20]
 8012af6:	3b02      	subs	r3, #2
 8012af8:	2b07      	cmp	r3, #7
 8012afa:	f200 8337 	bhi.w	801316c <tcp_process+0x7a0>
 8012afe:	a201      	add	r2, pc, #4	; (adr r2, 8012b04 <tcp_process+0x138>)
 8012b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b04:	08012b25 	.word	0x08012b25
 8012b08:	08012d55 	.word	0x08012d55
 8012b0c:	08012ecd 	.word	0x08012ecd
 8012b10:	08012ef7 	.word	0x08012ef7
 8012b14:	0801301b 	.word	0x0801301b
 8012b18:	08012ecd 	.word	0x08012ecd
 8012b1c:	080130a7 	.word	0x080130a7
 8012b20:	08013137 	.word	0x08013137
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012b24:	4b57      	ldr	r3, [pc, #348]	; (8012c84 <tcp_process+0x2b8>)
 8012b26:	781b      	ldrb	r3, [r3, #0]
 8012b28:	f003 0310 	and.w	r3, r3, #16
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	f000 80e4 	beq.w	8012cfa <tcp_process+0x32e>
 8012b32:	4b54      	ldr	r3, [pc, #336]	; (8012c84 <tcp_process+0x2b8>)
 8012b34:	781b      	ldrb	r3, [r3, #0]
 8012b36:	f003 0302 	and.w	r3, r3, #2
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	f000 80dd 	beq.w	8012cfa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b44:	1c5a      	adds	r2, r3, #1
 8012b46:	4b50      	ldr	r3, [pc, #320]	; (8012c88 <tcp_process+0x2bc>)
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	429a      	cmp	r2, r3
 8012b4c:	f040 80d5 	bne.w	8012cfa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012b50:	4b4e      	ldr	r3, [pc, #312]	; (8012c8c <tcp_process+0x2c0>)
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	1c5a      	adds	r2, r3, #1
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8012b62:	4b49      	ldr	r3, [pc, #292]	; (8012c88 <tcp_process+0x2bc>)
 8012b64:	681a      	ldr	r2, [r3, #0]
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8012b6a:	4b4c      	ldr	r3, [pc, #304]	; (8012c9c <tcp_process+0x2d0>)
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	89db      	ldrh	r3, [r3, #14]
 8012b70:	b29a      	uxth	r2, r3
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012b84:	4b41      	ldr	r3, [pc, #260]	; (8012c8c <tcp_process+0x2c0>)
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	1e5a      	subs	r2, r3, #1
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	2204      	movs	r2, #4
 8012b92:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	3304      	adds	r3, #4
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	f004 ff49 	bl	8017a34 <ip4_route>
 8012ba2:	4601      	mov	r1, r0
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	3304      	adds	r3, #4
 8012ba8:	461a      	mov	r2, r3
 8012baa:	4620      	mov	r0, r4
 8012bac:	f7ff f88e 	bl	8011ccc <tcp_eff_send_mss_netif>
 8012bb0:	4603      	mov	r3, r0
 8012bb2:	461a      	mov	r2, r3
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012bbc:	009a      	lsls	r2, r3, #2
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012bc2:	005b      	lsls	r3, r3, #1
 8012bc4:	f241 111c 	movw	r1, #4380	; 0x111c
 8012bc8:	428b      	cmp	r3, r1
 8012bca:	bf38      	it	cc
 8012bcc:	460b      	movcc	r3, r1
 8012bce:	429a      	cmp	r2, r3
 8012bd0:	d204      	bcs.n	8012bdc <tcp_process+0x210>
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012bd6:	009b      	lsls	r3, r3, #2
 8012bd8:	b29b      	uxth	r3, r3
 8012bda:	e00d      	b.n	8012bf8 <tcp_process+0x22c>
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012be0:	005b      	lsls	r3, r3, #1
 8012be2:	f241 121c 	movw	r2, #4380	; 0x111c
 8012be6:	4293      	cmp	r3, r2
 8012be8:	d904      	bls.n	8012bf4 <tcp_process+0x228>
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012bee:	005b      	lsls	r3, r3, #1
 8012bf0:	b29b      	uxth	r3, r3
 8012bf2:	e001      	b.n	8012bf8 <tcp_process+0x22c>
 8012bf4:	f241 131c 	movw	r3, #4380	; 0x111c
 8012bf8:	687a      	ldr	r2, [r7, #4]
 8012bfa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d106      	bne.n	8012c16 <tcp_process+0x24a>
 8012c08:	4b1b      	ldr	r3, [pc, #108]	; (8012c78 <tcp_process+0x2ac>)
 8012c0a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8012c0e:	4924      	ldr	r1, [pc, #144]	; (8012ca0 <tcp_process+0x2d4>)
 8012c10:	481b      	ldr	r0, [pc, #108]	; (8012c80 <tcp_process+0x2b4>)
 8012c12:	f007 f9ab 	bl	8019f6c <iprintf>
        --pcb->snd_queuelen;
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c1c:	3b01      	subs	r3, #1
 8012c1e:	b29a      	uxth	r2, r3
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c2a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012c2c:	69fb      	ldr	r3, [r7, #28]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d111      	bne.n	8012c56 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c36:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012c38:	69fb      	ldr	r3, [r7, #28]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d106      	bne.n	8012c4c <tcp_process+0x280>
 8012c3e:	4b0e      	ldr	r3, [pc, #56]	; (8012c78 <tcp_process+0x2ac>)
 8012c40:	f44f 725d 	mov.w	r2, #884	; 0x374
 8012c44:	4917      	ldr	r1, [pc, #92]	; (8012ca4 <tcp_process+0x2d8>)
 8012c46:	480e      	ldr	r0, [pc, #56]	; (8012c80 <tcp_process+0x2b4>)
 8012c48:	f007 f990 	bl	8019f6c <iprintf>
          pcb->unsent = rseg->next;
 8012c4c:	69fb      	ldr	r3, [r7, #28]
 8012c4e:	681a      	ldr	r2, [r3, #0]
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	66da      	str	r2, [r3, #108]	; 0x6c
 8012c54:	e003      	b.n	8012c5e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8012c56:	69fb      	ldr	r3, [r7, #28]
 8012c58:	681a      	ldr	r2, [r3, #0]
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8012c5e:	69f8      	ldr	r0, [r7, #28]
 8012c60:	f7fe fc8d 	bl	801157e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d11d      	bne.n	8012ca8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012c72:	861a      	strh	r2, [r3, #48]	; 0x30
 8012c74:	e01f      	b.n	8012cb6 <tcp_process+0x2ea>
 8012c76:	bf00      	nop
 8012c78:	0801d94c 	.word	0x0801d94c
 8012c7c:	0801db84 	.word	0x0801db84
 8012c80:	0801d998 	.word	0x0801d998
 8012c84:	200007c8 	.word	0x200007c8
 8012c88:	200007c0 	.word	0x200007c0
 8012c8c:	200007bc 	.word	0x200007bc
 8012c90:	0801dba0 	.word	0x0801dba0
 8012c94:	200007c9 	.word	0x200007c9
 8012c98:	2001a9b4 	.word	0x2001a9b4
 8012c9c:	200007ac 	.word	0x200007ac
 8012ca0:	0801dbc0 	.word	0x0801dbc0
 8012ca4:	0801dbd8 	.word	0x0801dbd8
        } else {
          pcb->rtime = 0;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	2200      	movs	r2, #0
 8012cac:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d00a      	beq.n	8012cd6 <tcp_process+0x30a>
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012cc6:	687a      	ldr	r2, [r7, #4]
 8012cc8:	6910      	ldr	r0, [r2, #16]
 8012cca:	2200      	movs	r2, #0
 8012ccc:	6879      	ldr	r1, [r7, #4]
 8012cce:	4798      	blx	r3
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	76bb      	strb	r3, [r7, #26]
 8012cd4:	e001      	b.n	8012cda <tcp_process+0x30e>
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8012cda:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012cde:	f113 0f0d 	cmn.w	r3, #13
 8012ce2:	d102      	bne.n	8012cea <tcp_process+0x31e>
          return ERR_ABRT;
 8012ce4:	f06f 030c 	mvn.w	r3, #12
 8012ce8:	e250      	b.n	801318c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	8b5b      	ldrh	r3, [r3, #26]
 8012cee:	f043 0302 	orr.w	r3, r3, #2
 8012cf2:	b29a      	uxth	r2, r3
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012cf8:	e23a      	b.n	8013170 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8012cfa:	4b9d      	ldr	r3, [pc, #628]	; (8012f70 <tcp_process+0x5a4>)
 8012cfc:	781b      	ldrb	r3, [r3, #0]
 8012cfe:	f003 0310 	and.w	r3, r3, #16
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	f000 8234 	beq.w	8013170 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d08:	4b9a      	ldr	r3, [pc, #616]	; (8012f74 <tcp_process+0x5a8>)
 8012d0a:	6819      	ldr	r1, [r3, #0]
 8012d0c:	4b9a      	ldr	r3, [pc, #616]	; (8012f78 <tcp_process+0x5ac>)
 8012d0e:	881b      	ldrh	r3, [r3, #0]
 8012d10:	461a      	mov	r2, r3
 8012d12:	4b9a      	ldr	r3, [pc, #616]	; (8012f7c <tcp_process+0x5b0>)
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d18:	4b99      	ldr	r3, [pc, #612]	; (8012f80 <tcp_process+0x5b4>)
 8012d1a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d1c:	885b      	ldrh	r3, [r3, #2]
 8012d1e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d20:	4a97      	ldr	r2, [pc, #604]	; (8012f80 <tcp_process+0x5b4>)
 8012d22:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d24:	8812      	ldrh	r2, [r2, #0]
 8012d26:	b292      	uxth	r2, r2
 8012d28:	9202      	str	r2, [sp, #8]
 8012d2a:	9301      	str	r3, [sp, #4]
 8012d2c:	4b95      	ldr	r3, [pc, #596]	; (8012f84 <tcp_process+0x5b8>)
 8012d2e:	9300      	str	r3, [sp, #0]
 8012d30:	4b95      	ldr	r3, [pc, #596]	; (8012f88 <tcp_process+0x5bc>)
 8012d32:	4602      	mov	r2, r0
 8012d34:	6878      	ldr	r0, [r7, #4]
 8012d36:	f003 f8df 	bl	8015ef8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012d40:	2b05      	cmp	r3, #5
 8012d42:	f200 8215 	bhi.w	8013170 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	2200      	movs	r2, #0
 8012d4a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8012d4c:	6878      	ldr	r0, [r7, #4]
 8012d4e:	f002 fea9 	bl	8015aa4 <tcp_rexmit_rto>
      break;
 8012d52:	e20d      	b.n	8013170 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012d54:	4b86      	ldr	r3, [pc, #536]	; (8012f70 <tcp_process+0x5a4>)
 8012d56:	781b      	ldrb	r3, [r3, #0]
 8012d58:	f003 0310 	and.w	r3, r3, #16
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	f000 80a1 	beq.w	8012ea4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012d62:	4b84      	ldr	r3, [pc, #528]	; (8012f74 <tcp_process+0x5a8>)
 8012d64:	681a      	ldr	r2, [r3, #0]
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d6a:	1ad3      	subs	r3, r2, r3
 8012d6c:	3b01      	subs	r3, #1
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	db7e      	blt.n	8012e70 <tcp_process+0x4a4>
 8012d72:	4b80      	ldr	r3, [pc, #512]	; (8012f74 <tcp_process+0x5a8>)
 8012d74:	681a      	ldr	r2, [r3, #0]
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d7a:	1ad3      	subs	r3, r2, r3
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	dc77      	bgt.n	8012e70 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	2204      	movs	r2, #4
 8012d84:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d102      	bne.n	8012d94 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8012d8e:	23fa      	movs	r3, #250	; 0xfa
 8012d90:	76bb      	strb	r3, [r7, #26]
 8012d92:	e01d      	b.n	8012dd0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012d98:	699b      	ldr	r3, [r3, #24]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d106      	bne.n	8012dac <tcp_process+0x3e0>
 8012d9e:	4b7b      	ldr	r3, [pc, #492]	; (8012f8c <tcp_process+0x5c0>)
 8012da0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8012da4:	497a      	ldr	r1, [pc, #488]	; (8012f90 <tcp_process+0x5c4>)
 8012da6:	487b      	ldr	r0, [pc, #492]	; (8012f94 <tcp_process+0x5c8>)
 8012da8:	f007 f8e0 	bl	8019f6c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012db0:	699b      	ldr	r3, [r3, #24]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d00a      	beq.n	8012dcc <tcp_process+0x400>
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012dba:	699b      	ldr	r3, [r3, #24]
 8012dbc:	687a      	ldr	r2, [r7, #4]
 8012dbe:	6910      	ldr	r0, [r2, #16]
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	6879      	ldr	r1, [r7, #4]
 8012dc4:	4798      	blx	r3
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	76bb      	strb	r3, [r7, #26]
 8012dca:	e001      	b.n	8012dd0 <tcp_process+0x404>
 8012dcc:	23f0      	movs	r3, #240	; 0xf0
 8012dce:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8012dd0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d00a      	beq.n	8012dee <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012dd8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012ddc:	f113 0f0d 	cmn.w	r3, #13
 8012de0:	d002      	beq.n	8012de8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8012de2:	6878      	ldr	r0, [r7, #4]
 8012de4:	f7fd fd82 	bl	80108ec <tcp_abort>
            }
            return ERR_ABRT;
 8012de8:	f06f 030c 	mvn.w	r3, #12
 8012dec:	e1ce      	b.n	801318c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8012dee:	6878      	ldr	r0, [r7, #4]
 8012df0:	f000 fae0 	bl	80133b4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012df4:	4b68      	ldr	r3, [pc, #416]	; (8012f98 <tcp_process+0x5cc>)
 8012df6:	881b      	ldrh	r3, [r3, #0]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d005      	beq.n	8012e08 <tcp_process+0x43c>
            recv_acked--;
 8012dfc:	4b66      	ldr	r3, [pc, #408]	; (8012f98 <tcp_process+0x5cc>)
 8012dfe:	881b      	ldrh	r3, [r3, #0]
 8012e00:	3b01      	subs	r3, #1
 8012e02:	b29a      	uxth	r2, r3
 8012e04:	4b64      	ldr	r3, [pc, #400]	; (8012f98 <tcp_process+0x5cc>)
 8012e06:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e0c:	009a      	lsls	r2, r3, #2
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e12:	005b      	lsls	r3, r3, #1
 8012e14:	f241 111c 	movw	r1, #4380	; 0x111c
 8012e18:	428b      	cmp	r3, r1
 8012e1a:	bf38      	it	cc
 8012e1c:	460b      	movcc	r3, r1
 8012e1e:	429a      	cmp	r2, r3
 8012e20:	d204      	bcs.n	8012e2c <tcp_process+0x460>
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e26:	009b      	lsls	r3, r3, #2
 8012e28:	b29b      	uxth	r3, r3
 8012e2a:	e00d      	b.n	8012e48 <tcp_process+0x47c>
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e30:	005b      	lsls	r3, r3, #1
 8012e32:	f241 121c 	movw	r2, #4380	; 0x111c
 8012e36:	4293      	cmp	r3, r2
 8012e38:	d904      	bls.n	8012e44 <tcp_process+0x478>
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e3e:	005b      	lsls	r3, r3, #1
 8012e40:	b29b      	uxth	r3, r3
 8012e42:	e001      	b.n	8012e48 <tcp_process+0x47c>
 8012e44:	f241 131c 	movw	r3, #4380	; 0x111c
 8012e48:	687a      	ldr	r2, [r7, #4]
 8012e4a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8012e4e:	4b53      	ldr	r3, [pc, #332]	; (8012f9c <tcp_process+0x5d0>)
 8012e50:	781b      	ldrb	r3, [r3, #0]
 8012e52:	f003 0320 	and.w	r3, r3, #32
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d037      	beq.n	8012eca <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	8b5b      	ldrh	r3, [r3, #26]
 8012e5e:	f043 0302 	orr.w	r3, r3, #2
 8012e62:	b29a      	uxth	r2, r3
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	2207      	movs	r2, #7
 8012e6c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8012e6e:	e02c      	b.n	8012eca <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012e70:	4b40      	ldr	r3, [pc, #256]	; (8012f74 <tcp_process+0x5a8>)
 8012e72:	6819      	ldr	r1, [r3, #0]
 8012e74:	4b40      	ldr	r3, [pc, #256]	; (8012f78 <tcp_process+0x5ac>)
 8012e76:	881b      	ldrh	r3, [r3, #0]
 8012e78:	461a      	mov	r2, r3
 8012e7a:	4b40      	ldr	r3, [pc, #256]	; (8012f7c <tcp_process+0x5b0>)
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012e80:	4b3f      	ldr	r3, [pc, #252]	; (8012f80 <tcp_process+0x5b4>)
 8012e82:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012e84:	885b      	ldrh	r3, [r3, #2]
 8012e86:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012e88:	4a3d      	ldr	r2, [pc, #244]	; (8012f80 <tcp_process+0x5b4>)
 8012e8a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012e8c:	8812      	ldrh	r2, [r2, #0]
 8012e8e:	b292      	uxth	r2, r2
 8012e90:	9202      	str	r2, [sp, #8]
 8012e92:	9301      	str	r3, [sp, #4]
 8012e94:	4b3b      	ldr	r3, [pc, #236]	; (8012f84 <tcp_process+0x5b8>)
 8012e96:	9300      	str	r3, [sp, #0]
 8012e98:	4b3b      	ldr	r3, [pc, #236]	; (8012f88 <tcp_process+0x5bc>)
 8012e9a:	4602      	mov	r2, r0
 8012e9c:	6878      	ldr	r0, [r7, #4]
 8012e9e:	f003 f82b 	bl	8015ef8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8012ea2:	e167      	b.n	8013174 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012ea4:	4b32      	ldr	r3, [pc, #200]	; (8012f70 <tcp_process+0x5a4>)
 8012ea6:	781b      	ldrb	r3, [r3, #0]
 8012ea8:	f003 0302 	and.w	r3, r3, #2
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	f000 8161 	beq.w	8013174 <tcp_process+0x7a8>
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eb6:	1e5a      	subs	r2, r3, #1
 8012eb8:	4b30      	ldr	r3, [pc, #192]	; (8012f7c <tcp_process+0x5b0>)
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	429a      	cmp	r2, r3
 8012ebe:	f040 8159 	bne.w	8013174 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8012ec2:	6878      	ldr	r0, [r7, #4]
 8012ec4:	f002 fe10 	bl	8015ae8 <tcp_rexmit>
      break;
 8012ec8:	e154      	b.n	8013174 <tcp_process+0x7a8>
 8012eca:	e153      	b.n	8013174 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8012ecc:	6878      	ldr	r0, [r7, #4]
 8012ece:	f000 fa71 	bl	80133b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8012ed2:	4b32      	ldr	r3, [pc, #200]	; (8012f9c <tcp_process+0x5d0>)
 8012ed4:	781b      	ldrb	r3, [r3, #0]
 8012ed6:	f003 0320 	and.w	r3, r3, #32
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	f000 814c 	beq.w	8013178 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	8b5b      	ldrh	r3, [r3, #26]
 8012ee4:	f043 0302 	orr.w	r3, r3, #2
 8012ee8:	b29a      	uxth	r2, r3
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	2207      	movs	r2, #7
 8012ef2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012ef4:	e140      	b.n	8013178 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8012ef6:	6878      	ldr	r0, [r7, #4]
 8012ef8:	f000 fa5c 	bl	80133b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012efc:	4b27      	ldr	r3, [pc, #156]	; (8012f9c <tcp_process+0x5d0>)
 8012efe:	781b      	ldrb	r3, [r3, #0]
 8012f00:	f003 0320 	and.w	r3, r3, #32
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d071      	beq.n	8012fec <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012f08:	4b19      	ldr	r3, [pc, #100]	; (8012f70 <tcp_process+0x5a4>)
 8012f0a:	781b      	ldrb	r3, [r3, #0]
 8012f0c:	f003 0310 	and.w	r3, r3, #16
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d060      	beq.n	8012fd6 <tcp_process+0x60a>
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012f18:	4b16      	ldr	r3, [pc, #88]	; (8012f74 <tcp_process+0x5a8>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	429a      	cmp	r2, r3
 8012f1e:	d15a      	bne.n	8012fd6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d156      	bne.n	8012fd6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	8b5b      	ldrh	r3, [r3, #26]
 8012f2c:	f043 0302 	orr.w	r3, r3, #2
 8012f30:	b29a      	uxth	r2, r3
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8012f36:	6878      	ldr	r0, [r7, #4]
 8012f38:	f7fe fdbe 	bl	8011ab8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8012f3c:	4b18      	ldr	r3, [pc, #96]	; (8012fa0 <tcp_process+0x5d4>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	687a      	ldr	r2, [r7, #4]
 8012f42:	429a      	cmp	r2, r3
 8012f44:	d105      	bne.n	8012f52 <tcp_process+0x586>
 8012f46:	4b16      	ldr	r3, [pc, #88]	; (8012fa0 <tcp_process+0x5d4>)
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	68db      	ldr	r3, [r3, #12]
 8012f4c:	4a14      	ldr	r2, [pc, #80]	; (8012fa0 <tcp_process+0x5d4>)
 8012f4e:	6013      	str	r3, [r2, #0]
 8012f50:	e02e      	b.n	8012fb0 <tcp_process+0x5e4>
 8012f52:	4b13      	ldr	r3, [pc, #76]	; (8012fa0 <tcp_process+0x5d4>)
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	617b      	str	r3, [r7, #20]
 8012f58:	e027      	b.n	8012faa <tcp_process+0x5de>
 8012f5a:	697b      	ldr	r3, [r7, #20]
 8012f5c:	68db      	ldr	r3, [r3, #12]
 8012f5e:	687a      	ldr	r2, [r7, #4]
 8012f60:	429a      	cmp	r2, r3
 8012f62:	d11f      	bne.n	8012fa4 <tcp_process+0x5d8>
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	68da      	ldr	r2, [r3, #12]
 8012f68:	697b      	ldr	r3, [r7, #20]
 8012f6a:	60da      	str	r2, [r3, #12]
 8012f6c:	e020      	b.n	8012fb0 <tcp_process+0x5e4>
 8012f6e:	bf00      	nop
 8012f70:	200007c8 	.word	0x200007c8
 8012f74:	200007c0 	.word	0x200007c0
 8012f78:	200007c6 	.word	0x200007c6
 8012f7c:	200007bc 	.word	0x200007bc
 8012f80:	200007ac 	.word	0x200007ac
 8012f84:	20007c3c 	.word	0x20007c3c
 8012f88:	20007c40 	.word	0x20007c40
 8012f8c:	0801d94c 	.word	0x0801d94c
 8012f90:	0801dbec 	.word	0x0801dbec
 8012f94:	0801d998 	.word	0x0801d998
 8012f98:	200007c4 	.word	0x200007c4
 8012f9c:	200007c9 	.word	0x200007c9
 8012fa0:	2001a9b0 	.word	0x2001a9b0
 8012fa4:	697b      	ldr	r3, [r7, #20]
 8012fa6:	68db      	ldr	r3, [r3, #12]
 8012fa8:	617b      	str	r3, [r7, #20]
 8012faa:	697b      	ldr	r3, [r7, #20]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d1d4      	bne.n	8012f5a <tcp_process+0x58e>
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	60da      	str	r2, [r3, #12]
 8012fb6:	4b77      	ldr	r3, [pc, #476]	; (8013194 <tcp_process+0x7c8>)
 8012fb8:	2201      	movs	r2, #1
 8012fba:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	220a      	movs	r2, #10
 8012fc0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8012fc2:	4b75      	ldr	r3, [pc, #468]	; (8013198 <tcp_process+0x7cc>)
 8012fc4:	681a      	ldr	r2, [r3, #0]
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	60da      	str	r2, [r3, #12]
 8012fca:	4a73      	ldr	r2, [pc, #460]	; (8013198 <tcp_process+0x7cc>)
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	6013      	str	r3, [r2, #0]
 8012fd0:	f003 f952 	bl	8016278 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8012fd4:	e0d2      	b.n	801317c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	8b5b      	ldrh	r3, [r3, #26]
 8012fda:	f043 0302 	orr.w	r3, r3, #2
 8012fde:	b29a      	uxth	r2, r3
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	2208      	movs	r2, #8
 8012fe8:	751a      	strb	r2, [r3, #20]
      break;
 8012fea:	e0c7      	b.n	801317c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012fec:	4b6b      	ldr	r3, [pc, #428]	; (801319c <tcp_process+0x7d0>)
 8012fee:	781b      	ldrb	r3, [r3, #0]
 8012ff0:	f003 0310 	and.w	r3, r3, #16
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	f000 80c1 	beq.w	801317c <tcp_process+0x7b0>
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012ffe:	4b68      	ldr	r3, [pc, #416]	; (80131a0 <tcp_process+0x7d4>)
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	429a      	cmp	r2, r3
 8013004:	f040 80ba 	bne.w	801317c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801300c:	2b00      	cmp	r3, #0
 801300e:	f040 80b5 	bne.w	801317c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	2206      	movs	r2, #6
 8013016:	751a      	strb	r2, [r3, #20]
      break;
 8013018:	e0b0      	b.n	801317c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801301a:	6878      	ldr	r0, [r7, #4]
 801301c:	f000 f9ca 	bl	80133b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013020:	4b60      	ldr	r3, [pc, #384]	; (80131a4 <tcp_process+0x7d8>)
 8013022:	781b      	ldrb	r3, [r3, #0]
 8013024:	f003 0320 	and.w	r3, r3, #32
 8013028:	2b00      	cmp	r3, #0
 801302a:	f000 80a9 	beq.w	8013180 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	8b5b      	ldrh	r3, [r3, #26]
 8013032:	f043 0302 	orr.w	r3, r3, #2
 8013036:	b29a      	uxth	r2, r3
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801303c:	6878      	ldr	r0, [r7, #4]
 801303e:	f7fe fd3b 	bl	8011ab8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013042:	4b59      	ldr	r3, [pc, #356]	; (80131a8 <tcp_process+0x7dc>)
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	687a      	ldr	r2, [r7, #4]
 8013048:	429a      	cmp	r2, r3
 801304a:	d105      	bne.n	8013058 <tcp_process+0x68c>
 801304c:	4b56      	ldr	r3, [pc, #344]	; (80131a8 <tcp_process+0x7dc>)
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	68db      	ldr	r3, [r3, #12]
 8013052:	4a55      	ldr	r2, [pc, #340]	; (80131a8 <tcp_process+0x7dc>)
 8013054:	6013      	str	r3, [r2, #0]
 8013056:	e013      	b.n	8013080 <tcp_process+0x6b4>
 8013058:	4b53      	ldr	r3, [pc, #332]	; (80131a8 <tcp_process+0x7dc>)
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	613b      	str	r3, [r7, #16]
 801305e:	e00c      	b.n	801307a <tcp_process+0x6ae>
 8013060:	693b      	ldr	r3, [r7, #16]
 8013062:	68db      	ldr	r3, [r3, #12]
 8013064:	687a      	ldr	r2, [r7, #4]
 8013066:	429a      	cmp	r2, r3
 8013068:	d104      	bne.n	8013074 <tcp_process+0x6a8>
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	68da      	ldr	r2, [r3, #12]
 801306e:	693b      	ldr	r3, [r7, #16]
 8013070:	60da      	str	r2, [r3, #12]
 8013072:	e005      	b.n	8013080 <tcp_process+0x6b4>
 8013074:	693b      	ldr	r3, [r7, #16]
 8013076:	68db      	ldr	r3, [r3, #12]
 8013078:	613b      	str	r3, [r7, #16]
 801307a:	693b      	ldr	r3, [r7, #16]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d1ef      	bne.n	8013060 <tcp_process+0x694>
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	2200      	movs	r2, #0
 8013084:	60da      	str	r2, [r3, #12]
 8013086:	4b43      	ldr	r3, [pc, #268]	; (8013194 <tcp_process+0x7c8>)
 8013088:	2201      	movs	r2, #1
 801308a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	220a      	movs	r2, #10
 8013090:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013092:	4b41      	ldr	r3, [pc, #260]	; (8013198 <tcp_process+0x7cc>)
 8013094:	681a      	ldr	r2, [r3, #0]
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	60da      	str	r2, [r3, #12]
 801309a:	4a3f      	ldr	r2, [pc, #252]	; (8013198 <tcp_process+0x7cc>)
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	6013      	str	r3, [r2, #0]
 80130a0:	f003 f8ea 	bl	8016278 <tcp_timer_needed>
      }
      break;
 80130a4:	e06c      	b.n	8013180 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80130a6:	6878      	ldr	r0, [r7, #4]
 80130a8:	f000 f984 	bl	80133b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80130ac:	4b3b      	ldr	r3, [pc, #236]	; (801319c <tcp_process+0x7d0>)
 80130ae:	781b      	ldrb	r3, [r3, #0]
 80130b0:	f003 0310 	and.w	r3, r3, #16
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d065      	beq.n	8013184 <tcp_process+0x7b8>
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80130bc:	4b38      	ldr	r3, [pc, #224]	; (80131a0 <tcp_process+0x7d4>)
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	429a      	cmp	r2, r3
 80130c2:	d15f      	bne.n	8013184 <tcp_process+0x7b8>
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d15b      	bne.n	8013184 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80130cc:	6878      	ldr	r0, [r7, #4]
 80130ce:	f7fe fcf3 	bl	8011ab8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80130d2:	4b35      	ldr	r3, [pc, #212]	; (80131a8 <tcp_process+0x7dc>)
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	687a      	ldr	r2, [r7, #4]
 80130d8:	429a      	cmp	r2, r3
 80130da:	d105      	bne.n	80130e8 <tcp_process+0x71c>
 80130dc:	4b32      	ldr	r3, [pc, #200]	; (80131a8 <tcp_process+0x7dc>)
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	68db      	ldr	r3, [r3, #12]
 80130e2:	4a31      	ldr	r2, [pc, #196]	; (80131a8 <tcp_process+0x7dc>)
 80130e4:	6013      	str	r3, [r2, #0]
 80130e6:	e013      	b.n	8013110 <tcp_process+0x744>
 80130e8:	4b2f      	ldr	r3, [pc, #188]	; (80131a8 <tcp_process+0x7dc>)
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	60fb      	str	r3, [r7, #12]
 80130ee:	e00c      	b.n	801310a <tcp_process+0x73e>
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	68db      	ldr	r3, [r3, #12]
 80130f4:	687a      	ldr	r2, [r7, #4]
 80130f6:	429a      	cmp	r2, r3
 80130f8:	d104      	bne.n	8013104 <tcp_process+0x738>
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	68da      	ldr	r2, [r3, #12]
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	60da      	str	r2, [r3, #12]
 8013102:	e005      	b.n	8013110 <tcp_process+0x744>
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	68db      	ldr	r3, [r3, #12]
 8013108:	60fb      	str	r3, [r7, #12]
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d1ef      	bne.n	80130f0 <tcp_process+0x724>
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	2200      	movs	r2, #0
 8013114:	60da      	str	r2, [r3, #12]
 8013116:	4b1f      	ldr	r3, [pc, #124]	; (8013194 <tcp_process+0x7c8>)
 8013118:	2201      	movs	r2, #1
 801311a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	220a      	movs	r2, #10
 8013120:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013122:	4b1d      	ldr	r3, [pc, #116]	; (8013198 <tcp_process+0x7cc>)
 8013124:	681a      	ldr	r2, [r3, #0]
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	60da      	str	r2, [r3, #12]
 801312a:	4a1b      	ldr	r2, [pc, #108]	; (8013198 <tcp_process+0x7cc>)
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	6013      	str	r3, [r2, #0]
 8013130:	f003 f8a2 	bl	8016278 <tcp_timer_needed>
      }
      break;
 8013134:	e026      	b.n	8013184 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013136:	6878      	ldr	r0, [r7, #4]
 8013138:	f000 f93c 	bl	80133b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801313c:	4b17      	ldr	r3, [pc, #92]	; (801319c <tcp_process+0x7d0>)
 801313e:	781b      	ldrb	r3, [r3, #0]
 8013140:	f003 0310 	and.w	r3, r3, #16
 8013144:	2b00      	cmp	r3, #0
 8013146:	d01f      	beq.n	8013188 <tcp_process+0x7bc>
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801314c:	4b14      	ldr	r3, [pc, #80]	; (80131a0 <tcp_process+0x7d4>)
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	429a      	cmp	r2, r3
 8013152:	d119      	bne.n	8013188 <tcp_process+0x7bc>
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013158:	2b00      	cmp	r3, #0
 801315a:	d115      	bne.n	8013188 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801315c:	4b11      	ldr	r3, [pc, #68]	; (80131a4 <tcp_process+0x7d8>)
 801315e:	781b      	ldrb	r3, [r3, #0]
 8013160:	f043 0310 	orr.w	r3, r3, #16
 8013164:	b2da      	uxtb	r2, r3
 8013166:	4b0f      	ldr	r3, [pc, #60]	; (80131a4 <tcp_process+0x7d8>)
 8013168:	701a      	strb	r2, [r3, #0]
      }
      break;
 801316a:	e00d      	b.n	8013188 <tcp_process+0x7bc>
    default:
      break;
 801316c:	bf00      	nop
 801316e:	e00c      	b.n	801318a <tcp_process+0x7be>
      break;
 8013170:	bf00      	nop
 8013172:	e00a      	b.n	801318a <tcp_process+0x7be>
      break;
 8013174:	bf00      	nop
 8013176:	e008      	b.n	801318a <tcp_process+0x7be>
      break;
 8013178:	bf00      	nop
 801317a:	e006      	b.n	801318a <tcp_process+0x7be>
      break;
 801317c:	bf00      	nop
 801317e:	e004      	b.n	801318a <tcp_process+0x7be>
      break;
 8013180:	bf00      	nop
 8013182:	e002      	b.n	801318a <tcp_process+0x7be>
      break;
 8013184:	bf00      	nop
 8013186:	e000      	b.n	801318a <tcp_process+0x7be>
      break;
 8013188:	bf00      	nop
  }
  return ERR_OK;
 801318a:	2300      	movs	r3, #0
}
 801318c:	4618      	mov	r0, r3
 801318e:	3724      	adds	r7, #36	; 0x24
 8013190:	46bd      	mov	sp, r7
 8013192:	bd90      	pop	{r4, r7, pc}
 8013194:	2001a9ac 	.word	0x2001a9ac
 8013198:	2001a9c0 	.word	0x2001a9c0
 801319c:	200007c8 	.word	0x200007c8
 80131a0:	200007c0 	.word	0x200007c0
 80131a4:	200007c9 	.word	0x200007c9
 80131a8:	2001a9b0 	.word	0x2001a9b0

080131ac <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80131ac:	b590      	push	{r4, r7, lr}
 80131ae:	b085      	sub	sp, #20
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
 80131b4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d106      	bne.n	80131ca <tcp_oos_insert_segment+0x1e>
 80131bc:	4b3b      	ldr	r3, [pc, #236]	; (80132ac <tcp_oos_insert_segment+0x100>)
 80131be:	f240 421f 	movw	r2, #1055	; 0x41f
 80131c2:	493b      	ldr	r1, [pc, #236]	; (80132b0 <tcp_oos_insert_segment+0x104>)
 80131c4:	483b      	ldr	r0, [pc, #236]	; (80132b4 <tcp_oos_insert_segment+0x108>)
 80131c6:	f006 fed1 	bl	8019f6c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	68db      	ldr	r3, [r3, #12]
 80131ce:	899b      	ldrh	r3, [r3, #12]
 80131d0:	b29b      	uxth	r3, r3
 80131d2:	4618      	mov	r0, r3
 80131d4:	f7fb fabd 	bl	800e752 <lwip_htons>
 80131d8:	4603      	mov	r3, r0
 80131da:	b2db      	uxtb	r3, r3
 80131dc:	f003 0301 	and.w	r3, r3, #1
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d028      	beq.n	8013236 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80131e4:	6838      	ldr	r0, [r7, #0]
 80131e6:	f7fe f9b5 	bl	8011554 <tcp_segs_free>
    next = NULL;
 80131ea:	2300      	movs	r3, #0
 80131ec:	603b      	str	r3, [r7, #0]
 80131ee:	e056      	b.n	801329e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80131f0:	683b      	ldr	r3, [r7, #0]
 80131f2:	68db      	ldr	r3, [r3, #12]
 80131f4:	899b      	ldrh	r3, [r3, #12]
 80131f6:	b29b      	uxth	r3, r3
 80131f8:	4618      	mov	r0, r3
 80131fa:	f7fb faaa 	bl	800e752 <lwip_htons>
 80131fe:	4603      	mov	r3, r0
 8013200:	b2db      	uxtb	r3, r3
 8013202:	f003 0301 	and.w	r3, r3, #1
 8013206:	2b00      	cmp	r3, #0
 8013208:	d00d      	beq.n	8013226 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	68db      	ldr	r3, [r3, #12]
 801320e:	899b      	ldrh	r3, [r3, #12]
 8013210:	b29c      	uxth	r4, r3
 8013212:	2001      	movs	r0, #1
 8013214:	f7fb fa9d 	bl	800e752 <lwip_htons>
 8013218:	4603      	mov	r3, r0
 801321a:	461a      	mov	r2, r3
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	68db      	ldr	r3, [r3, #12]
 8013220:	4322      	orrs	r2, r4
 8013222:	b292      	uxth	r2, r2
 8013224:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013226:	683b      	ldr	r3, [r7, #0]
 8013228:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801322a:	683b      	ldr	r3, [r7, #0]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013230:	68f8      	ldr	r0, [r7, #12]
 8013232:	f7fe f9a4 	bl	801157e <tcp_seg_free>
    while (next &&
 8013236:	683b      	ldr	r3, [r7, #0]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d00e      	beq.n	801325a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	891b      	ldrh	r3, [r3, #8]
 8013240:	461a      	mov	r2, r3
 8013242:	4b1d      	ldr	r3, [pc, #116]	; (80132b8 <tcp_oos_insert_segment+0x10c>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	441a      	add	r2, r3
 8013248:	683b      	ldr	r3, [r7, #0]
 801324a:	68db      	ldr	r3, [r3, #12]
 801324c:	685b      	ldr	r3, [r3, #4]
 801324e:	6839      	ldr	r1, [r7, #0]
 8013250:	8909      	ldrh	r1, [r1, #8]
 8013252:	440b      	add	r3, r1
 8013254:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013256:	2b00      	cmp	r3, #0
 8013258:	daca      	bge.n	80131f0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801325a:	683b      	ldr	r3, [r7, #0]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d01e      	beq.n	801329e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	891b      	ldrh	r3, [r3, #8]
 8013264:	461a      	mov	r2, r3
 8013266:	4b14      	ldr	r3, [pc, #80]	; (80132b8 <tcp_oos_insert_segment+0x10c>)
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	441a      	add	r2, r3
 801326c:	683b      	ldr	r3, [r7, #0]
 801326e:	68db      	ldr	r3, [r3, #12]
 8013270:	685b      	ldr	r3, [r3, #4]
 8013272:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013274:	2b00      	cmp	r3, #0
 8013276:	dd12      	ble.n	801329e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013278:	683b      	ldr	r3, [r7, #0]
 801327a:	68db      	ldr	r3, [r3, #12]
 801327c:	685b      	ldr	r3, [r3, #4]
 801327e:	b29a      	uxth	r2, r3
 8013280:	4b0d      	ldr	r3, [pc, #52]	; (80132b8 <tcp_oos_insert_segment+0x10c>)
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	b29b      	uxth	r3, r3
 8013286:	1ad3      	subs	r3, r2, r3
 8013288:	b29a      	uxth	r2, r3
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	685a      	ldr	r2, [r3, #4]
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	891b      	ldrh	r3, [r3, #8]
 8013296:	4619      	mov	r1, r3
 8013298:	4610      	mov	r0, r2
 801329a:	f7fc fb87 	bl	800f9ac <pbuf_realloc>
    }
  }
  cseg->next = next;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	683a      	ldr	r2, [r7, #0]
 80132a2:	601a      	str	r2, [r3, #0]
}
 80132a4:	bf00      	nop
 80132a6:	3714      	adds	r7, #20
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd90      	pop	{r4, r7, pc}
 80132ac:	0801d94c 	.word	0x0801d94c
 80132b0:	0801dc0c 	.word	0x0801dc0c
 80132b4:	0801d998 	.word	0x0801d998
 80132b8:	200007bc 	.word	0x200007bc

080132bc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80132bc:	b5b0      	push	{r4, r5, r7, lr}
 80132be:	b086      	sub	sp, #24
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	60f8      	str	r0, [r7, #12]
 80132c4:	60b9      	str	r1, [r7, #8]
 80132c6:	607a      	str	r2, [r7, #4]
 80132c8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80132ca:	e03e      	b.n	801334a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80132cc:	68bb      	ldr	r3, [r7, #8]
 80132ce:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80132d0:	68bb      	ldr	r3, [r7, #8]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80132d6:	697b      	ldr	r3, [r7, #20]
 80132d8:	685b      	ldr	r3, [r3, #4]
 80132da:	4618      	mov	r0, r3
 80132dc:	f7fc fd74 	bl	800fdc8 <pbuf_clen>
 80132e0:	4603      	mov	r3, r0
 80132e2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80132ea:	8a7a      	ldrh	r2, [r7, #18]
 80132ec:	429a      	cmp	r2, r3
 80132ee:	d906      	bls.n	80132fe <tcp_free_acked_segments+0x42>
 80132f0:	4b2a      	ldr	r3, [pc, #168]	; (801339c <tcp_free_acked_segments+0xe0>)
 80132f2:	f240 4257 	movw	r2, #1111	; 0x457
 80132f6:	492a      	ldr	r1, [pc, #168]	; (80133a0 <tcp_free_acked_segments+0xe4>)
 80132f8:	482a      	ldr	r0, [pc, #168]	; (80133a4 <tcp_free_acked_segments+0xe8>)
 80132fa:	f006 fe37 	bl	8019f6c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013304:	8a7b      	ldrh	r3, [r7, #18]
 8013306:	1ad3      	subs	r3, r2, r3
 8013308:	b29a      	uxth	r2, r3
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013310:	697b      	ldr	r3, [r7, #20]
 8013312:	891a      	ldrh	r2, [r3, #8]
 8013314:	4b24      	ldr	r3, [pc, #144]	; (80133a8 <tcp_free_acked_segments+0xec>)
 8013316:	881b      	ldrh	r3, [r3, #0]
 8013318:	4413      	add	r3, r2
 801331a:	b29a      	uxth	r2, r3
 801331c:	4b22      	ldr	r3, [pc, #136]	; (80133a8 <tcp_free_acked_segments+0xec>)
 801331e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013320:	6978      	ldr	r0, [r7, #20]
 8013322:	f7fe f92c 	bl	801157e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801332c:	2b00      	cmp	r3, #0
 801332e:	d00c      	beq.n	801334a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013330:	68bb      	ldr	r3, [r7, #8]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d109      	bne.n	801334a <tcp_free_acked_segments+0x8e>
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d106      	bne.n	801334a <tcp_free_acked_segments+0x8e>
 801333c:	4b17      	ldr	r3, [pc, #92]	; (801339c <tcp_free_acked_segments+0xe0>)
 801333e:	f240 4261 	movw	r2, #1121	; 0x461
 8013342:	491a      	ldr	r1, [pc, #104]	; (80133ac <tcp_free_acked_segments+0xf0>)
 8013344:	4817      	ldr	r0, [pc, #92]	; (80133a4 <tcp_free_acked_segments+0xe8>)
 8013346:	f006 fe11 	bl	8019f6c <iprintf>
  while (seg_list != NULL &&
 801334a:	68bb      	ldr	r3, [r7, #8]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d020      	beq.n	8013392 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013350:	68bb      	ldr	r3, [r7, #8]
 8013352:	68db      	ldr	r3, [r3, #12]
 8013354:	685b      	ldr	r3, [r3, #4]
 8013356:	4618      	mov	r0, r3
 8013358:	f7fb fa10 	bl	800e77c <lwip_htonl>
 801335c:	4604      	mov	r4, r0
 801335e:	68bb      	ldr	r3, [r7, #8]
 8013360:	891b      	ldrh	r3, [r3, #8]
 8013362:	461d      	mov	r5, r3
 8013364:	68bb      	ldr	r3, [r7, #8]
 8013366:	68db      	ldr	r3, [r3, #12]
 8013368:	899b      	ldrh	r3, [r3, #12]
 801336a:	b29b      	uxth	r3, r3
 801336c:	4618      	mov	r0, r3
 801336e:	f7fb f9f0 	bl	800e752 <lwip_htons>
 8013372:	4603      	mov	r3, r0
 8013374:	b2db      	uxtb	r3, r3
 8013376:	f003 0303 	and.w	r3, r3, #3
 801337a:	2b00      	cmp	r3, #0
 801337c:	d001      	beq.n	8013382 <tcp_free_acked_segments+0xc6>
 801337e:	2301      	movs	r3, #1
 8013380:	e000      	b.n	8013384 <tcp_free_acked_segments+0xc8>
 8013382:	2300      	movs	r3, #0
 8013384:	442b      	add	r3, r5
 8013386:	18e2      	adds	r2, r4, r3
 8013388:	4b09      	ldr	r3, [pc, #36]	; (80133b0 <tcp_free_acked_segments+0xf4>)
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801338e:	2b00      	cmp	r3, #0
 8013390:	dd9c      	ble.n	80132cc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013392:	68bb      	ldr	r3, [r7, #8]
}
 8013394:	4618      	mov	r0, r3
 8013396:	3718      	adds	r7, #24
 8013398:	46bd      	mov	sp, r7
 801339a:	bdb0      	pop	{r4, r5, r7, pc}
 801339c:	0801d94c 	.word	0x0801d94c
 80133a0:	0801dc34 	.word	0x0801dc34
 80133a4:	0801d998 	.word	0x0801d998
 80133a8:	200007c4 	.word	0x200007c4
 80133ac:	0801dc5c 	.word	0x0801dc5c
 80133b0:	200007c0 	.word	0x200007c0

080133b4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80133b4:	b5b0      	push	{r4, r5, r7, lr}
 80133b6:	b094      	sub	sp, #80	; 0x50
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80133bc:	2300      	movs	r3, #0
 80133be:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d106      	bne.n	80133d4 <tcp_receive+0x20>
 80133c6:	4ba6      	ldr	r3, [pc, #664]	; (8013660 <tcp_receive+0x2ac>)
 80133c8:	f240 427b 	movw	r2, #1147	; 0x47b
 80133cc:	49a5      	ldr	r1, [pc, #660]	; (8013664 <tcp_receive+0x2b0>)
 80133ce:	48a6      	ldr	r0, [pc, #664]	; (8013668 <tcp_receive+0x2b4>)
 80133d0:	f006 fdcc 	bl	8019f6c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	7d1b      	ldrb	r3, [r3, #20]
 80133d8:	2b03      	cmp	r3, #3
 80133da:	d806      	bhi.n	80133ea <tcp_receive+0x36>
 80133dc:	4ba0      	ldr	r3, [pc, #640]	; (8013660 <tcp_receive+0x2ac>)
 80133de:	f240 427c 	movw	r2, #1148	; 0x47c
 80133e2:	49a2      	ldr	r1, [pc, #648]	; (801366c <tcp_receive+0x2b8>)
 80133e4:	48a0      	ldr	r0, [pc, #640]	; (8013668 <tcp_receive+0x2b4>)
 80133e6:	f006 fdc1 	bl	8019f6c <iprintf>

  if (flags & TCP_ACK) {
 80133ea:	4ba1      	ldr	r3, [pc, #644]	; (8013670 <tcp_receive+0x2bc>)
 80133ec:	781b      	ldrb	r3, [r3, #0]
 80133ee:	f003 0310 	and.w	r3, r3, #16
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	f000 8263 	beq.w	80138be <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80133fe:	461a      	mov	r2, r3
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013404:	4413      	add	r3, r2
 8013406:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801340c:	4b99      	ldr	r3, [pc, #612]	; (8013674 <tcp_receive+0x2c0>)
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	1ad3      	subs	r3, r2, r3
 8013412:	2b00      	cmp	r3, #0
 8013414:	db1b      	blt.n	801344e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801341a:	4b96      	ldr	r3, [pc, #600]	; (8013674 <tcp_receive+0x2c0>)
 801341c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801341e:	429a      	cmp	r2, r3
 8013420:	d106      	bne.n	8013430 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013426:	4b94      	ldr	r3, [pc, #592]	; (8013678 <tcp_receive+0x2c4>)
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	1ad3      	subs	r3, r2, r3
 801342c:	2b00      	cmp	r3, #0
 801342e:	db0e      	blt.n	801344e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013434:	4b90      	ldr	r3, [pc, #576]	; (8013678 <tcp_receive+0x2c4>)
 8013436:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013438:	429a      	cmp	r2, r3
 801343a:	d125      	bne.n	8013488 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801343c:	4b8f      	ldr	r3, [pc, #572]	; (801367c <tcp_receive+0x2c8>)
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	89db      	ldrh	r3, [r3, #14]
 8013442:	b29a      	uxth	r2, r3
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801344a:	429a      	cmp	r2, r3
 801344c:	d91c      	bls.n	8013488 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801344e:	4b8b      	ldr	r3, [pc, #556]	; (801367c <tcp_receive+0x2c8>)
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	89db      	ldrh	r3, [r3, #14]
 8013454:	b29a      	uxth	r2, r3
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013468:	429a      	cmp	r2, r3
 801346a:	d205      	bcs.n	8013478 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8013478:	4b7e      	ldr	r3, [pc, #504]	; (8013674 <tcp_receive+0x2c0>)
 801347a:	681a      	ldr	r2, [r3, #0]
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8013480:	4b7d      	ldr	r3, [pc, #500]	; (8013678 <tcp_receive+0x2c4>)
 8013482:	681a      	ldr	r2, [r3, #0]
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013488:	4b7b      	ldr	r3, [pc, #492]	; (8013678 <tcp_receive+0x2c4>)
 801348a:	681a      	ldr	r2, [r3, #0]
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013490:	1ad3      	subs	r3, r2, r3
 8013492:	2b00      	cmp	r3, #0
 8013494:	dc58      	bgt.n	8013548 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8013496:	4b7a      	ldr	r3, [pc, #488]	; (8013680 <tcp_receive+0x2cc>)
 8013498:	881b      	ldrh	r3, [r3, #0]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d14b      	bne.n	8013536 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80134a2:	687a      	ldr	r2, [r7, #4]
 80134a4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80134a8:	4413      	add	r3, r2
 80134aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80134ac:	429a      	cmp	r2, r3
 80134ae:	d142      	bne.n	8013536 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	db3d      	blt.n	8013536 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80134be:	4b6e      	ldr	r3, [pc, #440]	; (8013678 <tcp_receive+0x2c4>)
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	429a      	cmp	r2, r3
 80134c4:	d137      	bne.n	8013536 <tcp_receive+0x182>
              found_dupack = 1;
 80134c6:	2301      	movs	r3, #1
 80134c8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80134d0:	2bff      	cmp	r3, #255	; 0xff
 80134d2:	d007      	beq.n	80134e4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80134da:	3301      	adds	r3, #1
 80134dc:	b2da      	uxtb	r2, r3
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80134ea:	2b03      	cmp	r3, #3
 80134ec:	d91b      	bls.n	8013526 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134f8:	4413      	add	r3, r2
 80134fa:	b29a      	uxth	r2, r3
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013502:	429a      	cmp	r2, r3
 8013504:	d30a      	bcc.n	801351c <tcp_receive+0x168>
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013510:	4413      	add	r3, r2
 8013512:	b29a      	uxth	r2, r3
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801351a:	e004      	b.n	8013526 <tcp_receive+0x172>
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013522:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801352c:	2b02      	cmp	r3, #2
 801352e:	d902      	bls.n	8013536 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013530:	6878      	ldr	r0, [r7, #4]
 8013532:	f002 fb45 	bl	8015bc0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013538:	2b00      	cmp	r3, #0
 801353a:	f040 8160 	bne.w	80137fe <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	2200      	movs	r2, #0
 8013542:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013546:	e15a      	b.n	80137fe <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013548:	4b4b      	ldr	r3, [pc, #300]	; (8013678 <tcp_receive+0x2c4>)
 801354a:	681a      	ldr	r2, [r3, #0]
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013550:	1ad3      	subs	r3, r2, r3
 8013552:	3b01      	subs	r3, #1
 8013554:	2b00      	cmp	r3, #0
 8013556:	f2c0 814d 	blt.w	80137f4 <tcp_receive+0x440>
 801355a:	4b47      	ldr	r3, [pc, #284]	; (8013678 <tcp_receive+0x2c4>)
 801355c:	681a      	ldr	r2, [r3, #0]
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013562:	1ad3      	subs	r3, r2, r3
 8013564:	2b00      	cmp	r3, #0
 8013566:	f300 8145 	bgt.w	80137f4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	8b5b      	ldrh	r3, [r3, #26]
 801356e:	f003 0304 	and.w	r3, r3, #4
 8013572:	2b00      	cmp	r3, #0
 8013574:	d010      	beq.n	8013598 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	8b5b      	ldrh	r3, [r3, #26]
 801357a:	f023 0304 	bic.w	r3, r3, #4
 801357e:	b29a      	uxth	r2, r3
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	2200      	movs	r2, #0
 8013594:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	2200      	movs	r2, #0
 801359c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80135a6:	10db      	asrs	r3, r3, #3
 80135a8:	b21b      	sxth	r3, r3
 80135aa:	b29a      	uxth	r2, r3
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80135b2:	b29b      	uxth	r3, r3
 80135b4:	4413      	add	r3, r2
 80135b6:	b29b      	uxth	r3, r3
 80135b8:	b21a      	sxth	r2, r3
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80135c0:	4b2d      	ldr	r3, [pc, #180]	; (8013678 <tcp_receive+0x2c4>)
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	b29a      	uxth	r2, r3
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135ca:	b29b      	uxth	r3, r3
 80135cc:	1ad3      	subs	r3, r2, r3
 80135ce:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	2200      	movs	r2, #0
 80135d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80135d8:	4b27      	ldr	r3, [pc, #156]	; (8013678 <tcp_receive+0x2c4>)
 80135da:	681a      	ldr	r2, [r3, #0]
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	7d1b      	ldrb	r3, [r3, #20]
 80135e4:	2b03      	cmp	r3, #3
 80135e6:	f240 8096 	bls.w	8013716 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80135f6:	429a      	cmp	r2, r3
 80135f8:	d244      	bcs.n	8013684 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	8b5b      	ldrh	r3, [r3, #26]
 80135fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013602:	2b00      	cmp	r3, #0
 8013604:	d001      	beq.n	801360a <tcp_receive+0x256>
 8013606:	2301      	movs	r3, #1
 8013608:	e000      	b.n	801360c <tcp_receive+0x258>
 801360a:	2302      	movs	r3, #2
 801360c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013610:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013614:	b29a      	uxth	r2, r3
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801361a:	fb12 f303 	smulbb	r3, r2, r3
 801361e:	b29b      	uxth	r3, r3
 8013620:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013622:	4293      	cmp	r3, r2
 8013624:	bf28      	it	cs
 8013626:	4613      	movcs	r3, r2
 8013628:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013630:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013632:	4413      	add	r3, r2
 8013634:	b29a      	uxth	r2, r3
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801363c:	429a      	cmp	r2, r3
 801363e:	d309      	bcc.n	8013654 <tcp_receive+0x2a0>
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013646:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013648:	4413      	add	r3, r2
 801364a:	b29a      	uxth	r2, r3
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013652:	e060      	b.n	8013716 <tcp_receive+0x362>
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801365a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801365e:	e05a      	b.n	8013716 <tcp_receive+0x362>
 8013660:	0801d94c 	.word	0x0801d94c
 8013664:	0801dc7c 	.word	0x0801dc7c
 8013668:	0801d998 	.word	0x0801d998
 801366c:	0801dc98 	.word	0x0801dc98
 8013670:	200007c8 	.word	0x200007c8
 8013674:	200007bc 	.word	0x200007bc
 8013678:	200007c0 	.word	0x200007c0
 801367c:	200007ac 	.word	0x200007ac
 8013680:	200007c6 	.word	0x200007c6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801368a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801368c:	4413      	add	r3, r2
 801368e:	b29a      	uxth	r2, r3
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013696:	429a      	cmp	r2, r3
 8013698:	d309      	bcc.n	80136ae <tcp_receive+0x2fa>
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80136a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80136a2:	4413      	add	r3, r2
 80136a4:	b29a      	uxth	r2, r3
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80136ac:	e004      	b.n	80136b8 <tcp_receive+0x304>
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80136b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80136c4:	429a      	cmp	r2, r3
 80136c6:	d326      	bcc.n	8013716 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80136d4:	1ad3      	subs	r3, r2, r3
 80136d6:	b29a      	uxth	r2, r3
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136e8:	4413      	add	r3, r2
 80136ea:	b29a      	uxth	r2, r3
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80136f2:	429a      	cmp	r2, r3
 80136f4:	d30a      	bcc.n	801370c <tcp_receive+0x358>
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013700:	4413      	add	r3, r2
 8013702:	b29a      	uxth	r2, r3
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801370a:	e004      	b.n	8013716 <tcp_receive+0x362>
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013712:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801371e:	4a98      	ldr	r2, [pc, #608]	; (8013980 <tcp_receive+0x5cc>)
 8013720:	6878      	ldr	r0, [r7, #4]
 8013722:	f7ff fdcb 	bl	80132bc <tcp_free_acked_segments>
 8013726:	4602      	mov	r2, r0
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013734:	4a93      	ldr	r2, [pc, #588]	; (8013984 <tcp_receive+0x5d0>)
 8013736:	6878      	ldr	r0, [r7, #4]
 8013738:	f7ff fdc0 	bl	80132bc <tcp_free_acked_segments>
 801373c:	4602      	mov	r2, r0
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013746:	2b00      	cmp	r3, #0
 8013748:	d104      	bne.n	8013754 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013750:	861a      	strh	r2, [r3, #48]	; 0x30
 8013752:	e002      	b.n	801375a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	2200      	movs	r2, #0
 8013758:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	2200      	movs	r2, #0
 801375e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013764:	2b00      	cmp	r3, #0
 8013766:	d103      	bne.n	8013770 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	2200      	movs	r2, #0
 801376c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013776:	4b84      	ldr	r3, [pc, #528]	; (8013988 <tcp_receive+0x5d4>)
 8013778:	881b      	ldrh	r3, [r3, #0]
 801377a:	4413      	add	r3, r2
 801377c:	b29a      	uxth	r2, r3
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	8b5b      	ldrh	r3, [r3, #26]
 8013788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801378c:	2b00      	cmp	r3, #0
 801378e:	d035      	beq.n	80137fc <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013794:	2b00      	cmp	r3, #0
 8013796:	d118      	bne.n	80137ca <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801379c:	2b00      	cmp	r3, #0
 801379e:	d00c      	beq.n	80137ba <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137a8:	68db      	ldr	r3, [r3, #12]
 80137aa:	685b      	ldr	r3, [r3, #4]
 80137ac:	4618      	mov	r0, r3
 80137ae:	f7fa ffe5 	bl	800e77c <lwip_htonl>
 80137b2:	4603      	mov	r3, r0
 80137b4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	dc20      	bgt.n	80137fc <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	8b5b      	ldrh	r3, [r3, #26]
 80137be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80137c2:	b29a      	uxth	r2, r3
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80137c8:	e018      	b.n	80137fc <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137d2:	68db      	ldr	r3, [r3, #12]
 80137d4:	685b      	ldr	r3, [r3, #4]
 80137d6:	4618      	mov	r0, r3
 80137d8:	f7fa ffd0 	bl	800e77c <lwip_htonl>
 80137dc:	4603      	mov	r3, r0
 80137de:	1ae3      	subs	r3, r4, r3
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	dc0b      	bgt.n	80137fc <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	8b5b      	ldrh	r3, [r3, #26]
 80137e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80137ec:	b29a      	uxth	r2, r3
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80137f2:	e003      	b.n	80137fc <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80137f4:	6878      	ldr	r0, [r7, #4]
 80137f6:	f002 fbcf 	bl	8015f98 <tcp_send_empty_ack>
 80137fa:	e000      	b.n	80137fe <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80137fc:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013802:	2b00      	cmp	r3, #0
 8013804:	d05b      	beq.n	80138be <tcp_receive+0x50a>
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801380a:	4b60      	ldr	r3, [pc, #384]	; (801398c <tcp_receive+0x5d8>)
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	1ad3      	subs	r3, r2, r3
 8013810:	2b00      	cmp	r3, #0
 8013812:	da54      	bge.n	80138be <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013814:	4b5e      	ldr	r3, [pc, #376]	; (8013990 <tcp_receive+0x5dc>)
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	b29a      	uxth	r2, r3
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801381e:	b29b      	uxth	r3, r3
 8013820:	1ad3      	subs	r3, r2, r3
 8013822:	b29b      	uxth	r3, r3
 8013824:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013828:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013832:	10db      	asrs	r3, r3, #3
 8013834:	b21b      	sxth	r3, r3
 8013836:	b29b      	uxth	r3, r3
 8013838:	1ad3      	subs	r3, r2, r3
 801383a:	b29b      	uxth	r3, r3
 801383c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013846:	b29a      	uxth	r2, r3
 8013848:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801384c:	4413      	add	r3, r2
 801384e:	b29b      	uxth	r3, r3
 8013850:	b21a      	sxth	r2, r3
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8013856:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801385a:	2b00      	cmp	r3, #0
 801385c:	da05      	bge.n	801386a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801385e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013862:	425b      	negs	r3, r3
 8013864:	b29b      	uxth	r3, r3
 8013866:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801386a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013874:	109b      	asrs	r3, r3, #2
 8013876:	b21b      	sxth	r3, r3
 8013878:	b29b      	uxth	r3, r3
 801387a:	1ad3      	subs	r3, r2, r3
 801387c:	b29b      	uxth	r3, r3
 801387e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013888:	b29a      	uxth	r2, r3
 801388a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801388e:	4413      	add	r3, r2
 8013890:	b29b      	uxth	r3, r3
 8013892:	b21a      	sxth	r2, r3
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801389e:	10db      	asrs	r3, r3, #3
 80138a0:	b21b      	sxth	r3, r3
 80138a2:	b29a      	uxth	r2, r3
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80138aa:	b29b      	uxth	r3, r3
 80138ac:	4413      	add	r3, r2
 80138ae:	b29b      	uxth	r3, r3
 80138b0:	b21a      	sxth	r2, r3
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	2200      	movs	r2, #0
 80138bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80138be:	4b35      	ldr	r3, [pc, #212]	; (8013994 <tcp_receive+0x5e0>)
 80138c0:	881b      	ldrh	r3, [r3, #0]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	f000 84e1 	beq.w	801428a <tcp_receive+0xed6>
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	7d1b      	ldrb	r3, [r3, #20]
 80138cc:	2b06      	cmp	r3, #6
 80138ce:	f200 84dc 	bhi.w	801428a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80138d6:	4b30      	ldr	r3, [pc, #192]	; (8013998 <tcp_receive+0x5e4>)
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	1ad3      	subs	r3, r2, r3
 80138dc:	3b01      	subs	r3, #1
 80138de:	2b00      	cmp	r3, #0
 80138e0:	f2c0 808e 	blt.w	8013a00 <tcp_receive+0x64c>
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80138e8:	4b2a      	ldr	r3, [pc, #168]	; (8013994 <tcp_receive+0x5e0>)
 80138ea:	881b      	ldrh	r3, [r3, #0]
 80138ec:	4619      	mov	r1, r3
 80138ee:	4b2a      	ldr	r3, [pc, #168]	; (8013998 <tcp_receive+0x5e4>)
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	440b      	add	r3, r1
 80138f4:	1ad3      	subs	r3, r2, r3
 80138f6:	3301      	adds	r3, #1
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	f300 8081 	bgt.w	8013a00 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80138fe:	4b27      	ldr	r3, [pc, #156]	; (801399c <tcp_receive+0x5e8>)
 8013900:	685b      	ldr	r3, [r3, #4]
 8013902:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013908:	4b23      	ldr	r3, [pc, #140]	; (8013998 <tcp_receive+0x5e4>)
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	1ad3      	subs	r3, r2, r3
 801390e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013910:	4b22      	ldr	r3, [pc, #136]	; (801399c <tcp_receive+0x5e8>)
 8013912:	685b      	ldr	r3, [r3, #4]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d106      	bne.n	8013926 <tcp_receive+0x572>
 8013918:	4b21      	ldr	r3, [pc, #132]	; (80139a0 <tcp_receive+0x5ec>)
 801391a:	f240 5294 	movw	r2, #1428	; 0x594
 801391e:	4921      	ldr	r1, [pc, #132]	; (80139a4 <tcp_receive+0x5f0>)
 8013920:	4821      	ldr	r0, [pc, #132]	; (80139a8 <tcp_receive+0x5f4>)
 8013922:	f006 fb23 	bl	8019f6c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013928:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801392c:	4293      	cmp	r3, r2
 801392e:	d906      	bls.n	801393e <tcp_receive+0x58a>
 8013930:	4b1b      	ldr	r3, [pc, #108]	; (80139a0 <tcp_receive+0x5ec>)
 8013932:	f240 5295 	movw	r2, #1429	; 0x595
 8013936:	491d      	ldr	r1, [pc, #116]	; (80139ac <tcp_receive+0x5f8>)
 8013938:	481b      	ldr	r0, [pc, #108]	; (80139a8 <tcp_receive+0x5f4>)
 801393a:	f006 fb17 	bl	8019f6c <iprintf>
      off = (u16_t)off32;
 801393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013940:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013944:	4b15      	ldr	r3, [pc, #84]	; (801399c <tcp_receive+0x5e8>)
 8013946:	685b      	ldr	r3, [r3, #4]
 8013948:	891b      	ldrh	r3, [r3, #8]
 801394a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801394e:	429a      	cmp	r2, r3
 8013950:	d906      	bls.n	8013960 <tcp_receive+0x5ac>
 8013952:	4b13      	ldr	r3, [pc, #76]	; (80139a0 <tcp_receive+0x5ec>)
 8013954:	f240 5297 	movw	r2, #1431	; 0x597
 8013958:	4915      	ldr	r1, [pc, #84]	; (80139b0 <tcp_receive+0x5fc>)
 801395a:	4813      	ldr	r0, [pc, #76]	; (80139a8 <tcp_receive+0x5f4>)
 801395c:	f006 fb06 	bl	8019f6c <iprintf>
      inseg.len -= off;
 8013960:	4b0e      	ldr	r3, [pc, #56]	; (801399c <tcp_receive+0x5e8>)
 8013962:	891a      	ldrh	r2, [r3, #8]
 8013964:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013968:	1ad3      	subs	r3, r2, r3
 801396a:	b29a      	uxth	r2, r3
 801396c:	4b0b      	ldr	r3, [pc, #44]	; (801399c <tcp_receive+0x5e8>)
 801396e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8013970:	4b0a      	ldr	r3, [pc, #40]	; (801399c <tcp_receive+0x5e8>)
 8013972:	685b      	ldr	r3, [r3, #4]
 8013974:	891a      	ldrh	r2, [r3, #8]
 8013976:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801397a:	1ad3      	subs	r3, r2, r3
 801397c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801397e:	e029      	b.n	80139d4 <tcp_receive+0x620>
 8013980:	0801dcb4 	.word	0x0801dcb4
 8013984:	0801dcbc 	.word	0x0801dcbc
 8013988:	200007c4 	.word	0x200007c4
 801398c:	200007c0 	.word	0x200007c0
 8013990:	2001a9b4 	.word	0x2001a9b4
 8013994:	200007c6 	.word	0x200007c6
 8013998:	200007bc 	.word	0x200007bc
 801399c:	2000079c 	.word	0x2000079c
 80139a0:	0801d94c 	.word	0x0801d94c
 80139a4:	0801dcc4 	.word	0x0801dcc4
 80139a8:	0801d998 	.word	0x0801d998
 80139ac:	0801dcd4 	.word	0x0801dcd4
 80139b0:	0801dce4 	.word	0x0801dce4
        off -= p->len;
 80139b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139b6:	895b      	ldrh	r3, [r3, #10]
 80139b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80139bc:	1ad3      	subs	r3, r2, r3
 80139be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80139c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139c4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80139c6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80139c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139ca:	2200      	movs	r2, #0
 80139cc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80139ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80139d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139d6:	895b      	ldrh	r3, [r3, #10]
 80139d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80139dc:	429a      	cmp	r2, r3
 80139de:	d8e9      	bhi.n	80139b4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80139e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80139e4:	4619      	mov	r1, r3
 80139e6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80139e8:	f7fc f8e0 	bl	800fbac <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139f0:	4a91      	ldr	r2, [pc, #580]	; (8013c38 <tcp_receive+0x884>)
 80139f2:	6013      	str	r3, [r2, #0]
 80139f4:	4b91      	ldr	r3, [pc, #580]	; (8013c3c <tcp_receive+0x888>)
 80139f6:	68db      	ldr	r3, [r3, #12]
 80139f8:	4a8f      	ldr	r2, [pc, #572]	; (8013c38 <tcp_receive+0x884>)
 80139fa:	6812      	ldr	r2, [r2, #0]
 80139fc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80139fe:	e00d      	b.n	8013a1c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013a00:	4b8d      	ldr	r3, [pc, #564]	; (8013c38 <tcp_receive+0x884>)
 8013a02:	681a      	ldr	r2, [r3, #0]
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a08:	1ad3      	subs	r3, r2, r3
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	da06      	bge.n	8013a1c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	8b5b      	ldrh	r3, [r3, #26]
 8013a12:	f043 0302 	orr.w	r3, r3, #2
 8013a16:	b29a      	uxth	r2, r3
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013a1c:	4b86      	ldr	r3, [pc, #536]	; (8013c38 <tcp_receive+0x884>)
 8013a1e:	681a      	ldr	r2, [r3, #0]
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a24:	1ad3      	subs	r3, r2, r3
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	f2c0 842a 	blt.w	8014280 <tcp_receive+0xecc>
 8013a2c:	4b82      	ldr	r3, [pc, #520]	; (8013c38 <tcp_receive+0x884>)
 8013a2e:	681a      	ldr	r2, [r3, #0]
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a34:	6879      	ldr	r1, [r7, #4]
 8013a36:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013a38:	440b      	add	r3, r1
 8013a3a:	1ad3      	subs	r3, r2, r3
 8013a3c:	3301      	adds	r3, #1
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	f300 841e 	bgt.w	8014280 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013a48:	4b7b      	ldr	r3, [pc, #492]	; (8013c38 <tcp_receive+0x884>)
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	429a      	cmp	r2, r3
 8013a4e:	f040 829a 	bne.w	8013f86 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8013a52:	4b7a      	ldr	r3, [pc, #488]	; (8013c3c <tcp_receive+0x888>)
 8013a54:	891c      	ldrh	r4, [r3, #8]
 8013a56:	4b79      	ldr	r3, [pc, #484]	; (8013c3c <tcp_receive+0x888>)
 8013a58:	68db      	ldr	r3, [r3, #12]
 8013a5a:	899b      	ldrh	r3, [r3, #12]
 8013a5c:	b29b      	uxth	r3, r3
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f7fa fe77 	bl	800e752 <lwip_htons>
 8013a64:	4603      	mov	r3, r0
 8013a66:	b2db      	uxtb	r3, r3
 8013a68:	f003 0303 	and.w	r3, r3, #3
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d001      	beq.n	8013a74 <tcp_receive+0x6c0>
 8013a70:	2301      	movs	r3, #1
 8013a72:	e000      	b.n	8013a76 <tcp_receive+0x6c2>
 8013a74:	2300      	movs	r3, #0
 8013a76:	4423      	add	r3, r4
 8013a78:	b29a      	uxth	r2, r3
 8013a7a:	4b71      	ldr	r3, [pc, #452]	; (8013c40 <tcp_receive+0x88c>)
 8013a7c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013a82:	4b6f      	ldr	r3, [pc, #444]	; (8013c40 <tcp_receive+0x88c>)
 8013a84:	881b      	ldrh	r3, [r3, #0]
 8013a86:	429a      	cmp	r2, r3
 8013a88:	d275      	bcs.n	8013b76 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013a8a:	4b6c      	ldr	r3, [pc, #432]	; (8013c3c <tcp_receive+0x888>)
 8013a8c:	68db      	ldr	r3, [r3, #12]
 8013a8e:	899b      	ldrh	r3, [r3, #12]
 8013a90:	b29b      	uxth	r3, r3
 8013a92:	4618      	mov	r0, r3
 8013a94:	f7fa fe5d 	bl	800e752 <lwip_htons>
 8013a98:	4603      	mov	r3, r0
 8013a9a:	b2db      	uxtb	r3, r3
 8013a9c:	f003 0301 	and.w	r3, r3, #1
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d01f      	beq.n	8013ae4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013aa4:	4b65      	ldr	r3, [pc, #404]	; (8013c3c <tcp_receive+0x888>)
 8013aa6:	68db      	ldr	r3, [r3, #12]
 8013aa8:	899b      	ldrh	r3, [r3, #12]
 8013aaa:	b29b      	uxth	r3, r3
 8013aac:	b21b      	sxth	r3, r3
 8013aae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013ab2:	b21c      	sxth	r4, r3
 8013ab4:	4b61      	ldr	r3, [pc, #388]	; (8013c3c <tcp_receive+0x888>)
 8013ab6:	68db      	ldr	r3, [r3, #12]
 8013ab8:	899b      	ldrh	r3, [r3, #12]
 8013aba:	b29b      	uxth	r3, r3
 8013abc:	4618      	mov	r0, r3
 8013abe:	f7fa fe48 	bl	800e752 <lwip_htons>
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	b2db      	uxtb	r3, r3
 8013ac6:	b29b      	uxth	r3, r3
 8013ac8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013acc:	b29b      	uxth	r3, r3
 8013ace:	4618      	mov	r0, r3
 8013ad0:	f7fa fe3f 	bl	800e752 <lwip_htons>
 8013ad4:	4603      	mov	r3, r0
 8013ad6:	b21b      	sxth	r3, r3
 8013ad8:	4323      	orrs	r3, r4
 8013ada:	b21a      	sxth	r2, r3
 8013adc:	4b57      	ldr	r3, [pc, #348]	; (8013c3c <tcp_receive+0x888>)
 8013ade:	68db      	ldr	r3, [r3, #12]
 8013ae0:	b292      	uxth	r2, r2
 8013ae2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013ae8:	4b54      	ldr	r3, [pc, #336]	; (8013c3c <tcp_receive+0x888>)
 8013aea:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013aec:	4b53      	ldr	r3, [pc, #332]	; (8013c3c <tcp_receive+0x888>)
 8013aee:	68db      	ldr	r3, [r3, #12]
 8013af0:	899b      	ldrh	r3, [r3, #12]
 8013af2:	b29b      	uxth	r3, r3
 8013af4:	4618      	mov	r0, r3
 8013af6:	f7fa fe2c 	bl	800e752 <lwip_htons>
 8013afa:	4603      	mov	r3, r0
 8013afc:	b2db      	uxtb	r3, r3
 8013afe:	f003 0302 	and.w	r3, r3, #2
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d005      	beq.n	8013b12 <tcp_receive+0x75e>
            inseg.len -= 1;
 8013b06:	4b4d      	ldr	r3, [pc, #308]	; (8013c3c <tcp_receive+0x888>)
 8013b08:	891b      	ldrh	r3, [r3, #8]
 8013b0a:	3b01      	subs	r3, #1
 8013b0c:	b29a      	uxth	r2, r3
 8013b0e:	4b4b      	ldr	r3, [pc, #300]	; (8013c3c <tcp_receive+0x888>)
 8013b10:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013b12:	4b4a      	ldr	r3, [pc, #296]	; (8013c3c <tcp_receive+0x888>)
 8013b14:	685b      	ldr	r3, [r3, #4]
 8013b16:	4a49      	ldr	r2, [pc, #292]	; (8013c3c <tcp_receive+0x888>)
 8013b18:	8912      	ldrh	r2, [r2, #8]
 8013b1a:	4611      	mov	r1, r2
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	f7fb ff45 	bl	800f9ac <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013b22:	4b46      	ldr	r3, [pc, #280]	; (8013c3c <tcp_receive+0x888>)
 8013b24:	891c      	ldrh	r4, [r3, #8]
 8013b26:	4b45      	ldr	r3, [pc, #276]	; (8013c3c <tcp_receive+0x888>)
 8013b28:	68db      	ldr	r3, [r3, #12]
 8013b2a:	899b      	ldrh	r3, [r3, #12]
 8013b2c:	b29b      	uxth	r3, r3
 8013b2e:	4618      	mov	r0, r3
 8013b30:	f7fa fe0f 	bl	800e752 <lwip_htons>
 8013b34:	4603      	mov	r3, r0
 8013b36:	b2db      	uxtb	r3, r3
 8013b38:	f003 0303 	and.w	r3, r3, #3
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d001      	beq.n	8013b44 <tcp_receive+0x790>
 8013b40:	2301      	movs	r3, #1
 8013b42:	e000      	b.n	8013b46 <tcp_receive+0x792>
 8013b44:	2300      	movs	r3, #0
 8013b46:	4423      	add	r3, r4
 8013b48:	b29a      	uxth	r2, r3
 8013b4a:	4b3d      	ldr	r3, [pc, #244]	; (8013c40 <tcp_receive+0x88c>)
 8013b4c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013b4e:	4b3c      	ldr	r3, [pc, #240]	; (8013c40 <tcp_receive+0x88c>)
 8013b50:	881b      	ldrh	r3, [r3, #0]
 8013b52:	461a      	mov	r2, r3
 8013b54:	4b38      	ldr	r3, [pc, #224]	; (8013c38 <tcp_receive+0x884>)
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	441a      	add	r2, r3
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b5e:	6879      	ldr	r1, [r7, #4]
 8013b60:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013b62:	440b      	add	r3, r1
 8013b64:	429a      	cmp	r2, r3
 8013b66:	d006      	beq.n	8013b76 <tcp_receive+0x7c2>
 8013b68:	4b36      	ldr	r3, [pc, #216]	; (8013c44 <tcp_receive+0x890>)
 8013b6a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8013b6e:	4936      	ldr	r1, [pc, #216]	; (8013c48 <tcp_receive+0x894>)
 8013b70:	4836      	ldr	r0, [pc, #216]	; (8013c4c <tcp_receive+0x898>)
 8013b72:	f006 f9fb 	bl	8019f6c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	f000 80e7 	beq.w	8013d4e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013b80:	4b2e      	ldr	r3, [pc, #184]	; (8013c3c <tcp_receive+0x888>)
 8013b82:	68db      	ldr	r3, [r3, #12]
 8013b84:	899b      	ldrh	r3, [r3, #12]
 8013b86:	b29b      	uxth	r3, r3
 8013b88:	4618      	mov	r0, r3
 8013b8a:	f7fa fde2 	bl	800e752 <lwip_htons>
 8013b8e:	4603      	mov	r3, r0
 8013b90:	b2db      	uxtb	r3, r3
 8013b92:	f003 0301 	and.w	r3, r3, #1
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d010      	beq.n	8013bbc <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013b9a:	e00a      	b.n	8013bb2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ba0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ba6:	681a      	ldr	r2, [r3, #0]
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8013bac:	68f8      	ldr	r0, [r7, #12]
 8013bae:	f7fd fce6 	bl	801157e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d1f0      	bne.n	8013b9c <tcp_receive+0x7e8>
 8013bba:	e0c8      	b.n	8013d4e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013bc2:	e052      	b.n	8013c6a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bc6:	68db      	ldr	r3, [r3, #12]
 8013bc8:	899b      	ldrh	r3, [r3, #12]
 8013bca:	b29b      	uxth	r3, r3
 8013bcc:	4618      	mov	r0, r3
 8013bce:	f7fa fdc0 	bl	800e752 <lwip_htons>
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	b2db      	uxtb	r3, r3
 8013bd6:	f003 0301 	and.w	r3, r3, #1
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d03d      	beq.n	8013c5a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013bde:	4b17      	ldr	r3, [pc, #92]	; (8013c3c <tcp_receive+0x888>)
 8013be0:	68db      	ldr	r3, [r3, #12]
 8013be2:	899b      	ldrh	r3, [r3, #12]
 8013be4:	b29b      	uxth	r3, r3
 8013be6:	4618      	mov	r0, r3
 8013be8:	f7fa fdb3 	bl	800e752 <lwip_htons>
 8013bec:	4603      	mov	r3, r0
 8013bee:	b2db      	uxtb	r3, r3
 8013bf0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d130      	bne.n	8013c5a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013bf8:	4b10      	ldr	r3, [pc, #64]	; (8013c3c <tcp_receive+0x888>)
 8013bfa:	68db      	ldr	r3, [r3, #12]
 8013bfc:	899b      	ldrh	r3, [r3, #12]
 8013bfe:	b29c      	uxth	r4, r3
 8013c00:	2001      	movs	r0, #1
 8013c02:	f7fa fda6 	bl	800e752 <lwip_htons>
 8013c06:	4603      	mov	r3, r0
 8013c08:	461a      	mov	r2, r3
 8013c0a:	4b0c      	ldr	r3, [pc, #48]	; (8013c3c <tcp_receive+0x888>)
 8013c0c:	68db      	ldr	r3, [r3, #12]
 8013c0e:	4322      	orrs	r2, r4
 8013c10:	b292      	uxth	r2, r2
 8013c12:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013c14:	4b09      	ldr	r3, [pc, #36]	; (8013c3c <tcp_receive+0x888>)
 8013c16:	891c      	ldrh	r4, [r3, #8]
 8013c18:	4b08      	ldr	r3, [pc, #32]	; (8013c3c <tcp_receive+0x888>)
 8013c1a:	68db      	ldr	r3, [r3, #12]
 8013c1c:	899b      	ldrh	r3, [r3, #12]
 8013c1e:	b29b      	uxth	r3, r3
 8013c20:	4618      	mov	r0, r3
 8013c22:	f7fa fd96 	bl	800e752 <lwip_htons>
 8013c26:	4603      	mov	r3, r0
 8013c28:	b2db      	uxtb	r3, r3
 8013c2a:	f003 0303 	and.w	r3, r3, #3
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d00e      	beq.n	8013c50 <tcp_receive+0x89c>
 8013c32:	2301      	movs	r3, #1
 8013c34:	e00d      	b.n	8013c52 <tcp_receive+0x89e>
 8013c36:	bf00      	nop
 8013c38:	200007bc 	.word	0x200007bc
 8013c3c:	2000079c 	.word	0x2000079c
 8013c40:	200007c6 	.word	0x200007c6
 8013c44:	0801d94c 	.word	0x0801d94c
 8013c48:	0801dcf4 	.word	0x0801dcf4
 8013c4c:	0801d998 	.word	0x0801d998
 8013c50:	2300      	movs	r3, #0
 8013c52:	4423      	add	r3, r4
 8013c54:	b29a      	uxth	r2, r3
 8013c56:	4b98      	ldr	r3, [pc, #608]	; (8013eb8 <tcp_receive+0xb04>)
 8013c58:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8013c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c5c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8013c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8013c64:	6938      	ldr	r0, [r7, #16]
 8013c66:	f7fd fc8a 	bl	801157e <tcp_seg_free>
            while (next &&
 8013c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d00e      	beq.n	8013c8e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013c70:	4b91      	ldr	r3, [pc, #580]	; (8013eb8 <tcp_receive+0xb04>)
 8013c72:	881b      	ldrh	r3, [r3, #0]
 8013c74:	461a      	mov	r2, r3
 8013c76:	4b91      	ldr	r3, [pc, #580]	; (8013ebc <tcp_receive+0xb08>)
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	441a      	add	r2, r3
 8013c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c7e:	68db      	ldr	r3, [r3, #12]
 8013c80:	685b      	ldr	r3, [r3, #4]
 8013c82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013c84:	8909      	ldrh	r1, [r1, #8]
 8013c86:	440b      	add	r3, r1
 8013c88:	1ad3      	subs	r3, r2, r3
            while (next &&
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	da9a      	bge.n	8013bc4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8013c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d059      	beq.n	8013d48 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8013c94:	4b88      	ldr	r3, [pc, #544]	; (8013eb8 <tcp_receive+0xb04>)
 8013c96:	881b      	ldrh	r3, [r3, #0]
 8013c98:	461a      	mov	r2, r3
 8013c9a:	4b88      	ldr	r3, [pc, #544]	; (8013ebc <tcp_receive+0xb08>)
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	441a      	add	r2, r3
 8013ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ca2:	68db      	ldr	r3, [r3, #12]
 8013ca4:	685b      	ldr	r3, [r3, #4]
 8013ca6:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	dd4d      	ble.n	8013d48 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cae:	68db      	ldr	r3, [r3, #12]
 8013cb0:	685b      	ldr	r3, [r3, #4]
 8013cb2:	b29a      	uxth	r2, r3
 8013cb4:	4b81      	ldr	r3, [pc, #516]	; (8013ebc <tcp_receive+0xb08>)
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	b29b      	uxth	r3, r3
 8013cba:	1ad3      	subs	r3, r2, r3
 8013cbc:	b29a      	uxth	r2, r3
 8013cbe:	4b80      	ldr	r3, [pc, #512]	; (8013ec0 <tcp_receive+0xb0c>)
 8013cc0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013cc2:	4b7f      	ldr	r3, [pc, #508]	; (8013ec0 <tcp_receive+0xb0c>)
 8013cc4:	68db      	ldr	r3, [r3, #12]
 8013cc6:	899b      	ldrh	r3, [r3, #12]
 8013cc8:	b29b      	uxth	r3, r3
 8013cca:	4618      	mov	r0, r3
 8013ccc:	f7fa fd41 	bl	800e752 <lwip_htons>
 8013cd0:	4603      	mov	r3, r0
 8013cd2:	b2db      	uxtb	r3, r3
 8013cd4:	f003 0302 	and.w	r3, r3, #2
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d005      	beq.n	8013ce8 <tcp_receive+0x934>
                inseg.len -= 1;
 8013cdc:	4b78      	ldr	r3, [pc, #480]	; (8013ec0 <tcp_receive+0xb0c>)
 8013cde:	891b      	ldrh	r3, [r3, #8]
 8013ce0:	3b01      	subs	r3, #1
 8013ce2:	b29a      	uxth	r2, r3
 8013ce4:	4b76      	ldr	r3, [pc, #472]	; (8013ec0 <tcp_receive+0xb0c>)
 8013ce6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013ce8:	4b75      	ldr	r3, [pc, #468]	; (8013ec0 <tcp_receive+0xb0c>)
 8013cea:	685b      	ldr	r3, [r3, #4]
 8013cec:	4a74      	ldr	r2, [pc, #464]	; (8013ec0 <tcp_receive+0xb0c>)
 8013cee:	8912      	ldrh	r2, [r2, #8]
 8013cf0:	4611      	mov	r1, r2
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	f7fb fe5a 	bl	800f9ac <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013cf8:	4b71      	ldr	r3, [pc, #452]	; (8013ec0 <tcp_receive+0xb0c>)
 8013cfa:	891c      	ldrh	r4, [r3, #8]
 8013cfc:	4b70      	ldr	r3, [pc, #448]	; (8013ec0 <tcp_receive+0xb0c>)
 8013cfe:	68db      	ldr	r3, [r3, #12]
 8013d00:	899b      	ldrh	r3, [r3, #12]
 8013d02:	b29b      	uxth	r3, r3
 8013d04:	4618      	mov	r0, r3
 8013d06:	f7fa fd24 	bl	800e752 <lwip_htons>
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	b2db      	uxtb	r3, r3
 8013d0e:	f003 0303 	and.w	r3, r3, #3
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d001      	beq.n	8013d1a <tcp_receive+0x966>
 8013d16:	2301      	movs	r3, #1
 8013d18:	e000      	b.n	8013d1c <tcp_receive+0x968>
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	4423      	add	r3, r4
 8013d1e:	b29a      	uxth	r2, r3
 8013d20:	4b65      	ldr	r3, [pc, #404]	; (8013eb8 <tcp_receive+0xb04>)
 8013d22:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013d24:	4b64      	ldr	r3, [pc, #400]	; (8013eb8 <tcp_receive+0xb04>)
 8013d26:	881b      	ldrh	r3, [r3, #0]
 8013d28:	461a      	mov	r2, r3
 8013d2a:	4b64      	ldr	r3, [pc, #400]	; (8013ebc <tcp_receive+0xb08>)
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	441a      	add	r2, r3
 8013d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d32:	68db      	ldr	r3, [r3, #12]
 8013d34:	685b      	ldr	r3, [r3, #4]
 8013d36:	429a      	cmp	r2, r3
 8013d38:	d006      	beq.n	8013d48 <tcp_receive+0x994>
 8013d3a:	4b62      	ldr	r3, [pc, #392]	; (8013ec4 <tcp_receive+0xb10>)
 8013d3c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8013d40:	4961      	ldr	r1, [pc, #388]	; (8013ec8 <tcp_receive+0xb14>)
 8013d42:	4862      	ldr	r0, [pc, #392]	; (8013ecc <tcp_receive+0xb18>)
 8013d44:	f006 f912 	bl	8019f6c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013d4c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013d4e:	4b5a      	ldr	r3, [pc, #360]	; (8013eb8 <tcp_receive+0xb04>)
 8013d50:	881b      	ldrh	r3, [r3, #0]
 8013d52:	461a      	mov	r2, r3
 8013d54:	4b59      	ldr	r3, [pc, #356]	; (8013ebc <tcp_receive+0xb08>)
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	441a      	add	r2, r3
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013d62:	4b55      	ldr	r3, [pc, #340]	; (8013eb8 <tcp_receive+0xb04>)
 8013d64:	881b      	ldrh	r3, [r3, #0]
 8013d66:	429a      	cmp	r2, r3
 8013d68:	d206      	bcs.n	8013d78 <tcp_receive+0x9c4>
 8013d6a:	4b56      	ldr	r3, [pc, #344]	; (8013ec4 <tcp_receive+0xb10>)
 8013d6c:	f240 6207 	movw	r2, #1543	; 0x607
 8013d70:	4957      	ldr	r1, [pc, #348]	; (8013ed0 <tcp_receive+0xb1c>)
 8013d72:	4856      	ldr	r0, [pc, #344]	; (8013ecc <tcp_receive+0xb18>)
 8013d74:	f006 f8fa 	bl	8019f6c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013d7c:	4b4e      	ldr	r3, [pc, #312]	; (8013eb8 <tcp_receive+0xb04>)
 8013d7e:	881b      	ldrh	r3, [r3, #0]
 8013d80:	1ad3      	subs	r3, r2, r3
 8013d82:	b29a      	uxth	r2, r3
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013d88:	6878      	ldr	r0, [r7, #4]
 8013d8a:	f7fc fdbb 	bl	8010904 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013d8e:	4b4c      	ldr	r3, [pc, #304]	; (8013ec0 <tcp_receive+0xb0c>)
 8013d90:	685b      	ldr	r3, [r3, #4]
 8013d92:	891b      	ldrh	r3, [r3, #8]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d006      	beq.n	8013da6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8013d98:	4b49      	ldr	r3, [pc, #292]	; (8013ec0 <tcp_receive+0xb0c>)
 8013d9a:	685b      	ldr	r3, [r3, #4]
 8013d9c:	4a4d      	ldr	r2, [pc, #308]	; (8013ed4 <tcp_receive+0xb20>)
 8013d9e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013da0:	4b47      	ldr	r3, [pc, #284]	; (8013ec0 <tcp_receive+0xb0c>)
 8013da2:	2200      	movs	r2, #0
 8013da4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013da6:	4b46      	ldr	r3, [pc, #280]	; (8013ec0 <tcp_receive+0xb0c>)
 8013da8:	68db      	ldr	r3, [r3, #12]
 8013daa:	899b      	ldrh	r3, [r3, #12]
 8013dac:	b29b      	uxth	r3, r3
 8013dae:	4618      	mov	r0, r3
 8013db0:	f7fa fccf 	bl	800e752 <lwip_htons>
 8013db4:	4603      	mov	r3, r0
 8013db6:	b2db      	uxtb	r3, r3
 8013db8:	f003 0301 	and.w	r3, r3, #1
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	f000 80b8 	beq.w	8013f32 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8013dc2:	4b45      	ldr	r3, [pc, #276]	; (8013ed8 <tcp_receive+0xb24>)
 8013dc4:	781b      	ldrb	r3, [r3, #0]
 8013dc6:	f043 0320 	orr.w	r3, r3, #32
 8013dca:	b2da      	uxtb	r2, r3
 8013dcc:	4b42      	ldr	r3, [pc, #264]	; (8013ed8 <tcp_receive+0xb24>)
 8013dce:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013dd0:	e0af      	b.n	8013f32 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013dd6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ddc:	68db      	ldr	r3, [r3, #12]
 8013dde:	685b      	ldr	r3, [r3, #4]
 8013de0:	4a36      	ldr	r2, [pc, #216]	; (8013ebc <tcp_receive+0xb08>)
 8013de2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013de4:	68bb      	ldr	r3, [r7, #8]
 8013de6:	891b      	ldrh	r3, [r3, #8]
 8013de8:	461c      	mov	r4, r3
 8013dea:	68bb      	ldr	r3, [r7, #8]
 8013dec:	68db      	ldr	r3, [r3, #12]
 8013dee:	899b      	ldrh	r3, [r3, #12]
 8013df0:	b29b      	uxth	r3, r3
 8013df2:	4618      	mov	r0, r3
 8013df4:	f7fa fcad 	bl	800e752 <lwip_htons>
 8013df8:	4603      	mov	r3, r0
 8013dfa:	b2db      	uxtb	r3, r3
 8013dfc:	f003 0303 	and.w	r3, r3, #3
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d001      	beq.n	8013e08 <tcp_receive+0xa54>
 8013e04:	2301      	movs	r3, #1
 8013e06:	e000      	b.n	8013e0a <tcp_receive+0xa56>
 8013e08:	2300      	movs	r3, #0
 8013e0a:	191a      	adds	r2, r3, r4
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e10:	441a      	add	r2, r3
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013e1a:	461c      	mov	r4, r3
 8013e1c:	68bb      	ldr	r3, [r7, #8]
 8013e1e:	891b      	ldrh	r3, [r3, #8]
 8013e20:	461d      	mov	r5, r3
 8013e22:	68bb      	ldr	r3, [r7, #8]
 8013e24:	68db      	ldr	r3, [r3, #12]
 8013e26:	899b      	ldrh	r3, [r3, #12]
 8013e28:	b29b      	uxth	r3, r3
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	f7fa fc91 	bl	800e752 <lwip_htons>
 8013e30:	4603      	mov	r3, r0
 8013e32:	b2db      	uxtb	r3, r3
 8013e34:	f003 0303 	and.w	r3, r3, #3
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d001      	beq.n	8013e40 <tcp_receive+0xa8c>
 8013e3c:	2301      	movs	r3, #1
 8013e3e:	e000      	b.n	8013e42 <tcp_receive+0xa8e>
 8013e40:	2300      	movs	r3, #0
 8013e42:	442b      	add	r3, r5
 8013e44:	429c      	cmp	r4, r3
 8013e46:	d206      	bcs.n	8013e56 <tcp_receive+0xaa2>
 8013e48:	4b1e      	ldr	r3, [pc, #120]	; (8013ec4 <tcp_receive+0xb10>)
 8013e4a:	f240 622b 	movw	r2, #1579	; 0x62b
 8013e4e:	4923      	ldr	r1, [pc, #140]	; (8013edc <tcp_receive+0xb28>)
 8013e50:	481e      	ldr	r0, [pc, #120]	; (8013ecc <tcp_receive+0xb18>)
 8013e52:	f006 f88b 	bl	8019f6c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8013e56:	68bb      	ldr	r3, [r7, #8]
 8013e58:	891b      	ldrh	r3, [r3, #8]
 8013e5a:	461c      	mov	r4, r3
 8013e5c:	68bb      	ldr	r3, [r7, #8]
 8013e5e:	68db      	ldr	r3, [r3, #12]
 8013e60:	899b      	ldrh	r3, [r3, #12]
 8013e62:	b29b      	uxth	r3, r3
 8013e64:	4618      	mov	r0, r3
 8013e66:	f7fa fc74 	bl	800e752 <lwip_htons>
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	b2db      	uxtb	r3, r3
 8013e6e:	f003 0303 	and.w	r3, r3, #3
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d001      	beq.n	8013e7a <tcp_receive+0xac6>
 8013e76:	2301      	movs	r3, #1
 8013e78:	e000      	b.n	8013e7c <tcp_receive+0xac8>
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	1919      	adds	r1, r3, r4
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013e82:	b28b      	uxth	r3, r1
 8013e84:	1ad3      	subs	r3, r2, r3
 8013e86:	b29a      	uxth	r2, r3
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013e8c:	6878      	ldr	r0, [r7, #4]
 8013e8e:	f7fc fd39 	bl	8010904 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8013e92:	68bb      	ldr	r3, [r7, #8]
 8013e94:	685b      	ldr	r3, [r3, #4]
 8013e96:	891b      	ldrh	r3, [r3, #8]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d028      	beq.n	8013eee <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013e9c:	4b0d      	ldr	r3, [pc, #52]	; (8013ed4 <tcp_receive+0xb20>)
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d01d      	beq.n	8013ee0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8013ea4:	4b0b      	ldr	r3, [pc, #44]	; (8013ed4 <tcp_receive+0xb20>)
 8013ea6:	681a      	ldr	r2, [r3, #0]
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	685b      	ldr	r3, [r3, #4]
 8013eac:	4619      	mov	r1, r3
 8013eae:	4610      	mov	r0, r2
 8013eb0:	f7fb ffc4 	bl	800fe3c <pbuf_cat>
 8013eb4:	e018      	b.n	8013ee8 <tcp_receive+0xb34>
 8013eb6:	bf00      	nop
 8013eb8:	200007c6 	.word	0x200007c6
 8013ebc:	200007bc 	.word	0x200007bc
 8013ec0:	2000079c 	.word	0x2000079c
 8013ec4:	0801d94c 	.word	0x0801d94c
 8013ec8:	0801dd2c 	.word	0x0801dd2c
 8013ecc:	0801d998 	.word	0x0801d998
 8013ed0:	0801dd68 	.word	0x0801dd68
 8013ed4:	200007cc 	.word	0x200007cc
 8013ed8:	200007c9 	.word	0x200007c9
 8013edc:	0801dd88 	.word	0x0801dd88
            } else {
              recv_data = cseg->p;
 8013ee0:	68bb      	ldr	r3, [r7, #8]
 8013ee2:	685b      	ldr	r3, [r3, #4]
 8013ee4:	4a70      	ldr	r2, [pc, #448]	; (80140a8 <tcp_receive+0xcf4>)
 8013ee6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8013ee8:	68bb      	ldr	r3, [r7, #8]
 8013eea:	2200      	movs	r2, #0
 8013eec:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013eee:	68bb      	ldr	r3, [r7, #8]
 8013ef0:	68db      	ldr	r3, [r3, #12]
 8013ef2:	899b      	ldrh	r3, [r3, #12]
 8013ef4:	b29b      	uxth	r3, r3
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	f7fa fc2b 	bl	800e752 <lwip_htons>
 8013efc:	4603      	mov	r3, r0
 8013efe:	b2db      	uxtb	r3, r3
 8013f00:	f003 0301 	and.w	r3, r3, #1
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d00d      	beq.n	8013f24 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013f08:	4b68      	ldr	r3, [pc, #416]	; (80140ac <tcp_receive+0xcf8>)
 8013f0a:	781b      	ldrb	r3, [r3, #0]
 8013f0c:	f043 0320 	orr.w	r3, r3, #32
 8013f10:	b2da      	uxtb	r2, r3
 8013f12:	4b66      	ldr	r3, [pc, #408]	; (80140ac <tcp_receive+0xcf8>)
 8013f14:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	7d1b      	ldrb	r3, [r3, #20]
 8013f1a:	2b04      	cmp	r3, #4
 8013f1c:	d102      	bne.n	8013f24 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	2207      	movs	r2, #7
 8013f22:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013f24:	68bb      	ldr	r3, [r7, #8]
 8013f26:	681a      	ldr	r2, [r3, #0]
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8013f2c:	68b8      	ldr	r0, [r7, #8]
 8013f2e:	f7fd fb26 	bl	801157e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d008      	beq.n	8013f4c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013f3e:	68db      	ldr	r3, [r3, #12]
 8013f40:	685a      	ldr	r2, [r3, #4]
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8013f46:	429a      	cmp	r2, r3
 8013f48:	f43f af43 	beq.w	8013dd2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	8b5b      	ldrh	r3, [r3, #26]
 8013f50:	f003 0301 	and.w	r3, r3, #1
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d00e      	beq.n	8013f76 <tcp_receive+0xbc2>
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	8b5b      	ldrh	r3, [r3, #26]
 8013f5c:	f023 0301 	bic.w	r3, r3, #1
 8013f60:	b29a      	uxth	r2, r3
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	835a      	strh	r2, [r3, #26]
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	8b5b      	ldrh	r3, [r3, #26]
 8013f6a:	f043 0302 	orr.w	r3, r3, #2
 8013f6e:	b29a      	uxth	r2, r3
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013f74:	e188      	b.n	8014288 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	8b5b      	ldrh	r3, [r3, #26]
 8013f7a:	f043 0301 	orr.w	r3, r3, #1
 8013f7e:	b29a      	uxth	r2, r3
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013f84:	e180      	b.n	8014288 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d106      	bne.n	8013f9c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8013f8e:	4848      	ldr	r0, [pc, #288]	; (80140b0 <tcp_receive+0xcfc>)
 8013f90:	f7fd fb0e 	bl	80115b0 <tcp_seg_copy>
 8013f94:	4602      	mov	r2, r0
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	675a      	str	r2, [r3, #116]	; 0x74
 8013f9a:	e16d      	b.n	8014278 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013fa4:	63bb      	str	r3, [r7, #56]	; 0x38
 8013fa6:	e157      	b.n	8014258 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8013fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013faa:	68db      	ldr	r3, [r3, #12]
 8013fac:	685a      	ldr	r2, [r3, #4]
 8013fae:	4b41      	ldr	r3, [pc, #260]	; (80140b4 <tcp_receive+0xd00>)
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	429a      	cmp	r2, r3
 8013fb4:	d11d      	bne.n	8013ff2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8013fb6:	4b3e      	ldr	r3, [pc, #248]	; (80140b0 <tcp_receive+0xcfc>)
 8013fb8:	891a      	ldrh	r2, [r3, #8]
 8013fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fbc:	891b      	ldrh	r3, [r3, #8]
 8013fbe:	429a      	cmp	r2, r3
 8013fc0:	f240 814f 	bls.w	8014262 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013fc4:	483a      	ldr	r0, [pc, #232]	; (80140b0 <tcp_receive+0xcfc>)
 8013fc6:	f7fd faf3 	bl	80115b0 <tcp_seg_copy>
 8013fca:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8013fcc:	697b      	ldr	r3, [r7, #20]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	f000 8149 	beq.w	8014266 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8013fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d003      	beq.n	8013fe2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8013fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fdc:	697a      	ldr	r2, [r7, #20]
 8013fde:	601a      	str	r2, [r3, #0]
 8013fe0:	e002      	b.n	8013fe8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	697a      	ldr	r2, [r7, #20]
 8013fe6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013fe8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013fea:	6978      	ldr	r0, [r7, #20]
 8013fec:	f7ff f8de 	bl	80131ac <tcp_oos_insert_segment>
                }
                break;
 8013ff0:	e139      	b.n	8014266 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8013ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d117      	bne.n	8014028 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013ff8:	4b2e      	ldr	r3, [pc, #184]	; (80140b4 <tcp_receive+0xd00>)
 8013ffa:	681a      	ldr	r2, [r3, #0]
 8013ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ffe:	68db      	ldr	r3, [r3, #12]
 8014000:	685b      	ldr	r3, [r3, #4]
 8014002:	1ad3      	subs	r3, r2, r3
 8014004:	2b00      	cmp	r3, #0
 8014006:	da57      	bge.n	80140b8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014008:	4829      	ldr	r0, [pc, #164]	; (80140b0 <tcp_receive+0xcfc>)
 801400a:	f7fd fad1 	bl	80115b0 <tcp_seg_copy>
 801400e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014010:	69bb      	ldr	r3, [r7, #24]
 8014012:	2b00      	cmp	r3, #0
 8014014:	f000 8129 	beq.w	801426a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	69ba      	ldr	r2, [r7, #24]
 801401c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801401e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014020:	69b8      	ldr	r0, [r7, #24]
 8014022:	f7ff f8c3 	bl	80131ac <tcp_oos_insert_segment>
                  }
                  break;
 8014026:	e120      	b.n	801426a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014028:	4b22      	ldr	r3, [pc, #136]	; (80140b4 <tcp_receive+0xd00>)
 801402a:	681a      	ldr	r2, [r3, #0]
 801402c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801402e:	68db      	ldr	r3, [r3, #12]
 8014030:	685b      	ldr	r3, [r3, #4]
 8014032:	1ad3      	subs	r3, r2, r3
 8014034:	3b01      	subs	r3, #1
 8014036:	2b00      	cmp	r3, #0
 8014038:	db3e      	blt.n	80140b8 <tcp_receive+0xd04>
 801403a:	4b1e      	ldr	r3, [pc, #120]	; (80140b4 <tcp_receive+0xd00>)
 801403c:	681a      	ldr	r2, [r3, #0]
 801403e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014040:	68db      	ldr	r3, [r3, #12]
 8014042:	685b      	ldr	r3, [r3, #4]
 8014044:	1ad3      	subs	r3, r2, r3
 8014046:	3301      	adds	r3, #1
 8014048:	2b00      	cmp	r3, #0
 801404a:	dc35      	bgt.n	80140b8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801404c:	4818      	ldr	r0, [pc, #96]	; (80140b0 <tcp_receive+0xcfc>)
 801404e:	f7fd faaf 	bl	80115b0 <tcp_seg_copy>
 8014052:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014054:	69fb      	ldr	r3, [r7, #28]
 8014056:	2b00      	cmp	r3, #0
 8014058:	f000 8109 	beq.w	801426e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801405c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801405e:	68db      	ldr	r3, [r3, #12]
 8014060:	685b      	ldr	r3, [r3, #4]
 8014062:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014064:	8912      	ldrh	r2, [r2, #8]
 8014066:	441a      	add	r2, r3
 8014068:	4b12      	ldr	r3, [pc, #72]	; (80140b4 <tcp_receive+0xd00>)
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	1ad3      	subs	r3, r2, r3
 801406e:	2b00      	cmp	r3, #0
 8014070:	dd12      	ble.n	8014098 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014072:	4b10      	ldr	r3, [pc, #64]	; (80140b4 <tcp_receive+0xd00>)
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	b29a      	uxth	r2, r3
 8014078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801407a:	68db      	ldr	r3, [r3, #12]
 801407c:	685b      	ldr	r3, [r3, #4]
 801407e:	b29b      	uxth	r3, r3
 8014080:	1ad3      	subs	r3, r2, r3
 8014082:	b29a      	uxth	r2, r3
 8014084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014086:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801408a:	685a      	ldr	r2, [r3, #4]
 801408c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801408e:	891b      	ldrh	r3, [r3, #8]
 8014090:	4619      	mov	r1, r3
 8014092:	4610      	mov	r0, r2
 8014094:	f7fb fc8a 	bl	800f9ac <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801409a:	69fa      	ldr	r2, [r7, #28]
 801409c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801409e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80140a0:	69f8      	ldr	r0, [r7, #28]
 80140a2:	f7ff f883 	bl	80131ac <tcp_oos_insert_segment>
                  }
                  break;
 80140a6:	e0e2      	b.n	801426e <tcp_receive+0xeba>
 80140a8:	200007cc 	.word	0x200007cc
 80140ac:	200007c9 	.word	0x200007c9
 80140b0:	2000079c 	.word	0x2000079c
 80140b4:	200007bc 	.word	0x200007bc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80140b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140ba:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80140bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	f040 80c6 	bne.w	8014252 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80140c6:	4b80      	ldr	r3, [pc, #512]	; (80142c8 <tcp_receive+0xf14>)
 80140c8:	681a      	ldr	r2, [r3, #0]
 80140ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140cc:	68db      	ldr	r3, [r3, #12]
 80140ce:	685b      	ldr	r3, [r3, #4]
 80140d0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	f340 80bd 	ble.w	8014252 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80140d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140da:	68db      	ldr	r3, [r3, #12]
 80140dc:	899b      	ldrh	r3, [r3, #12]
 80140de:	b29b      	uxth	r3, r3
 80140e0:	4618      	mov	r0, r3
 80140e2:	f7fa fb36 	bl	800e752 <lwip_htons>
 80140e6:	4603      	mov	r3, r0
 80140e8:	b2db      	uxtb	r3, r3
 80140ea:	f003 0301 	and.w	r3, r3, #1
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	f040 80bf 	bne.w	8014272 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80140f4:	4875      	ldr	r0, [pc, #468]	; (80142cc <tcp_receive+0xf18>)
 80140f6:	f7fd fa5b 	bl	80115b0 <tcp_seg_copy>
 80140fa:	4602      	mov	r2, r0
 80140fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140fe:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	2b00      	cmp	r3, #0
 8014106:	f000 80b6 	beq.w	8014276 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801410c:	68db      	ldr	r3, [r3, #12]
 801410e:	685b      	ldr	r3, [r3, #4]
 8014110:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014112:	8912      	ldrh	r2, [r2, #8]
 8014114:	441a      	add	r2, r3
 8014116:	4b6c      	ldr	r3, [pc, #432]	; (80142c8 <tcp_receive+0xf14>)
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	1ad3      	subs	r3, r2, r3
 801411c:	2b00      	cmp	r3, #0
 801411e:	dd12      	ble.n	8014146 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014120:	4b69      	ldr	r3, [pc, #420]	; (80142c8 <tcp_receive+0xf14>)
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	b29a      	uxth	r2, r3
 8014126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014128:	68db      	ldr	r3, [r3, #12]
 801412a:	685b      	ldr	r3, [r3, #4]
 801412c:	b29b      	uxth	r3, r3
 801412e:	1ad3      	subs	r3, r2, r3
 8014130:	b29a      	uxth	r2, r3
 8014132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014134:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014138:	685a      	ldr	r2, [r3, #4]
 801413a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801413c:	891b      	ldrh	r3, [r3, #8]
 801413e:	4619      	mov	r1, r3
 8014140:	4610      	mov	r0, r2
 8014142:	f7fb fc33 	bl	800f9ac <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014146:	4b62      	ldr	r3, [pc, #392]	; (80142d0 <tcp_receive+0xf1c>)
 8014148:	881b      	ldrh	r3, [r3, #0]
 801414a:	461a      	mov	r2, r3
 801414c:	4b5e      	ldr	r3, [pc, #376]	; (80142c8 <tcp_receive+0xf14>)
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	441a      	add	r2, r3
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014156:	6879      	ldr	r1, [r7, #4]
 8014158:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801415a:	440b      	add	r3, r1
 801415c:	1ad3      	subs	r3, r2, r3
 801415e:	2b00      	cmp	r3, #0
 8014160:	f340 8089 	ble.w	8014276 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	68db      	ldr	r3, [r3, #12]
 801416a:	899b      	ldrh	r3, [r3, #12]
 801416c:	b29b      	uxth	r3, r3
 801416e:	4618      	mov	r0, r3
 8014170:	f7fa faef 	bl	800e752 <lwip_htons>
 8014174:	4603      	mov	r3, r0
 8014176:	b2db      	uxtb	r3, r3
 8014178:	f003 0301 	and.w	r3, r3, #1
 801417c:	2b00      	cmp	r3, #0
 801417e:	d022      	beq.n	80141c6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	68db      	ldr	r3, [r3, #12]
 8014186:	899b      	ldrh	r3, [r3, #12]
 8014188:	b29b      	uxth	r3, r3
 801418a:	b21b      	sxth	r3, r3
 801418c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014190:	b21c      	sxth	r4, r3
 8014192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	68db      	ldr	r3, [r3, #12]
 8014198:	899b      	ldrh	r3, [r3, #12]
 801419a:	b29b      	uxth	r3, r3
 801419c:	4618      	mov	r0, r3
 801419e:	f7fa fad8 	bl	800e752 <lwip_htons>
 80141a2:	4603      	mov	r3, r0
 80141a4:	b2db      	uxtb	r3, r3
 80141a6:	b29b      	uxth	r3, r3
 80141a8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80141ac:	b29b      	uxth	r3, r3
 80141ae:	4618      	mov	r0, r3
 80141b0:	f7fa facf 	bl	800e752 <lwip_htons>
 80141b4:	4603      	mov	r3, r0
 80141b6:	b21b      	sxth	r3, r3
 80141b8:	4323      	orrs	r3, r4
 80141ba:	b21a      	sxth	r2, r3
 80141bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	68db      	ldr	r3, [r3, #12]
 80141c2:	b292      	uxth	r2, r2
 80141c4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141ca:	b29a      	uxth	r2, r3
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80141d0:	4413      	add	r3, r2
 80141d2:	b299      	uxth	r1, r3
 80141d4:	4b3c      	ldr	r3, [pc, #240]	; (80142c8 <tcp_receive+0xf14>)
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	b29a      	uxth	r2, r3
 80141da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	1a8a      	subs	r2, r1, r2
 80141e0:	b292      	uxth	r2, r2
 80141e2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80141e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	685a      	ldr	r2, [r3, #4]
 80141ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	891b      	ldrh	r3, [r3, #8]
 80141f0:	4619      	mov	r1, r3
 80141f2:	4610      	mov	r0, r2
 80141f4:	f7fb fbda 	bl	800f9ac <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80141f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	891c      	ldrh	r4, [r3, #8]
 80141fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	68db      	ldr	r3, [r3, #12]
 8014204:	899b      	ldrh	r3, [r3, #12]
 8014206:	b29b      	uxth	r3, r3
 8014208:	4618      	mov	r0, r3
 801420a:	f7fa faa2 	bl	800e752 <lwip_htons>
 801420e:	4603      	mov	r3, r0
 8014210:	b2db      	uxtb	r3, r3
 8014212:	f003 0303 	and.w	r3, r3, #3
 8014216:	2b00      	cmp	r3, #0
 8014218:	d001      	beq.n	801421e <tcp_receive+0xe6a>
 801421a:	2301      	movs	r3, #1
 801421c:	e000      	b.n	8014220 <tcp_receive+0xe6c>
 801421e:	2300      	movs	r3, #0
 8014220:	4423      	add	r3, r4
 8014222:	b29a      	uxth	r2, r3
 8014224:	4b2a      	ldr	r3, [pc, #168]	; (80142d0 <tcp_receive+0xf1c>)
 8014226:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014228:	4b29      	ldr	r3, [pc, #164]	; (80142d0 <tcp_receive+0xf1c>)
 801422a:	881b      	ldrh	r3, [r3, #0]
 801422c:	461a      	mov	r2, r3
 801422e:	4b26      	ldr	r3, [pc, #152]	; (80142c8 <tcp_receive+0xf14>)
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	441a      	add	r2, r3
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014238:	6879      	ldr	r1, [r7, #4]
 801423a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801423c:	440b      	add	r3, r1
 801423e:	429a      	cmp	r2, r3
 8014240:	d019      	beq.n	8014276 <tcp_receive+0xec2>
 8014242:	4b24      	ldr	r3, [pc, #144]	; (80142d4 <tcp_receive+0xf20>)
 8014244:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014248:	4923      	ldr	r1, [pc, #140]	; (80142d8 <tcp_receive+0xf24>)
 801424a:	4824      	ldr	r0, [pc, #144]	; (80142dc <tcp_receive+0xf28>)
 801424c:	f005 fe8e 	bl	8019f6c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014250:	e011      	b.n	8014276 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	63bb      	str	r3, [r7, #56]	; 0x38
 8014258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801425a:	2b00      	cmp	r3, #0
 801425c:	f47f aea4 	bne.w	8013fa8 <tcp_receive+0xbf4>
 8014260:	e00a      	b.n	8014278 <tcp_receive+0xec4>
                break;
 8014262:	bf00      	nop
 8014264:	e008      	b.n	8014278 <tcp_receive+0xec4>
                break;
 8014266:	bf00      	nop
 8014268:	e006      	b.n	8014278 <tcp_receive+0xec4>
                  break;
 801426a:	bf00      	nop
 801426c:	e004      	b.n	8014278 <tcp_receive+0xec4>
                  break;
 801426e:	bf00      	nop
 8014270:	e002      	b.n	8014278 <tcp_receive+0xec4>
                  break;
 8014272:	bf00      	nop
 8014274:	e000      	b.n	8014278 <tcp_receive+0xec4>
                break;
 8014276:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014278:	6878      	ldr	r0, [r7, #4]
 801427a:	f001 fe8d 	bl	8015f98 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801427e:	e003      	b.n	8014288 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014280:	6878      	ldr	r0, [r7, #4]
 8014282:	f001 fe89 	bl	8015f98 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014286:	e01a      	b.n	80142be <tcp_receive+0xf0a>
 8014288:	e019      	b.n	80142be <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801428a:	4b0f      	ldr	r3, [pc, #60]	; (80142c8 <tcp_receive+0xf14>)
 801428c:	681a      	ldr	r2, [r3, #0]
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014292:	1ad3      	subs	r3, r2, r3
 8014294:	2b00      	cmp	r3, #0
 8014296:	db0a      	blt.n	80142ae <tcp_receive+0xefa>
 8014298:	4b0b      	ldr	r3, [pc, #44]	; (80142c8 <tcp_receive+0xf14>)
 801429a:	681a      	ldr	r2, [r3, #0]
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142a0:	6879      	ldr	r1, [r7, #4]
 80142a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80142a4:	440b      	add	r3, r1
 80142a6:	1ad3      	subs	r3, r2, r3
 80142a8:	3301      	adds	r3, #1
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	dd07      	ble.n	80142be <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	8b5b      	ldrh	r3, [r3, #26]
 80142b2:	f043 0302 	orr.w	r3, r3, #2
 80142b6:	b29a      	uxth	r2, r3
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80142bc:	e7ff      	b.n	80142be <tcp_receive+0xf0a>
 80142be:	bf00      	nop
 80142c0:	3750      	adds	r7, #80	; 0x50
 80142c2:	46bd      	mov	sp, r7
 80142c4:	bdb0      	pop	{r4, r5, r7, pc}
 80142c6:	bf00      	nop
 80142c8:	200007bc 	.word	0x200007bc
 80142cc:	2000079c 	.word	0x2000079c
 80142d0:	200007c6 	.word	0x200007c6
 80142d4:	0801d94c 	.word	0x0801d94c
 80142d8:	0801dcf4 	.word	0x0801dcf4
 80142dc:	0801d998 	.word	0x0801d998

080142e0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80142e0:	b480      	push	{r7}
 80142e2:	b083      	sub	sp, #12
 80142e4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80142e6:	4b15      	ldr	r3, [pc, #84]	; (801433c <tcp_get_next_optbyte+0x5c>)
 80142e8:	881b      	ldrh	r3, [r3, #0]
 80142ea:	1c5a      	adds	r2, r3, #1
 80142ec:	b291      	uxth	r1, r2
 80142ee:	4a13      	ldr	r2, [pc, #76]	; (801433c <tcp_get_next_optbyte+0x5c>)
 80142f0:	8011      	strh	r1, [r2, #0]
 80142f2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80142f4:	4b12      	ldr	r3, [pc, #72]	; (8014340 <tcp_get_next_optbyte+0x60>)
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d004      	beq.n	8014306 <tcp_get_next_optbyte+0x26>
 80142fc:	4b11      	ldr	r3, [pc, #68]	; (8014344 <tcp_get_next_optbyte+0x64>)
 80142fe:	881b      	ldrh	r3, [r3, #0]
 8014300:	88fa      	ldrh	r2, [r7, #6]
 8014302:	429a      	cmp	r2, r3
 8014304:	d208      	bcs.n	8014318 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014306:	4b10      	ldr	r3, [pc, #64]	; (8014348 <tcp_get_next_optbyte+0x68>)
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	3314      	adds	r3, #20
 801430c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801430e:	88fb      	ldrh	r3, [r7, #6]
 8014310:	683a      	ldr	r2, [r7, #0]
 8014312:	4413      	add	r3, r2
 8014314:	781b      	ldrb	r3, [r3, #0]
 8014316:	e00b      	b.n	8014330 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014318:	88fb      	ldrh	r3, [r7, #6]
 801431a:	b2da      	uxtb	r2, r3
 801431c:	4b09      	ldr	r3, [pc, #36]	; (8014344 <tcp_get_next_optbyte+0x64>)
 801431e:	881b      	ldrh	r3, [r3, #0]
 8014320:	b2db      	uxtb	r3, r3
 8014322:	1ad3      	subs	r3, r2, r3
 8014324:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014326:	4b06      	ldr	r3, [pc, #24]	; (8014340 <tcp_get_next_optbyte+0x60>)
 8014328:	681a      	ldr	r2, [r3, #0]
 801432a:	797b      	ldrb	r3, [r7, #5]
 801432c:	4413      	add	r3, r2
 801432e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014330:	4618      	mov	r0, r3
 8014332:	370c      	adds	r7, #12
 8014334:	46bd      	mov	sp, r7
 8014336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801433a:	4770      	bx	lr
 801433c:	200007b8 	.word	0x200007b8
 8014340:	200007b4 	.word	0x200007b4
 8014344:	200007b2 	.word	0x200007b2
 8014348:	200007ac 	.word	0x200007ac

0801434c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801434c:	b580      	push	{r7, lr}
 801434e:	b084      	sub	sp, #16
 8014350:	af00      	add	r7, sp, #0
 8014352:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d106      	bne.n	8014368 <tcp_parseopt+0x1c>
 801435a:	4b32      	ldr	r3, [pc, #200]	; (8014424 <tcp_parseopt+0xd8>)
 801435c:	f240 727d 	movw	r2, #1917	; 0x77d
 8014360:	4931      	ldr	r1, [pc, #196]	; (8014428 <tcp_parseopt+0xdc>)
 8014362:	4832      	ldr	r0, [pc, #200]	; (801442c <tcp_parseopt+0xe0>)
 8014364:	f005 fe02 	bl	8019f6c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014368:	4b31      	ldr	r3, [pc, #196]	; (8014430 <tcp_parseopt+0xe4>)
 801436a:	881b      	ldrh	r3, [r3, #0]
 801436c:	2b00      	cmp	r3, #0
 801436e:	d055      	beq.n	801441c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014370:	4b30      	ldr	r3, [pc, #192]	; (8014434 <tcp_parseopt+0xe8>)
 8014372:	2200      	movs	r2, #0
 8014374:	801a      	strh	r2, [r3, #0]
 8014376:	e045      	b.n	8014404 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8014378:	f7ff ffb2 	bl	80142e0 <tcp_get_next_optbyte>
 801437c:	4603      	mov	r3, r0
 801437e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014380:	7bfb      	ldrb	r3, [r7, #15]
 8014382:	2b02      	cmp	r3, #2
 8014384:	d006      	beq.n	8014394 <tcp_parseopt+0x48>
 8014386:	2b02      	cmp	r3, #2
 8014388:	dc2b      	bgt.n	80143e2 <tcp_parseopt+0x96>
 801438a:	2b00      	cmp	r3, #0
 801438c:	d041      	beq.n	8014412 <tcp_parseopt+0xc6>
 801438e:	2b01      	cmp	r3, #1
 8014390:	d127      	bne.n	80143e2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8014392:	e037      	b.n	8014404 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014394:	f7ff ffa4 	bl	80142e0 <tcp_get_next_optbyte>
 8014398:	4603      	mov	r3, r0
 801439a:	2b04      	cmp	r3, #4
 801439c:	d13b      	bne.n	8014416 <tcp_parseopt+0xca>
 801439e:	4b25      	ldr	r3, [pc, #148]	; (8014434 <tcp_parseopt+0xe8>)
 80143a0:	881b      	ldrh	r3, [r3, #0]
 80143a2:	3301      	adds	r3, #1
 80143a4:	4a22      	ldr	r2, [pc, #136]	; (8014430 <tcp_parseopt+0xe4>)
 80143a6:	8812      	ldrh	r2, [r2, #0]
 80143a8:	4293      	cmp	r3, r2
 80143aa:	da34      	bge.n	8014416 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80143ac:	f7ff ff98 	bl	80142e0 <tcp_get_next_optbyte>
 80143b0:	4603      	mov	r3, r0
 80143b2:	b29b      	uxth	r3, r3
 80143b4:	021b      	lsls	r3, r3, #8
 80143b6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80143b8:	f7ff ff92 	bl	80142e0 <tcp_get_next_optbyte>
 80143bc:	4603      	mov	r3, r0
 80143be:	b29a      	uxth	r2, r3
 80143c0:	89bb      	ldrh	r3, [r7, #12]
 80143c2:	4313      	orrs	r3, r2
 80143c4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80143c6:	89bb      	ldrh	r3, [r7, #12]
 80143c8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80143cc:	d804      	bhi.n	80143d8 <tcp_parseopt+0x8c>
 80143ce:	89bb      	ldrh	r3, [r7, #12]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d001      	beq.n	80143d8 <tcp_parseopt+0x8c>
 80143d4:	89ba      	ldrh	r2, [r7, #12]
 80143d6:	e001      	b.n	80143dc <tcp_parseopt+0x90>
 80143d8:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80143e0:	e010      	b.n	8014404 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80143e2:	f7ff ff7d 	bl	80142e0 <tcp_get_next_optbyte>
 80143e6:	4603      	mov	r3, r0
 80143e8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80143ea:	7afb      	ldrb	r3, [r7, #11]
 80143ec:	2b01      	cmp	r3, #1
 80143ee:	d914      	bls.n	801441a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80143f0:	7afb      	ldrb	r3, [r7, #11]
 80143f2:	b29a      	uxth	r2, r3
 80143f4:	4b0f      	ldr	r3, [pc, #60]	; (8014434 <tcp_parseopt+0xe8>)
 80143f6:	881b      	ldrh	r3, [r3, #0]
 80143f8:	4413      	add	r3, r2
 80143fa:	b29b      	uxth	r3, r3
 80143fc:	3b02      	subs	r3, #2
 80143fe:	b29a      	uxth	r2, r3
 8014400:	4b0c      	ldr	r3, [pc, #48]	; (8014434 <tcp_parseopt+0xe8>)
 8014402:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014404:	4b0b      	ldr	r3, [pc, #44]	; (8014434 <tcp_parseopt+0xe8>)
 8014406:	881a      	ldrh	r2, [r3, #0]
 8014408:	4b09      	ldr	r3, [pc, #36]	; (8014430 <tcp_parseopt+0xe4>)
 801440a:	881b      	ldrh	r3, [r3, #0]
 801440c:	429a      	cmp	r2, r3
 801440e:	d3b3      	bcc.n	8014378 <tcp_parseopt+0x2c>
 8014410:	e004      	b.n	801441c <tcp_parseopt+0xd0>
          return;
 8014412:	bf00      	nop
 8014414:	e002      	b.n	801441c <tcp_parseopt+0xd0>
            return;
 8014416:	bf00      	nop
 8014418:	e000      	b.n	801441c <tcp_parseopt+0xd0>
            return;
 801441a:	bf00      	nop
      }
    }
  }
}
 801441c:	3710      	adds	r7, #16
 801441e:	46bd      	mov	sp, r7
 8014420:	bd80      	pop	{r7, pc}
 8014422:	bf00      	nop
 8014424:	0801d94c 	.word	0x0801d94c
 8014428:	0801ddb0 	.word	0x0801ddb0
 801442c:	0801d998 	.word	0x0801d998
 8014430:	200007b0 	.word	0x200007b0
 8014434:	200007b8 	.word	0x200007b8

08014438 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014438:	b480      	push	{r7}
 801443a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801443c:	4b05      	ldr	r3, [pc, #20]	; (8014454 <tcp_trigger_input_pcb_close+0x1c>)
 801443e:	781b      	ldrb	r3, [r3, #0]
 8014440:	f043 0310 	orr.w	r3, r3, #16
 8014444:	b2da      	uxtb	r2, r3
 8014446:	4b03      	ldr	r3, [pc, #12]	; (8014454 <tcp_trigger_input_pcb_close+0x1c>)
 8014448:	701a      	strb	r2, [r3, #0]
}
 801444a:	bf00      	nop
 801444c:	46bd      	mov	sp, r7
 801444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014452:	4770      	bx	lr
 8014454:	200007c9 	.word	0x200007c9

08014458 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b084      	sub	sp, #16
 801445c:	af00      	add	r7, sp, #0
 801445e:	60f8      	str	r0, [r7, #12]
 8014460:	60b9      	str	r1, [r7, #8]
 8014462:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d00a      	beq.n	8014480 <tcp_route+0x28>
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	7a1b      	ldrb	r3, [r3, #8]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d006      	beq.n	8014480 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	7a1b      	ldrb	r3, [r3, #8]
 8014476:	4618      	mov	r0, r3
 8014478:	f7fb f8be 	bl	800f5f8 <netif_get_by_index>
 801447c:	4603      	mov	r3, r0
 801447e:	e003      	b.n	8014488 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014480:	6878      	ldr	r0, [r7, #4]
 8014482:	f003 fad7 	bl	8017a34 <ip4_route>
 8014486:	4603      	mov	r3, r0
  }
}
 8014488:	4618      	mov	r0, r3
 801448a:	3710      	adds	r7, #16
 801448c:	46bd      	mov	sp, r7
 801448e:	bd80      	pop	{r7, pc}

08014490 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014490:	b590      	push	{r4, r7, lr}
 8014492:	b087      	sub	sp, #28
 8014494:	af00      	add	r7, sp, #0
 8014496:	60f8      	str	r0, [r7, #12]
 8014498:	60b9      	str	r1, [r7, #8]
 801449a:	603b      	str	r3, [r7, #0]
 801449c:	4613      	mov	r3, r2
 801449e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d105      	bne.n	80144b2 <tcp_create_segment+0x22>
 80144a6:	4b44      	ldr	r3, [pc, #272]	; (80145b8 <tcp_create_segment+0x128>)
 80144a8:	22a3      	movs	r2, #163	; 0xa3
 80144aa:	4944      	ldr	r1, [pc, #272]	; (80145bc <tcp_create_segment+0x12c>)
 80144ac:	4844      	ldr	r0, [pc, #272]	; (80145c0 <tcp_create_segment+0x130>)
 80144ae:	f005 fd5d 	bl	8019f6c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80144b2:	68bb      	ldr	r3, [r7, #8]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d105      	bne.n	80144c4 <tcp_create_segment+0x34>
 80144b8:	4b3f      	ldr	r3, [pc, #252]	; (80145b8 <tcp_create_segment+0x128>)
 80144ba:	22a4      	movs	r2, #164	; 0xa4
 80144bc:	4941      	ldr	r1, [pc, #260]	; (80145c4 <tcp_create_segment+0x134>)
 80144be:	4840      	ldr	r0, [pc, #256]	; (80145c0 <tcp_create_segment+0x130>)
 80144c0:	f005 fd54 	bl	8019f6c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80144c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80144c8:	009b      	lsls	r3, r3, #2
 80144ca:	b2db      	uxtb	r3, r3
 80144cc:	f003 0304 	and.w	r3, r3, #4
 80144d0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80144d2:	2003      	movs	r0, #3
 80144d4:	f7fa fd92 	bl	800effc <memp_malloc>
 80144d8:	6138      	str	r0, [r7, #16]
 80144da:	693b      	ldr	r3, [r7, #16]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d104      	bne.n	80144ea <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80144e0:	68b8      	ldr	r0, [r7, #8]
 80144e2:	f7fb fbe9 	bl	800fcb8 <pbuf_free>
    return NULL;
 80144e6:	2300      	movs	r3, #0
 80144e8:	e061      	b.n	80145ae <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80144ea:	693b      	ldr	r3, [r7, #16]
 80144ec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80144f0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80144f2:	693b      	ldr	r3, [r7, #16]
 80144f4:	2200      	movs	r2, #0
 80144f6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80144f8:	693b      	ldr	r3, [r7, #16]
 80144fa:	68ba      	ldr	r2, [r7, #8]
 80144fc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80144fe:	68bb      	ldr	r3, [r7, #8]
 8014500:	891a      	ldrh	r2, [r3, #8]
 8014502:	7dfb      	ldrb	r3, [r7, #23]
 8014504:	b29b      	uxth	r3, r3
 8014506:	429a      	cmp	r2, r3
 8014508:	d205      	bcs.n	8014516 <tcp_create_segment+0x86>
 801450a:	4b2b      	ldr	r3, [pc, #172]	; (80145b8 <tcp_create_segment+0x128>)
 801450c:	22b0      	movs	r2, #176	; 0xb0
 801450e:	492e      	ldr	r1, [pc, #184]	; (80145c8 <tcp_create_segment+0x138>)
 8014510:	482b      	ldr	r0, [pc, #172]	; (80145c0 <tcp_create_segment+0x130>)
 8014512:	f005 fd2b 	bl	8019f6c <iprintf>
  seg->len = p->tot_len - optlen;
 8014516:	68bb      	ldr	r3, [r7, #8]
 8014518:	891a      	ldrh	r2, [r3, #8]
 801451a:	7dfb      	ldrb	r3, [r7, #23]
 801451c:	b29b      	uxth	r3, r3
 801451e:	1ad3      	subs	r3, r2, r3
 8014520:	b29a      	uxth	r2, r3
 8014522:	693b      	ldr	r3, [r7, #16]
 8014524:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014526:	2114      	movs	r1, #20
 8014528:	68b8      	ldr	r0, [r7, #8]
 801452a:	f7fb fb2f 	bl	800fb8c <pbuf_add_header>
 801452e:	4603      	mov	r3, r0
 8014530:	2b00      	cmp	r3, #0
 8014532:	d004      	beq.n	801453e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014534:	6938      	ldr	r0, [r7, #16]
 8014536:	f7fd f822 	bl	801157e <tcp_seg_free>
    return NULL;
 801453a:	2300      	movs	r3, #0
 801453c:	e037      	b.n	80145ae <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801453e:	693b      	ldr	r3, [r7, #16]
 8014540:	685b      	ldr	r3, [r3, #4]
 8014542:	685a      	ldr	r2, [r3, #4]
 8014544:	693b      	ldr	r3, [r7, #16]
 8014546:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	8ada      	ldrh	r2, [r3, #22]
 801454c:	693b      	ldr	r3, [r7, #16]
 801454e:	68dc      	ldr	r4, [r3, #12]
 8014550:	4610      	mov	r0, r2
 8014552:	f7fa f8fe 	bl	800e752 <lwip_htons>
 8014556:	4603      	mov	r3, r0
 8014558:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	8b1a      	ldrh	r2, [r3, #24]
 801455e:	693b      	ldr	r3, [r7, #16]
 8014560:	68dc      	ldr	r4, [r3, #12]
 8014562:	4610      	mov	r0, r2
 8014564:	f7fa f8f5 	bl	800e752 <lwip_htons>
 8014568:	4603      	mov	r3, r0
 801456a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801456c:	693b      	ldr	r3, [r7, #16]
 801456e:	68dc      	ldr	r4, [r3, #12]
 8014570:	6838      	ldr	r0, [r7, #0]
 8014572:	f7fa f903 	bl	800e77c <lwip_htonl>
 8014576:	4603      	mov	r3, r0
 8014578:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801457a:	7dfb      	ldrb	r3, [r7, #23]
 801457c:	089b      	lsrs	r3, r3, #2
 801457e:	b2db      	uxtb	r3, r3
 8014580:	b29b      	uxth	r3, r3
 8014582:	3305      	adds	r3, #5
 8014584:	b29b      	uxth	r3, r3
 8014586:	031b      	lsls	r3, r3, #12
 8014588:	b29a      	uxth	r2, r3
 801458a:	79fb      	ldrb	r3, [r7, #7]
 801458c:	b29b      	uxth	r3, r3
 801458e:	4313      	orrs	r3, r2
 8014590:	b29a      	uxth	r2, r3
 8014592:	693b      	ldr	r3, [r7, #16]
 8014594:	68dc      	ldr	r4, [r3, #12]
 8014596:	4610      	mov	r0, r2
 8014598:	f7fa f8db 	bl	800e752 <lwip_htons>
 801459c:	4603      	mov	r3, r0
 801459e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80145a0:	693b      	ldr	r3, [r7, #16]
 80145a2:	68db      	ldr	r3, [r3, #12]
 80145a4:	2200      	movs	r2, #0
 80145a6:	749a      	strb	r2, [r3, #18]
 80145a8:	2200      	movs	r2, #0
 80145aa:	74da      	strb	r2, [r3, #19]
  return seg;
 80145ac:	693b      	ldr	r3, [r7, #16]
}
 80145ae:	4618      	mov	r0, r3
 80145b0:	371c      	adds	r7, #28
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bd90      	pop	{r4, r7, pc}
 80145b6:	bf00      	nop
 80145b8:	0801ddcc 	.word	0x0801ddcc
 80145bc:	0801de00 	.word	0x0801de00
 80145c0:	0801de20 	.word	0x0801de20
 80145c4:	0801de48 	.word	0x0801de48
 80145c8:	0801de6c 	.word	0x0801de6c

080145cc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b086      	sub	sp, #24
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	607b      	str	r3, [r7, #4]
 80145d4:	4603      	mov	r3, r0
 80145d6:	73fb      	strb	r3, [r7, #15]
 80145d8:	460b      	mov	r3, r1
 80145da:	81bb      	strh	r3, [r7, #12]
 80145dc:	4613      	mov	r3, r2
 80145de:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80145e0:	89bb      	ldrh	r3, [r7, #12]
 80145e2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d105      	bne.n	80145f6 <tcp_pbuf_prealloc+0x2a>
 80145ea:	4b30      	ldr	r3, [pc, #192]	; (80146ac <tcp_pbuf_prealloc+0xe0>)
 80145ec:	22e8      	movs	r2, #232	; 0xe8
 80145ee:	4930      	ldr	r1, [pc, #192]	; (80146b0 <tcp_pbuf_prealloc+0xe4>)
 80145f0:	4830      	ldr	r0, [pc, #192]	; (80146b4 <tcp_pbuf_prealloc+0xe8>)
 80145f2:	f005 fcbb 	bl	8019f6c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80145f6:	6a3b      	ldr	r3, [r7, #32]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d105      	bne.n	8014608 <tcp_pbuf_prealloc+0x3c>
 80145fc:	4b2b      	ldr	r3, [pc, #172]	; (80146ac <tcp_pbuf_prealloc+0xe0>)
 80145fe:	22e9      	movs	r2, #233	; 0xe9
 8014600:	492d      	ldr	r1, [pc, #180]	; (80146b8 <tcp_pbuf_prealloc+0xec>)
 8014602:	482c      	ldr	r0, [pc, #176]	; (80146b4 <tcp_pbuf_prealloc+0xe8>)
 8014604:	f005 fcb2 	bl	8019f6c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8014608:	89ba      	ldrh	r2, [r7, #12]
 801460a:	897b      	ldrh	r3, [r7, #10]
 801460c:	429a      	cmp	r2, r3
 801460e:	d221      	bcs.n	8014654 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014610:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014614:	f003 0302 	and.w	r3, r3, #2
 8014618:	2b00      	cmp	r3, #0
 801461a:	d111      	bne.n	8014640 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801461c:	6a3b      	ldr	r3, [r7, #32]
 801461e:	8b5b      	ldrh	r3, [r3, #26]
 8014620:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014624:	2b00      	cmp	r3, #0
 8014626:	d115      	bne.n	8014654 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8014628:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801462c:	2b00      	cmp	r3, #0
 801462e:	d007      	beq.n	8014640 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8014630:	6a3b      	ldr	r3, [r7, #32]
 8014632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8014634:	2b00      	cmp	r3, #0
 8014636:	d103      	bne.n	8014640 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8014638:	6a3b      	ldr	r3, [r7, #32]
 801463a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801463c:	2b00      	cmp	r3, #0
 801463e:	d009      	beq.n	8014654 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8014640:	89bb      	ldrh	r3, [r7, #12]
 8014642:	f203 5303 	addw	r3, r3, #1283	; 0x503
 8014646:	f023 0203 	bic.w	r2, r3, #3
 801464a:	897b      	ldrh	r3, [r7, #10]
 801464c:	4293      	cmp	r3, r2
 801464e:	bf28      	it	cs
 8014650:	4613      	movcs	r3, r2
 8014652:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8014654:	8af9      	ldrh	r1, [r7, #22]
 8014656:	7bfb      	ldrb	r3, [r7, #15]
 8014658:	f44f 7220 	mov.w	r2, #640	; 0x280
 801465c:	4618      	mov	r0, r3
 801465e:	f7fb f847 	bl	800f6f0 <pbuf_alloc>
 8014662:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014664:	693b      	ldr	r3, [r7, #16]
 8014666:	2b00      	cmp	r3, #0
 8014668:	d101      	bne.n	801466e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801466a:	2300      	movs	r3, #0
 801466c:	e019      	b.n	80146a2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801466e:	693b      	ldr	r3, [r7, #16]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d006      	beq.n	8014684 <tcp_pbuf_prealloc+0xb8>
 8014676:	4b0d      	ldr	r3, [pc, #52]	; (80146ac <tcp_pbuf_prealloc+0xe0>)
 8014678:	f240 120b 	movw	r2, #267	; 0x10b
 801467c:	490f      	ldr	r1, [pc, #60]	; (80146bc <tcp_pbuf_prealloc+0xf0>)
 801467e:	480d      	ldr	r0, [pc, #52]	; (80146b4 <tcp_pbuf_prealloc+0xe8>)
 8014680:	f005 fc74 	bl	8019f6c <iprintf>
  *oversize = p->len - length;
 8014684:	693b      	ldr	r3, [r7, #16]
 8014686:	895a      	ldrh	r2, [r3, #10]
 8014688:	89bb      	ldrh	r3, [r7, #12]
 801468a:	1ad3      	subs	r3, r2, r3
 801468c:	b29a      	uxth	r2, r3
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8014692:	693b      	ldr	r3, [r7, #16]
 8014694:	89ba      	ldrh	r2, [r7, #12]
 8014696:	811a      	strh	r2, [r3, #8]
 8014698:	693b      	ldr	r3, [r7, #16]
 801469a:	891a      	ldrh	r2, [r3, #8]
 801469c:	693b      	ldr	r3, [r7, #16]
 801469e:	815a      	strh	r2, [r3, #10]
  return p;
 80146a0:	693b      	ldr	r3, [r7, #16]
}
 80146a2:	4618      	mov	r0, r3
 80146a4:	3718      	adds	r7, #24
 80146a6:	46bd      	mov	sp, r7
 80146a8:	bd80      	pop	{r7, pc}
 80146aa:	bf00      	nop
 80146ac:	0801ddcc 	.word	0x0801ddcc
 80146b0:	0801de84 	.word	0x0801de84
 80146b4:	0801de20 	.word	0x0801de20
 80146b8:	0801dea8 	.word	0x0801dea8
 80146bc:	0801dec8 	.word	0x0801dec8

080146c0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b082      	sub	sp, #8
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	6078      	str	r0, [r7, #4]
 80146c8:	460b      	mov	r3, r1
 80146ca:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d106      	bne.n	80146e0 <tcp_write_checks+0x20>
 80146d2:	4b34      	ldr	r3, [pc, #208]	; (80147a4 <tcp_write_checks+0xe4>)
 80146d4:	f240 1233 	movw	r2, #307	; 0x133
 80146d8:	4933      	ldr	r1, [pc, #204]	; (80147a8 <tcp_write_checks+0xe8>)
 80146da:	4834      	ldr	r0, [pc, #208]	; (80147ac <tcp_write_checks+0xec>)
 80146dc:	f005 fc46 	bl	8019f6c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	7d1b      	ldrb	r3, [r3, #20]
 80146e4:	2b04      	cmp	r3, #4
 80146e6:	d00e      	beq.n	8014706 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80146ec:	2b07      	cmp	r3, #7
 80146ee:	d00a      	beq.n	8014706 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80146f4:	2b02      	cmp	r3, #2
 80146f6:	d006      	beq.n	8014706 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80146fc:	2b03      	cmp	r3, #3
 80146fe:	d002      	beq.n	8014706 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8014700:	f06f 030a 	mvn.w	r3, #10
 8014704:	e049      	b.n	801479a <tcp_write_checks+0xda>
  } else if (len == 0) {
 8014706:	887b      	ldrh	r3, [r7, #2]
 8014708:	2b00      	cmp	r3, #0
 801470a:	d101      	bne.n	8014710 <tcp_write_checks+0x50>
    return ERR_OK;
 801470c:	2300      	movs	r3, #0
 801470e:	e044      	b.n	801479a <tcp_write_checks+0xda>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014716:	887a      	ldrh	r2, [r7, #2]
 8014718:	429a      	cmp	r2, r3
 801471a:	d909      	bls.n	8014730 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	8b5b      	ldrh	r3, [r3, #26]
 8014720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014724:	b29a      	uxth	r2, r3
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801472a:	f04f 33ff 	mov.w	r3, #4294967295
 801472e:	e034      	b.n	801479a <tcp_write_checks+0xda>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014736:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801473a:	d309      	bcc.n	8014750 <tcp_write_checks+0x90>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	8b5b      	ldrh	r3, [r3, #26]
 8014740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014744:	b29a      	uxth	r2, r3
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801474a:	f04f 33ff 	mov.w	r3, #4294967295
 801474e:	e024      	b.n	801479a <tcp_write_checks+0xda>
  }
  if (pcb->snd_queuelen != 0) {
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014756:	2b00      	cmp	r3, #0
 8014758:	d00f      	beq.n	801477a <tcp_write_checks+0xba>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801475e:	2b00      	cmp	r3, #0
 8014760:	d11a      	bne.n	8014798 <tcp_write_checks+0xd8>
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014766:	2b00      	cmp	r3, #0
 8014768:	d116      	bne.n	8014798 <tcp_write_checks+0xd8>
 801476a:	4b0e      	ldr	r3, [pc, #56]	; (80147a4 <tcp_write_checks+0xe4>)
 801476c:	f240 1255 	movw	r2, #341	; 0x155
 8014770:	490f      	ldr	r1, [pc, #60]	; (80147b0 <tcp_write_checks+0xf0>)
 8014772:	480e      	ldr	r0, [pc, #56]	; (80147ac <tcp_write_checks+0xec>)
 8014774:	f005 fbfa 	bl	8019f6c <iprintf>
 8014778:	e00e      	b.n	8014798 <tcp_write_checks+0xd8>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801477e:	2b00      	cmp	r3, #0
 8014780:	d103      	bne.n	801478a <tcp_write_checks+0xca>
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014786:	2b00      	cmp	r3, #0
 8014788:	d006      	beq.n	8014798 <tcp_write_checks+0xd8>
 801478a:	4b06      	ldr	r3, [pc, #24]	; (80147a4 <tcp_write_checks+0xe4>)
 801478c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8014790:	4908      	ldr	r1, [pc, #32]	; (80147b4 <tcp_write_checks+0xf4>)
 8014792:	4806      	ldr	r0, [pc, #24]	; (80147ac <tcp_write_checks+0xec>)
 8014794:	f005 fbea 	bl	8019f6c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8014798:	2300      	movs	r3, #0
}
 801479a:	4618      	mov	r0, r3
 801479c:	3708      	adds	r7, #8
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd80      	pop	{r7, pc}
 80147a2:	bf00      	nop
 80147a4:	0801ddcc 	.word	0x0801ddcc
 80147a8:	0801dedc 	.word	0x0801dedc
 80147ac:	0801de20 	.word	0x0801de20
 80147b0:	0801defc 	.word	0x0801defc
 80147b4:	0801df38 	.word	0x0801df38

080147b8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80147b8:	b590      	push	{r4, r7, lr}
 80147ba:	b09b      	sub	sp, #108	; 0x6c
 80147bc:	af04      	add	r7, sp, #16
 80147be:	60f8      	str	r0, [r7, #12]
 80147c0:	60b9      	str	r1, [r7, #8]
 80147c2:	4611      	mov	r1, r2
 80147c4:	461a      	mov	r2, r3
 80147c6:	460b      	mov	r3, r1
 80147c8:	80fb      	strh	r3, [r7, #6]
 80147ca:	4613      	mov	r3, r2
 80147cc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80147ce:	2300      	movs	r3, #0
 80147d0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80147d2:	2300      	movs	r3, #0
 80147d4:	653b      	str	r3, [r7, #80]	; 0x50
 80147d6:	2300      	movs	r3, #0
 80147d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80147da:	2300      	movs	r3, #0
 80147dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80147de:	2300      	movs	r3, #0
 80147e0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80147e2:	2300      	movs	r3, #0
 80147e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80147e8:	2300      	movs	r3, #0
 80147ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80147ee:	2300      	movs	r3, #0
 80147f0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80147f2:	2300      	movs	r3, #0
 80147f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80147f6:	2300      	movs	r3, #0
 80147f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d109      	bne.n	8014814 <tcp_write+0x5c>
 8014800:	4ba4      	ldr	r3, [pc, #656]	; (8014a94 <tcp_write+0x2dc>)
 8014802:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8014806:	49a4      	ldr	r1, [pc, #656]	; (8014a98 <tcp_write+0x2e0>)
 8014808:	48a4      	ldr	r0, [pc, #656]	; (8014a9c <tcp_write+0x2e4>)
 801480a:	f005 fbaf 	bl	8019f6c <iprintf>
 801480e:	f06f 030f 	mvn.w	r3, #15
 8014812:	e32c      	b.n	8014e6e <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801481a:	085b      	lsrs	r3, r3, #1
 801481c:	b29a      	uxth	r2, r3
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014822:	4293      	cmp	r3, r2
 8014824:	bf28      	it	cs
 8014826:	4613      	movcs	r3, r2
 8014828:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801482a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801482c:	2b00      	cmp	r3, #0
 801482e:	d102      	bne.n	8014836 <tcp_write+0x7e>
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014834:	e000      	b.n	8014838 <tcp_write+0x80>
 8014836:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014838:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801483a:	68bb      	ldr	r3, [r7, #8]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d109      	bne.n	8014854 <tcp_write+0x9c>
 8014840:	4b94      	ldr	r3, [pc, #592]	; (8014a94 <tcp_write+0x2dc>)
 8014842:	f240 12ad 	movw	r2, #429	; 0x1ad
 8014846:	4996      	ldr	r1, [pc, #600]	; (8014aa0 <tcp_write+0x2e8>)
 8014848:	4894      	ldr	r0, [pc, #592]	; (8014a9c <tcp_write+0x2e4>)
 801484a:	f005 fb8f 	bl	8019f6c <iprintf>
 801484e:	f06f 030f 	mvn.w	r3, #15
 8014852:	e30c      	b.n	8014e6e <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8014854:	88fb      	ldrh	r3, [r7, #6]
 8014856:	4619      	mov	r1, r3
 8014858:	68f8      	ldr	r0, [r7, #12]
 801485a:	f7ff ff31 	bl	80146c0 <tcp_write_checks>
 801485e:	4603      	mov	r3, r0
 8014860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8014864:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014868:	2b00      	cmp	r3, #0
 801486a:	d002      	beq.n	8014872 <tcp_write+0xba>
    return err;
 801486c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014870:	e2fd      	b.n	8014e6e <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014878:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801487c:	2300      	movs	r3, #0
 801487e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014886:	2b00      	cmp	r3, #0
 8014888:	f000 80f6 	beq.w	8014a78 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014890:	653b      	str	r3, [r7, #80]	; 0x50
 8014892:	e002      	b.n	801489a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8014894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801489a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d1f8      	bne.n	8014894 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80148a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148a4:	7a9b      	ldrb	r3, [r3, #10]
 80148a6:	009b      	lsls	r3, r3, #2
 80148a8:	b29b      	uxth	r3, r3
 80148aa:	f003 0304 	and.w	r3, r3, #4
 80148ae:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80148b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80148b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148b4:	891b      	ldrh	r3, [r3, #8]
 80148b6:	4619      	mov	r1, r3
 80148b8:	8c3b      	ldrh	r3, [r7, #32]
 80148ba:	440b      	add	r3, r1
 80148bc:	429a      	cmp	r2, r3
 80148be:	da06      	bge.n	80148ce <tcp_write+0x116>
 80148c0:	4b74      	ldr	r3, [pc, #464]	; (8014a94 <tcp_write+0x2dc>)
 80148c2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80148c6:	4977      	ldr	r1, [pc, #476]	; (8014aa4 <tcp_write+0x2ec>)
 80148c8:	4874      	ldr	r0, [pc, #464]	; (8014a9c <tcp_write+0x2e4>)
 80148ca:	f005 fb4f 	bl	8019f6c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80148ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148d0:	891a      	ldrh	r2, [r3, #8]
 80148d2:	8c3b      	ldrh	r3, [r7, #32]
 80148d4:	4413      	add	r3, r2
 80148d6:	b29b      	uxth	r3, r3
 80148d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80148da:	1ad3      	subs	r3, r2, r3
 80148dc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80148e4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80148e6:	8a7b      	ldrh	r3, [r7, #18]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d026      	beq.n	801493a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80148ec:	8a7b      	ldrh	r3, [r7, #18]
 80148ee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80148f0:	429a      	cmp	r2, r3
 80148f2:	d206      	bcs.n	8014902 <tcp_write+0x14a>
 80148f4:	4b67      	ldr	r3, [pc, #412]	; (8014a94 <tcp_write+0x2dc>)
 80148f6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80148fa:	496b      	ldr	r1, [pc, #428]	; (8014aa8 <tcp_write+0x2f0>)
 80148fc:	4867      	ldr	r0, [pc, #412]	; (8014a9c <tcp_write+0x2e4>)
 80148fe:	f005 fb35 	bl	8019f6c <iprintf>
      seg = last_unsent;
 8014902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014904:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8014906:	8a7b      	ldrh	r3, [r7, #18]
 8014908:	88fa      	ldrh	r2, [r7, #6]
 801490a:	4293      	cmp	r3, r2
 801490c:	bf28      	it	cs
 801490e:	4613      	movcs	r3, r2
 8014910:	b29b      	uxth	r3, r3
 8014912:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014914:	4293      	cmp	r3, r2
 8014916:	bf28      	it	cs
 8014918:	4613      	movcs	r3, r2
 801491a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801491c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014920:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014922:	4413      	add	r3, r2
 8014924:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8014928:	8a7a      	ldrh	r2, [r7, #18]
 801492a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801492c:	1ad3      	subs	r3, r2, r3
 801492e:	b29b      	uxth	r3, r3
 8014930:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8014932:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014934:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014936:	1ad3      	subs	r3, r2, r3
 8014938:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801493a:	8a7b      	ldrh	r3, [r7, #18]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d00b      	beq.n	8014958 <tcp_write+0x1a0>
 8014940:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014944:	88fb      	ldrh	r3, [r7, #6]
 8014946:	429a      	cmp	r2, r3
 8014948:	d006      	beq.n	8014958 <tcp_write+0x1a0>
 801494a:	4b52      	ldr	r3, [pc, #328]	; (8014a94 <tcp_write+0x2dc>)
 801494c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014950:	4956      	ldr	r1, [pc, #344]	; (8014aac <tcp_write+0x2f4>)
 8014952:	4852      	ldr	r0, [pc, #328]	; (8014a9c <tcp_write+0x2e4>)
 8014954:	f005 fb0a 	bl	8019f6c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8014958:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801495c:	88fb      	ldrh	r3, [r7, #6]
 801495e:	429a      	cmp	r2, r3
 8014960:	f080 8168 	bcs.w	8014c34 <tcp_write+0x47c>
 8014964:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014966:	2b00      	cmp	r3, #0
 8014968:	f000 8164 	beq.w	8014c34 <tcp_write+0x47c>
 801496c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801496e:	891b      	ldrh	r3, [r3, #8]
 8014970:	2b00      	cmp	r3, #0
 8014972:	f000 815f 	beq.w	8014c34 <tcp_write+0x47c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8014976:	88fa      	ldrh	r2, [r7, #6]
 8014978:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801497c:	1ad2      	subs	r2, r2, r3
 801497e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014980:	4293      	cmp	r3, r2
 8014982:	bfa8      	it	ge
 8014984:	4613      	movge	r3, r2
 8014986:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8014988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801498a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801498c:	797b      	ldrb	r3, [r7, #5]
 801498e:	f003 0301 	and.w	r3, r3, #1
 8014992:	2b00      	cmp	r3, #0
 8014994:	d027      	beq.n	80149e6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8014996:	f107 0012 	add.w	r0, r7, #18
 801499a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801499c:	8bf9      	ldrh	r1, [r7, #30]
 801499e:	2301      	movs	r3, #1
 80149a0:	9302      	str	r3, [sp, #8]
 80149a2:	797b      	ldrb	r3, [r7, #5]
 80149a4:	9301      	str	r3, [sp, #4]
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	9300      	str	r3, [sp, #0]
 80149aa:	4603      	mov	r3, r0
 80149ac:	2000      	movs	r0, #0
 80149ae:	f7ff fe0d 	bl	80145cc <tcp_pbuf_prealloc>
 80149b2:	6578      	str	r0, [r7, #84]	; 0x54
 80149b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	f000 8227 	beq.w	8014e0a <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80149bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80149be:	6858      	ldr	r0, [r3, #4]
 80149c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80149c4:	68ba      	ldr	r2, [r7, #8]
 80149c6:	4413      	add	r3, r2
 80149c8:	8bfa      	ldrh	r2, [r7, #30]
 80149ca:	4619      	mov	r1, r3
 80149cc:	f004 fda4 	bl	8019518 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80149d0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80149d2:	f7fb f9f9 	bl	800fdc8 <pbuf_clen>
 80149d6:	4603      	mov	r3, r0
 80149d8:	461a      	mov	r2, r3
 80149da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80149de:	4413      	add	r3, r2
 80149e0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80149e4:	e041      	b.n	8014a6a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80149e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80149e8:	685b      	ldr	r3, [r3, #4]
 80149ea:	637b      	str	r3, [r7, #52]	; 0x34
 80149ec:	e002      	b.n	80149f4 <tcp_write+0x23c>
 80149ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	637b      	str	r3, [r7, #52]	; 0x34
 80149f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d1f8      	bne.n	80149ee <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80149fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149fe:	7b1b      	ldrb	r3, [r3, #12]
 8014a00:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d115      	bne.n	8014a34 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8014a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a0a:	685b      	ldr	r3, [r3, #4]
 8014a0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a0e:	8952      	ldrh	r2, [r2, #10]
 8014a10:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8014a12:	68ba      	ldr	r2, [r7, #8]
 8014a14:	429a      	cmp	r2, r3
 8014a16:	d10d      	bne.n	8014a34 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8014a18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d006      	beq.n	8014a2e <tcp_write+0x276>
 8014a20:	4b1c      	ldr	r3, [pc, #112]	; (8014a94 <tcp_write+0x2dc>)
 8014a22:	f240 2231 	movw	r2, #561	; 0x231
 8014a26:	4922      	ldr	r1, [pc, #136]	; (8014ab0 <tcp_write+0x2f8>)
 8014a28:	481c      	ldr	r0, [pc, #112]	; (8014a9c <tcp_write+0x2e4>)
 8014a2a:	f005 fa9f 	bl	8019f6c <iprintf>
          extendlen = seglen;
 8014a2e:	8bfb      	ldrh	r3, [r7, #30]
 8014a30:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8014a32:	e01a      	b.n	8014a6a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8014a34:	8bfb      	ldrh	r3, [r7, #30]
 8014a36:	2201      	movs	r2, #1
 8014a38:	4619      	mov	r1, r3
 8014a3a:	2000      	movs	r0, #0
 8014a3c:	f7fa fe58 	bl	800f6f0 <pbuf_alloc>
 8014a40:	6578      	str	r0, [r7, #84]	; 0x54
 8014a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	f000 81e2 	beq.w	8014e0e <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8014a4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014a4e:	68ba      	ldr	r2, [r7, #8]
 8014a50:	441a      	add	r2, r3
 8014a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a54:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8014a56:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014a58:	f7fb f9b6 	bl	800fdc8 <pbuf_clen>
 8014a5c:	4603      	mov	r3, r0
 8014a5e:	461a      	mov	r2, r3
 8014a60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014a64:	4413      	add	r3, r2
 8014a66:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8014a6a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014a6e:	8bfb      	ldrh	r3, [r7, #30]
 8014a70:	4413      	add	r3, r2
 8014a72:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8014a76:	e0dd      	b.n	8014c34 <tcp_write+0x47c>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	f000 80d8 	beq.w	8014c34 <tcp_write+0x47c>
 8014a84:	4b03      	ldr	r3, [pc, #12]	; (8014a94 <tcp_write+0x2dc>)
 8014a86:	f240 224a 	movw	r2, #586	; 0x24a
 8014a8a:	490a      	ldr	r1, [pc, #40]	; (8014ab4 <tcp_write+0x2fc>)
 8014a8c:	4803      	ldr	r0, [pc, #12]	; (8014a9c <tcp_write+0x2e4>)
 8014a8e:	f005 fa6d 	bl	8019f6c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8014a92:	e0cf      	b.n	8014c34 <tcp_write+0x47c>
 8014a94:	0801ddcc 	.word	0x0801ddcc
 8014a98:	0801df6c 	.word	0x0801df6c
 8014a9c:	0801de20 	.word	0x0801de20
 8014aa0:	0801df84 	.word	0x0801df84
 8014aa4:	0801dfb8 	.word	0x0801dfb8
 8014aa8:	0801dfd0 	.word	0x0801dfd0
 8014aac:	0801dff0 	.word	0x0801dff0
 8014ab0:	0801e010 	.word	0x0801e010
 8014ab4:	0801e03c 	.word	0x0801e03c
    struct pbuf *p;
    u16_t left = len - pos;
 8014ab8:	88fa      	ldrh	r2, [r7, #6]
 8014aba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014abe:	1ad3      	subs	r3, r2, r3
 8014ac0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8014ac2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014ac6:	b29b      	uxth	r3, r3
 8014ac8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014aca:	1ad3      	subs	r3, r2, r3
 8014acc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8014ace:	8b7a      	ldrh	r2, [r7, #26]
 8014ad0:	8bbb      	ldrh	r3, [r7, #28]
 8014ad2:	4293      	cmp	r3, r2
 8014ad4:	bf28      	it	cs
 8014ad6:	4613      	movcs	r3, r2
 8014ad8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8014ada:	797b      	ldrb	r3, [r7, #5]
 8014adc:	f003 0301 	and.w	r3, r3, #1
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d036      	beq.n	8014b52 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8014ae4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014ae8:	b29a      	uxth	r2, r3
 8014aea:	8b3b      	ldrh	r3, [r7, #24]
 8014aec:	4413      	add	r3, r2
 8014aee:	b299      	uxth	r1, r3
 8014af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	bf0c      	ite	eq
 8014af6:	2301      	moveq	r3, #1
 8014af8:	2300      	movne	r3, #0
 8014afa:	b2db      	uxtb	r3, r3
 8014afc:	f107 0012 	add.w	r0, r7, #18
 8014b00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014b02:	9302      	str	r3, [sp, #8]
 8014b04:	797b      	ldrb	r3, [r7, #5]
 8014b06:	9301      	str	r3, [sp, #4]
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	9300      	str	r3, [sp, #0]
 8014b0c:	4603      	mov	r3, r0
 8014b0e:	2036      	movs	r0, #54	; 0x36
 8014b10:	f7ff fd5c 	bl	80145cc <tcp_pbuf_prealloc>
 8014b14:	6338      	str	r0, [r7, #48]	; 0x30
 8014b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	f000 817a 	beq.w	8014e12 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8014b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b20:	895b      	ldrh	r3, [r3, #10]
 8014b22:	8b3a      	ldrh	r2, [r7, #24]
 8014b24:	429a      	cmp	r2, r3
 8014b26:	d906      	bls.n	8014b36 <tcp_write+0x37e>
 8014b28:	4b8d      	ldr	r3, [pc, #564]	; (8014d60 <tcp_write+0x5a8>)
 8014b2a:	f240 2266 	movw	r2, #614	; 0x266
 8014b2e:	498d      	ldr	r1, [pc, #564]	; (8014d64 <tcp_write+0x5ac>)
 8014b30:	488d      	ldr	r0, [pc, #564]	; (8014d68 <tcp_write+0x5b0>)
 8014b32:	f005 fa1b 	bl	8019f6c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8014b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b38:	685a      	ldr	r2, [r3, #4]
 8014b3a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014b3e:	18d0      	adds	r0, r2, r3
 8014b40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014b44:	68ba      	ldr	r2, [r7, #8]
 8014b46:	4413      	add	r3, r2
 8014b48:	8b3a      	ldrh	r2, [r7, #24]
 8014b4a:	4619      	mov	r1, r3
 8014b4c:	f004 fce4 	bl	8019518 <memcpy>
 8014b50:	e02f      	b.n	8014bb2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8014b52:	8a7b      	ldrh	r3, [r7, #18]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d006      	beq.n	8014b66 <tcp_write+0x3ae>
 8014b58:	4b81      	ldr	r3, [pc, #516]	; (8014d60 <tcp_write+0x5a8>)
 8014b5a:	f240 2271 	movw	r2, #625	; 0x271
 8014b5e:	4983      	ldr	r1, [pc, #524]	; (8014d6c <tcp_write+0x5b4>)
 8014b60:	4881      	ldr	r0, [pc, #516]	; (8014d68 <tcp_write+0x5b0>)
 8014b62:	f005 fa03 	bl	8019f6c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8014b66:	8b3b      	ldrh	r3, [r7, #24]
 8014b68:	2201      	movs	r2, #1
 8014b6a:	4619      	mov	r1, r3
 8014b6c:	2036      	movs	r0, #54	; 0x36
 8014b6e:	f7fa fdbf 	bl	800f6f0 <pbuf_alloc>
 8014b72:	6178      	str	r0, [r7, #20]
 8014b74:	697b      	ldr	r3, [r7, #20]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	f000 814d 	beq.w	8014e16 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8014b7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014b80:	68ba      	ldr	r2, [r7, #8]
 8014b82:	441a      	add	r2, r3
 8014b84:	697b      	ldr	r3, [r7, #20]
 8014b86:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014b88:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014b8c:	b29b      	uxth	r3, r3
 8014b8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014b92:	4619      	mov	r1, r3
 8014b94:	2036      	movs	r0, #54	; 0x36
 8014b96:	f7fa fdab 	bl	800f6f0 <pbuf_alloc>
 8014b9a:	6338      	str	r0, [r7, #48]	; 0x30
 8014b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d103      	bne.n	8014baa <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8014ba2:	6978      	ldr	r0, [r7, #20]
 8014ba4:	f7fb f888 	bl	800fcb8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8014ba8:	e138      	b.n	8014e1c <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8014baa:	6979      	ldr	r1, [r7, #20]
 8014bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014bae:	f7fb f945 	bl	800fe3c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8014bb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014bb4:	f7fb f908 	bl	800fdc8 <pbuf_clen>
 8014bb8:	4603      	mov	r3, r0
 8014bba:	461a      	mov	r2, r3
 8014bbc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014bc0:	4413      	add	r3, r2
 8014bc2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8014bc6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014bca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014bce:	d903      	bls.n	8014bd8 <tcp_write+0x420>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8014bd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014bd2:	f7fb f871 	bl	800fcb8 <pbuf_free>
      goto memerr;
 8014bd6:	e121      	b.n	8014e1c <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014bdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014be0:	441a      	add	r2, r3
 8014be2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014be6:	9300      	str	r3, [sp, #0]
 8014be8:	4613      	mov	r3, r2
 8014bea:	2200      	movs	r2, #0
 8014bec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014bee:	68f8      	ldr	r0, [r7, #12]
 8014bf0:	f7ff fc4e 	bl	8014490 <tcp_create_segment>
 8014bf4:	64f8      	str	r0, [r7, #76]	; 0x4c
 8014bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	f000 810e 	beq.w	8014e1a <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8014bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d102      	bne.n	8014c0a <tcp_write+0x452>
      queue = seg;
 8014c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c06:	647b      	str	r3, [r7, #68]	; 0x44
 8014c08:	e00c      	b.n	8014c24 <tcp_write+0x46c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8014c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d106      	bne.n	8014c1e <tcp_write+0x466>
 8014c10:	4b53      	ldr	r3, [pc, #332]	; (8014d60 <tcp_write+0x5a8>)
 8014c12:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014c16:	4956      	ldr	r1, [pc, #344]	; (8014d70 <tcp_write+0x5b8>)
 8014c18:	4853      	ldr	r0, [pc, #332]	; (8014d68 <tcp_write+0x5b0>)
 8014c1a:	f005 f9a7 	bl	8019f6c <iprintf>
      prev_seg->next = seg;
 8014c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014c22:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8014c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c26:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8014c28:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014c2c:	8b3b      	ldrh	r3, [r7, #24]
 8014c2e:	4413      	add	r3, r2
 8014c30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8014c34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014c38:	88fb      	ldrh	r3, [r7, #6]
 8014c3a:	429a      	cmp	r2, r3
 8014c3c:	f4ff af3c 	bcc.w	8014ab8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8014c40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d02c      	beq.n	8014ca0 <tcp_write+0x4e8>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8014c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c48:	685b      	ldr	r3, [r3, #4]
 8014c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014c4c:	e01e      	b.n	8014c8c <tcp_write+0x4d4>
      p->tot_len += oversize_used;
 8014c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c50:	891a      	ldrh	r2, [r3, #8]
 8014c52:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014c54:	4413      	add	r3, r2
 8014c56:	b29a      	uxth	r2, r3
 8014c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c5a:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8014c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d110      	bne.n	8014c86 <tcp_write+0x4ce>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8014c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c66:	685b      	ldr	r3, [r3, #4]
 8014c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c6a:	8952      	ldrh	r2, [r2, #10]
 8014c6c:	4413      	add	r3, r2
 8014c6e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014c70:	68b9      	ldr	r1, [r7, #8]
 8014c72:	4618      	mov	r0, r3
 8014c74:	f004 fc50 	bl	8019518 <memcpy>
        p->len += oversize_used;
 8014c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c7a:	895a      	ldrh	r2, [r3, #10]
 8014c7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014c7e:	4413      	add	r3, r2
 8014c80:	b29a      	uxth	r2, r3
 8014c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c84:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8014c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d1dd      	bne.n	8014c4e <tcp_write+0x496>
      }
    }
    last_unsent->len += oversize_used;
 8014c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c94:	891a      	ldrh	r2, [r3, #8]
 8014c96:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014c98:	4413      	add	r3, r2
 8014c9a:	b29a      	uxth	r2, r3
 8014c9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c9e:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8014ca0:	8a7a      	ldrh	r2, [r7, #18]
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8014ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d018      	beq.n	8014ce0 <tcp_write+0x528>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8014cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d106      	bne.n	8014cc2 <tcp_write+0x50a>
 8014cb4:	4b2a      	ldr	r3, [pc, #168]	; (8014d60 <tcp_write+0x5a8>)
 8014cb6:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8014cba:	492e      	ldr	r1, [pc, #184]	; (8014d74 <tcp_write+0x5bc>)
 8014cbc:	482a      	ldr	r0, [pc, #168]	; (8014d68 <tcp_write+0x5b0>)
 8014cbe:	f005 f955 	bl	8019f6c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8014cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cc4:	685b      	ldr	r3, [r3, #4]
 8014cc6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014cc8:	4618      	mov	r0, r3
 8014cca:	f7fb f8b7 	bl	800fe3c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8014cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cd0:	891a      	ldrh	r2, [r3, #8]
 8014cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014cd4:	891b      	ldrh	r3, [r3, #8]
 8014cd6:	4413      	add	r3, r2
 8014cd8:	b29a      	uxth	r2, r3
 8014cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cdc:	811a      	strh	r2, [r3, #8]
 8014cde:	e037      	b.n	8014d50 <tcp_write+0x598>
  } else if (extendlen > 0) {
 8014ce0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d034      	beq.n	8014d50 <tcp_write+0x598>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8014ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d003      	beq.n	8014cf4 <tcp_write+0x53c>
 8014cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cee:	685b      	ldr	r3, [r3, #4]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d106      	bne.n	8014d02 <tcp_write+0x54a>
 8014cf4:	4b1a      	ldr	r3, [pc, #104]	; (8014d60 <tcp_write+0x5a8>)
 8014cf6:	f240 22e6 	movw	r2, #742	; 0x2e6
 8014cfa:	491f      	ldr	r1, [pc, #124]	; (8014d78 <tcp_write+0x5c0>)
 8014cfc:	481a      	ldr	r0, [pc, #104]	; (8014d68 <tcp_write+0x5b0>)
 8014cfe:	f005 f935 	bl	8019f6c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d04:	685b      	ldr	r3, [r3, #4]
 8014d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8014d08:	e009      	b.n	8014d1e <tcp_write+0x566>
      p->tot_len += extendlen;
 8014d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d0c:	891a      	ldrh	r2, [r3, #8]
 8014d0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014d10:	4413      	add	r3, r2
 8014d12:	b29a      	uxth	r2, r3
 8014d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d16:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8014d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d1f1      	bne.n	8014d0a <tcp_write+0x552>
    }
    p->tot_len += extendlen;
 8014d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d28:	891a      	ldrh	r2, [r3, #8]
 8014d2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014d2c:	4413      	add	r3, r2
 8014d2e:	b29a      	uxth	r2, r3
 8014d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d32:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8014d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d36:	895a      	ldrh	r2, [r3, #10]
 8014d38:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014d3a:	4413      	add	r3, r2
 8014d3c:	b29a      	uxth	r2, r3
 8014d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d40:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8014d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d44:	891a      	ldrh	r2, [r3, #8]
 8014d46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014d48:	4413      	add	r3, r2
 8014d4a:	b29a      	uxth	r2, r3
 8014d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d4e:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8014d50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d112      	bne.n	8014d7c <tcp_write+0x5c4>
    pcb->unsent = queue;
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014d5a:	66da      	str	r2, [r3, #108]	; 0x6c
 8014d5c:	e011      	b.n	8014d82 <tcp_write+0x5ca>
 8014d5e:	bf00      	nop
 8014d60:	0801ddcc 	.word	0x0801ddcc
 8014d64:	0801e06c 	.word	0x0801e06c
 8014d68:	0801de20 	.word	0x0801de20
 8014d6c:	0801e0ac 	.word	0x0801e0ac
 8014d70:	0801e0bc 	.word	0x0801e0bc
 8014d74:	0801e0d0 	.word	0x0801e0d0
 8014d78:	0801e108 	.word	0x0801e108
  } else {
    last_unsent->next = queue;
 8014d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014d80:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014d86:	88fb      	ldrh	r3, [r7, #6]
 8014d88:	441a      	add	r2, r3
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014d94:	88fb      	ldrh	r3, [r7, #6]
 8014d96:	1ad3      	subs	r3, r2, r3
 8014d98:	b29a      	uxth	r2, r3
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014da6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d00e      	beq.n	8014dd2 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d10a      	bne.n	8014dd2 <tcp_write+0x61a>
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d106      	bne.n	8014dd2 <tcp_write+0x61a>
 8014dc4:	4b2c      	ldr	r3, [pc, #176]	; (8014e78 <tcp_write+0x6c0>)
 8014dc6:	f240 3212 	movw	r2, #786	; 0x312
 8014dca:	492c      	ldr	r1, [pc, #176]	; (8014e7c <tcp_write+0x6c4>)
 8014dcc:	482c      	ldr	r0, [pc, #176]	; (8014e80 <tcp_write+0x6c8>)
 8014dce:	f005 f8cd 	bl	8019f6c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8014dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d016      	beq.n	8014e06 <tcp_write+0x64e>
 8014dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014dda:	68db      	ldr	r3, [r3, #12]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d012      	beq.n	8014e06 <tcp_write+0x64e>
 8014de0:	797b      	ldrb	r3, [r7, #5]
 8014de2:	f003 0302 	and.w	r3, r3, #2
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d10d      	bne.n	8014e06 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8014dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014dec:	68db      	ldr	r3, [r3, #12]
 8014dee:	899b      	ldrh	r3, [r3, #12]
 8014df0:	b29c      	uxth	r4, r3
 8014df2:	2008      	movs	r0, #8
 8014df4:	f7f9 fcad 	bl	800e752 <lwip_htons>
 8014df8:	4603      	mov	r3, r0
 8014dfa:	461a      	mov	r2, r3
 8014dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014dfe:	68db      	ldr	r3, [r3, #12]
 8014e00:	4322      	orrs	r2, r4
 8014e02:	b292      	uxth	r2, r2
 8014e04:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8014e06:	2300      	movs	r3, #0
 8014e08:	e031      	b.n	8014e6e <tcp_write+0x6b6>
          goto memerr;
 8014e0a:	bf00      	nop
 8014e0c:	e006      	b.n	8014e1c <tcp_write+0x664>
            goto memerr;
 8014e0e:	bf00      	nop
 8014e10:	e004      	b.n	8014e1c <tcp_write+0x664>
        goto memerr;
 8014e12:	bf00      	nop
 8014e14:	e002      	b.n	8014e1c <tcp_write+0x664>
        goto memerr;
 8014e16:	bf00      	nop
 8014e18:	e000      	b.n	8014e1c <tcp_write+0x664>
      goto memerr;
 8014e1a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	8b5b      	ldrh	r3, [r3, #26]
 8014e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014e24:	b29a      	uxth	r2, r3
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8014e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d002      	beq.n	8014e36 <tcp_write+0x67e>
    pbuf_free(concat_p);
 8014e30:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014e32:	f7fa ff41 	bl	800fcb8 <pbuf_free>
  }
  if (queue != NULL) {
 8014e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d002      	beq.n	8014e42 <tcp_write+0x68a>
    tcp_segs_free(queue);
 8014e3c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014e3e:	f7fc fb89 	bl	8011554 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d00e      	beq.n	8014e6a <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d10a      	bne.n	8014e6a <tcp_write+0x6b2>
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d106      	bne.n	8014e6a <tcp_write+0x6b2>
 8014e5c:	4b06      	ldr	r3, [pc, #24]	; (8014e78 <tcp_write+0x6c0>)
 8014e5e:	f240 3227 	movw	r2, #807	; 0x327
 8014e62:	4906      	ldr	r1, [pc, #24]	; (8014e7c <tcp_write+0x6c4>)
 8014e64:	4806      	ldr	r0, [pc, #24]	; (8014e80 <tcp_write+0x6c8>)
 8014e66:	f005 f881 	bl	8019f6c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8014e6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014e6e:	4618      	mov	r0, r3
 8014e70:	375c      	adds	r7, #92	; 0x5c
 8014e72:	46bd      	mov	sp, r7
 8014e74:	bd90      	pop	{r4, r7, pc}
 8014e76:	bf00      	nop
 8014e78:	0801ddcc 	.word	0x0801ddcc
 8014e7c:	0801e140 	.word	0x0801e140
 8014e80:	0801de20 	.word	0x0801de20

08014e84 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014e84:	b590      	push	{r4, r7, lr}
 8014e86:	b08b      	sub	sp, #44	; 0x2c
 8014e88:	af02      	add	r7, sp, #8
 8014e8a:	6078      	str	r0, [r7, #4]
 8014e8c:	460b      	mov	r3, r1
 8014e8e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8014e90:	2300      	movs	r3, #0
 8014e92:	61fb      	str	r3, [r7, #28]
 8014e94:	2300      	movs	r3, #0
 8014e96:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014e98:	2300      	movs	r3, #0
 8014e9a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d106      	bne.n	8014eb0 <tcp_split_unsent_seg+0x2c>
 8014ea2:	4b95      	ldr	r3, [pc, #596]	; (80150f8 <tcp_split_unsent_seg+0x274>)
 8014ea4:	f240 324b 	movw	r2, #843	; 0x34b
 8014ea8:	4994      	ldr	r1, [pc, #592]	; (80150fc <tcp_split_unsent_seg+0x278>)
 8014eaa:	4895      	ldr	r0, [pc, #596]	; (8015100 <tcp_split_unsent_seg+0x27c>)
 8014eac:	f005 f85e 	bl	8019f6c <iprintf>

  useg = pcb->unsent;
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014eb4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8014eb6:	697b      	ldr	r3, [r7, #20]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d102      	bne.n	8014ec2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8014ec0:	e116      	b.n	80150f0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8014ec2:	887b      	ldrh	r3, [r7, #2]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d109      	bne.n	8014edc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014ec8:	4b8b      	ldr	r3, [pc, #556]	; (80150f8 <tcp_split_unsent_seg+0x274>)
 8014eca:	f240 3253 	movw	r2, #851	; 0x353
 8014ece:	498d      	ldr	r1, [pc, #564]	; (8015104 <tcp_split_unsent_seg+0x280>)
 8014ed0:	488b      	ldr	r0, [pc, #556]	; (8015100 <tcp_split_unsent_seg+0x27c>)
 8014ed2:	f005 f84b 	bl	8019f6c <iprintf>
    return ERR_VAL;
 8014ed6:	f06f 0305 	mvn.w	r3, #5
 8014eda:	e109      	b.n	80150f0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8014edc:	697b      	ldr	r3, [r7, #20]
 8014ede:	891b      	ldrh	r3, [r3, #8]
 8014ee0:	887a      	ldrh	r2, [r7, #2]
 8014ee2:	429a      	cmp	r2, r3
 8014ee4:	d301      	bcc.n	8014eea <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	e102      	b.n	80150f0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014eee:	887a      	ldrh	r2, [r7, #2]
 8014ef0:	429a      	cmp	r2, r3
 8014ef2:	d906      	bls.n	8014f02 <tcp_split_unsent_seg+0x7e>
 8014ef4:	4b80      	ldr	r3, [pc, #512]	; (80150f8 <tcp_split_unsent_seg+0x274>)
 8014ef6:	f240 325b 	movw	r2, #859	; 0x35b
 8014efa:	4983      	ldr	r1, [pc, #524]	; (8015108 <tcp_split_unsent_seg+0x284>)
 8014efc:	4880      	ldr	r0, [pc, #512]	; (8015100 <tcp_split_unsent_seg+0x27c>)
 8014efe:	f005 f835 	bl	8019f6c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8014f02:	697b      	ldr	r3, [r7, #20]
 8014f04:	891b      	ldrh	r3, [r3, #8]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d106      	bne.n	8014f18 <tcp_split_unsent_seg+0x94>
 8014f0a:	4b7b      	ldr	r3, [pc, #492]	; (80150f8 <tcp_split_unsent_seg+0x274>)
 8014f0c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8014f10:	497e      	ldr	r1, [pc, #504]	; (801510c <tcp_split_unsent_seg+0x288>)
 8014f12:	487b      	ldr	r0, [pc, #492]	; (8015100 <tcp_split_unsent_seg+0x27c>)
 8014f14:	f005 f82a 	bl	8019f6c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014f18:	697b      	ldr	r3, [r7, #20]
 8014f1a:	7a9b      	ldrb	r3, [r3, #10]
 8014f1c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014f1e:	7bfb      	ldrb	r3, [r7, #15]
 8014f20:	009b      	lsls	r3, r3, #2
 8014f22:	b2db      	uxtb	r3, r3
 8014f24:	f003 0304 	and.w	r3, r3, #4
 8014f28:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014f2a:	697b      	ldr	r3, [r7, #20]
 8014f2c:	891a      	ldrh	r2, [r3, #8]
 8014f2e:	887b      	ldrh	r3, [r7, #2]
 8014f30:	1ad3      	subs	r3, r2, r3
 8014f32:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014f34:	7bbb      	ldrb	r3, [r7, #14]
 8014f36:	b29a      	uxth	r2, r3
 8014f38:	89bb      	ldrh	r3, [r7, #12]
 8014f3a:	4413      	add	r3, r2
 8014f3c:	b29b      	uxth	r3, r3
 8014f3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014f42:	4619      	mov	r1, r3
 8014f44:	2036      	movs	r0, #54	; 0x36
 8014f46:	f7fa fbd3 	bl	800f6f0 <pbuf_alloc>
 8014f4a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014f4c:	693b      	ldr	r3, [r7, #16]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	f000 80b7 	beq.w	80150c2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	685b      	ldr	r3, [r3, #4]
 8014f58:	891a      	ldrh	r2, [r3, #8]
 8014f5a:	697b      	ldr	r3, [r7, #20]
 8014f5c:	891b      	ldrh	r3, [r3, #8]
 8014f5e:	1ad3      	subs	r3, r2, r3
 8014f60:	b29a      	uxth	r2, r3
 8014f62:	887b      	ldrh	r3, [r7, #2]
 8014f64:	4413      	add	r3, r2
 8014f66:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014f68:	697b      	ldr	r3, [r7, #20]
 8014f6a:	6858      	ldr	r0, [r3, #4]
 8014f6c:	693b      	ldr	r3, [r7, #16]
 8014f6e:	685a      	ldr	r2, [r3, #4]
 8014f70:	7bbb      	ldrb	r3, [r7, #14]
 8014f72:	18d1      	adds	r1, r2, r3
 8014f74:	897b      	ldrh	r3, [r7, #10]
 8014f76:	89ba      	ldrh	r2, [r7, #12]
 8014f78:	f7fb f888 	bl	801008c <pbuf_copy_partial>
 8014f7c:	4603      	mov	r3, r0
 8014f7e:	461a      	mov	r2, r3
 8014f80:	89bb      	ldrh	r3, [r7, #12]
 8014f82:	4293      	cmp	r3, r2
 8014f84:	f040 809f 	bne.w	80150c6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014f88:	697b      	ldr	r3, [r7, #20]
 8014f8a:	68db      	ldr	r3, [r3, #12]
 8014f8c:	899b      	ldrh	r3, [r3, #12]
 8014f8e:	b29b      	uxth	r3, r3
 8014f90:	4618      	mov	r0, r3
 8014f92:	f7f9 fbde 	bl	800e752 <lwip_htons>
 8014f96:	4603      	mov	r3, r0
 8014f98:	b2db      	uxtb	r3, r3
 8014f9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014f9e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014fa0:	2300      	movs	r3, #0
 8014fa2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014fa4:	7efb      	ldrb	r3, [r7, #27]
 8014fa6:	f003 0308 	and.w	r3, r3, #8
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d007      	beq.n	8014fbe <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8014fae:	7efb      	ldrb	r3, [r7, #27]
 8014fb0:	f023 0308 	bic.w	r3, r3, #8
 8014fb4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014fb6:	7ebb      	ldrb	r3, [r7, #26]
 8014fb8:	f043 0308 	orr.w	r3, r3, #8
 8014fbc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8014fbe:	7efb      	ldrb	r3, [r7, #27]
 8014fc0:	f003 0301 	and.w	r3, r3, #1
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d007      	beq.n	8014fd8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014fc8:	7efb      	ldrb	r3, [r7, #27]
 8014fca:	f023 0301 	bic.w	r3, r3, #1
 8014fce:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8014fd0:	7ebb      	ldrb	r3, [r7, #26]
 8014fd2:	f043 0301 	orr.w	r3, r3, #1
 8014fd6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014fd8:	697b      	ldr	r3, [r7, #20]
 8014fda:	68db      	ldr	r3, [r3, #12]
 8014fdc:	685b      	ldr	r3, [r3, #4]
 8014fde:	4618      	mov	r0, r3
 8014fe0:	f7f9 fbcc 	bl	800e77c <lwip_htonl>
 8014fe4:	4602      	mov	r2, r0
 8014fe6:	887b      	ldrh	r3, [r7, #2]
 8014fe8:	18d1      	adds	r1, r2, r3
 8014fea:	7eba      	ldrb	r2, [r7, #26]
 8014fec:	7bfb      	ldrb	r3, [r7, #15]
 8014fee:	9300      	str	r3, [sp, #0]
 8014ff0:	460b      	mov	r3, r1
 8014ff2:	6939      	ldr	r1, [r7, #16]
 8014ff4:	6878      	ldr	r0, [r7, #4]
 8014ff6:	f7ff fa4b 	bl	8014490 <tcp_create_segment>
 8014ffa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014ffc:	69fb      	ldr	r3, [r7, #28]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d063      	beq.n	80150ca <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8015002:	697b      	ldr	r3, [r7, #20]
 8015004:	685b      	ldr	r3, [r3, #4]
 8015006:	4618      	mov	r0, r3
 8015008:	f7fa fede 	bl	800fdc8 <pbuf_clen>
 801500c:	4603      	mov	r3, r0
 801500e:	461a      	mov	r2, r3
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015016:	1a9b      	subs	r3, r3, r2
 8015018:	b29a      	uxth	r2, r3
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8015020:	697b      	ldr	r3, [r7, #20]
 8015022:	6858      	ldr	r0, [r3, #4]
 8015024:	697b      	ldr	r3, [r7, #20]
 8015026:	685b      	ldr	r3, [r3, #4]
 8015028:	891a      	ldrh	r2, [r3, #8]
 801502a:	89bb      	ldrh	r3, [r7, #12]
 801502c:	1ad3      	subs	r3, r2, r3
 801502e:	b29b      	uxth	r3, r3
 8015030:	4619      	mov	r1, r3
 8015032:	f7fa fcbb 	bl	800f9ac <pbuf_realloc>
  useg->len -= remainder;
 8015036:	697b      	ldr	r3, [r7, #20]
 8015038:	891a      	ldrh	r2, [r3, #8]
 801503a:	89bb      	ldrh	r3, [r7, #12]
 801503c:	1ad3      	subs	r3, r2, r3
 801503e:	b29a      	uxth	r2, r3
 8015040:	697b      	ldr	r3, [r7, #20]
 8015042:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8015044:	697b      	ldr	r3, [r7, #20]
 8015046:	68db      	ldr	r3, [r3, #12]
 8015048:	899b      	ldrh	r3, [r3, #12]
 801504a:	b29c      	uxth	r4, r3
 801504c:	7efb      	ldrb	r3, [r7, #27]
 801504e:	b29b      	uxth	r3, r3
 8015050:	4618      	mov	r0, r3
 8015052:	f7f9 fb7e 	bl	800e752 <lwip_htons>
 8015056:	4603      	mov	r3, r0
 8015058:	461a      	mov	r2, r3
 801505a:	697b      	ldr	r3, [r7, #20]
 801505c:	68db      	ldr	r3, [r3, #12]
 801505e:	4322      	orrs	r2, r4
 8015060:	b292      	uxth	r2, r2
 8015062:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8015064:	697b      	ldr	r3, [r7, #20]
 8015066:	685b      	ldr	r3, [r3, #4]
 8015068:	4618      	mov	r0, r3
 801506a:	f7fa fead 	bl	800fdc8 <pbuf_clen>
 801506e:	4603      	mov	r3, r0
 8015070:	461a      	mov	r2, r3
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015078:	4413      	add	r3, r2
 801507a:	b29a      	uxth	r2, r3
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015082:	69fb      	ldr	r3, [r7, #28]
 8015084:	685b      	ldr	r3, [r3, #4]
 8015086:	4618      	mov	r0, r3
 8015088:	f7fa fe9e 	bl	800fdc8 <pbuf_clen>
 801508c:	4603      	mov	r3, r0
 801508e:	461a      	mov	r2, r3
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015096:	4413      	add	r3, r2
 8015098:	b29a      	uxth	r2, r3
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80150a0:	697b      	ldr	r3, [r7, #20]
 80150a2:	681a      	ldr	r2, [r3, #0]
 80150a4:	69fb      	ldr	r3, [r7, #28]
 80150a6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80150a8:	697b      	ldr	r3, [r7, #20]
 80150aa:	69fa      	ldr	r2, [r7, #28]
 80150ac:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80150ae:	69fb      	ldr	r3, [r7, #28]
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d103      	bne.n	80150be <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	2200      	movs	r2, #0
 80150ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80150be:	2300      	movs	r3, #0
 80150c0:	e016      	b.n	80150f0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80150c2:	bf00      	nop
 80150c4:	e002      	b.n	80150cc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80150c6:	bf00      	nop
 80150c8:	e000      	b.n	80150cc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80150ca:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80150cc:	69fb      	ldr	r3, [r7, #28]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d006      	beq.n	80150e0 <tcp_split_unsent_seg+0x25c>
 80150d2:	4b09      	ldr	r3, [pc, #36]	; (80150f8 <tcp_split_unsent_seg+0x274>)
 80150d4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80150d8:	490d      	ldr	r1, [pc, #52]	; (8015110 <tcp_split_unsent_seg+0x28c>)
 80150da:	4809      	ldr	r0, [pc, #36]	; (8015100 <tcp_split_unsent_seg+0x27c>)
 80150dc:	f004 ff46 	bl	8019f6c <iprintf>
  if (p != NULL) {
 80150e0:	693b      	ldr	r3, [r7, #16]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d002      	beq.n	80150ec <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80150e6:	6938      	ldr	r0, [r7, #16]
 80150e8:	f7fa fde6 	bl	800fcb8 <pbuf_free>
  }

  return ERR_MEM;
 80150ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80150f0:	4618      	mov	r0, r3
 80150f2:	3724      	adds	r7, #36	; 0x24
 80150f4:	46bd      	mov	sp, r7
 80150f6:	bd90      	pop	{r4, r7, pc}
 80150f8:	0801ddcc 	.word	0x0801ddcc
 80150fc:	0801e160 	.word	0x0801e160
 8015100:	0801de20 	.word	0x0801de20
 8015104:	0801e184 	.word	0x0801e184
 8015108:	0801e1a8 	.word	0x0801e1a8
 801510c:	0801e1b8 	.word	0x0801e1b8
 8015110:	0801e1c8 	.word	0x0801e1c8

08015114 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8015114:	b590      	push	{r4, r7, lr}
 8015116:	b085      	sub	sp, #20
 8015118:	af00      	add	r7, sp, #0
 801511a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d106      	bne.n	8015130 <tcp_send_fin+0x1c>
 8015122:	4b21      	ldr	r3, [pc, #132]	; (80151a8 <tcp_send_fin+0x94>)
 8015124:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8015128:	4920      	ldr	r1, [pc, #128]	; (80151ac <tcp_send_fin+0x98>)
 801512a:	4821      	ldr	r0, [pc, #132]	; (80151b0 <tcp_send_fin+0x9c>)
 801512c:	f004 ff1e 	bl	8019f6c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015134:	2b00      	cmp	r3, #0
 8015136:	d02e      	beq.n	8015196 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801513c:	60fb      	str	r3, [r7, #12]
 801513e:	e002      	b.n	8015146 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	2b00      	cmp	r3, #0
 801514c:	d1f8      	bne.n	8015140 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	68db      	ldr	r3, [r3, #12]
 8015152:	899b      	ldrh	r3, [r3, #12]
 8015154:	b29b      	uxth	r3, r3
 8015156:	4618      	mov	r0, r3
 8015158:	f7f9 fafb 	bl	800e752 <lwip_htons>
 801515c:	4603      	mov	r3, r0
 801515e:	b2db      	uxtb	r3, r3
 8015160:	f003 0307 	and.w	r3, r3, #7
 8015164:	2b00      	cmp	r3, #0
 8015166:	d116      	bne.n	8015196 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	68db      	ldr	r3, [r3, #12]
 801516c:	899b      	ldrh	r3, [r3, #12]
 801516e:	b29c      	uxth	r4, r3
 8015170:	2001      	movs	r0, #1
 8015172:	f7f9 faee 	bl	800e752 <lwip_htons>
 8015176:	4603      	mov	r3, r0
 8015178:	461a      	mov	r2, r3
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	68db      	ldr	r3, [r3, #12]
 801517e:	4322      	orrs	r2, r4
 8015180:	b292      	uxth	r2, r2
 8015182:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	8b5b      	ldrh	r3, [r3, #26]
 8015188:	f043 0320 	orr.w	r3, r3, #32
 801518c:	b29a      	uxth	r2, r3
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8015192:	2300      	movs	r3, #0
 8015194:	e004      	b.n	80151a0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8015196:	2101      	movs	r1, #1
 8015198:	6878      	ldr	r0, [r7, #4]
 801519a:	f000 f80b 	bl	80151b4 <tcp_enqueue_flags>
 801519e:	4603      	mov	r3, r0
}
 80151a0:	4618      	mov	r0, r3
 80151a2:	3714      	adds	r7, #20
 80151a4:	46bd      	mov	sp, r7
 80151a6:	bd90      	pop	{r4, r7, pc}
 80151a8:	0801ddcc 	.word	0x0801ddcc
 80151ac:	0801e1d4 	.word	0x0801e1d4
 80151b0:	0801de20 	.word	0x0801de20

080151b4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b08a      	sub	sp, #40	; 0x28
 80151b8:	af02      	add	r7, sp, #8
 80151ba:	6078      	str	r0, [r7, #4]
 80151bc:	460b      	mov	r3, r1
 80151be:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80151c0:	2300      	movs	r3, #0
 80151c2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80151c4:	2300      	movs	r3, #0
 80151c6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80151c8:	78fb      	ldrb	r3, [r7, #3]
 80151ca:	f003 0303 	and.w	r3, r3, #3
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d106      	bne.n	80151e0 <tcp_enqueue_flags+0x2c>
 80151d2:	4b67      	ldr	r3, [pc, #412]	; (8015370 <tcp_enqueue_flags+0x1bc>)
 80151d4:	f240 4211 	movw	r2, #1041	; 0x411
 80151d8:	4966      	ldr	r1, [pc, #408]	; (8015374 <tcp_enqueue_flags+0x1c0>)
 80151da:	4867      	ldr	r0, [pc, #412]	; (8015378 <tcp_enqueue_flags+0x1c4>)
 80151dc:	f004 fec6 	bl	8019f6c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d106      	bne.n	80151f4 <tcp_enqueue_flags+0x40>
 80151e6:	4b62      	ldr	r3, [pc, #392]	; (8015370 <tcp_enqueue_flags+0x1bc>)
 80151e8:	f240 4213 	movw	r2, #1043	; 0x413
 80151ec:	4963      	ldr	r1, [pc, #396]	; (801537c <tcp_enqueue_flags+0x1c8>)
 80151ee:	4862      	ldr	r0, [pc, #392]	; (8015378 <tcp_enqueue_flags+0x1c4>)
 80151f0:	f004 febc 	bl	8019f6c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80151f4:	78fb      	ldrb	r3, [r7, #3]
 80151f6:	f003 0302 	and.w	r3, r3, #2
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d001      	beq.n	8015202 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80151fe:	2301      	movs	r3, #1
 8015200:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015202:	7ffb      	ldrb	r3, [r7, #31]
 8015204:	009b      	lsls	r3, r3, #2
 8015206:	b2db      	uxtb	r3, r3
 8015208:	f003 0304 	and.w	r3, r3, #4
 801520c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801520e:	7dfb      	ldrb	r3, [r7, #23]
 8015210:	b29b      	uxth	r3, r3
 8015212:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015216:	4619      	mov	r1, r3
 8015218:	2036      	movs	r0, #54	; 0x36
 801521a:	f7fa fa69 	bl	800f6f0 <pbuf_alloc>
 801521e:	6138      	str	r0, [r7, #16]
 8015220:	693b      	ldr	r3, [r7, #16]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d109      	bne.n	801523a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	8b5b      	ldrh	r3, [r3, #26]
 801522a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801522e:	b29a      	uxth	r2, r3
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015234:	f04f 33ff 	mov.w	r3, #4294967295
 8015238:	e095      	b.n	8015366 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801523a:	693b      	ldr	r3, [r7, #16]
 801523c:	895a      	ldrh	r2, [r3, #10]
 801523e:	7dfb      	ldrb	r3, [r7, #23]
 8015240:	b29b      	uxth	r3, r3
 8015242:	429a      	cmp	r2, r3
 8015244:	d206      	bcs.n	8015254 <tcp_enqueue_flags+0xa0>
 8015246:	4b4a      	ldr	r3, [pc, #296]	; (8015370 <tcp_enqueue_flags+0x1bc>)
 8015248:	f240 4239 	movw	r2, #1081	; 0x439
 801524c:	494c      	ldr	r1, [pc, #304]	; (8015380 <tcp_enqueue_flags+0x1cc>)
 801524e:	484a      	ldr	r0, [pc, #296]	; (8015378 <tcp_enqueue_flags+0x1c4>)
 8015250:	f004 fe8c 	bl	8019f6c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8015258:	78fa      	ldrb	r2, [r7, #3]
 801525a:	7ffb      	ldrb	r3, [r7, #31]
 801525c:	9300      	str	r3, [sp, #0]
 801525e:	460b      	mov	r3, r1
 8015260:	6939      	ldr	r1, [r7, #16]
 8015262:	6878      	ldr	r0, [r7, #4]
 8015264:	f7ff f914 	bl	8014490 <tcp_create_segment>
 8015268:	60f8      	str	r0, [r7, #12]
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d109      	bne.n	8015284 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	8b5b      	ldrh	r3, [r3, #26]
 8015274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015278:	b29a      	uxth	r2, r3
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801527e:	f04f 33ff 	mov.w	r3, #4294967295
 8015282:	e070      	b.n	8015366 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	68db      	ldr	r3, [r3, #12]
 8015288:	f003 0303 	and.w	r3, r3, #3
 801528c:	2b00      	cmp	r3, #0
 801528e:	d006      	beq.n	801529e <tcp_enqueue_flags+0xea>
 8015290:	4b37      	ldr	r3, [pc, #220]	; (8015370 <tcp_enqueue_flags+0x1bc>)
 8015292:	f240 4242 	movw	r2, #1090	; 0x442
 8015296:	493b      	ldr	r1, [pc, #236]	; (8015384 <tcp_enqueue_flags+0x1d0>)
 8015298:	4837      	ldr	r0, [pc, #220]	; (8015378 <tcp_enqueue_flags+0x1c4>)
 801529a:	f004 fe67 	bl	8019f6c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	891b      	ldrh	r3, [r3, #8]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d006      	beq.n	80152b4 <tcp_enqueue_flags+0x100>
 80152a6:	4b32      	ldr	r3, [pc, #200]	; (8015370 <tcp_enqueue_flags+0x1bc>)
 80152a8:	f240 4243 	movw	r2, #1091	; 0x443
 80152ac:	4936      	ldr	r1, [pc, #216]	; (8015388 <tcp_enqueue_flags+0x1d4>)
 80152ae:	4832      	ldr	r0, [pc, #200]	; (8015378 <tcp_enqueue_flags+0x1c4>)
 80152b0:	f004 fe5c 	bl	8019f6c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d103      	bne.n	80152c4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	68fa      	ldr	r2, [r7, #12]
 80152c0:	66da      	str	r2, [r3, #108]	; 0x6c
 80152c2:	e00d      	b.n	80152e0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152c8:	61bb      	str	r3, [r7, #24]
 80152ca:	e002      	b.n	80152d2 <tcp_enqueue_flags+0x11e>
 80152cc:	69bb      	ldr	r3, [r7, #24]
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	61bb      	str	r3, [r7, #24]
 80152d2:	69bb      	ldr	r3, [r7, #24]
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d1f8      	bne.n	80152cc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80152da:	69bb      	ldr	r3, [r7, #24]
 80152dc:	68fa      	ldr	r2, [r7, #12]
 80152de:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	2200      	movs	r2, #0
 80152e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80152e8:	78fb      	ldrb	r3, [r7, #3]
 80152ea:	f003 0302 	and.w	r3, r3, #2
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d104      	bne.n	80152fc <tcp_enqueue_flags+0x148>
 80152f2:	78fb      	ldrb	r3, [r7, #3]
 80152f4:	f003 0301 	and.w	r3, r3, #1
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d004      	beq.n	8015306 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015300:	1c5a      	adds	r2, r3, #1
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8015306:	78fb      	ldrb	r3, [r7, #3]
 8015308:	f003 0301 	and.w	r3, r3, #1
 801530c:	2b00      	cmp	r3, #0
 801530e:	d006      	beq.n	801531e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	8b5b      	ldrh	r3, [r3, #26]
 8015314:	f043 0320 	orr.w	r3, r3, #32
 8015318:	b29a      	uxth	r2, r3
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	685b      	ldr	r3, [r3, #4]
 8015322:	4618      	mov	r0, r3
 8015324:	f7fa fd50 	bl	800fdc8 <pbuf_clen>
 8015328:	4603      	mov	r3, r0
 801532a:	461a      	mov	r2, r3
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015332:	4413      	add	r3, r2
 8015334:	b29a      	uxth	r2, r3
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015342:	2b00      	cmp	r3, #0
 8015344:	d00e      	beq.n	8015364 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801534a:	2b00      	cmp	r3, #0
 801534c:	d10a      	bne.n	8015364 <tcp_enqueue_flags+0x1b0>
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015352:	2b00      	cmp	r3, #0
 8015354:	d106      	bne.n	8015364 <tcp_enqueue_flags+0x1b0>
 8015356:	4b06      	ldr	r3, [pc, #24]	; (8015370 <tcp_enqueue_flags+0x1bc>)
 8015358:	f240 4265 	movw	r2, #1125	; 0x465
 801535c:	490b      	ldr	r1, [pc, #44]	; (801538c <tcp_enqueue_flags+0x1d8>)
 801535e:	4806      	ldr	r0, [pc, #24]	; (8015378 <tcp_enqueue_flags+0x1c4>)
 8015360:	f004 fe04 	bl	8019f6c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015364:	2300      	movs	r3, #0
}
 8015366:	4618      	mov	r0, r3
 8015368:	3720      	adds	r7, #32
 801536a:	46bd      	mov	sp, r7
 801536c:	bd80      	pop	{r7, pc}
 801536e:	bf00      	nop
 8015370:	0801ddcc 	.word	0x0801ddcc
 8015374:	0801e1f0 	.word	0x0801e1f0
 8015378:	0801de20 	.word	0x0801de20
 801537c:	0801e248 	.word	0x0801e248
 8015380:	0801e268 	.word	0x0801e268
 8015384:	0801e2a4 	.word	0x0801e2a4
 8015388:	0801e2bc 	.word	0x0801e2bc
 801538c:	0801e2e8 	.word	0x0801e2e8

08015390 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015390:	b5b0      	push	{r4, r5, r7, lr}
 8015392:	b08a      	sub	sp, #40	; 0x28
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d106      	bne.n	80153ac <tcp_output+0x1c>
 801539e:	4b9e      	ldr	r3, [pc, #632]	; (8015618 <tcp_output+0x288>)
 80153a0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80153a4:	499d      	ldr	r1, [pc, #628]	; (801561c <tcp_output+0x28c>)
 80153a6:	489e      	ldr	r0, [pc, #632]	; (8015620 <tcp_output+0x290>)
 80153a8:	f004 fde0 	bl	8019f6c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	7d1b      	ldrb	r3, [r3, #20]
 80153b0:	2b01      	cmp	r3, #1
 80153b2:	d106      	bne.n	80153c2 <tcp_output+0x32>
 80153b4:	4b98      	ldr	r3, [pc, #608]	; (8015618 <tcp_output+0x288>)
 80153b6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80153ba:	499a      	ldr	r1, [pc, #616]	; (8015624 <tcp_output+0x294>)
 80153bc:	4898      	ldr	r0, [pc, #608]	; (8015620 <tcp_output+0x290>)
 80153be:	f004 fdd5 	bl	8019f6c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80153c2:	4b99      	ldr	r3, [pc, #612]	; (8015628 <tcp_output+0x298>)
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	687a      	ldr	r2, [r7, #4]
 80153c8:	429a      	cmp	r2, r3
 80153ca:	d101      	bne.n	80153d0 <tcp_output+0x40>
    return ERR_OK;
 80153cc:	2300      	movs	r3, #0
 80153ce:	e1ce      	b.n	801576e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80153dc:	4293      	cmp	r3, r2
 80153de:	bf28      	it	cs
 80153e0:	4613      	movcs	r3, r2
 80153e2:	b29b      	uxth	r3, r3
 80153e4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80153ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80153ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d10b      	bne.n	801540a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	8b5b      	ldrh	r3, [r3, #26]
 80153f6:	f003 0302 	and.w	r3, r3, #2
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	f000 81aa 	beq.w	8015754 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8015400:	6878      	ldr	r0, [r7, #4]
 8015402:	f000 fdc9 	bl	8015f98 <tcp_send_empty_ack>
 8015406:	4603      	mov	r3, r0
 8015408:	e1b1      	b.n	801576e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801540a:	6879      	ldr	r1, [r7, #4]
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	3304      	adds	r3, #4
 8015410:	461a      	mov	r2, r3
 8015412:	6878      	ldr	r0, [r7, #4]
 8015414:	f7ff f820 	bl	8014458 <tcp_route>
 8015418:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801541a:	697b      	ldr	r3, [r7, #20]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d102      	bne.n	8015426 <tcp_output+0x96>
    return ERR_RTE;
 8015420:	f06f 0303 	mvn.w	r3, #3
 8015424:	e1a3      	b.n	801576e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d003      	beq.n	8015434 <tcp_output+0xa4>
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d111      	bne.n	8015458 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015434:	697b      	ldr	r3, [r7, #20]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d002      	beq.n	8015440 <tcp_output+0xb0>
 801543a:	697b      	ldr	r3, [r7, #20]
 801543c:	3304      	adds	r3, #4
 801543e:	e000      	b.n	8015442 <tcp_output+0xb2>
 8015440:	2300      	movs	r3, #0
 8015442:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015444:	693b      	ldr	r3, [r7, #16]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d102      	bne.n	8015450 <tcp_output+0xc0>
      return ERR_RTE;
 801544a:	f06f 0303 	mvn.w	r3, #3
 801544e:	e18e      	b.n	801576e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015450:	693b      	ldr	r3, [r7, #16]
 8015452:	681a      	ldr	r2, [r3, #0]
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801545a:	68db      	ldr	r3, [r3, #12]
 801545c:	685b      	ldr	r3, [r3, #4]
 801545e:	4618      	mov	r0, r3
 8015460:	f7f9 f98c 	bl	800e77c <lwip_htonl>
 8015464:	4602      	mov	r2, r0
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801546a:	1ad3      	subs	r3, r2, r3
 801546c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801546e:	8912      	ldrh	r2, [r2, #8]
 8015470:	4413      	add	r3, r2
 8015472:	69ba      	ldr	r2, [r7, #24]
 8015474:	429a      	cmp	r2, r3
 8015476:	d227      	bcs.n	80154c8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801547e:	461a      	mov	r2, r3
 8015480:	69bb      	ldr	r3, [r7, #24]
 8015482:	4293      	cmp	r3, r2
 8015484:	d114      	bne.n	80154b0 <tcp_output+0x120>
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801548a:	2b00      	cmp	r3, #0
 801548c:	d110      	bne.n	80154b0 <tcp_output+0x120>
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015494:	2b00      	cmp	r3, #0
 8015496:	d10b      	bne.n	80154b0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	2200      	movs	r2, #0
 801549c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	2201      	movs	r2, #1
 80154a4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	2200      	movs	r2, #0
 80154ac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	8b5b      	ldrh	r3, [r3, #26]
 80154b4:	f003 0302 	and.w	r3, r3, #2
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	f000 814d 	beq.w	8015758 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80154be:	6878      	ldr	r0, [r7, #4]
 80154c0:	f000 fd6a 	bl	8015f98 <tcp_send_empty_ack>
 80154c4:	4603      	mov	r3, r0
 80154c6:	e152      	b.n	801576e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	2200      	movs	r2, #0
 80154cc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80154d4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80154d6:	6a3b      	ldr	r3, [r7, #32]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	f000 811c 	beq.w	8015716 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80154de:	e002      	b.n	80154e6 <tcp_output+0x156>
 80154e0:	6a3b      	ldr	r3, [r7, #32]
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	623b      	str	r3, [r7, #32]
 80154e6:	6a3b      	ldr	r3, [r7, #32]
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d1f8      	bne.n	80154e0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80154ee:	e112      	b.n	8015716 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80154f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154f2:	68db      	ldr	r3, [r3, #12]
 80154f4:	899b      	ldrh	r3, [r3, #12]
 80154f6:	b29b      	uxth	r3, r3
 80154f8:	4618      	mov	r0, r3
 80154fa:	f7f9 f92a 	bl	800e752 <lwip_htons>
 80154fe:	4603      	mov	r3, r0
 8015500:	b2db      	uxtb	r3, r3
 8015502:	f003 0304 	and.w	r3, r3, #4
 8015506:	2b00      	cmp	r3, #0
 8015508:	d006      	beq.n	8015518 <tcp_output+0x188>
 801550a:	4b43      	ldr	r3, [pc, #268]	; (8015618 <tcp_output+0x288>)
 801550c:	f240 5236 	movw	r2, #1334	; 0x536
 8015510:	4946      	ldr	r1, [pc, #280]	; (801562c <tcp_output+0x29c>)
 8015512:	4843      	ldr	r0, [pc, #268]	; (8015620 <tcp_output+0x290>)
 8015514:	f004 fd2a 	bl	8019f6c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801551c:	2b00      	cmp	r3, #0
 801551e:	d020      	beq.n	8015562 <tcp_output+0x1d2>
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	8b5b      	ldrh	r3, [r3, #26]
 8015524:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015528:	2b00      	cmp	r3, #0
 801552a:	d11a      	bne.n	8015562 <tcp_output+0x1d2>
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015530:	2b00      	cmp	r3, #0
 8015532:	d00b      	beq.n	801554c <tcp_output+0x1bc>
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	2b00      	cmp	r3, #0
 801553c:	d111      	bne.n	8015562 <tcp_output+0x1d2>
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015542:	891a      	ldrh	r2, [r3, #8]
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015548:	429a      	cmp	r2, r3
 801554a:	d20a      	bcs.n	8015562 <tcp_output+0x1d2>
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015552:	2b00      	cmp	r3, #0
 8015554:	d005      	beq.n	8015562 <tcp_output+0x1d2>
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801555c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015560:	d301      	bcc.n	8015566 <tcp_output+0x1d6>
 8015562:	2301      	movs	r3, #1
 8015564:	e000      	b.n	8015568 <tcp_output+0x1d8>
 8015566:	2300      	movs	r3, #0
 8015568:	2b00      	cmp	r3, #0
 801556a:	d106      	bne.n	801557a <tcp_output+0x1ea>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	8b5b      	ldrh	r3, [r3, #26]
 8015570:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015574:	2b00      	cmp	r3, #0
 8015576:	f000 80e3 	beq.w	8015740 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	7d1b      	ldrb	r3, [r3, #20]
 801557e:	2b02      	cmp	r3, #2
 8015580:	d00d      	beq.n	801559e <tcp_output+0x20e>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015584:	68db      	ldr	r3, [r3, #12]
 8015586:	899b      	ldrh	r3, [r3, #12]
 8015588:	b29c      	uxth	r4, r3
 801558a:	2010      	movs	r0, #16
 801558c:	f7f9 f8e1 	bl	800e752 <lwip_htons>
 8015590:	4603      	mov	r3, r0
 8015592:	461a      	mov	r2, r3
 8015594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015596:	68db      	ldr	r3, [r3, #12]
 8015598:	4322      	orrs	r2, r4
 801559a:	b292      	uxth	r2, r2
 801559c:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801559e:	697a      	ldr	r2, [r7, #20]
 80155a0:	6879      	ldr	r1, [r7, #4]
 80155a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80155a4:	f000 f908 	bl	80157b8 <tcp_output_segment>
 80155a8:	4603      	mov	r3, r0
 80155aa:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80155ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d009      	beq.n	80155c8 <tcp_output+0x238>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	8b5b      	ldrh	r3, [r3, #26]
 80155b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80155bc:	b29a      	uxth	r2, r3
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	835a      	strh	r2, [r3, #26]
      return err;
 80155c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80155c6:	e0d2      	b.n	801576e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80155c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155ca:	681a      	ldr	r2, [r3, #0]
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	7d1b      	ldrb	r3, [r3, #20]
 80155d4:	2b02      	cmp	r3, #2
 80155d6:	d006      	beq.n	80155e6 <tcp_output+0x256>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	8b5b      	ldrh	r3, [r3, #26]
 80155dc:	f023 0303 	bic.w	r3, r3, #3
 80155e0:	b29a      	uxth	r2, r3
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80155e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155e8:	68db      	ldr	r3, [r3, #12]
 80155ea:	685b      	ldr	r3, [r3, #4]
 80155ec:	4618      	mov	r0, r3
 80155ee:	f7f9 f8c5 	bl	800e77c <lwip_htonl>
 80155f2:	4604      	mov	r4, r0
 80155f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155f6:	891b      	ldrh	r3, [r3, #8]
 80155f8:	461d      	mov	r5, r3
 80155fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155fc:	68db      	ldr	r3, [r3, #12]
 80155fe:	899b      	ldrh	r3, [r3, #12]
 8015600:	b29b      	uxth	r3, r3
 8015602:	4618      	mov	r0, r3
 8015604:	f7f9 f8a5 	bl	800e752 <lwip_htons>
 8015608:	4603      	mov	r3, r0
 801560a:	b2db      	uxtb	r3, r3
 801560c:	f003 0303 	and.w	r3, r3, #3
 8015610:	2b00      	cmp	r3, #0
 8015612:	d00d      	beq.n	8015630 <tcp_output+0x2a0>
 8015614:	2301      	movs	r3, #1
 8015616:	e00c      	b.n	8015632 <tcp_output+0x2a2>
 8015618:	0801ddcc 	.word	0x0801ddcc
 801561c:	0801e310 	.word	0x0801e310
 8015620:	0801de20 	.word	0x0801de20
 8015624:	0801e328 	.word	0x0801e328
 8015628:	2001a9c4 	.word	0x2001a9c4
 801562c:	0801e350 	.word	0x0801e350
 8015630:	2300      	movs	r3, #0
 8015632:	442b      	add	r3, r5
 8015634:	4423      	add	r3, r4
 8015636:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801563c:	68bb      	ldr	r3, [r7, #8]
 801563e:	1ad3      	subs	r3, r2, r3
 8015640:	2b00      	cmp	r3, #0
 8015642:	da02      	bge.n	801564a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	68ba      	ldr	r2, [r7, #8]
 8015648:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801564c:	891b      	ldrh	r3, [r3, #8]
 801564e:	461c      	mov	r4, r3
 8015650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015652:	68db      	ldr	r3, [r3, #12]
 8015654:	899b      	ldrh	r3, [r3, #12]
 8015656:	b29b      	uxth	r3, r3
 8015658:	4618      	mov	r0, r3
 801565a:	f7f9 f87a 	bl	800e752 <lwip_htons>
 801565e:	4603      	mov	r3, r0
 8015660:	b2db      	uxtb	r3, r3
 8015662:	f003 0303 	and.w	r3, r3, #3
 8015666:	2b00      	cmp	r3, #0
 8015668:	d001      	beq.n	801566e <tcp_output+0x2de>
 801566a:	2301      	movs	r3, #1
 801566c:	e000      	b.n	8015670 <tcp_output+0x2e0>
 801566e:	2300      	movs	r3, #0
 8015670:	4423      	add	r3, r4
 8015672:	2b00      	cmp	r3, #0
 8015674:	d049      	beq.n	801570a <tcp_output+0x37a>
      seg->next = NULL;
 8015676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015678:	2200      	movs	r2, #0
 801567a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015680:	2b00      	cmp	r3, #0
 8015682:	d105      	bne.n	8015690 <tcp_output+0x300>
        pcb->unacked = seg;
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015688:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801568c:	623b      	str	r3, [r7, #32]
 801568e:	e03f      	b.n	8015710 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015692:	68db      	ldr	r3, [r3, #12]
 8015694:	685b      	ldr	r3, [r3, #4]
 8015696:	4618      	mov	r0, r3
 8015698:	f7f9 f870 	bl	800e77c <lwip_htonl>
 801569c:	4604      	mov	r4, r0
 801569e:	6a3b      	ldr	r3, [r7, #32]
 80156a0:	68db      	ldr	r3, [r3, #12]
 80156a2:	685b      	ldr	r3, [r3, #4]
 80156a4:	4618      	mov	r0, r3
 80156a6:	f7f9 f869 	bl	800e77c <lwip_htonl>
 80156aa:	4603      	mov	r3, r0
 80156ac:	1ae3      	subs	r3, r4, r3
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	da24      	bge.n	80156fc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	3370      	adds	r3, #112	; 0x70
 80156b6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80156b8:	e002      	b.n	80156c0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80156ba:	69fb      	ldr	r3, [r7, #28]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80156c0:	69fb      	ldr	r3, [r7, #28]
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d011      	beq.n	80156ec <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80156c8:	69fb      	ldr	r3, [r7, #28]
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	68db      	ldr	r3, [r3, #12]
 80156ce:	685b      	ldr	r3, [r3, #4]
 80156d0:	4618      	mov	r0, r3
 80156d2:	f7f9 f853 	bl	800e77c <lwip_htonl>
 80156d6:	4604      	mov	r4, r0
 80156d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156da:	68db      	ldr	r3, [r3, #12]
 80156dc:	685b      	ldr	r3, [r3, #4]
 80156de:	4618      	mov	r0, r3
 80156e0:	f7f9 f84c 	bl	800e77c <lwip_htonl>
 80156e4:	4603      	mov	r3, r0
 80156e6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	dbe6      	blt.n	80156ba <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80156ec:	69fb      	ldr	r3, [r7, #28]
 80156ee:	681a      	ldr	r2, [r3, #0]
 80156f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156f2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80156f4:	69fb      	ldr	r3, [r7, #28]
 80156f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156f8:	601a      	str	r2, [r3, #0]
 80156fa:	e009      	b.n	8015710 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80156fc:	6a3b      	ldr	r3, [r7, #32]
 80156fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015700:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015702:	6a3b      	ldr	r3, [r7, #32]
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	623b      	str	r3, [r7, #32]
 8015708:	e002      	b.n	8015710 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801570a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801570c:	f7fb ff37 	bl	801157e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015714:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8015716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015718:	2b00      	cmp	r3, #0
 801571a:	d012      	beq.n	8015742 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801571e:	68db      	ldr	r3, [r3, #12]
 8015720:	685b      	ldr	r3, [r3, #4]
 8015722:	4618      	mov	r0, r3
 8015724:	f7f9 f82a 	bl	800e77c <lwip_htonl>
 8015728:	4602      	mov	r2, r0
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801572e:	1ad3      	subs	r3, r2, r3
 8015730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015732:	8912      	ldrh	r2, [r2, #8]
 8015734:	4413      	add	r3, r2
  while (seg != NULL &&
 8015736:	69ba      	ldr	r2, [r7, #24]
 8015738:	429a      	cmp	r2, r3
 801573a:	f4bf aed9 	bcs.w	80154f0 <tcp_output+0x160>
 801573e:	e000      	b.n	8015742 <tcp_output+0x3b2>
      break;
 8015740:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015746:	2b00      	cmp	r3, #0
 8015748:	d108      	bne.n	801575c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	2200      	movs	r2, #0
 801574e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8015752:	e004      	b.n	801575e <tcp_output+0x3ce>
    goto output_done;
 8015754:	bf00      	nop
 8015756:	e002      	b.n	801575e <tcp_output+0x3ce>
    goto output_done;
 8015758:	bf00      	nop
 801575a:	e000      	b.n	801575e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801575c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	8b5b      	ldrh	r3, [r3, #26]
 8015762:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015766:	b29a      	uxth	r2, r3
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801576c:	2300      	movs	r3, #0
}
 801576e:	4618      	mov	r0, r3
 8015770:	3728      	adds	r7, #40	; 0x28
 8015772:	46bd      	mov	sp, r7
 8015774:	bdb0      	pop	{r4, r5, r7, pc}
 8015776:	bf00      	nop

08015778 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b082      	sub	sp, #8
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d106      	bne.n	8015794 <tcp_output_segment_busy+0x1c>
 8015786:	4b09      	ldr	r3, [pc, #36]	; (80157ac <tcp_output_segment_busy+0x34>)
 8015788:	f240 529a 	movw	r2, #1434	; 0x59a
 801578c:	4908      	ldr	r1, [pc, #32]	; (80157b0 <tcp_output_segment_busy+0x38>)
 801578e:	4809      	ldr	r0, [pc, #36]	; (80157b4 <tcp_output_segment_busy+0x3c>)
 8015790:	f004 fbec 	bl	8019f6c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	685b      	ldr	r3, [r3, #4]
 8015798:	7b9b      	ldrb	r3, [r3, #14]
 801579a:	2b01      	cmp	r3, #1
 801579c:	d001      	beq.n	80157a2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801579e:	2301      	movs	r3, #1
 80157a0:	e000      	b.n	80157a4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80157a2:	2300      	movs	r3, #0
}
 80157a4:	4618      	mov	r0, r3
 80157a6:	3708      	adds	r7, #8
 80157a8:	46bd      	mov	sp, r7
 80157aa:	bd80      	pop	{r7, pc}
 80157ac:	0801ddcc 	.word	0x0801ddcc
 80157b0:	0801e368 	.word	0x0801e368
 80157b4:	0801de20 	.word	0x0801de20

080157b8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80157b8:	b5b0      	push	{r4, r5, r7, lr}
 80157ba:	b08c      	sub	sp, #48	; 0x30
 80157bc:	af04      	add	r7, sp, #16
 80157be:	60f8      	str	r0, [r7, #12]
 80157c0:	60b9      	str	r1, [r7, #8]
 80157c2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d106      	bne.n	80157d8 <tcp_output_segment+0x20>
 80157ca:	4b63      	ldr	r3, [pc, #396]	; (8015958 <tcp_output_segment+0x1a0>)
 80157cc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80157d0:	4962      	ldr	r1, [pc, #392]	; (801595c <tcp_output_segment+0x1a4>)
 80157d2:	4863      	ldr	r0, [pc, #396]	; (8015960 <tcp_output_segment+0x1a8>)
 80157d4:	f004 fbca 	bl	8019f6c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80157d8:	68bb      	ldr	r3, [r7, #8]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d106      	bne.n	80157ec <tcp_output_segment+0x34>
 80157de:	4b5e      	ldr	r3, [pc, #376]	; (8015958 <tcp_output_segment+0x1a0>)
 80157e0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80157e4:	495f      	ldr	r1, [pc, #380]	; (8015964 <tcp_output_segment+0x1ac>)
 80157e6:	485e      	ldr	r0, [pc, #376]	; (8015960 <tcp_output_segment+0x1a8>)
 80157e8:	f004 fbc0 	bl	8019f6c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d106      	bne.n	8015800 <tcp_output_segment+0x48>
 80157f2:	4b59      	ldr	r3, [pc, #356]	; (8015958 <tcp_output_segment+0x1a0>)
 80157f4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80157f8:	495b      	ldr	r1, [pc, #364]	; (8015968 <tcp_output_segment+0x1b0>)
 80157fa:	4859      	ldr	r0, [pc, #356]	; (8015960 <tcp_output_segment+0x1a8>)
 80157fc:	f004 fbb6 	bl	8019f6c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015800:	68f8      	ldr	r0, [r7, #12]
 8015802:	f7ff ffb9 	bl	8015778 <tcp_output_segment_busy>
 8015806:	4603      	mov	r3, r0
 8015808:	2b00      	cmp	r3, #0
 801580a:	d001      	beq.n	8015810 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801580c:	2300      	movs	r3, #0
 801580e:	e09f      	b.n	8015950 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015810:	68bb      	ldr	r3, [r7, #8]
 8015812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	68dc      	ldr	r4, [r3, #12]
 8015818:	4610      	mov	r0, r2
 801581a:	f7f8 ffaf 	bl	800e77c <lwip_htonl>
 801581e:	4603      	mov	r3, r0
 8015820:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015822:	68bb      	ldr	r3, [r7, #8]
 8015824:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	68dc      	ldr	r4, [r3, #12]
 801582a:	4610      	mov	r0, r2
 801582c:	f7f8 ff91 	bl	800e752 <lwip_htons>
 8015830:	4603      	mov	r3, r0
 8015832:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015834:	68bb      	ldr	r3, [r7, #8]
 8015836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015838:	68ba      	ldr	r2, [r7, #8]
 801583a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801583c:	441a      	add	r2, r3
 801583e:	68bb      	ldr	r3, [r7, #8]
 8015840:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	68db      	ldr	r3, [r3, #12]
 8015846:	3314      	adds	r3, #20
 8015848:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	7a9b      	ldrb	r3, [r3, #10]
 801584e:	f003 0301 	and.w	r3, r3, #1
 8015852:	2b00      	cmp	r3, #0
 8015854:	d015      	beq.n	8015882 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015856:	68bb      	ldr	r3, [r7, #8]
 8015858:	3304      	adds	r3, #4
 801585a:	461a      	mov	r2, r3
 801585c:	6879      	ldr	r1, [r7, #4]
 801585e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8015862:	f7fc fa33 	bl	8011ccc <tcp_eff_send_mss_netif>
 8015866:	4603      	mov	r3, r0
 8015868:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801586a:	8b7b      	ldrh	r3, [r7, #26]
 801586c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015870:	4618      	mov	r0, r3
 8015872:	f7f8 ff83 	bl	800e77c <lwip_htonl>
 8015876:	4602      	mov	r2, r0
 8015878:	69fb      	ldr	r3, [r7, #28]
 801587a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801587c:	69fb      	ldr	r3, [r7, #28]
 801587e:	3304      	adds	r3, #4
 8015880:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015882:	68bb      	ldr	r3, [r7, #8]
 8015884:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015888:	2b00      	cmp	r3, #0
 801588a:	da02      	bge.n	8015892 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801588c:	68bb      	ldr	r3, [r7, #8]
 801588e:	2200      	movs	r2, #0
 8015890:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8015892:	68bb      	ldr	r3, [r7, #8]
 8015894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015896:	2b00      	cmp	r3, #0
 8015898:	d10c      	bne.n	80158b4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801589a:	4b34      	ldr	r3, [pc, #208]	; (801596c <tcp_output_segment+0x1b4>)
 801589c:	681a      	ldr	r2, [r3, #0]
 801589e:	68bb      	ldr	r3, [r7, #8]
 80158a0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	68db      	ldr	r3, [r3, #12]
 80158a6:	685b      	ldr	r3, [r3, #4]
 80158a8:	4618      	mov	r0, r3
 80158aa:	f7f8 ff67 	bl	800e77c <lwip_htonl>
 80158ae:	4602      	mov	r2, r0
 80158b0:	68bb      	ldr	r3, [r7, #8]
 80158b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	68da      	ldr	r2, [r3, #12]
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	685b      	ldr	r3, [r3, #4]
 80158bc:	685b      	ldr	r3, [r3, #4]
 80158be:	1ad3      	subs	r3, r2, r3
 80158c0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	685b      	ldr	r3, [r3, #4]
 80158c6:	8959      	ldrh	r1, [r3, #10]
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	685b      	ldr	r3, [r3, #4]
 80158cc:	8b3a      	ldrh	r2, [r7, #24]
 80158ce:	1a8a      	subs	r2, r1, r2
 80158d0:	b292      	uxth	r2, r2
 80158d2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	685b      	ldr	r3, [r3, #4]
 80158d8:	8919      	ldrh	r1, [r3, #8]
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	685b      	ldr	r3, [r3, #4]
 80158de:	8b3a      	ldrh	r2, [r7, #24]
 80158e0:	1a8a      	subs	r2, r1, r2
 80158e2:	b292      	uxth	r2, r2
 80158e4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	685b      	ldr	r3, [r3, #4]
 80158ea:	68fa      	ldr	r2, [r7, #12]
 80158ec:	68d2      	ldr	r2, [r2, #12]
 80158ee:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	68db      	ldr	r3, [r3, #12]
 80158f4:	2200      	movs	r2, #0
 80158f6:	741a      	strb	r2, [r3, #16]
 80158f8:	2200      	movs	r2, #0
 80158fa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	68db      	ldr	r3, [r3, #12]
 8015900:	f103 0214 	add.w	r2, r3, #20
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	7a9b      	ldrb	r3, [r3, #10]
 8015908:	009b      	lsls	r3, r3, #2
 801590a:	f003 0304 	and.w	r3, r3, #4
 801590e:	4413      	add	r3, r2
 8015910:	69fa      	ldr	r2, [r7, #28]
 8015912:	429a      	cmp	r2, r3
 8015914:	d006      	beq.n	8015924 <tcp_output_segment+0x16c>
 8015916:	4b10      	ldr	r3, [pc, #64]	; (8015958 <tcp_output_segment+0x1a0>)
 8015918:	f240 621c 	movw	r2, #1564	; 0x61c
 801591c:	4914      	ldr	r1, [pc, #80]	; (8015970 <tcp_output_segment+0x1b8>)
 801591e:	4810      	ldr	r0, [pc, #64]	; (8015960 <tcp_output_segment+0x1a8>)
 8015920:	f004 fb24 	bl	8019f6c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	6858      	ldr	r0, [r3, #4]
 8015928:	68b9      	ldr	r1, [r7, #8]
 801592a:	68bb      	ldr	r3, [r7, #8]
 801592c:	1d1c      	adds	r4, r3, #4
 801592e:	68bb      	ldr	r3, [r7, #8]
 8015930:	7add      	ldrb	r5, [r3, #11]
 8015932:	68bb      	ldr	r3, [r7, #8]
 8015934:	7a9b      	ldrb	r3, [r3, #10]
 8015936:	687a      	ldr	r2, [r7, #4]
 8015938:	9202      	str	r2, [sp, #8]
 801593a:	2206      	movs	r2, #6
 801593c:	9201      	str	r2, [sp, #4]
 801593e:	9300      	str	r3, [sp, #0]
 8015940:	462b      	mov	r3, r5
 8015942:	4622      	mov	r2, r4
 8015944:	f002 fa34 	bl	8017db0 <ip4_output_if>
 8015948:	4603      	mov	r3, r0
 801594a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801594c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015950:	4618      	mov	r0, r3
 8015952:	3720      	adds	r7, #32
 8015954:	46bd      	mov	sp, r7
 8015956:	bdb0      	pop	{r4, r5, r7, pc}
 8015958:	0801ddcc 	.word	0x0801ddcc
 801595c:	0801e390 	.word	0x0801e390
 8015960:	0801de20 	.word	0x0801de20
 8015964:	0801e3b0 	.word	0x0801e3b0
 8015968:	0801e3d0 	.word	0x0801e3d0
 801596c:	2001a9b4 	.word	0x2001a9b4
 8015970:	0801e3f4 	.word	0x0801e3f4

08015974 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015974:	b5b0      	push	{r4, r5, r7, lr}
 8015976:	b084      	sub	sp, #16
 8015978:	af00      	add	r7, sp, #0
 801597a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	2b00      	cmp	r3, #0
 8015980:	d106      	bne.n	8015990 <tcp_rexmit_rto_prepare+0x1c>
 8015982:	4b31      	ldr	r3, [pc, #196]	; (8015a48 <tcp_rexmit_rto_prepare+0xd4>)
 8015984:	f240 6263 	movw	r2, #1635	; 0x663
 8015988:	4930      	ldr	r1, [pc, #192]	; (8015a4c <tcp_rexmit_rto_prepare+0xd8>)
 801598a:	4831      	ldr	r0, [pc, #196]	; (8015a50 <tcp_rexmit_rto_prepare+0xdc>)
 801598c:	f004 faee 	bl	8019f6c <iprintf>

  if (pcb->unacked == NULL) {
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015994:	2b00      	cmp	r3, #0
 8015996:	d102      	bne.n	801599e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015998:	f06f 0305 	mvn.w	r3, #5
 801599c:	e050      	b.n	8015a40 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80159a2:	60fb      	str	r3, [r7, #12]
 80159a4:	e00b      	b.n	80159be <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80159a6:	68f8      	ldr	r0, [r7, #12]
 80159a8:	f7ff fee6 	bl	8015778 <tcp_output_segment_busy>
 80159ac:	4603      	mov	r3, r0
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d002      	beq.n	80159b8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80159b2:	f06f 0305 	mvn.w	r3, #5
 80159b6:	e043      	b.n	8015a40 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	60fb      	str	r3, [r7, #12]
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d1ef      	bne.n	80159a6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80159c6:	68f8      	ldr	r0, [r7, #12]
 80159c8:	f7ff fed6 	bl	8015778 <tcp_output_segment_busy>
 80159cc:	4603      	mov	r3, r0
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d002      	beq.n	80159d8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80159d2:	f06f 0305 	mvn.w	r3, #5
 80159d6:	e033      	b.n	8015a40 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	2200      	movs	r2, #0
 80159ec:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	8b5b      	ldrh	r3, [r3, #26]
 80159f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80159f6:	b29a      	uxth	r2, r3
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	68db      	ldr	r3, [r3, #12]
 8015a00:	685b      	ldr	r3, [r3, #4]
 8015a02:	4618      	mov	r0, r3
 8015a04:	f7f8 feba 	bl	800e77c <lwip_htonl>
 8015a08:	4604      	mov	r4, r0
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	891b      	ldrh	r3, [r3, #8]
 8015a0e:	461d      	mov	r5, r3
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	68db      	ldr	r3, [r3, #12]
 8015a14:	899b      	ldrh	r3, [r3, #12]
 8015a16:	b29b      	uxth	r3, r3
 8015a18:	4618      	mov	r0, r3
 8015a1a:	f7f8 fe9a 	bl	800e752 <lwip_htons>
 8015a1e:	4603      	mov	r3, r0
 8015a20:	b2db      	uxtb	r3, r3
 8015a22:	f003 0303 	and.w	r3, r3, #3
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d001      	beq.n	8015a2e <tcp_rexmit_rto_prepare+0xba>
 8015a2a:	2301      	movs	r3, #1
 8015a2c:	e000      	b.n	8015a30 <tcp_rexmit_rto_prepare+0xbc>
 8015a2e:	2300      	movs	r3, #0
 8015a30:	442b      	add	r3, r5
 8015a32:	18e2      	adds	r2, r4, r3
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	2200      	movs	r2, #0
 8015a3c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015a3e:	2300      	movs	r3, #0
}
 8015a40:	4618      	mov	r0, r3
 8015a42:	3710      	adds	r7, #16
 8015a44:	46bd      	mov	sp, r7
 8015a46:	bdb0      	pop	{r4, r5, r7, pc}
 8015a48:	0801ddcc 	.word	0x0801ddcc
 8015a4c:	0801e408 	.word	0x0801e408
 8015a50:	0801de20 	.word	0x0801de20

08015a54 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015a54:	b580      	push	{r7, lr}
 8015a56:	b082      	sub	sp, #8
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d106      	bne.n	8015a70 <tcp_rexmit_rto_commit+0x1c>
 8015a62:	4b0d      	ldr	r3, [pc, #52]	; (8015a98 <tcp_rexmit_rto_commit+0x44>)
 8015a64:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015a68:	490c      	ldr	r1, [pc, #48]	; (8015a9c <tcp_rexmit_rto_commit+0x48>)
 8015a6a:	480d      	ldr	r0, [pc, #52]	; (8015aa0 <tcp_rexmit_rto_commit+0x4c>)
 8015a6c:	f004 fa7e 	bl	8019f6c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015a76:	2bff      	cmp	r3, #255	; 0xff
 8015a78:	d007      	beq.n	8015a8a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015a80:	3301      	adds	r3, #1
 8015a82:	b2da      	uxtb	r2, r3
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015a8a:	6878      	ldr	r0, [r7, #4]
 8015a8c:	f7ff fc80 	bl	8015390 <tcp_output>
}
 8015a90:	bf00      	nop
 8015a92:	3708      	adds	r7, #8
 8015a94:	46bd      	mov	sp, r7
 8015a96:	bd80      	pop	{r7, pc}
 8015a98:	0801ddcc 	.word	0x0801ddcc
 8015a9c:	0801e42c 	.word	0x0801e42c
 8015aa0:	0801de20 	.word	0x0801de20

08015aa4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b082      	sub	sp, #8
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d106      	bne.n	8015ac0 <tcp_rexmit_rto+0x1c>
 8015ab2:	4b0a      	ldr	r3, [pc, #40]	; (8015adc <tcp_rexmit_rto+0x38>)
 8015ab4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8015ab8:	4909      	ldr	r1, [pc, #36]	; (8015ae0 <tcp_rexmit_rto+0x3c>)
 8015aba:	480a      	ldr	r0, [pc, #40]	; (8015ae4 <tcp_rexmit_rto+0x40>)
 8015abc:	f004 fa56 	bl	8019f6c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015ac0:	6878      	ldr	r0, [r7, #4]
 8015ac2:	f7ff ff57 	bl	8015974 <tcp_rexmit_rto_prepare>
 8015ac6:	4603      	mov	r3, r0
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d102      	bne.n	8015ad2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015acc:	6878      	ldr	r0, [r7, #4]
 8015ace:	f7ff ffc1 	bl	8015a54 <tcp_rexmit_rto_commit>
  }
}
 8015ad2:	bf00      	nop
 8015ad4:	3708      	adds	r7, #8
 8015ad6:	46bd      	mov	sp, r7
 8015ad8:	bd80      	pop	{r7, pc}
 8015ada:	bf00      	nop
 8015adc:	0801ddcc 	.word	0x0801ddcc
 8015ae0:	0801e450 	.word	0x0801e450
 8015ae4:	0801de20 	.word	0x0801de20

08015ae8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015ae8:	b590      	push	{r4, r7, lr}
 8015aea:	b085      	sub	sp, #20
 8015aec:	af00      	add	r7, sp, #0
 8015aee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d106      	bne.n	8015b04 <tcp_rexmit+0x1c>
 8015af6:	4b2f      	ldr	r3, [pc, #188]	; (8015bb4 <tcp_rexmit+0xcc>)
 8015af8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015afc:	492e      	ldr	r1, [pc, #184]	; (8015bb8 <tcp_rexmit+0xd0>)
 8015afe:	482f      	ldr	r0, [pc, #188]	; (8015bbc <tcp_rexmit+0xd4>)
 8015b00:	f004 fa34 	bl	8019f6c <iprintf>

  if (pcb->unacked == NULL) {
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d102      	bne.n	8015b12 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015b0c:	f06f 0305 	mvn.w	r3, #5
 8015b10:	e04c      	b.n	8015bac <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b16:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015b18:	68b8      	ldr	r0, [r7, #8]
 8015b1a:	f7ff fe2d 	bl	8015778 <tcp_output_segment_busy>
 8015b1e:	4603      	mov	r3, r0
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d002      	beq.n	8015b2a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015b24:	f06f 0305 	mvn.w	r3, #5
 8015b28:	e040      	b.n	8015bac <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015b2a:	68bb      	ldr	r3, [r7, #8]
 8015b2c:	681a      	ldr	r2, [r3, #0]
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	336c      	adds	r3, #108	; 0x6c
 8015b36:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015b38:	e002      	b.n	8015b40 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d011      	beq.n	8015b6c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	68db      	ldr	r3, [r3, #12]
 8015b4e:	685b      	ldr	r3, [r3, #4]
 8015b50:	4618      	mov	r0, r3
 8015b52:	f7f8 fe13 	bl	800e77c <lwip_htonl>
 8015b56:	4604      	mov	r4, r0
 8015b58:	68bb      	ldr	r3, [r7, #8]
 8015b5a:	68db      	ldr	r3, [r3, #12]
 8015b5c:	685b      	ldr	r3, [r3, #4]
 8015b5e:	4618      	mov	r0, r3
 8015b60:	f7f8 fe0c 	bl	800e77c <lwip_htonl>
 8015b64:	4603      	mov	r3, r0
 8015b66:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	dbe6      	blt.n	8015b3a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	681a      	ldr	r2, [r3, #0]
 8015b70:	68bb      	ldr	r3, [r7, #8]
 8015b72:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	68ba      	ldr	r2, [r7, #8]
 8015b78:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015b7a:	68bb      	ldr	r3, [r7, #8]
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d103      	bne.n	8015b8a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	2200      	movs	r2, #0
 8015b86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015b90:	2bff      	cmp	r3, #255	; 0xff
 8015b92:	d007      	beq.n	8015ba4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015b9a:	3301      	adds	r3, #1
 8015b9c:	b2da      	uxtb	r2, r3
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	2200      	movs	r2, #0
 8015ba8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015baa:	2300      	movs	r3, #0
}
 8015bac:	4618      	mov	r0, r3
 8015bae:	3714      	adds	r7, #20
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	bd90      	pop	{r4, r7, pc}
 8015bb4:	0801ddcc 	.word	0x0801ddcc
 8015bb8:	0801e46c 	.word	0x0801e46c
 8015bbc:	0801de20 	.word	0x0801de20

08015bc0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015bc0:	b580      	push	{r7, lr}
 8015bc2:	b082      	sub	sp, #8
 8015bc4:	af00      	add	r7, sp, #0
 8015bc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d106      	bne.n	8015bdc <tcp_rexmit_fast+0x1c>
 8015bce:	4b2a      	ldr	r3, [pc, #168]	; (8015c78 <tcp_rexmit_fast+0xb8>)
 8015bd0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8015bd4:	4929      	ldr	r1, [pc, #164]	; (8015c7c <tcp_rexmit_fast+0xbc>)
 8015bd6:	482a      	ldr	r0, [pc, #168]	; (8015c80 <tcp_rexmit_fast+0xc0>)
 8015bd8:	f004 f9c8 	bl	8019f6c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d044      	beq.n	8015c6e <tcp_rexmit_fast+0xae>
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	8b5b      	ldrh	r3, [r3, #26]
 8015be8:	f003 0304 	and.w	r3, r3, #4
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d13e      	bne.n	8015c6e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015bf0:	6878      	ldr	r0, [r7, #4]
 8015bf2:	f7ff ff79 	bl	8015ae8 <tcp_rexmit>
 8015bf6:	4603      	mov	r3, r0
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d138      	bne.n	8015c6e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015c08:	4293      	cmp	r3, r2
 8015c0a:	bf28      	it	cs
 8015c0c:	4613      	movcs	r3, r2
 8015c0e:	b29b      	uxth	r3, r3
 8015c10:	0fda      	lsrs	r2, r3, #31
 8015c12:	4413      	add	r3, r2
 8015c14:	105b      	asrs	r3, r3, #1
 8015c16:	b29a      	uxth	r2, r3
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015c24:	461a      	mov	r2, r3
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015c2a:	005b      	lsls	r3, r3, #1
 8015c2c:	429a      	cmp	r2, r3
 8015c2e:	d206      	bcs.n	8015c3e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015c34:	005b      	lsls	r3, r3, #1
 8015c36:	b29a      	uxth	r2, r3
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015c48:	4619      	mov	r1, r3
 8015c4a:	0049      	lsls	r1, r1, #1
 8015c4c:	440b      	add	r3, r1
 8015c4e:	b29b      	uxth	r3, r3
 8015c50:	4413      	add	r3, r2
 8015c52:	b29a      	uxth	r2, r3
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	8b5b      	ldrh	r3, [r3, #26]
 8015c5e:	f043 0304 	orr.w	r3, r3, #4
 8015c62:	b29a      	uxth	r2, r3
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	2200      	movs	r2, #0
 8015c6c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8015c6e:	bf00      	nop
 8015c70:	3708      	adds	r7, #8
 8015c72:	46bd      	mov	sp, r7
 8015c74:	bd80      	pop	{r7, pc}
 8015c76:	bf00      	nop
 8015c78:	0801ddcc 	.word	0x0801ddcc
 8015c7c:	0801e484 	.word	0x0801e484
 8015c80:	0801de20 	.word	0x0801de20

08015c84 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b086      	sub	sp, #24
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	60f8      	str	r0, [r7, #12]
 8015c8c:	607b      	str	r3, [r7, #4]
 8015c8e:	460b      	mov	r3, r1
 8015c90:	817b      	strh	r3, [r7, #10]
 8015c92:	4613      	mov	r3, r2
 8015c94:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015c96:	897a      	ldrh	r2, [r7, #10]
 8015c98:	893b      	ldrh	r3, [r7, #8]
 8015c9a:	4413      	add	r3, r2
 8015c9c:	b29b      	uxth	r3, r3
 8015c9e:	3314      	adds	r3, #20
 8015ca0:	b29b      	uxth	r3, r3
 8015ca2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015ca6:	4619      	mov	r1, r3
 8015ca8:	2022      	movs	r0, #34	; 0x22
 8015caa:	f7f9 fd21 	bl	800f6f0 <pbuf_alloc>
 8015cae:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015cb0:	697b      	ldr	r3, [r7, #20]
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d04d      	beq.n	8015d52 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015cb6:	897b      	ldrh	r3, [r7, #10]
 8015cb8:	3313      	adds	r3, #19
 8015cba:	697a      	ldr	r2, [r7, #20]
 8015cbc:	8952      	ldrh	r2, [r2, #10]
 8015cbe:	4293      	cmp	r3, r2
 8015cc0:	db06      	blt.n	8015cd0 <tcp_output_alloc_header_common+0x4c>
 8015cc2:	4b26      	ldr	r3, [pc, #152]	; (8015d5c <tcp_output_alloc_header_common+0xd8>)
 8015cc4:	f240 7223 	movw	r2, #1827	; 0x723
 8015cc8:	4925      	ldr	r1, [pc, #148]	; (8015d60 <tcp_output_alloc_header_common+0xdc>)
 8015cca:	4826      	ldr	r0, [pc, #152]	; (8015d64 <tcp_output_alloc_header_common+0xe0>)
 8015ccc:	f004 f94e 	bl	8019f6c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015cd0:	697b      	ldr	r3, [r7, #20]
 8015cd2:	685b      	ldr	r3, [r3, #4]
 8015cd4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8015cd6:	8c3b      	ldrh	r3, [r7, #32]
 8015cd8:	4618      	mov	r0, r3
 8015cda:	f7f8 fd3a 	bl	800e752 <lwip_htons>
 8015cde:	4603      	mov	r3, r0
 8015ce0:	461a      	mov	r2, r3
 8015ce2:	693b      	ldr	r3, [r7, #16]
 8015ce4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8015ce6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ce8:	4618      	mov	r0, r3
 8015cea:	f7f8 fd32 	bl	800e752 <lwip_htons>
 8015cee:	4603      	mov	r3, r0
 8015cf0:	461a      	mov	r2, r3
 8015cf2:	693b      	ldr	r3, [r7, #16]
 8015cf4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015cf6:	693b      	ldr	r3, [r7, #16]
 8015cf8:	687a      	ldr	r2, [r7, #4]
 8015cfa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015cfc:	68f8      	ldr	r0, [r7, #12]
 8015cfe:	f7f8 fd3d 	bl	800e77c <lwip_htonl>
 8015d02:	4602      	mov	r2, r0
 8015d04:	693b      	ldr	r3, [r7, #16]
 8015d06:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015d08:	897b      	ldrh	r3, [r7, #10]
 8015d0a:	089b      	lsrs	r3, r3, #2
 8015d0c:	b29b      	uxth	r3, r3
 8015d0e:	3305      	adds	r3, #5
 8015d10:	b29b      	uxth	r3, r3
 8015d12:	031b      	lsls	r3, r3, #12
 8015d14:	b29a      	uxth	r2, r3
 8015d16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015d1a:	b29b      	uxth	r3, r3
 8015d1c:	4313      	orrs	r3, r2
 8015d1e:	b29b      	uxth	r3, r3
 8015d20:	4618      	mov	r0, r3
 8015d22:	f7f8 fd16 	bl	800e752 <lwip_htons>
 8015d26:	4603      	mov	r3, r0
 8015d28:	461a      	mov	r2, r3
 8015d2a:	693b      	ldr	r3, [r7, #16]
 8015d2c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015d2e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015d30:	4618      	mov	r0, r3
 8015d32:	f7f8 fd0e 	bl	800e752 <lwip_htons>
 8015d36:	4603      	mov	r3, r0
 8015d38:	461a      	mov	r2, r3
 8015d3a:	693b      	ldr	r3, [r7, #16]
 8015d3c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015d3e:	693b      	ldr	r3, [r7, #16]
 8015d40:	2200      	movs	r2, #0
 8015d42:	741a      	strb	r2, [r3, #16]
 8015d44:	2200      	movs	r2, #0
 8015d46:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015d48:	693b      	ldr	r3, [r7, #16]
 8015d4a:	2200      	movs	r2, #0
 8015d4c:	749a      	strb	r2, [r3, #18]
 8015d4e:	2200      	movs	r2, #0
 8015d50:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015d52:	697b      	ldr	r3, [r7, #20]
}
 8015d54:	4618      	mov	r0, r3
 8015d56:	3718      	adds	r7, #24
 8015d58:	46bd      	mov	sp, r7
 8015d5a:	bd80      	pop	{r7, pc}
 8015d5c:	0801ddcc 	.word	0x0801ddcc
 8015d60:	0801e4a4 	.word	0x0801e4a4
 8015d64:	0801de20 	.word	0x0801de20

08015d68 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015d68:	b5b0      	push	{r4, r5, r7, lr}
 8015d6a:	b08a      	sub	sp, #40	; 0x28
 8015d6c:	af04      	add	r7, sp, #16
 8015d6e:	60f8      	str	r0, [r7, #12]
 8015d70:	607b      	str	r3, [r7, #4]
 8015d72:	460b      	mov	r3, r1
 8015d74:	817b      	strh	r3, [r7, #10]
 8015d76:	4613      	mov	r3, r2
 8015d78:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d106      	bne.n	8015d8e <tcp_output_alloc_header+0x26>
 8015d80:	4b15      	ldr	r3, [pc, #84]	; (8015dd8 <tcp_output_alloc_header+0x70>)
 8015d82:	f240 7242 	movw	r2, #1858	; 0x742
 8015d86:	4915      	ldr	r1, [pc, #84]	; (8015ddc <tcp_output_alloc_header+0x74>)
 8015d88:	4815      	ldr	r0, [pc, #84]	; (8015de0 <tcp_output_alloc_header+0x78>)
 8015d8a:	f004 f8ef 	bl	8019f6c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	8adb      	ldrh	r3, [r3, #22]
 8015d96:	68fa      	ldr	r2, [r7, #12]
 8015d98:	8b12      	ldrh	r2, [r2, #24]
 8015d9a:	68f9      	ldr	r1, [r7, #12]
 8015d9c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8015d9e:	893d      	ldrh	r5, [r7, #8]
 8015da0:	897c      	ldrh	r4, [r7, #10]
 8015da2:	9103      	str	r1, [sp, #12]
 8015da4:	2110      	movs	r1, #16
 8015da6:	9102      	str	r1, [sp, #8]
 8015da8:	9201      	str	r2, [sp, #4]
 8015daa:	9300      	str	r3, [sp, #0]
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	462a      	mov	r2, r5
 8015db0:	4621      	mov	r1, r4
 8015db2:	f7ff ff67 	bl	8015c84 <tcp_output_alloc_header_common>
 8015db6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015db8:	697b      	ldr	r3, [r7, #20]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d006      	beq.n	8015dcc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dc2:	68fa      	ldr	r2, [r7, #12]
 8015dc4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015dc6:	441a      	add	r2, r3
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8015dcc:	697b      	ldr	r3, [r7, #20]
}
 8015dce:	4618      	mov	r0, r3
 8015dd0:	3718      	adds	r7, #24
 8015dd2:	46bd      	mov	sp, r7
 8015dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8015dd6:	bf00      	nop
 8015dd8:	0801ddcc 	.word	0x0801ddcc
 8015ddc:	0801e4d4 	.word	0x0801e4d4
 8015de0:	0801de20 	.word	0x0801de20

08015de4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8015de4:	b580      	push	{r7, lr}
 8015de6:	b088      	sub	sp, #32
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	60f8      	str	r0, [r7, #12]
 8015dec:	60b9      	str	r1, [r7, #8]
 8015dee:	4611      	mov	r1, r2
 8015df0:	461a      	mov	r2, r3
 8015df2:	460b      	mov	r3, r1
 8015df4:	71fb      	strb	r3, [r7, #7]
 8015df6:	4613      	mov	r3, r2
 8015df8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015dfe:	68bb      	ldr	r3, [r7, #8]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d106      	bne.n	8015e12 <tcp_output_fill_options+0x2e>
 8015e04:	4b13      	ldr	r3, [pc, #76]	; (8015e54 <tcp_output_fill_options+0x70>)
 8015e06:	f240 7256 	movw	r2, #1878	; 0x756
 8015e0a:	4913      	ldr	r1, [pc, #76]	; (8015e58 <tcp_output_fill_options+0x74>)
 8015e0c:	4813      	ldr	r0, [pc, #76]	; (8015e5c <tcp_output_fill_options+0x78>)
 8015e0e:	f004 f8ad 	bl	8019f6c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015e12:	68bb      	ldr	r3, [r7, #8]
 8015e14:	685b      	ldr	r3, [r3, #4]
 8015e16:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015e18:	69bb      	ldr	r3, [r7, #24]
 8015e1a:	3314      	adds	r3, #20
 8015e1c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015e1e:	69bb      	ldr	r3, [r7, #24]
 8015e20:	f103 0214 	add.w	r2, r3, #20
 8015e24:	8bfb      	ldrh	r3, [r7, #30]
 8015e26:	009b      	lsls	r3, r3, #2
 8015e28:	4619      	mov	r1, r3
 8015e2a:	79fb      	ldrb	r3, [r7, #7]
 8015e2c:	009b      	lsls	r3, r3, #2
 8015e2e:	f003 0304 	and.w	r3, r3, #4
 8015e32:	440b      	add	r3, r1
 8015e34:	4413      	add	r3, r2
 8015e36:	697a      	ldr	r2, [r7, #20]
 8015e38:	429a      	cmp	r2, r3
 8015e3a:	d006      	beq.n	8015e4a <tcp_output_fill_options+0x66>
 8015e3c:	4b05      	ldr	r3, [pc, #20]	; (8015e54 <tcp_output_fill_options+0x70>)
 8015e3e:	f240 7275 	movw	r2, #1909	; 0x775
 8015e42:	4907      	ldr	r1, [pc, #28]	; (8015e60 <tcp_output_fill_options+0x7c>)
 8015e44:	4805      	ldr	r0, [pc, #20]	; (8015e5c <tcp_output_fill_options+0x78>)
 8015e46:	f004 f891 	bl	8019f6c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015e4a:	bf00      	nop
 8015e4c:	3720      	adds	r7, #32
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	bd80      	pop	{r7, pc}
 8015e52:	bf00      	nop
 8015e54:	0801ddcc 	.word	0x0801ddcc
 8015e58:	0801e4fc 	.word	0x0801e4fc
 8015e5c:	0801de20 	.word	0x0801de20
 8015e60:	0801e3f4 	.word	0x0801e3f4

08015e64 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015e64:	b580      	push	{r7, lr}
 8015e66:	b08a      	sub	sp, #40	; 0x28
 8015e68:	af04      	add	r7, sp, #16
 8015e6a:	60f8      	str	r0, [r7, #12]
 8015e6c:	60b9      	str	r1, [r7, #8]
 8015e6e:	607a      	str	r2, [r7, #4]
 8015e70:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8015e72:	68bb      	ldr	r3, [r7, #8]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d106      	bne.n	8015e86 <tcp_output_control_segment+0x22>
 8015e78:	4b1c      	ldr	r3, [pc, #112]	; (8015eec <tcp_output_control_segment+0x88>)
 8015e7a:	f240 7287 	movw	r2, #1927	; 0x787
 8015e7e:	491c      	ldr	r1, [pc, #112]	; (8015ef0 <tcp_output_control_segment+0x8c>)
 8015e80:	481c      	ldr	r0, [pc, #112]	; (8015ef4 <tcp_output_control_segment+0x90>)
 8015e82:	f004 f873 	bl	8019f6c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015e86:	683a      	ldr	r2, [r7, #0]
 8015e88:	6879      	ldr	r1, [r7, #4]
 8015e8a:	68f8      	ldr	r0, [r7, #12]
 8015e8c:	f7fe fae4 	bl	8014458 <tcp_route>
 8015e90:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8015e92:	693b      	ldr	r3, [r7, #16]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d102      	bne.n	8015e9e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015e98:	23fc      	movs	r3, #252	; 0xfc
 8015e9a:	75fb      	strb	r3, [r7, #23]
 8015e9c:	e01c      	b.n	8015ed8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d006      	beq.n	8015eb2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	7adb      	ldrb	r3, [r3, #11]
 8015ea8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	7a9b      	ldrb	r3, [r3, #10]
 8015eae:	757b      	strb	r3, [r7, #21]
 8015eb0:	e003      	b.n	8015eba <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8015eb2:	23ff      	movs	r3, #255	; 0xff
 8015eb4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015eba:	7dba      	ldrb	r2, [r7, #22]
 8015ebc:	693b      	ldr	r3, [r7, #16]
 8015ebe:	9302      	str	r3, [sp, #8]
 8015ec0:	2306      	movs	r3, #6
 8015ec2:	9301      	str	r3, [sp, #4]
 8015ec4:	7d7b      	ldrb	r3, [r7, #21]
 8015ec6:	9300      	str	r3, [sp, #0]
 8015ec8:	4613      	mov	r3, r2
 8015eca:	683a      	ldr	r2, [r7, #0]
 8015ecc:	6879      	ldr	r1, [r7, #4]
 8015ece:	68b8      	ldr	r0, [r7, #8]
 8015ed0:	f001 ff6e 	bl	8017db0 <ip4_output_if>
 8015ed4:	4603      	mov	r3, r0
 8015ed6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015ed8:	68b8      	ldr	r0, [r7, #8]
 8015eda:	f7f9 feed 	bl	800fcb8 <pbuf_free>
  return err;
 8015ede:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	3718      	adds	r7, #24
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	bd80      	pop	{r7, pc}
 8015eea:	bf00      	nop
 8015eec:	0801ddcc 	.word	0x0801ddcc
 8015ef0:	0801e524 	.word	0x0801e524
 8015ef4:	0801de20 	.word	0x0801de20

08015ef8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015ef8:	b590      	push	{r4, r7, lr}
 8015efa:	b08b      	sub	sp, #44	; 0x2c
 8015efc:	af04      	add	r7, sp, #16
 8015efe:	60f8      	str	r0, [r7, #12]
 8015f00:	60b9      	str	r1, [r7, #8]
 8015f02:	607a      	str	r2, [r7, #4]
 8015f04:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015f06:	683b      	ldr	r3, [r7, #0]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d106      	bne.n	8015f1a <tcp_rst+0x22>
 8015f0c:	4b1e      	ldr	r3, [pc, #120]	; (8015f88 <tcp_rst+0x90>)
 8015f0e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8015f12:	491e      	ldr	r1, [pc, #120]	; (8015f8c <tcp_rst+0x94>)
 8015f14:	481e      	ldr	r0, [pc, #120]	; (8015f90 <tcp_rst+0x98>)
 8015f16:	f004 f829 	bl	8019f6c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d106      	bne.n	8015f2e <tcp_rst+0x36>
 8015f20:	4b19      	ldr	r3, [pc, #100]	; (8015f88 <tcp_rst+0x90>)
 8015f22:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8015f26:	491b      	ldr	r1, [pc, #108]	; (8015f94 <tcp_rst+0x9c>)
 8015f28:	4819      	ldr	r0, [pc, #100]	; (8015f90 <tcp_rst+0x98>)
 8015f2a:	f004 f81f 	bl	8019f6c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015f2e:	2300      	movs	r3, #0
 8015f30:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015f32:	230f      	movs	r3, #15
 8015f34:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015f36:	7dfb      	ldrb	r3, [r7, #23]
 8015f38:	b29c      	uxth	r4, r3
 8015f3a:	68b8      	ldr	r0, [r7, #8]
 8015f3c:	f7f8 fc1e 	bl	800e77c <lwip_htonl>
 8015f40:	4602      	mov	r2, r0
 8015f42:	8abb      	ldrh	r3, [r7, #20]
 8015f44:	9303      	str	r3, [sp, #12]
 8015f46:	2314      	movs	r3, #20
 8015f48:	9302      	str	r3, [sp, #8]
 8015f4a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015f4c:	9301      	str	r3, [sp, #4]
 8015f4e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015f50:	9300      	str	r3, [sp, #0]
 8015f52:	4613      	mov	r3, r2
 8015f54:	2200      	movs	r2, #0
 8015f56:	4621      	mov	r1, r4
 8015f58:	6878      	ldr	r0, [r7, #4]
 8015f5a:	f7ff fe93 	bl	8015c84 <tcp_output_alloc_header_common>
 8015f5e:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015f60:	693b      	ldr	r3, [r7, #16]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d00c      	beq.n	8015f80 <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015f66:	7dfb      	ldrb	r3, [r7, #23]
 8015f68:	2200      	movs	r2, #0
 8015f6a:	6939      	ldr	r1, [r7, #16]
 8015f6c:	68f8      	ldr	r0, [r7, #12]
 8015f6e:	f7ff ff39 	bl	8015de4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f74:	683a      	ldr	r2, [r7, #0]
 8015f76:	6939      	ldr	r1, [r7, #16]
 8015f78:	68f8      	ldr	r0, [r7, #12]
 8015f7a:	f7ff ff73 	bl	8015e64 <tcp_output_control_segment>
 8015f7e:	e000      	b.n	8015f82 <tcp_rst+0x8a>
    return;
 8015f80:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015f82:	371c      	adds	r7, #28
 8015f84:	46bd      	mov	sp, r7
 8015f86:	bd90      	pop	{r4, r7, pc}
 8015f88:	0801ddcc 	.word	0x0801ddcc
 8015f8c:	0801e550 	.word	0x0801e550
 8015f90:	0801de20 	.word	0x0801de20
 8015f94:	0801e56c 	.word	0x0801e56c

08015f98 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015f98:	b590      	push	{r4, r7, lr}
 8015f9a:	b087      	sub	sp, #28
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d106      	bne.n	8015fbc <tcp_send_empty_ack+0x24>
 8015fae:	4b28      	ldr	r3, [pc, #160]	; (8016050 <tcp_send_empty_ack+0xb8>)
 8015fb0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8015fb4:	4927      	ldr	r1, [pc, #156]	; (8016054 <tcp_send_empty_ack+0xbc>)
 8015fb6:	4828      	ldr	r0, [pc, #160]	; (8016058 <tcp_send_empty_ack+0xc0>)
 8015fb8:	f003 ffd8 	bl	8019f6c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015fbc:	7dfb      	ldrb	r3, [r7, #23]
 8015fbe:	009b      	lsls	r3, r3, #2
 8015fc0:	b2db      	uxtb	r3, r3
 8015fc2:	f003 0304 	and.w	r3, r3, #4
 8015fc6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015fc8:	7d7b      	ldrb	r3, [r7, #21]
 8015fca:	b29c      	uxth	r4, r3
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	f7f8 fbd3 	bl	800e77c <lwip_htonl>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	2200      	movs	r2, #0
 8015fda:	4621      	mov	r1, r4
 8015fdc:	6878      	ldr	r0, [r7, #4]
 8015fde:	f7ff fec3 	bl	8015d68 <tcp_output_alloc_header>
 8015fe2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015fe4:	693b      	ldr	r3, [r7, #16]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d109      	bne.n	8015ffe <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	8b5b      	ldrh	r3, [r3, #26]
 8015fee:	f043 0303 	orr.w	r3, r3, #3
 8015ff2:	b29a      	uxth	r2, r3
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015ff8:	f06f 0301 	mvn.w	r3, #1
 8015ffc:	e023      	b.n	8016046 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8015ffe:	7dbb      	ldrb	r3, [r7, #22]
 8016000:	7dfa      	ldrb	r2, [r7, #23]
 8016002:	6939      	ldr	r1, [r7, #16]
 8016004:	6878      	ldr	r0, [r7, #4]
 8016006:	f7ff feed 	bl	8015de4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801600a:	687a      	ldr	r2, [r7, #4]
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	3304      	adds	r3, #4
 8016010:	6939      	ldr	r1, [r7, #16]
 8016012:	6878      	ldr	r0, [r7, #4]
 8016014:	f7ff ff26 	bl	8015e64 <tcp_output_control_segment>
 8016018:	4603      	mov	r3, r0
 801601a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801601c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d007      	beq.n	8016034 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	8b5b      	ldrh	r3, [r3, #26]
 8016028:	f043 0303 	orr.w	r3, r3, #3
 801602c:	b29a      	uxth	r2, r3
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	835a      	strh	r2, [r3, #26]
 8016032:	e006      	b.n	8016042 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	8b5b      	ldrh	r3, [r3, #26]
 8016038:	f023 0303 	bic.w	r3, r3, #3
 801603c:	b29a      	uxth	r2, r3
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8016042:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016046:	4618      	mov	r0, r3
 8016048:	371c      	adds	r7, #28
 801604a:	46bd      	mov	sp, r7
 801604c:	bd90      	pop	{r4, r7, pc}
 801604e:	bf00      	nop
 8016050:	0801ddcc 	.word	0x0801ddcc
 8016054:	0801e588 	.word	0x0801e588
 8016058:	0801de20 	.word	0x0801de20

0801605c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801605c:	b590      	push	{r4, r7, lr}
 801605e:	b087      	sub	sp, #28
 8016060:	af00      	add	r7, sp, #0
 8016062:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016064:	2300      	movs	r3, #0
 8016066:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	2b00      	cmp	r3, #0
 801606c:	d106      	bne.n	801607c <tcp_keepalive+0x20>
 801606e:	4b18      	ldr	r3, [pc, #96]	; (80160d0 <tcp_keepalive+0x74>)
 8016070:	f640 0224 	movw	r2, #2084	; 0x824
 8016074:	4917      	ldr	r1, [pc, #92]	; (80160d4 <tcp_keepalive+0x78>)
 8016076:	4818      	ldr	r0, [pc, #96]	; (80160d8 <tcp_keepalive+0x7c>)
 8016078:	f003 ff78 	bl	8019f6c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801607c:	7dfb      	ldrb	r3, [r7, #23]
 801607e:	b29c      	uxth	r4, r3
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016084:	3b01      	subs	r3, #1
 8016086:	4618      	mov	r0, r3
 8016088:	f7f8 fb78 	bl	800e77c <lwip_htonl>
 801608c:	4603      	mov	r3, r0
 801608e:	2200      	movs	r2, #0
 8016090:	4621      	mov	r1, r4
 8016092:	6878      	ldr	r0, [r7, #4]
 8016094:	f7ff fe68 	bl	8015d68 <tcp_output_alloc_header>
 8016098:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801609a:	693b      	ldr	r3, [r7, #16]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d102      	bne.n	80160a6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80160a0:	f04f 33ff 	mov.w	r3, #4294967295
 80160a4:	e010      	b.n	80160c8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80160a6:	7dfb      	ldrb	r3, [r7, #23]
 80160a8:	2200      	movs	r2, #0
 80160aa:	6939      	ldr	r1, [r7, #16]
 80160ac:	6878      	ldr	r0, [r7, #4]
 80160ae:	f7ff fe99 	bl	8015de4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80160b2:	687a      	ldr	r2, [r7, #4]
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	3304      	adds	r3, #4
 80160b8:	6939      	ldr	r1, [r7, #16]
 80160ba:	6878      	ldr	r0, [r7, #4]
 80160bc:	f7ff fed2 	bl	8015e64 <tcp_output_control_segment>
 80160c0:	4603      	mov	r3, r0
 80160c2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80160c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80160c8:	4618      	mov	r0, r3
 80160ca:	371c      	adds	r7, #28
 80160cc:	46bd      	mov	sp, r7
 80160ce:	bd90      	pop	{r4, r7, pc}
 80160d0:	0801ddcc 	.word	0x0801ddcc
 80160d4:	0801e5a8 	.word	0x0801e5a8
 80160d8:	0801de20 	.word	0x0801de20

080160dc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80160dc:	b590      	push	{r4, r7, lr}
 80160de:	b08b      	sub	sp, #44	; 0x2c
 80160e0:	af00      	add	r7, sp, #0
 80160e2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80160e4:	2300      	movs	r3, #0
 80160e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d106      	bne.n	80160fe <tcp_zero_window_probe+0x22>
 80160f0:	4b4c      	ldr	r3, [pc, #304]	; (8016224 <tcp_zero_window_probe+0x148>)
 80160f2:	f640 024f 	movw	r2, #2127	; 0x84f
 80160f6:	494c      	ldr	r1, [pc, #304]	; (8016228 <tcp_zero_window_probe+0x14c>)
 80160f8:	484c      	ldr	r0, [pc, #304]	; (801622c <tcp_zero_window_probe+0x150>)
 80160fa:	f003 ff37 	bl	8019f6c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016102:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8016104:	6a3b      	ldr	r3, [r7, #32]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d101      	bne.n	801610e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801610a:	2300      	movs	r3, #0
 801610c:	e086      	b.n	801621c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016114:	2bff      	cmp	r3, #255	; 0xff
 8016116:	d007      	beq.n	8016128 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801611e:	3301      	adds	r3, #1
 8016120:	b2da      	uxtb	r2, r3
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016128:	6a3b      	ldr	r3, [r7, #32]
 801612a:	68db      	ldr	r3, [r3, #12]
 801612c:	899b      	ldrh	r3, [r3, #12]
 801612e:	b29b      	uxth	r3, r3
 8016130:	4618      	mov	r0, r3
 8016132:	f7f8 fb0e 	bl	800e752 <lwip_htons>
 8016136:	4603      	mov	r3, r0
 8016138:	b2db      	uxtb	r3, r3
 801613a:	f003 0301 	and.w	r3, r3, #1
 801613e:	2b00      	cmp	r3, #0
 8016140:	d005      	beq.n	801614e <tcp_zero_window_probe+0x72>
 8016142:	6a3b      	ldr	r3, [r7, #32]
 8016144:	891b      	ldrh	r3, [r3, #8]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d101      	bne.n	801614e <tcp_zero_window_probe+0x72>
 801614a:	2301      	movs	r3, #1
 801614c:	e000      	b.n	8016150 <tcp_zero_window_probe+0x74>
 801614e:	2300      	movs	r3, #0
 8016150:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016152:	7ffb      	ldrb	r3, [r7, #31]
 8016154:	2b00      	cmp	r3, #0
 8016156:	bf0c      	ite	eq
 8016158:	2301      	moveq	r3, #1
 801615a:	2300      	movne	r3, #0
 801615c:	b2db      	uxtb	r3, r3
 801615e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016164:	b299      	uxth	r1, r3
 8016166:	6a3b      	ldr	r3, [r7, #32]
 8016168:	68db      	ldr	r3, [r3, #12]
 801616a:	685b      	ldr	r3, [r3, #4]
 801616c:	8bba      	ldrh	r2, [r7, #28]
 801616e:	6878      	ldr	r0, [r7, #4]
 8016170:	f7ff fdfa 	bl	8015d68 <tcp_output_alloc_header>
 8016174:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016176:	69bb      	ldr	r3, [r7, #24]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d102      	bne.n	8016182 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801617c:	f04f 33ff 	mov.w	r3, #4294967295
 8016180:	e04c      	b.n	801621c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016182:	69bb      	ldr	r3, [r7, #24]
 8016184:	685b      	ldr	r3, [r3, #4]
 8016186:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016188:	7ffb      	ldrb	r3, [r7, #31]
 801618a:	2b00      	cmp	r3, #0
 801618c:	d011      	beq.n	80161b2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801618e:	697b      	ldr	r3, [r7, #20]
 8016190:	899b      	ldrh	r3, [r3, #12]
 8016192:	b29b      	uxth	r3, r3
 8016194:	b21b      	sxth	r3, r3
 8016196:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801619a:	b21c      	sxth	r4, r3
 801619c:	2011      	movs	r0, #17
 801619e:	f7f8 fad8 	bl	800e752 <lwip_htons>
 80161a2:	4603      	mov	r3, r0
 80161a4:	b21b      	sxth	r3, r3
 80161a6:	4323      	orrs	r3, r4
 80161a8:	b21b      	sxth	r3, r3
 80161aa:	b29a      	uxth	r2, r3
 80161ac:	697b      	ldr	r3, [r7, #20]
 80161ae:	819a      	strh	r2, [r3, #12]
 80161b0:	e010      	b.n	80161d4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80161b2:	69bb      	ldr	r3, [r7, #24]
 80161b4:	685b      	ldr	r3, [r3, #4]
 80161b6:	3314      	adds	r3, #20
 80161b8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80161ba:	6a3b      	ldr	r3, [r7, #32]
 80161bc:	6858      	ldr	r0, [r3, #4]
 80161be:	6a3b      	ldr	r3, [r7, #32]
 80161c0:	685b      	ldr	r3, [r3, #4]
 80161c2:	891a      	ldrh	r2, [r3, #8]
 80161c4:	6a3b      	ldr	r3, [r7, #32]
 80161c6:	891b      	ldrh	r3, [r3, #8]
 80161c8:	1ad3      	subs	r3, r2, r3
 80161ca:	b29b      	uxth	r3, r3
 80161cc:	2201      	movs	r2, #1
 80161ce:	6939      	ldr	r1, [r7, #16]
 80161d0:	f7f9 ff5c 	bl	801008c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80161d4:	6a3b      	ldr	r3, [r7, #32]
 80161d6:	68db      	ldr	r3, [r3, #12]
 80161d8:	685b      	ldr	r3, [r3, #4]
 80161da:	4618      	mov	r0, r3
 80161dc:	f7f8 face 	bl	800e77c <lwip_htonl>
 80161e0:	4603      	mov	r3, r0
 80161e2:	3301      	adds	r3, #1
 80161e4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	1ad3      	subs	r3, r2, r3
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	da02      	bge.n	80161f8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	68fa      	ldr	r2, [r7, #12]
 80161f6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80161f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161fc:	2200      	movs	r2, #0
 80161fe:	69b9      	ldr	r1, [r7, #24]
 8016200:	6878      	ldr	r0, [r7, #4]
 8016202:	f7ff fdef 	bl	8015de4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016206:	687a      	ldr	r2, [r7, #4]
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	3304      	adds	r3, #4
 801620c:	69b9      	ldr	r1, [r7, #24]
 801620e:	6878      	ldr	r0, [r7, #4]
 8016210:	f7ff fe28 	bl	8015e64 <tcp_output_control_segment>
 8016214:	4603      	mov	r3, r0
 8016216:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016218:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801621c:	4618      	mov	r0, r3
 801621e:	372c      	adds	r7, #44	; 0x2c
 8016220:	46bd      	mov	sp, r7
 8016222:	bd90      	pop	{r4, r7, pc}
 8016224:	0801ddcc 	.word	0x0801ddcc
 8016228:	0801e5c4 	.word	0x0801e5c4
 801622c:	0801de20 	.word	0x0801de20

08016230 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016230:	b580      	push	{r7, lr}
 8016232:	b082      	sub	sp, #8
 8016234:	af00      	add	r7, sp, #0
 8016236:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016238:	f7fa f8a8 	bl	801038c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801623c:	4b0a      	ldr	r3, [pc, #40]	; (8016268 <tcpip_tcp_timer+0x38>)
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	2b00      	cmp	r3, #0
 8016242:	d103      	bne.n	801624c <tcpip_tcp_timer+0x1c>
 8016244:	4b09      	ldr	r3, [pc, #36]	; (801626c <tcpip_tcp_timer+0x3c>)
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d005      	beq.n	8016258 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801624c:	2200      	movs	r2, #0
 801624e:	4908      	ldr	r1, [pc, #32]	; (8016270 <tcpip_tcp_timer+0x40>)
 8016250:	20fa      	movs	r0, #250	; 0xfa
 8016252:	f000 f8f3 	bl	801643c <sys_timeout>
 8016256:	e003      	b.n	8016260 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016258:	4b06      	ldr	r3, [pc, #24]	; (8016274 <tcpip_tcp_timer+0x44>)
 801625a:	2200      	movs	r2, #0
 801625c:	601a      	str	r2, [r3, #0]
  }
}
 801625e:	bf00      	nop
 8016260:	bf00      	nop
 8016262:	3708      	adds	r7, #8
 8016264:	46bd      	mov	sp, r7
 8016266:	bd80      	pop	{r7, pc}
 8016268:	2001a9b0 	.word	0x2001a9b0
 801626c:	2001a9c0 	.word	0x2001a9c0
 8016270:	08016231 	.word	0x08016231
 8016274:	200007d8 	.word	0x200007d8

08016278 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016278:	b580      	push	{r7, lr}
 801627a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801627c:	4b0a      	ldr	r3, [pc, #40]	; (80162a8 <tcp_timer_needed+0x30>)
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d10f      	bne.n	80162a4 <tcp_timer_needed+0x2c>
 8016284:	4b09      	ldr	r3, [pc, #36]	; (80162ac <tcp_timer_needed+0x34>)
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d103      	bne.n	8016294 <tcp_timer_needed+0x1c>
 801628c:	4b08      	ldr	r3, [pc, #32]	; (80162b0 <tcp_timer_needed+0x38>)
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	2b00      	cmp	r3, #0
 8016292:	d007      	beq.n	80162a4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016294:	4b04      	ldr	r3, [pc, #16]	; (80162a8 <tcp_timer_needed+0x30>)
 8016296:	2201      	movs	r2, #1
 8016298:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801629a:	2200      	movs	r2, #0
 801629c:	4905      	ldr	r1, [pc, #20]	; (80162b4 <tcp_timer_needed+0x3c>)
 801629e:	20fa      	movs	r0, #250	; 0xfa
 80162a0:	f000 f8cc 	bl	801643c <sys_timeout>
  }
}
 80162a4:	bf00      	nop
 80162a6:	bd80      	pop	{r7, pc}
 80162a8:	200007d8 	.word	0x200007d8
 80162ac:	2001a9b0 	.word	0x2001a9b0
 80162b0:	2001a9c0 	.word	0x2001a9c0
 80162b4:	08016231 	.word	0x08016231

080162b8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80162b8:	b580      	push	{r7, lr}
 80162ba:	b086      	sub	sp, #24
 80162bc:	af00      	add	r7, sp, #0
 80162be:	60f8      	str	r0, [r7, #12]
 80162c0:	60b9      	str	r1, [r7, #8]
 80162c2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80162c4:	2006      	movs	r0, #6
 80162c6:	f7f8 fe99 	bl	800effc <memp_malloc>
 80162ca:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80162cc:	693b      	ldr	r3, [r7, #16]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d109      	bne.n	80162e6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80162d2:	693b      	ldr	r3, [r7, #16]
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d151      	bne.n	801637c <sys_timeout_abs+0xc4>
 80162d8:	4b2a      	ldr	r3, [pc, #168]	; (8016384 <sys_timeout_abs+0xcc>)
 80162da:	22be      	movs	r2, #190	; 0xbe
 80162dc:	492a      	ldr	r1, [pc, #168]	; (8016388 <sys_timeout_abs+0xd0>)
 80162de:	482b      	ldr	r0, [pc, #172]	; (801638c <sys_timeout_abs+0xd4>)
 80162e0:	f003 fe44 	bl	8019f6c <iprintf>
    return;
 80162e4:	e04a      	b.n	801637c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80162e6:	693b      	ldr	r3, [r7, #16]
 80162e8:	2200      	movs	r2, #0
 80162ea:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80162ec:	693b      	ldr	r3, [r7, #16]
 80162ee:	68ba      	ldr	r2, [r7, #8]
 80162f0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80162f2:	693b      	ldr	r3, [r7, #16]
 80162f4:	687a      	ldr	r2, [r7, #4]
 80162f6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80162f8:	693b      	ldr	r3, [r7, #16]
 80162fa:	68fa      	ldr	r2, [r7, #12]
 80162fc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80162fe:	4b24      	ldr	r3, [pc, #144]	; (8016390 <sys_timeout_abs+0xd8>)
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	2b00      	cmp	r3, #0
 8016304:	d103      	bne.n	801630e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8016306:	4a22      	ldr	r2, [pc, #136]	; (8016390 <sys_timeout_abs+0xd8>)
 8016308:	693b      	ldr	r3, [r7, #16]
 801630a:	6013      	str	r3, [r2, #0]
    return;
 801630c:	e037      	b.n	801637e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801630e:	693b      	ldr	r3, [r7, #16]
 8016310:	685a      	ldr	r2, [r3, #4]
 8016312:	4b1f      	ldr	r3, [pc, #124]	; (8016390 <sys_timeout_abs+0xd8>)
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	685b      	ldr	r3, [r3, #4]
 8016318:	1ad3      	subs	r3, r2, r3
 801631a:	0fdb      	lsrs	r3, r3, #31
 801631c:	f003 0301 	and.w	r3, r3, #1
 8016320:	b2db      	uxtb	r3, r3
 8016322:	2b00      	cmp	r3, #0
 8016324:	d007      	beq.n	8016336 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8016326:	4b1a      	ldr	r3, [pc, #104]	; (8016390 <sys_timeout_abs+0xd8>)
 8016328:	681a      	ldr	r2, [r3, #0]
 801632a:	693b      	ldr	r3, [r7, #16]
 801632c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801632e:	4a18      	ldr	r2, [pc, #96]	; (8016390 <sys_timeout_abs+0xd8>)
 8016330:	693b      	ldr	r3, [r7, #16]
 8016332:	6013      	str	r3, [r2, #0]
 8016334:	e023      	b.n	801637e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016336:	4b16      	ldr	r3, [pc, #88]	; (8016390 <sys_timeout_abs+0xd8>)
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	617b      	str	r3, [r7, #20]
 801633c:	e01a      	b.n	8016374 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801633e:	697b      	ldr	r3, [r7, #20]
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d00b      	beq.n	801635e <sys_timeout_abs+0xa6>
 8016346:	693b      	ldr	r3, [r7, #16]
 8016348:	685a      	ldr	r2, [r3, #4]
 801634a:	697b      	ldr	r3, [r7, #20]
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	685b      	ldr	r3, [r3, #4]
 8016350:	1ad3      	subs	r3, r2, r3
 8016352:	0fdb      	lsrs	r3, r3, #31
 8016354:	f003 0301 	and.w	r3, r3, #1
 8016358:	b2db      	uxtb	r3, r3
 801635a:	2b00      	cmp	r3, #0
 801635c:	d007      	beq.n	801636e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801635e:	697b      	ldr	r3, [r7, #20]
 8016360:	681a      	ldr	r2, [r3, #0]
 8016362:	693b      	ldr	r3, [r7, #16]
 8016364:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016366:	697b      	ldr	r3, [r7, #20]
 8016368:	693a      	ldr	r2, [r7, #16]
 801636a:	601a      	str	r2, [r3, #0]
        break;
 801636c:	e007      	b.n	801637e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801636e:	697b      	ldr	r3, [r7, #20]
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	617b      	str	r3, [r7, #20]
 8016374:	697b      	ldr	r3, [r7, #20]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d1e1      	bne.n	801633e <sys_timeout_abs+0x86>
 801637a:	e000      	b.n	801637e <sys_timeout_abs+0xc6>
    return;
 801637c:	bf00      	nop
      }
    }
  }
}
 801637e:	3718      	adds	r7, #24
 8016380:	46bd      	mov	sp, r7
 8016382:	bd80      	pop	{r7, pc}
 8016384:	0801e5e8 	.word	0x0801e5e8
 8016388:	0801e61c 	.word	0x0801e61c
 801638c:	0801e65c 	.word	0x0801e65c
 8016390:	200007d0 	.word	0x200007d0

08016394 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016394:	b580      	push	{r7, lr}
 8016396:	b086      	sub	sp, #24
 8016398:	af00      	add	r7, sp, #0
 801639a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80163a0:	697b      	ldr	r3, [r7, #20]
 80163a2:	685b      	ldr	r3, [r3, #4]
 80163a4:	4798      	blx	r3

  now = sys_now();
 80163a6:	f7f4 fee5 	bl	800b174 <sys_now>
 80163aa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80163ac:	697b      	ldr	r3, [r7, #20]
 80163ae:	681a      	ldr	r2, [r3, #0]
 80163b0:	4b0f      	ldr	r3, [pc, #60]	; (80163f0 <lwip_cyclic_timer+0x5c>)
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	4413      	add	r3, r2
 80163b6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80163b8:	68fa      	ldr	r2, [r7, #12]
 80163ba:	693b      	ldr	r3, [r7, #16]
 80163bc:	1ad3      	subs	r3, r2, r3
 80163be:	0fdb      	lsrs	r3, r3, #31
 80163c0:	f003 0301 	and.w	r3, r3, #1
 80163c4:	b2db      	uxtb	r3, r3
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d009      	beq.n	80163de <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80163ca:	697b      	ldr	r3, [r7, #20]
 80163cc:	681a      	ldr	r2, [r3, #0]
 80163ce:	693b      	ldr	r3, [r7, #16]
 80163d0:	4413      	add	r3, r2
 80163d2:	687a      	ldr	r2, [r7, #4]
 80163d4:	4907      	ldr	r1, [pc, #28]	; (80163f4 <lwip_cyclic_timer+0x60>)
 80163d6:	4618      	mov	r0, r3
 80163d8:	f7ff ff6e 	bl	80162b8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80163dc:	e004      	b.n	80163e8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80163de:	687a      	ldr	r2, [r7, #4]
 80163e0:	4904      	ldr	r1, [pc, #16]	; (80163f4 <lwip_cyclic_timer+0x60>)
 80163e2:	68f8      	ldr	r0, [r7, #12]
 80163e4:	f7ff ff68 	bl	80162b8 <sys_timeout_abs>
}
 80163e8:	bf00      	nop
 80163ea:	3718      	adds	r7, #24
 80163ec:	46bd      	mov	sp, r7
 80163ee:	bd80      	pop	{r7, pc}
 80163f0:	200007d4 	.word	0x200007d4
 80163f4:	08016395 	.word	0x08016395

080163f8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b082      	sub	sp, #8
 80163fc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80163fe:	2301      	movs	r3, #1
 8016400:	607b      	str	r3, [r7, #4]
 8016402:	e00e      	b.n	8016422 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016404:	4a0b      	ldr	r2, [pc, #44]	; (8016434 <sys_timeouts_init+0x3c>)
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	00db      	lsls	r3, r3, #3
 8016410:	4a08      	ldr	r2, [pc, #32]	; (8016434 <sys_timeouts_init+0x3c>)
 8016412:	4413      	add	r3, r2
 8016414:	461a      	mov	r2, r3
 8016416:	4908      	ldr	r1, [pc, #32]	; (8016438 <sys_timeouts_init+0x40>)
 8016418:	f000 f810 	bl	801643c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	3301      	adds	r3, #1
 8016420:	607b      	str	r3, [r7, #4]
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	2b02      	cmp	r3, #2
 8016426:	d9ed      	bls.n	8016404 <sys_timeouts_init+0xc>
  }
}
 8016428:	bf00      	nop
 801642a:	bf00      	nop
 801642c:	3708      	adds	r7, #8
 801642e:	46bd      	mov	sp, r7
 8016430:	bd80      	pop	{r7, pc}
 8016432:	bf00      	nop
 8016434:	0801f358 	.word	0x0801f358
 8016438:	08016395 	.word	0x08016395

0801643c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801643c:	b580      	push	{r7, lr}
 801643e:	b086      	sub	sp, #24
 8016440:	af00      	add	r7, sp, #0
 8016442:	60f8      	str	r0, [r7, #12]
 8016444:	60b9      	str	r1, [r7, #8]
 8016446:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801644e:	d306      	bcc.n	801645e <sys_timeout+0x22>
 8016450:	4b0a      	ldr	r3, [pc, #40]	; (801647c <sys_timeout+0x40>)
 8016452:	f240 1229 	movw	r2, #297	; 0x129
 8016456:	490a      	ldr	r1, [pc, #40]	; (8016480 <sys_timeout+0x44>)
 8016458:	480a      	ldr	r0, [pc, #40]	; (8016484 <sys_timeout+0x48>)
 801645a:	f003 fd87 	bl	8019f6c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801645e:	f7f4 fe89 	bl	800b174 <sys_now>
 8016462:	4602      	mov	r2, r0
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	4413      	add	r3, r2
 8016468:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801646a:	687a      	ldr	r2, [r7, #4]
 801646c:	68b9      	ldr	r1, [r7, #8]
 801646e:	6978      	ldr	r0, [r7, #20]
 8016470:	f7ff ff22 	bl	80162b8 <sys_timeout_abs>
#endif
}
 8016474:	bf00      	nop
 8016476:	3718      	adds	r7, #24
 8016478:	46bd      	mov	sp, r7
 801647a:	bd80      	pop	{r7, pc}
 801647c:	0801e5e8 	.word	0x0801e5e8
 8016480:	0801e684 	.word	0x0801e684
 8016484:	0801e65c 	.word	0x0801e65c

08016488 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8016488:	b580      	push	{r7, lr}
 801648a:	b084      	sub	sp, #16
 801648c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801648e:	f7f4 fe71 	bl	800b174 <sys_now>
 8016492:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8016494:	4b1a      	ldr	r3, [pc, #104]	; (8016500 <sys_check_timeouts+0x78>)
 8016496:	781b      	ldrb	r3, [r3, #0]
 8016498:	b2db      	uxtb	r3, r3
 801649a:	2b00      	cmp	r3, #0
 801649c:	d001      	beq.n	80164a2 <sys_check_timeouts+0x1a>
 801649e:	f7f9 f8d1 	bl	800f644 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 80164a2:	4b18      	ldr	r3, [pc, #96]	; (8016504 <sys_check_timeouts+0x7c>)
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80164a8:	68bb      	ldr	r3, [r7, #8]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d022      	beq.n	80164f4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80164ae:	68bb      	ldr	r3, [r7, #8]
 80164b0:	685b      	ldr	r3, [r3, #4]
 80164b2:	68fa      	ldr	r2, [r7, #12]
 80164b4:	1ad3      	subs	r3, r2, r3
 80164b6:	0fdb      	lsrs	r3, r3, #31
 80164b8:	f003 0301 	and.w	r3, r3, #1
 80164bc:	b2db      	uxtb	r3, r3
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d11a      	bne.n	80164f8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80164c2:	68bb      	ldr	r3, [r7, #8]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	4a0f      	ldr	r2, [pc, #60]	; (8016504 <sys_check_timeouts+0x7c>)
 80164c8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80164ca:	68bb      	ldr	r3, [r7, #8]
 80164cc:	689b      	ldr	r3, [r3, #8]
 80164ce:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80164d0:	68bb      	ldr	r3, [r7, #8]
 80164d2:	68db      	ldr	r3, [r3, #12]
 80164d4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80164d6:	68bb      	ldr	r3, [r7, #8]
 80164d8:	685b      	ldr	r3, [r3, #4]
 80164da:	4a0b      	ldr	r2, [pc, #44]	; (8016508 <sys_check_timeouts+0x80>)
 80164dc:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80164de:	68b9      	ldr	r1, [r7, #8]
 80164e0:	2006      	movs	r0, #6
 80164e2:	f7f8 fdd7 	bl	800f094 <memp_free>
    if (handler != NULL) {
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d0d3      	beq.n	8016494 <sys_check_timeouts+0xc>
      handler(arg);
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	6838      	ldr	r0, [r7, #0]
 80164f0:	4798      	blx	r3
  do {
 80164f2:	e7cf      	b.n	8016494 <sys_check_timeouts+0xc>
      return;
 80164f4:	bf00      	nop
 80164f6:	e000      	b.n	80164fa <sys_check_timeouts+0x72>
      return;
 80164f8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80164fa:	3710      	adds	r7, #16
 80164fc:	46bd      	mov	sp, r7
 80164fe:	bd80      	pop	{r7, pc}
 8016500:	2001a9a8 	.word	0x2001a9a8
 8016504:	200007d0 	.word	0x200007d0
 8016508:	200007d4 	.word	0x200007d4

0801650c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801650c:	b580      	push	{r7, lr}
 801650e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016510:	f003 fd5a 	bl	8019fc8 <rand>
 8016514:	4603      	mov	r3, r0
 8016516:	b29b      	uxth	r3, r3
 8016518:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801651c:	b29b      	uxth	r3, r3
 801651e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016522:	b29a      	uxth	r2, r3
 8016524:	4b01      	ldr	r3, [pc, #4]	; (801652c <udp_init+0x20>)
 8016526:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016528:	bf00      	nop
 801652a:	bd80      	pop	{r7, pc}
 801652c:	2000053c 	.word	0x2000053c

08016530 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016530:	b580      	push	{r7, lr}
 8016532:	b084      	sub	sp, #16
 8016534:	af00      	add	r7, sp, #0
 8016536:	60f8      	str	r0, [r7, #12]
 8016538:	60b9      	str	r1, [r7, #8]
 801653a:	4613      	mov	r3, r2
 801653c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	2b00      	cmp	r3, #0
 8016542:	d105      	bne.n	8016550 <udp_input_local_match+0x20>
 8016544:	4b27      	ldr	r3, [pc, #156]	; (80165e4 <udp_input_local_match+0xb4>)
 8016546:	2287      	movs	r2, #135	; 0x87
 8016548:	4927      	ldr	r1, [pc, #156]	; (80165e8 <udp_input_local_match+0xb8>)
 801654a:	4828      	ldr	r0, [pc, #160]	; (80165ec <udp_input_local_match+0xbc>)
 801654c:	f003 fd0e 	bl	8019f6c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016550:	68bb      	ldr	r3, [r7, #8]
 8016552:	2b00      	cmp	r3, #0
 8016554:	d105      	bne.n	8016562 <udp_input_local_match+0x32>
 8016556:	4b23      	ldr	r3, [pc, #140]	; (80165e4 <udp_input_local_match+0xb4>)
 8016558:	2288      	movs	r2, #136	; 0x88
 801655a:	4925      	ldr	r1, [pc, #148]	; (80165f0 <udp_input_local_match+0xc0>)
 801655c:	4823      	ldr	r0, [pc, #140]	; (80165ec <udp_input_local_match+0xbc>)
 801655e:	f003 fd05 	bl	8019f6c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	7a1b      	ldrb	r3, [r3, #8]
 8016566:	2b00      	cmp	r3, #0
 8016568:	d00b      	beq.n	8016582 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	7a1a      	ldrb	r2, [r3, #8]
 801656e:	4b21      	ldr	r3, [pc, #132]	; (80165f4 <udp_input_local_match+0xc4>)
 8016570:	685b      	ldr	r3, [r3, #4]
 8016572:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016576:	3301      	adds	r3, #1
 8016578:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801657a:	429a      	cmp	r2, r3
 801657c:	d001      	beq.n	8016582 <udp_input_local_match+0x52>
    return 0;
 801657e:	2300      	movs	r3, #0
 8016580:	e02b      	b.n	80165da <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016582:	79fb      	ldrb	r3, [r7, #7]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d018      	beq.n	80165ba <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	2b00      	cmp	r3, #0
 801658c:	d013      	beq.n	80165b6 <udp_input_local_match+0x86>
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d00f      	beq.n	80165b6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016596:	4b17      	ldr	r3, [pc, #92]	; (80165f4 <udp_input_local_match+0xc4>)
 8016598:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801659a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801659e:	d00a      	beq.n	80165b6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	681a      	ldr	r2, [r3, #0]
 80165a4:	4b13      	ldr	r3, [pc, #76]	; (80165f4 <udp_input_local_match+0xc4>)
 80165a6:	695b      	ldr	r3, [r3, #20]
 80165a8:	405a      	eors	r2, r3
 80165aa:	68bb      	ldr	r3, [r7, #8]
 80165ac:	3308      	adds	r3, #8
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d110      	bne.n	80165d8 <udp_input_local_match+0xa8>
          return 1;
 80165b6:	2301      	movs	r3, #1
 80165b8:	e00f      	b.n	80165da <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d009      	beq.n	80165d4 <udp_input_local_match+0xa4>
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d005      	beq.n	80165d4 <udp_input_local_match+0xa4>
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	681a      	ldr	r2, [r3, #0]
 80165cc:	4b09      	ldr	r3, [pc, #36]	; (80165f4 <udp_input_local_match+0xc4>)
 80165ce:	695b      	ldr	r3, [r3, #20]
 80165d0:	429a      	cmp	r2, r3
 80165d2:	d101      	bne.n	80165d8 <udp_input_local_match+0xa8>
        return 1;
 80165d4:	2301      	movs	r3, #1
 80165d6:	e000      	b.n	80165da <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80165d8:	2300      	movs	r3, #0
}
 80165da:	4618      	mov	r0, r3
 80165dc:	3710      	adds	r7, #16
 80165de:	46bd      	mov	sp, r7
 80165e0:	bd80      	pop	{r7, pc}
 80165e2:	bf00      	nop
 80165e4:	0801e6d0 	.word	0x0801e6d0
 80165e8:	0801e700 	.word	0x0801e700
 80165ec:	0801e724 	.word	0x0801e724
 80165f0:	0801e74c 	.word	0x0801e74c
 80165f4:	20007c2c 	.word	0x20007c2c

080165f8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80165f8:	b590      	push	{r4, r7, lr}
 80165fa:	b08d      	sub	sp, #52	; 0x34
 80165fc:	af02      	add	r7, sp, #8
 80165fe:	6078      	str	r0, [r7, #4]
 8016600:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016602:	2300      	movs	r3, #0
 8016604:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d105      	bne.n	8016618 <udp_input+0x20>
 801660c:	4b7c      	ldr	r3, [pc, #496]	; (8016800 <udp_input+0x208>)
 801660e:	22cf      	movs	r2, #207	; 0xcf
 8016610:	497c      	ldr	r1, [pc, #496]	; (8016804 <udp_input+0x20c>)
 8016612:	487d      	ldr	r0, [pc, #500]	; (8016808 <udp_input+0x210>)
 8016614:	f003 fcaa 	bl	8019f6c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016618:	683b      	ldr	r3, [r7, #0]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d105      	bne.n	801662a <udp_input+0x32>
 801661e:	4b78      	ldr	r3, [pc, #480]	; (8016800 <udp_input+0x208>)
 8016620:	22d0      	movs	r2, #208	; 0xd0
 8016622:	497a      	ldr	r1, [pc, #488]	; (801680c <udp_input+0x214>)
 8016624:	4878      	ldr	r0, [pc, #480]	; (8016808 <udp_input+0x210>)
 8016626:	f003 fca1 	bl	8019f6c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	895b      	ldrh	r3, [r3, #10]
 801662e:	2b07      	cmp	r3, #7
 8016630:	d803      	bhi.n	801663a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016632:	6878      	ldr	r0, [r7, #4]
 8016634:	f7f9 fb40 	bl	800fcb8 <pbuf_free>
    goto end;
 8016638:	e0de      	b.n	80167f8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	685b      	ldr	r3, [r3, #4]
 801663e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016640:	4b73      	ldr	r3, [pc, #460]	; (8016810 <udp_input+0x218>)
 8016642:	695b      	ldr	r3, [r3, #20]
 8016644:	4a72      	ldr	r2, [pc, #456]	; (8016810 <udp_input+0x218>)
 8016646:	6812      	ldr	r2, [r2, #0]
 8016648:	4611      	mov	r1, r2
 801664a:	4618      	mov	r0, r3
 801664c:	f001 fc88 	bl	8017f60 <ip4_addr_isbroadcast_u32>
 8016650:	4603      	mov	r3, r0
 8016652:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016654:	697b      	ldr	r3, [r7, #20]
 8016656:	881b      	ldrh	r3, [r3, #0]
 8016658:	b29b      	uxth	r3, r3
 801665a:	4618      	mov	r0, r3
 801665c:	f7f8 f879 	bl	800e752 <lwip_htons>
 8016660:	4603      	mov	r3, r0
 8016662:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016664:	697b      	ldr	r3, [r7, #20]
 8016666:	885b      	ldrh	r3, [r3, #2]
 8016668:	b29b      	uxth	r3, r3
 801666a:	4618      	mov	r0, r3
 801666c:	f7f8 f871 	bl	800e752 <lwip_htons>
 8016670:	4603      	mov	r3, r0
 8016672:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016674:	2300      	movs	r3, #0
 8016676:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8016678:	2300      	movs	r3, #0
 801667a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801667c:	2300      	movs	r3, #0
 801667e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016680:	4b64      	ldr	r3, [pc, #400]	; (8016814 <udp_input+0x21c>)
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	627b      	str	r3, [r7, #36]	; 0x24
 8016686:	e054      	b.n	8016732 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801668a:	8a5b      	ldrh	r3, [r3, #18]
 801668c:	89fa      	ldrh	r2, [r7, #14]
 801668e:	429a      	cmp	r2, r3
 8016690:	d14a      	bne.n	8016728 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016692:	7cfb      	ldrb	r3, [r7, #19]
 8016694:	461a      	mov	r2, r3
 8016696:	6839      	ldr	r1, [r7, #0]
 8016698:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801669a:	f7ff ff49 	bl	8016530 <udp_input_local_match>
 801669e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d041      	beq.n	8016728 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80166a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166a6:	7c1b      	ldrb	r3, [r3, #16]
 80166a8:	f003 0304 	and.w	r3, r3, #4
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d11d      	bne.n	80166ec <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80166b0:	69fb      	ldr	r3, [r7, #28]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d102      	bne.n	80166bc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80166b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166b8:	61fb      	str	r3, [r7, #28]
 80166ba:	e017      	b.n	80166ec <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80166bc:	7cfb      	ldrb	r3, [r7, #19]
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d014      	beq.n	80166ec <udp_input+0xf4>
 80166c2:	4b53      	ldr	r3, [pc, #332]	; (8016810 <udp_input+0x218>)
 80166c4:	695b      	ldr	r3, [r3, #20]
 80166c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166ca:	d10f      	bne.n	80166ec <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80166cc:	69fb      	ldr	r3, [r7, #28]
 80166ce:	681a      	ldr	r2, [r3, #0]
 80166d0:	683b      	ldr	r3, [r7, #0]
 80166d2:	3304      	adds	r3, #4
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	429a      	cmp	r2, r3
 80166d8:	d008      	beq.n	80166ec <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80166da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166dc:	681a      	ldr	r2, [r3, #0]
 80166de:	683b      	ldr	r3, [r7, #0]
 80166e0:	3304      	adds	r3, #4
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	429a      	cmp	r2, r3
 80166e6:	d101      	bne.n	80166ec <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80166e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166ea:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80166ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166ee:	8a9b      	ldrh	r3, [r3, #20]
 80166f0:	8a3a      	ldrh	r2, [r7, #16]
 80166f2:	429a      	cmp	r2, r3
 80166f4:	d118      	bne.n	8016728 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80166f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166f8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d005      	beq.n	801670a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80166fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016700:	685a      	ldr	r2, [r3, #4]
 8016702:	4b43      	ldr	r3, [pc, #268]	; (8016810 <udp_input+0x218>)
 8016704:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016706:	429a      	cmp	r2, r3
 8016708:	d10e      	bne.n	8016728 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801670a:	6a3b      	ldr	r3, [r7, #32]
 801670c:	2b00      	cmp	r3, #0
 801670e:	d014      	beq.n	801673a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016712:	68da      	ldr	r2, [r3, #12]
 8016714:	6a3b      	ldr	r3, [r7, #32]
 8016716:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016718:	4b3e      	ldr	r3, [pc, #248]	; (8016814 <udp_input+0x21c>)
 801671a:	681a      	ldr	r2, [r3, #0]
 801671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801671e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016720:	4a3c      	ldr	r2, [pc, #240]	; (8016814 <udp_input+0x21c>)
 8016722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016724:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016726:	e008      	b.n	801673a <udp_input+0x142>
      }
    }

    prev = pcb;
 8016728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801672a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801672e:	68db      	ldr	r3, [r3, #12]
 8016730:	627b      	str	r3, [r7, #36]	; 0x24
 8016732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016734:	2b00      	cmp	r3, #0
 8016736:	d1a7      	bne.n	8016688 <udp_input+0x90>
 8016738:	e000      	b.n	801673c <udp_input+0x144>
        break;
 801673a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801673e:	2b00      	cmp	r3, #0
 8016740:	d101      	bne.n	8016746 <udp_input+0x14e>
    pcb = uncon_pcb;
 8016742:	69fb      	ldr	r3, [r7, #28]
 8016744:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016748:	2b00      	cmp	r3, #0
 801674a:	d002      	beq.n	8016752 <udp_input+0x15a>
    for_us = 1;
 801674c:	2301      	movs	r3, #1
 801674e:	76fb      	strb	r3, [r7, #27]
 8016750:	e00a      	b.n	8016768 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016752:	683b      	ldr	r3, [r7, #0]
 8016754:	3304      	adds	r3, #4
 8016756:	681a      	ldr	r2, [r3, #0]
 8016758:	4b2d      	ldr	r3, [pc, #180]	; (8016810 <udp_input+0x218>)
 801675a:	695b      	ldr	r3, [r3, #20]
 801675c:	429a      	cmp	r2, r3
 801675e:	bf0c      	ite	eq
 8016760:	2301      	moveq	r3, #1
 8016762:	2300      	movne	r3, #0
 8016764:	b2db      	uxtb	r3, r3
 8016766:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016768:	7efb      	ldrb	r3, [r7, #27]
 801676a:	2b00      	cmp	r3, #0
 801676c:	d041      	beq.n	80167f2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801676e:	2108      	movs	r1, #8
 8016770:	6878      	ldr	r0, [r7, #4]
 8016772:	f7f9 fa1b 	bl	800fbac <pbuf_remove_header>
 8016776:	4603      	mov	r3, r0
 8016778:	2b00      	cmp	r3, #0
 801677a:	d00a      	beq.n	8016792 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801677c:	4b20      	ldr	r3, [pc, #128]	; (8016800 <udp_input+0x208>)
 801677e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8016782:	4925      	ldr	r1, [pc, #148]	; (8016818 <udp_input+0x220>)
 8016784:	4820      	ldr	r0, [pc, #128]	; (8016808 <udp_input+0x210>)
 8016786:	f003 fbf1 	bl	8019f6c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801678a:	6878      	ldr	r0, [r7, #4]
 801678c:	f7f9 fa94 	bl	800fcb8 <pbuf_free>
      goto end;
 8016790:	e032      	b.n	80167f8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016794:	2b00      	cmp	r3, #0
 8016796:	d012      	beq.n	80167be <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801679a:	699b      	ldr	r3, [r3, #24]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d00a      	beq.n	80167b6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80167a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167a2:	699c      	ldr	r4, [r3, #24]
 80167a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167a6:	69d8      	ldr	r0, [r3, #28]
 80167a8:	8a3b      	ldrh	r3, [r7, #16]
 80167aa:	9300      	str	r3, [sp, #0]
 80167ac:	4b1b      	ldr	r3, [pc, #108]	; (801681c <udp_input+0x224>)
 80167ae:	687a      	ldr	r2, [r7, #4]
 80167b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80167b2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80167b4:	e021      	b.n	80167fa <udp_input+0x202>
        pbuf_free(p);
 80167b6:	6878      	ldr	r0, [r7, #4]
 80167b8:	f7f9 fa7e 	bl	800fcb8 <pbuf_free>
        goto end;
 80167bc:	e01c      	b.n	80167f8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80167be:	7cfb      	ldrb	r3, [r7, #19]
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d112      	bne.n	80167ea <udp_input+0x1f2>
 80167c4:	4b12      	ldr	r3, [pc, #72]	; (8016810 <udp_input+0x218>)
 80167c6:	695b      	ldr	r3, [r3, #20]
 80167c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80167cc:	2be0      	cmp	r3, #224	; 0xe0
 80167ce:	d00c      	beq.n	80167ea <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80167d0:	4b0f      	ldr	r3, [pc, #60]	; (8016810 <udp_input+0x218>)
 80167d2:	899b      	ldrh	r3, [r3, #12]
 80167d4:	3308      	adds	r3, #8
 80167d6:	b29b      	uxth	r3, r3
 80167d8:	b21b      	sxth	r3, r3
 80167da:	4619      	mov	r1, r3
 80167dc:	6878      	ldr	r0, [r7, #4]
 80167de:	f7f9 fa58 	bl	800fc92 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80167e2:	2103      	movs	r1, #3
 80167e4:	6878      	ldr	r0, [r7, #4]
 80167e6:	f001 f89b 	bl	8017920 <icmp_dest_unreach>
      pbuf_free(p);
 80167ea:	6878      	ldr	r0, [r7, #4]
 80167ec:	f7f9 fa64 	bl	800fcb8 <pbuf_free>
  return;
 80167f0:	e003      	b.n	80167fa <udp_input+0x202>
    pbuf_free(p);
 80167f2:	6878      	ldr	r0, [r7, #4]
 80167f4:	f7f9 fa60 	bl	800fcb8 <pbuf_free>
  return;
 80167f8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80167fa:	372c      	adds	r7, #44	; 0x2c
 80167fc:	46bd      	mov	sp, r7
 80167fe:	bd90      	pop	{r4, r7, pc}
 8016800:	0801e6d0 	.word	0x0801e6d0
 8016804:	0801e774 	.word	0x0801e774
 8016808:	0801e724 	.word	0x0801e724
 801680c:	0801e78c 	.word	0x0801e78c
 8016810:	20007c2c 	.word	0x20007c2c
 8016814:	2001a9c8 	.word	0x2001a9c8
 8016818:	0801e7a8 	.word	0x0801e7a8
 801681c:	20007c3c 	.word	0x20007c3c

08016820 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016820:	b480      	push	{r7}
 8016822:	b085      	sub	sp, #20
 8016824:	af00      	add	r7, sp, #0
 8016826:	6078      	str	r0, [r7, #4]
 8016828:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	2b00      	cmp	r3, #0
 801682e:	d01e      	beq.n	801686e <udp_netif_ip_addr_changed+0x4e>
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d01a      	beq.n	801686e <udp_netif_ip_addr_changed+0x4e>
 8016838:	683b      	ldr	r3, [r7, #0]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d017      	beq.n	801686e <udp_netif_ip_addr_changed+0x4e>
 801683e:	683b      	ldr	r3, [r7, #0]
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	2b00      	cmp	r3, #0
 8016844:	d013      	beq.n	801686e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016846:	4b0d      	ldr	r3, [pc, #52]	; (801687c <udp_netif_ip_addr_changed+0x5c>)
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	60fb      	str	r3, [r7, #12]
 801684c:	e00c      	b.n	8016868 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	681a      	ldr	r2, [r3, #0]
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	681b      	ldr	r3, [r3, #0]
 8016856:	429a      	cmp	r2, r3
 8016858:	d103      	bne.n	8016862 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801685a:	683b      	ldr	r3, [r7, #0]
 801685c:	681a      	ldr	r2, [r3, #0]
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	68db      	ldr	r3, [r3, #12]
 8016866:	60fb      	str	r3, [r7, #12]
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	2b00      	cmp	r3, #0
 801686c:	d1ef      	bne.n	801684e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801686e:	bf00      	nop
 8016870:	3714      	adds	r7, #20
 8016872:	46bd      	mov	sp, r7
 8016874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016878:	4770      	bx	lr
 801687a:	bf00      	nop
 801687c:	2001a9c8 	.word	0x2001a9c8

08016880 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016880:	b580      	push	{r7, lr}
 8016882:	b082      	sub	sp, #8
 8016884:	af00      	add	r7, sp, #0
 8016886:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016888:	4915      	ldr	r1, [pc, #84]	; (80168e0 <etharp_free_entry+0x60>)
 801688a:	687a      	ldr	r2, [r7, #4]
 801688c:	4613      	mov	r3, r2
 801688e:	005b      	lsls	r3, r3, #1
 8016890:	4413      	add	r3, r2
 8016892:	00db      	lsls	r3, r3, #3
 8016894:	440b      	add	r3, r1
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	2b00      	cmp	r3, #0
 801689a:	d013      	beq.n	80168c4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801689c:	4910      	ldr	r1, [pc, #64]	; (80168e0 <etharp_free_entry+0x60>)
 801689e:	687a      	ldr	r2, [r7, #4]
 80168a0:	4613      	mov	r3, r2
 80168a2:	005b      	lsls	r3, r3, #1
 80168a4:	4413      	add	r3, r2
 80168a6:	00db      	lsls	r3, r3, #3
 80168a8:	440b      	add	r3, r1
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	4618      	mov	r0, r3
 80168ae:	f7f9 fa03 	bl	800fcb8 <pbuf_free>
    arp_table[i].q = NULL;
 80168b2:	490b      	ldr	r1, [pc, #44]	; (80168e0 <etharp_free_entry+0x60>)
 80168b4:	687a      	ldr	r2, [r7, #4]
 80168b6:	4613      	mov	r3, r2
 80168b8:	005b      	lsls	r3, r3, #1
 80168ba:	4413      	add	r3, r2
 80168bc:	00db      	lsls	r3, r3, #3
 80168be:	440b      	add	r3, r1
 80168c0:	2200      	movs	r2, #0
 80168c2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80168c4:	4906      	ldr	r1, [pc, #24]	; (80168e0 <etharp_free_entry+0x60>)
 80168c6:	687a      	ldr	r2, [r7, #4]
 80168c8:	4613      	mov	r3, r2
 80168ca:	005b      	lsls	r3, r3, #1
 80168cc:	4413      	add	r3, r2
 80168ce:	00db      	lsls	r3, r3, #3
 80168d0:	440b      	add	r3, r1
 80168d2:	3314      	adds	r3, #20
 80168d4:	2200      	movs	r2, #0
 80168d6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80168d8:	bf00      	nop
 80168da:	3708      	adds	r7, #8
 80168dc:	46bd      	mov	sp, r7
 80168de:	bd80      	pop	{r7, pc}
 80168e0:	200007dc 	.word	0x200007dc

080168e4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80168e4:	b580      	push	{r7, lr}
 80168e6:	b082      	sub	sp, #8
 80168e8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80168ea:	2300      	movs	r3, #0
 80168ec:	607b      	str	r3, [r7, #4]
 80168ee:	e096      	b.n	8016a1e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80168f0:	494f      	ldr	r1, [pc, #316]	; (8016a30 <etharp_tmr+0x14c>)
 80168f2:	687a      	ldr	r2, [r7, #4]
 80168f4:	4613      	mov	r3, r2
 80168f6:	005b      	lsls	r3, r3, #1
 80168f8:	4413      	add	r3, r2
 80168fa:	00db      	lsls	r3, r3, #3
 80168fc:	440b      	add	r3, r1
 80168fe:	3314      	adds	r3, #20
 8016900:	781b      	ldrb	r3, [r3, #0]
 8016902:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016904:	78fb      	ldrb	r3, [r7, #3]
 8016906:	2b00      	cmp	r3, #0
 8016908:	f000 8086 	beq.w	8016a18 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801690c:	4948      	ldr	r1, [pc, #288]	; (8016a30 <etharp_tmr+0x14c>)
 801690e:	687a      	ldr	r2, [r7, #4]
 8016910:	4613      	mov	r3, r2
 8016912:	005b      	lsls	r3, r3, #1
 8016914:	4413      	add	r3, r2
 8016916:	00db      	lsls	r3, r3, #3
 8016918:	440b      	add	r3, r1
 801691a:	3312      	adds	r3, #18
 801691c:	881b      	ldrh	r3, [r3, #0]
 801691e:	3301      	adds	r3, #1
 8016920:	b298      	uxth	r0, r3
 8016922:	4943      	ldr	r1, [pc, #268]	; (8016a30 <etharp_tmr+0x14c>)
 8016924:	687a      	ldr	r2, [r7, #4]
 8016926:	4613      	mov	r3, r2
 8016928:	005b      	lsls	r3, r3, #1
 801692a:	4413      	add	r3, r2
 801692c:	00db      	lsls	r3, r3, #3
 801692e:	440b      	add	r3, r1
 8016930:	3312      	adds	r3, #18
 8016932:	4602      	mov	r2, r0
 8016934:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016936:	493e      	ldr	r1, [pc, #248]	; (8016a30 <etharp_tmr+0x14c>)
 8016938:	687a      	ldr	r2, [r7, #4]
 801693a:	4613      	mov	r3, r2
 801693c:	005b      	lsls	r3, r3, #1
 801693e:	4413      	add	r3, r2
 8016940:	00db      	lsls	r3, r3, #3
 8016942:	440b      	add	r3, r1
 8016944:	3312      	adds	r3, #18
 8016946:	881b      	ldrh	r3, [r3, #0]
 8016948:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801694c:	d215      	bcs.n	801697a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801694e:	4938      	ldr	r1, [pc, #224]	; (8016a30 <etharp_tmr+0x14c>)
 8016950:	687a      	ldr	r2, [r7, #4]
 8016952:	4613      	mov	r3, r2
 8016954:	005b      	lsls	r3, r3, #1
 8016956:	4413      	add	r3, r2
 8016958:	00db      	lsls	r3, r3, #3
 801695a:	440b      	add	r3, r1
 801695c:	3314      	adds	r3, #20
 801695e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016960:	2b01      	cmp	r3, #1
 8016962:	d10e      	bne.n	8016982 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016964:	4932      	ldr	r1, [pc, #200]	; (8016a30 <etharp_tmr+0x14c>)
 8016966:	687a      	ldr	r2, [r7, #4]
 8016968:	4613      	mov	r3, r2
 801696a:	005b      	lsls	r3, r3, #1
 801696c:	4413      	add	r3, r2
 801696e:	00db      	lsls	r3, r3, #3
 8016970:	440b      	add	r3, r1
 8016972:	3312      	adds	r3, #18
 8016974:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016976:	2b04      	cmp	r3, #4
 8016978:	d903      	bls.n	8016982 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801697a:	6878      	ldr	r0, [r7, #4]
 801697c:	f7ff ff80 	bl	8016880 <etharp_free_entry>
 8016980:	e04a      	b.n	8016a18 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016982:	492b      	ldr	r1, [pc, #172]	; (8016a30 <etharp_tmr+0x14c>)
 8016984:	687a      	ldr	r2, [r7, #4]
 8016986:	4613      	mov	r3, r2
 8016988:	005b      	lsls	r3, r3, #1
 801698a:	4413      	add	r3, r2
 801698c:	00db      	lsls	r3, r3, #3
 801698e:	440b      	add	r3, r1
 8016990:	3314      	adds	r3, #20
 8016992:	781b      	ldrb	r3, [r3, #0]
 8016994:	2b03      	cmp	r3, #3
 8016996:	d10a      	bne.n	80169ae <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016998:	4925      	ldr	r1, [pc, #148]	; (8016a30 <etharp_tmr+0x14c>)
 801699a:	687a      	ldr	r2, [r7, #4]
 801699c:	4613      	mov	r3, r2
 801699e:	005b      	lsls	r3, r3, #1
 80169a0:	4413      	add	r3, r2
 80169a2:	00db      	lsls	r3, r3, #3
 80169a4:	440b      	add	r3, r1
 80169a6:	3314      	adds	r3, #20
 80169a8:	2204      	movs	r2, #4
 80169aa:	701a      	strb	r2, [r3, #0]
 80169ac:	e034      	b.n	8016a18 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80169ae:	4920      	ldr	r1, [pc, #128]	; (8016a30 <etharp_tmr+0x14c>)
 80169b0:	687a      	ldr	r2, [r7, #4]
 80169b2:	4613      	mov	r3, r2
 80169b4:	005b      	lsls	r3, r3, #1
 80169b6:	4413      	add	r3, r2
 80169b8:	00db      	lsls	r3, r3, #3
 80169ba:	440b      	add	r3, r1
 80169bc:	3314      	adds	r3, #20
 80169be:	781b      	ldrb	r3, [r3, #0]
 80169c0:	2b04      	cmp	r3, #4
 80169c2:	d10a      	bne.n	80169da <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80169c4:	491a      	ldr	r1, [pc, #104]	; (8016a30 <etharp_tmr+0x14c>)
 80169c6:	687a      	ldr	r2, [r7, #4]
 80169c8:	4613      	mov	r3, r2
 80169ca:	005b      	lsls	r3, r3, #1
 80169cc:	4413      	add	r3, r2
 80169ce:	00db      	lsls	r3, r3, #3
 80169d0:	440b      	add	r3, r1
 80169d2:	3314      	adds	r3, #20
 80169d4:	2202      	movs	r2, #2
 80169d6:	701a      	strb	r2, [r3, #0]
 80169d8:	e01e      	b.n	8016a18 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80169da:	4915      	ldr	r1, [pc, #84]	; (8016a30 <etharp_tmr+0x14c>)
 80169dc:	687a      	ldr	r2, [r7, #4]
 80169de:	4613      	mov	r3, r2
 80169e0:	005b      	lsls	r3, r3, #1
 80169e2:	4413      	add	r3, r2
 80169e4:	00db      	lsls	r3, r3, #3
 80169e6:	440b      	add	r3, r1
 80169e8:	3314      	adds	r3, #20
 80169ea:	781b      	ldrb	r3, [r3, #0]
 80169ec:	2b01      	cmp	r3, #1
 80169ee:	d113      	bne.n	8016a18 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80169f0:	490f      	ldr	r1, [pc, #60]	; (8016a30 <etharp_tmr+0x14c>)
 80169f2:	687a      	ldr	r2, [r7, #4]
 80169f4:	4613      	mov	r3, r2
 80169f6:	005b      	lsls	r3, r3, #1
 80169f8:	4413      	add	r3, r2
 80169fa:	00db      	lsls	r3, r3, #3
 80169fc:	440b      	add	r3, r1
 80169fe:	3308      	adds	r3, #8
 8016a00:	6818      	ldr	r0, [r3, #0]
 8016a02:	687a      	ldr	r2, [r7, #4]
 8016a04:	4613      	mov	r3, r2
 8016a06:	005b      	lsls	r3, r3, #1
 8016a08:	4413      	add	r3, r2
 8016a0a:	00db      	lsls	r3, r3, #3
 8016a0c:	4a08      	ldr	r2, [pc, #32]	; (8016a30 <etharp_tmr+0x14c>)
 8016a0e:	4413      	add	r3, r2
 8016a10:	3304      	adds	r3, #4
 8016a12:	4619      	mov	r1, r3
 8016a14:	f000 fe6e 	bl	80176f4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	3301      	adds	r3, #1
 8016a1c:	607b      	str	r3, [r7, #4]
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	2b09      	cmp	r3, #9
 8016a22:	f77f af65 	ble.w	80168f0 <etharp_tmr+0xc>
      }
    }
  }
}
 8016a26:	bf00      	nop
 8016a28:	bf00      	nop
 8016a2a:	3708      	adds	r7, #8
 8016a2c:	46bd      	mov	sp, r7
 8016a2e:	bd80      	pop	{r7, pc}
 8016a30:	200007dc 	.word	0x200007dc

08016a34 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016a34:	b580      	push	{r7, lr}
 8016a36:	b08a      	sub	sp, #40	; 0x28
 8016a38:	af00      	add	r7, sp, #0
 8016a3a:	60f8      	str	r0, [r7, #12]
 8016a3c:	460b      	mov	r3, r1
 8016a3e:	607a      	str	r2, [r7, #4]
 8016a40:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016a42:	230a      	movs	r3, #10
 8016a44:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016a46:	230a      	movs	r3, #10
 8016a48:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016a4a:	230a      	movs	r3, #10
 8016a4c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016a4e:	2300      	movs	r3, #0
 8016a50:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016a52:	230a      	movs	r3, #10
 8016a54:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016a56:	2300      	movs	r3, #0
 8016a58:	83bb      	strh	r3, [r7, #28]
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	837b      	strh	r3, [r7, #26]
 8016a5e:	2300      	movs	r3, #0
 8016a60:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016a62:	2300      	movs	r3, #0
 8016a64:	843b      	strh	r3, [r7, #32]
 8016a66:	e0ae      	b.n	8016bc6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016a68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a6c:	49a6      	ldr	r1, [pc, #664]	; (8016d08 <etharp_find_entry+0x2d4>)
 8016a6e:	4613      	mov	r3, r2
 8016a70:	005b      	lsls	r3, r3, #1
 8016a72:	4413      	add	r3, r2
 8016a74:	00db      	lsls	r3, r3, #3
 8016a76:	440b      	add	r3, r1
 8016a78:	3314      	adds	r3, #20
 8016a7a:	781b      	ldrb	r3, [r3, #0]
 8016a7c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016a7e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016a82:	2b0a      	cmp	r3, #10
 8016a84:	d105      	bne.n	8016a92 <etharp_find_entry+0x5e>
 8016a86:	7dfb      	ldrb	r3, [r7, #23]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d102      	bne.n	8016a92 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016a8c:	8c3b      	ldrh	r3, [r7, #32]
 8016a8e:	847b      	strh	r3, [r7, #34]	; 0x22
 8016a90:	e095      	b.n	8016bbe <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016a92:	7dfb      	ldrb	r3, [r7, #23]
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	f000 8092 	beq.w	8016bbe <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016a9a:	7dfb      	ldrb	r3, [r7, #23]
 8016a9c:	2b01      	cmp	r3, #1
 8016a9e:	d009      	beq.n	8016ab4 <etharp_find_entry+0x80>
 8016aa0:	7dfb      	ldrb	r3, [r7, #23]
 8016aa2:	2b01      	cmp	r3, #1
 8016aa4:	d806      	bhi.n	8016ab4 <etharp_find_entry+0x80>
 8016aa6:	4b99      	ldr	r3, [pc, #612]	; (8016d0c <etharp_find_entry+0x2d8>)
 8016aa8:	f240 1223 	movw	r2, #291	; 0x123
 8016aac:	4998      	ldr	r1, [pc, #608]	; (8016d10 <etharp_find_entry+0x2dc>)
 8016aae:	4899      	ldr	r0, [pc, #612]	; (8016d14 <etharp_find_entry+0x2e0>)
 8016ab0:	f003 fa5c 	bl	8019f6c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d020      	beq.n	8016afc <etharp_find_entry+0xc8>
 8016aba:	68fb      	ldr	r3, [r7, #12]
 8016abc:	6819      	ldr	r1, [r3, #0]
 8016abe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ac2:	4891      	ldr	r0, [pc, #580]	; (8016d08 <etharp_find_entry+0x2d4>)
 8016ac4:	4613      	mov	r3, r2
 8016ac6:	005b      	lsls	r3, r3, #1
 8016ac8:	4413      	add	r3, r2
 8016aca:	00db      	lsls	r3, r3, #3
 8016acc:	4403      	add	r3, r0
 8016ace:	3304      	adds	r3, #4
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	4299      	cmp	r1, r3
 8016ad4:	d112      	bne.n	8016afc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d00c      	beq.n	8016af6 <etharp_find_entry+0xc2>
 8016adc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ae0:	4989      	ldr	r1, [pc, #548]	; (8016d08 <etharp_find_entry+0x2d4>)
 8016ae2:	4613      	mov	r3, r2
 8016ae4:	005b      	lsls	r3, r3, #1
 8016ae6:	4413      	add	r3, r2
 8016ae8:	00db      	lsls	r3, r3, #3
 8016aea:	440b      	add	r3, r1
 8016aec:	3308      	adds	r3, #8
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	687a      	ldr	r2, [r7, #4]
 8016af2:	429a      	cmp	r2, r3
 8016af4:	d102      	bne.n	8016afc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016af6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016afa:	e100      	b.n	8016cfe <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016afc:	7dfb      	ldrb	r3, [r7, #23]
 8016afe:	2b01      	cmp	r3, #1
 8016b00:	d140      	bne.n	8016b84 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016b02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b06:	4980      	ldr	r1, [pc, #512]	; (8016d08 <etharp_find_entry+0x2d4>)
 8016b08:	4613      	mov	r3, r2
 8016b0a:	005b      	lsls	r3, r3, #1
 8016b0c:	4413      	add	r3, r2
 8016b0e:	00db      	lsls	r3, r3, #3
 8016b10:	440b      	add	r3, r1
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d01a      	beq.n	8016b4e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016b18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b1c:	497a      	ldr	r1, [pc, #488]	; (8016d08 <etharp_find_entry+0x2d4>)
 8016b1e:	4613      	mov	r3, r2
 8016b20:	005b      	lsls	r3, r3, #1
 8016b22:	4413      	add	r3, r2
 8016b24:	00db      	lsls	r3, r3, #3
 8016b26:	440b      	add	r3, r1
 8016b28:	3312      	adds	r3, #18
 8016b2a:	881b      	ldrh	r3, [r3, #0]
 8016b2c:	8bba      	ldrh	r2, [r7, #28]
 8016b2e:	429a      	cmp	r2, r3
 8016b30:	d845      	bhi.n	8016bbe <etharp_find_entry+0x18a>
            old_queue = i;
 8016b32:	8c3b      	ldrh	r3, [r7, #32]
 8016b34:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016b36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b3a:	4973      	ldr	r1, [pc, #460]	; (8016d08 <etharp_find_entry+0x2d4>)
 8016b3c:	4613      	mov	r3, r2
 8016b3e:	005b      	lsls	r3, r3, #1
 8016b40:	4413      	add	r3, r2
 8016b42:	00db      	lsls	r3, r3, #3
 8016b44:	440b      	add	r3, r1
 8016b46:	3312      	adds	r3, #18
 8016b48:	881b      	ldrh	r3, [r3, #0]
 8016b4a:	83bb      	strh	r3, [r7, #28]
 8016b4c:	e037      	b.n	8016bbe <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016b4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b52:	496d      	ldr	r1, [pc, #436]	; (8016d08 <etharp_find_entry+0x2d4>)
 8016b54:	4613      	mov	r3, r2
 8016b56:	005b      	lsls	r3, r3, #1
 8016b58:	4413      	add	r3, r2
 8016b5a:	00db      	lsls	r3, r3, #3
 8016b5c:	440b      	add	r3, r1
 8016b5e:	3312      	adds	r3, #18
 8016b60:	881b      	ldrh	r3, [r3, #0]
 8016b62:	8b7a      	ldrh	r2, [r7, #26]
 8016b64:	429a      	cmp	r2, r3
 8016b66:	d82a      	bhi.n	8016bbe <etharp_find_entry+0x18a>
            old_pending = i;
 8016b68:	8c3b      	ldrh	r3, [r7, #32]
 8016b6a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016b6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b70:	4965      	ldr	r1, [pc, #404]	; (8016d08 <etharp_find_entry+0x2d4>)
 8016b72:	4613      	mov	r3, r2
 8016b74:	005b      	lsls	r3, r3, #1
 8016b76:	4413      	add	r3, r2
 8016b78:	00db      	lsls	r3, r3, #3
 8016b7a:	440b      	add	r3, r1
 8016b7c:	3312      	adds	r3, #18
 8016b7e:	881b      	ldrh	r3, [r3, #0]
 8016b80:	837b      	strh	r3, [r7, #26]
 8016b82:	e01c      	b.n	8016bbe <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016b84:	7dfb      	ldrb	r3, [r7, #23]
 8016b86:	2b01      	cmp	r3, #1
 8016b88:	d919      	bls.n	8016bbe <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016b8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b8e:	495e      	ldr	r1, [pc, #376]	; (8016d08 <etharp_find_entry+0x2d4>)
 8016b90:	4613      	mov	r3, r2
 8016b92:	005b      	lsls	r3, r3, #1
 8016b94:	4413      	add	r3, r2
 8016b96:	00db      	lsls	r3, r3, #3
 8016b98:	440b      	add	r3, r1
 8016b9a:	3312      	adds	r3, #18
 8016b9c:	881b      	ldrh	r3, [r3, #0]
 8016b9e:	8b3a      	ldrh	r2, [r7, #24]
 8016ba0:	429a      	cmp	r2, r3
 8016ba2:	d80c      	bhi.n	8016bbe <etharp_find_entry+0x18a>
            old_stable = i;
 8016ba4:	8c3b      	ldrh	r3, [r7, #32]
 8016ba6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016ba8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016bac:	4956      	ldr	r1, [pc, #344]	; (8016d08 <etharp_find_entry+0x2d4>)
 8016bae:	4613      	mov	r3, r2
 8016bb0:	005b      	lsls	r3, r3, #1
 8016bb2:	4413      	add	r3, r2
 8016bb4:	00db      	lsls	r3, r3, #3
 8016bb6:	440b      	add	r3, r1
 8016bb8:	3312      	adds	r3, #18
 8016bba:	881b      	ldrh	r3, [r3, #0]
 8016bbc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016bbe:	8c3b      	ldrh	r3, [r7, #32]
 8016bc0:	3301      	adds	r3, #1
 8016bc2:	b29b      	uxth	r3, r3
 8016bc4:	843b      	strh	r3, [r7, #32]
 8016bc6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016bca:	2b09      	cmp	r3, #9
 8016bcc:	f77f af4c 	ble.w	8016a68 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016bd0:	7afb      	ldrb	r3, [r7, #11]
 8016bd2:	f003 0302 	and.w	r3, r3, #2
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d108      	bne.n	8016bec <etharp_find_entry+0x1b8>
 8016bda:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016bde:	2b0a      	cmp	r3, #10
 8016be0:	d107      	bne.n	8016bf2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016be2:	7afb      	ldrb	r3, [r7, #11]
 8016be4:	f003 0301 	and.w	r3, r3, #1
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d102      	bne.n	8016bf2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016bec:	f04f 33ff 	mov.w	r3, #4294967295
 8016bf0:	e085      	b.n	8016cfe <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016bf2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016bf6:	2b09      	cmp	r3, #9
 8016bf8:	dc02      	bgt.n	8016c00 <etharp_find_entry+0x1cc>
    i = empty;
 8016bfa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016bfc:	843b      	strh	r3, [r7, #32]
 8016bfe:	e039      	b.n	8016c74 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016c00:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016c04:	2b09      	cmp	r3, #9
 8016c06:	dc14      	bgt.n	8016c32 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016c08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016c0a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016c0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c10:	493d      	ldr	r1, [pc, #244]	; (8016d08 <etharp_find_entry+0x2d4>)
 8016c12:	4613      	mov	r3, r2
 8016c14:	005b      	lsls	r3, r3, #1
 8016c16:	4413      	add	r3, r2
 8016c18:	00db      	lsls	r3, r3, #3
 8016c1a:	440b      	add	r3, r1
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d018      	beq.n	8016c54 <etharp_find_entry+0x220>
 8016c22:	4b3a      	ldr	r3, [pc, #232]	; (8016d0c <etharp_find_entry+0x2d8>)
 8016c24:	f240 126d 	movw	r2, #365	; 0x16d
 8016c28:	493b      	ldr	r1, [pc, #236]	; (8016d18 <etharp_find_entry+0x2e4>)
 8016c2a:	483a      	ldr	r0, [pc, #232]	; (8016d14 <etharp_find_entry+0x2e0>)
 8016c2c:	f003 f99e 	bl	8019f6c <iprintf>
 8016c30:	e010      	b.n	8016c54 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016c32:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016c36:	2b09      	cmp	r3, #9
 8016c38:	dc02      	bgt.n	8016c40 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016c3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016c3c:	843b      	strh	r3, [r7, #32]
 8016c3e:	e009      	b.n	8016c54 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016c40:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016c44:	2b09      	cmp	r3, #9
 8016c46:	dc02      	bgt.n	8016c4e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016c48:	8bfb      	ldrh	r3, [r7, #30]
 8016c4a:	843b      	strh	r3, [r7, #32]
 8016c4c:	e002      	b.n	8016c54 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8016c52:	e054      	b.n	8016cfe <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016c54:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016c58:	2b09      	cmp	r3, #9
 8016c5a:	dd06      	ble.n	8016c6a <etharp_find_entry+0x236>
 8016c5c:	4b2b      	ldr	r3, [pc, #172]	; (8016d0c <etharp_find_entry+0x2d8>)
 8016c5e:	f240 127f 	movw	r2, #383	; 0x17f
 8016c62:	492e      	ldr	r1, [pc, #184]	; (8016d1c <etharp_find_entry+0x2e8>)
 8016c64:	482b      	ldr	r0, [pc, #172]	; (8016d14 <etharp_find_entry+0x2e0>)
 8016c66:	f003 f981 	bl	8019f6c <iprintf>
    etharp_free_entry(i);
 8016c6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016c6e:	4618      	mov	r0, r3
 8016c70:	f7ff fe06 	bl	8016880 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016c74:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016c78:	2b09      	cmp	r3, #9
 8016c7a:	dd06      	ble.n	8016c8a <etharp_find_entry+0x256>
 8016c7c:	4b23      	ldr	r3, [pc, #140]	; (8016d0c <etharp_find_entry+0x2d8>)
 8016c7e:	f240 1283 	movw	r2, #387	; 0x183
 8016c82:	4926      	ldr	r1, [pc, #152]	; (8016d1c <etharp_find_entry+0x2e8>)
 8016c84:	4823      	ldr	r0, [pc, #140]	; (8016d14 <etharp_find_entry+0x2e0>)
 8016c86:	f003 f971 	bl	8019f6c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016c8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c8e:	491e      	ldr	r1, [pc, #120]	; (8016d08 <etharp_find_entry+0x2d4>)
 8016c90:	4613      	mov	r3, r2
 8016c92:	005b      	lsls	r3, r3, #1
 8016c94:	4413      	add	r3, r2
 8016c96:	00db      	lsls	r3, r3, #3
 8016c98:	440b      	add	r3, r1
 8016c9a:	3314      	adds	r3, #20
 8016c9c:	781b      	ldrb	r3, [r3, #0]
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d006      	beq.n	8016cb0 <etharp_find_entry+0x27c>
 8016ca2:	4b1a      	ldr	r3, [pc, #104]	; (8016d0c <etharp_find_entry+0x2d8>)
 8016ca4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016ca8:	491d      	ldr	r1, [pc, #116]	; (8016d20 <etharp_find_entry+0x2ec>)
 8016caa:	481a      	ldr	r0, [pc, #104]	; (8016d14 <etharp_find_entry+0x2e0>)
 8016cac:	f003 f95e 	bl	8019f6c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d00b      	beq.n	8016cce <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016cb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	6819      	ldr	r1, [r3, #0]
 8016cbe:	4812      	ldr	r0, [pc, #72]	; (8016d08 <etharp_find_entry+0x2d4>)
 8016cc0:	4613      	mov	r3, r2
 8016cc2:	005b      	lsls	r3, r3, #1
 8016cc4:	4413      	add	r3, r2
 8016cc6:	00db      	lsls	r3, r3, #3
 8016cc8:	4403      	add	r3, r0
 8016cca:	3304      	adds	r3, #4
 8016ccc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016cce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016cd2:	490d      	ldr	r1, [pc, #52]	; (8016d08 <etharp_find_entry+0x2d4>)
 8016cd4:	4613      	mov	r3, r2
 8016cd6:	005b      	lsls	r3, r3, #1
 8016cd8:	4413      	add	r3, r2
 8016cda:	00db      	lsls	r3, r3, #3
 8016cdc:	440b      	add	r3, r1
 8016cde:	3312      	adds	r3, #18
 8016ce0:	2200      	movs	r2, #0
 8016ce2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016ce4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ce8:	4907      	ldr	r1, [pc, #28]	; (8016d08 <etharp_find_entry+0x2d4>)
 8016cea:	4613      	mov	r3, r2
 8016cec:	005b      	lsls	r3, r3, #1
 8016cee:	4413      	add	r3, r2
 8016cf0:	00db      	lsls	r3, r3, #3
 8016cf2:	440b      	add	r3, r1
 8016cf4:	3308      	adds	r3, #8
 8016cf6:	687a      	ldr	r2, [r7, #4]
 8016cf8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016cfa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016cfe:	4618      	mov	r0, r3
 8016d00:	3728      	adds	r7, #40	; 0x28
 8016d02:	46bd      	mov	sp, r7
 8016d04:	bd80      	pop	{r7, pc}
 8016d06:	bf00      	nop
 8016d08:	200007dc 	.word	0x200007dc
 8016d0c:	0801ea34 	.word	0x0801ea34
 8016d10:	0801ea6c 	.word	0x0801ea6c
 8016d14:	0801eaac 	.word	0x0801eaac
 8016d18:	0801ead4 	.word	0x0801ead4
 8016d1c:	0801eaec 	.word	0x0801eaec
 8016d20:	0801eb00 	.word	0x0801eb00

08016d24 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016d24:	b580      	push	{r7, lr}
 8016d26:	b088      	sub	sp, #32
 8016d28:	af02      	add	r7, sp, #8
 8016d2a:	60f8      	str	r0, [r7, #12]
 8016d2c:	60b9      	str	r1, [r7, #8]
 8016d2e:	607a      	str	r2, [r7, #4]
 8016d30:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016d38:	2b06      	cmp	r3, #6
 8016d3a:	d006      	beq.n	8016d4a <etharp_update_arp_entry+0x26>
 8016d3c:	4b48      	ldr	r3, [pc, #288]	; (8016e60 <etharp_update_arp_entry+0x13c>)
 8016d3e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8016d42:	4948      	ldr	r1, [pc, #288]	; (8016e64 <etharp_update_arp_entry+0x140>)
 8016d44:	4848      	ldr	r0, [pc, #288]	; (8016e68 <etharp_update_arp_entry+0x144>)
 8016d46:	f003 f911 	bl	8019f6c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016d4a:	68bb      	ldr	r3, [r7, #8]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d012      	beq.n	8016d76 <etharp_update_arp_entry+0x52>
 8016d50:	68bb      	ldr	r3, [r7, #8]
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d00e      	beq.n	8016d76 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016d58:	68bb      	ldr	r3, [r7, #8]
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	68f9      	ldr	r1, [r7, #12]
 8016d5e:	4618      	mov	r0, r3
 8016d60:	f001 f8fe 	bl	8017f60 <ip4_addr_isbroadcast_u32>
 8016d64:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d105      	bne.n	8016d76 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016d6a:	68bb      	ldr	r3, [r7, #8]
 8016d6c:	681b      	ldr	r3, [r3, #0]
 8016d6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016d72:	2be0      	cmp	r3, #224	; 0xe0
 8016d74:	d102      	bne.n	8016d7c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016d76:	f06f 030f 	mvn.w	r3, #15
 8016d7a:	e06c      	b.n	8016e56 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016d7c:	78fb      	ldrb	r3, [r7, #3]
 8016d7e:	68fa      	ldr	r2, [r7, #12]
 8016d80:	4619      	mov	r1, r3
 8016d82:	68b8      	ldr	r0, [r7, #8]
 8016d84:	f7ff fe56 	bl	8016a34 <etharp_find_entry>
 8016d88:	4603      	mov	r3, r0
 8016d8a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016d8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	da02      	bge.n	8016d9a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016d94:	8afb      	ldrh	r3, [r7, #22]
 8016d96:	b25b      	sxtb	r3, r3
 8016d98:	e05d      	b.n	8016e56 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016d9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016d9e:	4933      	ldr	r1, [pc, #204]	; (8016e6c <etharp_update_arp_entry+0x148>)
 8016da0:	4613      	mov	r3, r2
 8016da2:	005b      	lsls	r3, r3, #1
 8016da4:	4413      	add	r3, r2
 8016da6:	00db      	lsls	r3, r3, #3
 8016da8:	440b      	add	r3, r1
 8016daa:	3314      	adds	r3, #20
 8016dac:	2202      	movs	r2, #2
 8016dae:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016db0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016db4:	492d      	ldr	r1, [pc, #180]	; (8016e6c <etharp_update_arp_entry+0x148>)
 8016db6:	4613      	mov	r3, r2
 8016db8:	005b      	lsls	r3, r3, #1
 8016dba:	4413      	add	r3, r2
 8016dbc:	00db      	lsls	r3, r3, #3
 8016dbe:	440b      	add	r3, r1
 8016dc0:	3308      	adds	r3, #8
 8016dc2:	68fa      	ldr	r2, [r7, #12]
 8016dc4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016dc6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016dca:	4613      	mov	r3, r2
 8016dcc:	005b      	lsls	r3, r3, #1
 8016dce:	4413      	add	r3, r2
 8016dd0:	00db      	lsls	r3, r3, #3
 8016dd2:	3308      	adds	r3, #8
 8016dd4:	4a25      	ldr	r2, [pc, #148]	; (8016e6c <etharp_update_arp_entry+0x148>)
 8016dd6:	4413      	add	r3, r2
 8016dd8:	3304      	adds	r3, #4
 8016dda:	2206      	movs	r2, #6
 8016ddc:	6879      	ldr	r1, [r7, #4]
 8016dde:	4618      	mov	r0, r3
 8016de0:	f002 fb9a 	bl	8019518 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016de4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016de8:	4920      	ldr	r1, [pc, #128]	; (8016e6c <etharp_update_arp_entry+0x148>)
 8016dea:	4613      	mov	r3, r2
 8016dec:	005b      	lsls	r3, r3, #1
 8016dee:	4413      	add	r3, r2
 8016df0:	00db      	lsls	r3, r3, #3
 8016df2:	440b      	add	r3, r1
 8016df4:	3312      	adds	r3, #18
 8016df6:	2200      	movs	r2, #0
 8016df8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016dfa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016dfe:	491b      	ldr	r1, [pc, #108]	; (8016e6c <etharp_update_arp_entry+0x148>)
 8016e00:	4613      	mov	r3, r2
 8016e02:	005b      	lsls	r3, r3, #1
 8016e04:	4413      	add	r3, r2
 8016e06:	00db      	lsls	r3, r3, #3
 8016e08:	440b      	add	r3, r1
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d021      	beq.n	8016e54 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016e10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016e14:	4915      	ldr	r1, [pc, #84]	; (8016e6c <etharp_update_arp_entry+0x148>)
 8016e16:	4613      	mov	r3, r2
 8016e18:	005b      	lsls	r3, r3, #1
 8016e1a:	4413      	add	r3, r2
 8016e1c:	00db      	lsls	r3, r3, #3
 8016e1e:	440b      	add	r3, r1
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016e24:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016e28:	4910      	ldr	r1, [pc, #64]	; (8016e6c <etharp_update_arp_entry+0x148>)
 8016e2a:	4613      	mov	r3, r2
 8016e2c:	005b      	lsls	r3, r3, #1
 8016e2e:	4413      	add	r3, r2
 8016e30:	00db      	lsls	r3, r3, #3
 8016e32:	440b      	add	r3, r1
 8016e34:	2200      	movs	r2, #0
 8016e36:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016e3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016e42:	9300      	str	r3, [sp, #0]
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	6939      	ldr	r1, [r7, #16]
 8016e48:	68f8      	ldr	r0, [r7, #12]
 8016e4a:	f001 ff91 	bl	8018d70 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016e4e:	6938      	ldr	r0, [r7, #16]
 8016e50:	f7f8 ff32 	bl	800fcb8 <pbuf_free>
  }
  return ERR_OK;
 8016e54:	2300      	movs	r3, #0
}
 8016e56:	4618      	mov	r0, r3
 8016e58:	3718      	adds	r7, #24
 8016e5a:	46bd      	mov	sp, r7
 8016e5c:	bd80      	pop	{r7, pc}
 8016e5e:	bf00      	nop
 8016e60:	0801ea34 	.word	0x0801ea34
 8016e64:	0801eb2c 	.word	0x0801eb2c
 8016e68:	0801eaac 	.word	0x0801eaac
 8016e6c:	200007dc 	.word	0x200007dc

08016e70 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016e70:	b580      	push	{r7, lr}
 8016e72:	b084      	sub	sp, #16
 8016e74:	af00      	add	r7, sp, #0
 8016e76:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016e78:	2300      	movs	r3, #0
 8016e7a:	60fb      	str	r3, [r7, #12]
 8016e7c:	e01e      	b.n	8016ebc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016e7e:	4913      	ldr	r1, [pc, #76]	; (8016ecc <etharp_cleanup_netif+0x5c>)
 8016e80:	68fa      	ldr	r2, [r7, #12]
 8016e82:	4613      	mov	r3, r2
 8016e84:	005b      	lsls	r3, r3, #1
 8016e86:	4413      	add	r3, r2
 8016e88:	00db      	lsls	r3, r3, #3
 8016e8a:	440b      	add	r3, r1
 8016e8c:	3314      	adds	r3, #20
 8016e8e:	781b      	ldrb	r3, [r3, #0]
 8016e90:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016e92:	7afb      	ldrb	r3, [r7, #11]
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d00e      	beq.n	8016eb6 <etharp_cleanup_netif+0x46>
 8016e98:	490c      	ldr	r1, [pc, #48]	; (8016ecc <etharp_cleanup_netif+0x5c>)
 8016e9a:	68fa      	ldr	r2, [r7, #12]
 8016e9c:	4613      	mov	r3, r2
 8016e9e:	005b      	lsls	r3, r3, #1
 8016ea0:	4413      	add	r3, r2
 8016ea2:	00db      	lsls	r3, r3, #3
 8016ea4:	440b      	add	r3, r1
 8016ea6:	3308      	adds	r3, #8
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	687a      	ldr	r2, [r7, #4]
 8016eac:	429a      	cmp	r2, r3
 8016eae:	d102      	bne.n	8016eb6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016eb0:	68f8      	ldr	r0, [r7, #12]
 8016eb2:	f7ff fce5 	bl	8016880 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	3301      	adds	r3, #1
 8016eba:	60fb      	str	r3, [r7, #12]
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	2b09      	cmp	r3, #9
 8016ec0:	dddd      	ble.n	8016e7e <etharp_cleanup_netif+0xe>
    }
  }
}
 8016ec2:	bf00      	nop
 8016ec4:	bf00      	nop
 8016ec6:	3710      	adds	r7, #16
 8016ec8:	46bd      	mov	sp, r7
 8016eca:	bd80      	pop	{r7, pc}
 8016ecc:	200007dc 	.word	0x200007dc

08016ed0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016ed0:	b5b0      	push	{r4, r5, r7, lr}
 8016ed2:	b08a      	sub	sp, #40	; 0x28
 8016ed4:	af04      	add	r7, sp, #16
 8016ed6:	6078      	str	r0, [r7, #4]
 8016ed8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016eda:	683b      	ldr	r3, [r7, #0]
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d107      	bne.n	8016ef0 <etharp_input+0x20>
 8016ee0:	4b3d      	ldr	r3, [pc, #244]	; (8016fd8 <etharp_input+0x108>)
 8016ee2:	f240 228a 	movw	r2, #650	; 0x28a
 8016ee6:	493d      	ldr	r1, [pc, #244]	; (8016fdc <etharp_input+0x10c>)
 8016ee8:	483d      	ldr	r0, [pc, #244]	; (8016fe0 <etharp_input+0x110>)
 8016eea:	f003 f83f 	bl	8019f6c <iprintf>
 8016eee:	e06f      	b.n	8016fd0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	685b      	ldr	r3, [r3, #4]
 8016ef4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016ef6:	693b      	ldr	r3, [r7, #16]
 8016ef8:	881b      	ldrh	r3, [r3, #0]
 8016efa:	b29b      	uxth	r3, r3
 8016efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016f00:	d10c      	bne.n	8016f1c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016f02:	693b      	ldr	r3, [r7, #16]
 8016f04:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016f06:	2b06      	cmp	r3, #6
 8016f08:	d108      	bne.n	8016f1c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016f0a:	693b      	ldr	r3, [r7, #16]
 8016f0c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016f0e:	2b04      	cmp	r3, #4
 8016f10:	d104      	bne.n	8016f1c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016f12:	693b      	ldr	r3, [r7, #16]
 8016f14:	885b      	ldrh	r3, [r3, #2]
 8016f16:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016f18:	2b08      	cmp	r3, #8
 8016f1a:	d003      	beq.n	8016f24 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016f1c:	6878      	ldr	r0, [r7, #4]
 8016f1e:	f7f8 fecb 	bl	800fcb8 <pbuf_free>
    return;
 8016f22:	e055      	b.n	8016fd0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016f24:	693b      	ldr	r3, [r7, #16]
 8016f26:	330e      	adds	r3, #14
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016f2c:	693b      	ldr	r3, [r7, #16]
 8016f2e:	3318      	adds	r3, #24
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016f34:	683b      	ldr	r3, [r7, #0]
 8016f36:	3304      	adds	r3, #4
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d102      	bne.n	8016f44 <etharp_input+0x74>
    for_us = 0;
 8016f3e:	2300      	movs	r3, #0
 8016f40:	75fb      	strb	r3, [r7, #23]
 8016f42:	e009      	b.n	8016f58 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016f44:	68ba      	ldr	r2, [r7, #8]
 8016f46:	683b      	ldr	r3, [r7, #0]
 8016f48:	3304      	adds	r3, #4
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	429a      	cmp	r2, r3
 8016f4e:	bf0c      	ite	eq
 8016f50:	2301      	moveq	r3, #1
 8016f52:	2300      	movne	r3, #0
 8016f54:	b2db      	uxtb	r3, r3
 8016f56:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016f58:	693b      	ldr	r3, [r7, #16]
 8016f5a:	f103 0208 	add.w	r2, r3, #8
 8016f5e:	7dfb      	ldrb	r3, [r7, #23]
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d001      	beq.n	8016f68 <etharp_input+0x98>
 8016f64:	2301      	movs	r3, #1
 8016f66:	e000      	b.n	8016f6a <etharp_input+0x9a>
 8016f68:	2302      	movs	r3, #2
 8016f6a:	f107 010c 	add.w	r1, r7, #12
 8016f6e:	6838      	ldr	r0, [r7, #0]
 8016f70:	f7ff fed8 	bl	8016d24 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016f74:	693b      	ldr	r3, [r7, #16]
 8016f76:	88db      	ldrh	r3, [r3, #6]
 8016f78:	b29b      	uxth	r3, r3
 8016f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016f7e:	d003      	beq.n	8016f88 <etharp_input+0xb8>
 8016f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016f84:	d01e      	beq.n	8016fc4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016f86:	e020      	b.n	8016fca <etharp_input+0xfa>
      if (for_us) {
 8016f88:	7dfb      	ldrb	r3, [r7, #23]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d01c      	beq.n	8016fc8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016f8e:	683b      	ldr	r3, [r7, #0]
 8016f90:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016f94:	693b      	ldr	r3, [r7, #16]
 8016f96:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016f9a:	683b      	ldr	r3, [r7, #0]
 8016f9c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8016fa0:	683b      	ldr	r3, [r7, #0]
 8016fa2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016fa4:	693a      	ldr	r2, [r7, #16]
 8016fa6:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016fa8:	2102      	movs	r1, #2
 8016faa:	9103      	str	r1, [sp, #12]
 8016fac:	f107 010c 	add.w	r1, r7, #12
 8016fb0:	9102      	str	r1, [sp, #8]
 8016fb2:	9201      	str	r2, [sp, #4]
 8016fb4:	9300      	str	r3, [sp, #0]
 8016fb6:	462b      	mov	r3, r5
 8016fb8:	4622      	mov	r2, r4
 8016fba:	4601      	mov	r1, r0
 8016fbc:	6838      	ldr	r0, [r7, #0]
 8016fbe:	f000 faeb 	bl	8017598 <etharp_raw>
      break;
 8016fc2:	e001      	b.n	8016fc8 <etharp_input+0xf8>
      break;
 8016fc4:	bf00      	nop
 8016fc6:	e000      	b.n	8016fca <etharp_input+0xfa>
      break;
 8016fc8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016fca:	6878      	ldr	r0, [r7, #4]
 8016fcc:	f7f8 fe74 	bl	800fcb8 <pbuf_free>
}
 8016fd0:	3718      	adds	r7, #24
 8016fd2:	46bd      	mov	sp, r7
 8016fd4:	bdb0      	pop	{r4, r5, r7, pc}
 8016fd6:	bf00      	nop
 8016fd8:	0801ea34 	.word	0x0801ea34
 8016fdc:	0801eb84 	.word	0x0801eb84
 8016fe0:	0801eaac 	.word	0x0801eaac

08016fe4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016fe4:	b580      	push	{r7, lr}
 8016fe6:	b086      	sub	sp, #24
 8016fe8:	af02      	add	r7, sp, #8
 8016fea:	60f8      	str	r0, [r7, #12]
 8016fec:	60b9      	str	r1, [r7, #8]
 8016fee:	4613      	mov	r3, r2
 8016ff0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016ff2:	79fa      	ldrb	r2, [r7, #7]
 8016ff4:	4944      	ldr	r1, [pc, #272]	; (8017108 <etharp_output_to_arp_index+0x124>)
 8016ff6:	4613      	mov	r3, r2
 8016ff8:	005b      	lsls	r3, r3, #1
 8016ffa:	4413      	add	r3, r2
 8016ffc:	00db      	lsls	r3, r3, #3
 8016ffe:	440b      	add	r3, r1
 8017000:	3314      	adds	r3, #20
 8017002:	781b      	ldrb	r3, [r3, #0]
 8017004:	2b01      	cmp	r3, #1
 8017006:	d806      	bhi.n	8017016 <etharp_output_to_arp_index+0x32>
 8017008:	4b40      	ldr	r3, [pc, #256]	; (801710c <etharp_output_to_arp_index+0x128>)
 801700a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801700e:	4940      	ldr	r1, [pc, #256]	; (8017110 <etharp_output_to_arp_index+0x12c>)
 8017010:	4840      	ldr	r0, [pc, #256]	; (8017114 <etharp_output_to_arp_index+0x130>)
 8017012:	f002 ffab 	bl	8019f6c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017016:	79fa      	ldrb	r2, [r7, #7]
 8017018:	493b      	ldr	r1, [pc, #236]	; (8017108 <etharp_output_to_arp_index+0x124>)
 801701a:	4613      	mov	r3, r2
 801701c:	005b      	lsls	r3, r3, #1
 801701e:	4413      	add	r3, r2
 8017020:	00db      	lsls	r3, r3, #3
 8017022:	440b      	add	r3, r1
 8017024:	3314      	adds	r3, #20
 8017026:	781b      	ldrb	r3, [r3, #0]
 8017028:	2b02      	cmp	r3, #2
 801702a:	d153      	bne.n	80170d4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801702c:	79fa      	ldrb	r2, [r7, #7]
 801702e:	4936      	ldr	r1, [pc, #216]	; (8017108 <etharp_output_to_arp_index+0x124>)
 8017030:	4613      	mov	r3, r2
 8017032:	005b      	lsls	r3, r3, #1
 8017034:	4413      	add	r3, r2
 8017036:	00db      	lsls	r3, r3, #3
 8017038:	440b      	add	r3, r1
 801703a:	3312      	adds	r3, #18
 801703c:	881b      	ldrh	r3, [r3, #0]
 801703e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8017042:	d919      	bls.n	8017078 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017044:	79fa      	ldrb	r2, [r7, #7]
 8017046:	4613      	mov	r3, r2
 8017048:	005b      	lsls	r3, r3, #1
 801704a:	4413      	add	r3, r2
 801704c:	00db      	lsls	r3, r3, #3
 801704e:	4a2e      	ldr	r2, [pc, #184]	; (8017108 <etharp_output_to_arp_index+0x124>)
 8017050:	4413      	add	r3, r2
 8017052:	3304      	adds	r3, #4
 8017054:	4619      	mov	r1, r3
 8017056:	68f8      	ldr	r0, [r7, #12]
 8017058:	f000 fb4c 	bl	80176f4 <etharp_request>
 801705c:	4603      	mov	r3, r0
 801705e:	2b00      	cmp	r3, #0
 8017060:	d138      	bne.n	80170d4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017062:	79fa      	ldrb	r2, [r7, #7]
 8017064:	4928      	ldr	r1, [pc, #160]	; (8017108 <etharp_output_to_arp_index+0x124>)
 8017066:	4613      	mov	r3, r2
 8017068:	005b      	lsls	r3, r3, #1
 801706a:	4413      	add	r3, r2
 801706c:	00db      	lsls	r3, r3, #3
 801706e:	440b      	add	r3, r1
 8017070:	3314      	adds	r3, #20
 8017072:	2203      	movs	r2, #3
 8017074:	701a      	strb	r2, [r3, #0]
 8017076:	e02d      	b.n	80170d4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017078:	79fa      	ldrb	r2, [r7, #7]
 801707a:	4923      	ldr	r1, [pc, #140]	; (8017108 <etharp_output_to_arp_index+0x124>)
 801707c:	4613      	mov	r3, r2
 801707e:	005b      	lsls	r3, r3, #1
 8017080:	4413      	add	r3, r2
 8017082:	00db      	lsls	r3, r3, #3
 8017084:	440b      	add	r3, r1
 8017086:	3312      	adds	r3, #18
 8017088:	881b      	ldrh	r3, [r3, #0]
 801708a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801708e:	d321      	bcc.n	80170d4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017090:	79fa      	ldrb	r2, [r7, #7]
 8017092:	4613      	mov	r3, r2
 8017094:	005b      	lsls	r3, r3, #1
 8017096:	4413      	add	r3, r2
 8017098:	00db      	lsls	r3, r3, #3
 801709a:	4a1b      	ldr	r2, [pc, #108]	; (8017108 <etharp_output_to_arp_index+0x124>)
 801709c:	4413      	add	r3, r2
 801709e:	1d19      	adds	r1, r3, #4
 80170a0:	79fa      	ldrb	r2, [r7, #7]
 80170a2:	4613      	mov	r3, r2
 80170a4:	005b      	lsls	r3, r3, #1
 80170a6:	4413      	add	r3, r2
 80170a8:	00db      	lsls	r3, r3, #3
 80170aa:	3308      	adds	r3, #8
 80170ac:	4a16      	ldr	r2, [pc, #88]	; (8017108 <etharp_output_to_arp_index+0x124>)
 80170ae:	4413      	add	r3, r2
 80170b0:	3304      	adds	r3, #4
 80170b2:	461a      	mov	r2, r3
 80170b4:	68f8      	ldr	r0, [r7, #12]
 80170b6:	f000 fafb 	bl	80176b0 <etharp_request_dst>
 80170ba:	4603      	mov	r3, r0
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d109      	bne.n	80170d4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80170c0:	79fa      	ldrb	r2, [r7, #7]
 80170c2:	4911      	ldr	r1, [pc, #68]	; (8017108 <etharp_output_to_arp_index+0x124>)
 80170c4:	4613      	mov	r3, r2
 80170c6:	005b      	lsls	r3, r3, #1
 80170c8:	4413      	add	r3, r2
 80170ca:	00db      	lsls	r3, r3, #3
 80170cc:	440b      	add	r3, r1
 80170ce:	3314      	adds	r3, #20
 80170d0:	2203      	movs	r2, #3
 80170d2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80170da:	79fa      	ldrb	r2, [r7, #7]
 80170dc:	4613      	mov	r3, r2
 80170de:	005b      	lsls	r3, r3, #1
 80170e0:	4413      	add	r3, r2
 80170e2:	00db      	lsls	r3, r3, #3
 80170e4:	3308      	adds	r3, #8
 80170e6:	4a08      	ldr	r2, [pc, #32]	; (8017108 <etharp_output_to_arp_index+0x124>)
 80170e8:	4413      	add	r3, r2
 80170ea:	3304      	adds	r3, #4
 80170ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80170f0:	9200      	str	r2, [sp, #0]
 80170f2:	460a      	mov	r2, r1
 80170f4:	68b9      	ldr	r1, [r7, #8]
 80170f6:	68f8      	ldr	r0, [r7, #12]
 80170f8:	f001 fe3a 	bl	8018d70 <ethernet_output>
 80170fc:	4603      	mov	r3, r0
}
 80170fe:	4618      	mov	r0, r3
 8017100:	3710      	adds	r7, #16
 8017102:	46bd      	mov	sp, r7
 8017104:	bd80      	pop	{r7, pc}
 8017106:	bf00      	nop
 8017108:	200007dc 	.word	0x200007dc
 801710c:	0801ea34 	.word	0x0801ea34
 8017110:	0801eba4 	.word	0x0801eba4
 8017114:	0801eaac 	.word	0x0801eaac

08017118 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017118:	b580      	push	{r7, lr}
 801711a:	b08a      	sub	sp, #40	; 0x28
 801711c:	af02      	add	r7, sp, #8
 801711e:	60f8      	str	r0, [r7, #12]
 8017120:	60b9      	str	r1, [r7, #8]
 8017122:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	2b00      	cmp	r3, #0
 801712c:	d106      	bne.n	801713c <etharp_output+0x24>
 801712e:	4b73      	ldr	r3, [pc, #460]	; (80172fc <etharp_output+0x1e4>)
 8017130:	f240 321e 	movw	r2, #798	; 0x31e
 8017134:	4972      	ldr	r1, [pc, #456]	; (8017300 <etharp_output+0x1e8>)
 8017136:	4873      	ldr	r0, [pc, #460]	; (8017304 <etharp_output+0x1ec>)
 8017138:	f002 ff18 	bl	8019f6c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801713c:	68bb      	ldr	r3, [r7, #8]
 801713e:	2b00      	cmp	r3, #0
 8017140:	d106      	bne.n	8017150 <etharp_output+0x38>
 8017142:	4b6e      	ldr	r3, [pc, #440]	; (80172fc <etharp_output+0x1e4>)
 8017144:	f240 321f 	movw	r2, #799	; 0x31f
 8017148:	496f      	ldr	r1, [pc, #444]	; (8017308 <etharp_output+0x1f0>)
 801714a:	486e      	ldr	r0, [pc, #440]	; (8017304 <etharp_output+0x1ec>)
 801714c:	f002 ff0e 	bl	8019f6c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	2b00      	cmp	r3, #0
 8017154:	d106      	bne.n	8017164 <etharp_output+0x4c>
 8017156:	4b69      	ldr	r3, [pc, #420]	; (80172fc <etharp_output+0x1e4>)
 8017158:	f44f 7248 	mov.w	r2, #800	; 0x320
 801715c:	496b      	ldr	r1, [pc, #428]	; (801730c <etharp_output+0x1f4>)
 801715e:	4869      	ldr	r0, [pc, #420]	; (8017304 <etharp_output+0x1ec>)
 8017160:	f002 ff04 	bl	8019f6c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	68f9      	ldr	r1, [r7, #12]
 801716a:	4618      	mov	r0, r3
 801716c:	f000 fef8 	bl	8017f60 <ip4_addr_isbroadcast_u32>
 8017170:	4603      	mov	r3, r0
 8017172:	2b00      	cmp	r3, #0
 8017174:	d002      	beq.n	801717c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017176:	4b66      	ldr	r3, [pc, #408]	; (8017310 <etharp_output+0x1f8>)
 8017178:	61fb      	str	r3, [r7, #28]
 801717a:	e0af      	b.n	80172dc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017184:	2be0      	cmp	r3, #224	; 0xe0
 8017186:	d118      	bne.n	80171ba <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017188:	2301      	movs	r3, #1
 801718a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801718c:	2300      	movs	r3, #0
 801718e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017190:	235e      	movs	r3, #94	; 0x5e
 8017192:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	3301      	adds	r3, #1
 8017198:	781b      	ldrb	r3, [r3, #0]
 801719a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801719e:	b2db      	uxtb	r3, r3
 80171a0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	3302      	adds	r3, #2
 80171a6:	781b      	ldrb	r3, [r3, #0]
 80171a8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	3303      	adds	r3, #3
 80171ae:	781b      	ldrb	r3, [r3, #0]
 80171b0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80171b2:	f107 0310 	add.w	r3, r7, #16
 80171b6:	61fb      	str	r3, [r7, #28]
 80171b8:	e090      	b.n	80172dc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	681a      	ldr	r2, [r3, #0]
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	3304      	adds	r3, #4
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	405a      	eors	r2, r3
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	3308      	adds	r3, #8
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	4013      	ands	r3, r2
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d012      	beq.n	80171f8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80171d8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80171dc:	4293      	cmp	r3, r2
 80171de:	d00b      	beq.n	80171f8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	330c      	adds	r3, #12
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d003      	beq.n	80171f2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	330c      	adds	r3, #12
 80171ee:	61bb      	str	r3, [r7, #24]
 80171f0:	e002      	b.n	80171f8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80171f2:	f06f 0303 	mvn.w	r3, #3
 80171f6:	e07d      	b.n	80172f4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80171f8:	4b46      	ldr	r3, [pc, #280]	; (8017314 <etharp_output+0x1fc>)
 80171fa:	781b      	ldrb	r3, [r3, #0]
 80171fc:	4619      	mov	r1, r3
 80171fe:	4a46      	ldr	r2, [pc, #280]	; (8017318 <etharp_output+0x200>)
 8017200:	460b      	mov	r3, r1
 8017202:	005b      	lsls	r3, r3, #1
 8017204:	440b      	add	r3, r1
 8017206:	00db      	lsls	r3, r3, #3
 8017208:	4413      	add	r3, r2
 801720a:	3314      	adds	r3, #20
 801720c:	781b      	ldrb	r3, [r3, #0]
 801720e:	2b01      	cmp	r3, #1
 8017210:	d925      	bls.n	801725e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017212:	4b40      	ldr	r3, [pc, #256]	; (8017314 <etharp_output+0x1fc>)
 8017214:	781b      	ldrb	r3, [r3, #0]
 8017216:	4619      	mov	r1, r3
 8017218:	4a3f      	ldr	r2, [pc, #252]	; (8017318 <etharp_output+0x200>)
 801721a:	460b      	mov	r3, r1
 801721c:	005b      	lsls	r3, r3, #1
 801721e:	440b      	add	r3, r1
 8017220:	00db      	lsls	r3, r3, #3
 8017222:	4413      	add	r3, r2
 8017224:	3308      	adds	r3, #8
 8017226:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017228:	68fa      	ldr	r2, [r7, #12]
 801722a:	429a      	cmp	r2, r3
 801722c:	d117      	bne.n	801725e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801722e:	69bb      	ldr	r3, [r7, #24]
 8017230:	681a      	ldr	r2, [r3, #0]
 8017232:	4b38      	ldr	r3, [pc, #224]	; (8017314 <etharp_output+0x1fc>)
 8017234:	781b      	ldrb	r3, [r3, #0]
 8017236:	4618      	mov	r0, r3
 8017238:	4937      	ldr	r1, [pc, #220]	; (8017318 <etharp_output+0x200>)
 801723a:	4603      	mov	r3, r0
 801723c:	005b      	lsls	r3, r3, #1
 801723e:	4403      	add	r3, r0
 8017240:	00db      	lsls	r3, r3, #3
 8017242:	440b      	add	r3, r1
 8017244:	3304      	adds	r3, #4
 8017246:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017248:	429a      	cmp	r2, r3
 801724a:	d108      	bne.n	801725e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801724c:	4b31      	ldr	r3, [pc, #196]	; (8017314 <etharp_output+0x1fc>)
 801724e:	781b      	ldrb	r3, [r3, #0]
 8017250:	461a      	mov	r2, r3
 8017252:	68b9      	ldr	r1, [r7, #8]
 8017254:	68f8      	ldr	r0, [r7, #12]
 8017256:	f7ff fec5 	bl	8016fe4 <etharp_output_to_arp_index>
 801725a:	4603      	mov	r3, r0
 801725c:	e04a      	b.n	80172f4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801725e:	2300      	movs	r3, #0
 8017260:	75fb      	strb	r3, [r7, #23]
 8017262:	e031      	b.n	80172c8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017264:	7dfa      	ldrb	r2, [r7, #23]
 8017266:	492c      	ldr	r1, [pc, #176]	; (8017318 <etharp_output+0x200>)
 8017268:	4613      	mov	r3, r2
 801726a:	005b      	lsls	r3, r3, #1
 801726c:	4413      	add	r3, r2
 801726e:	00db      	lsls	r3, r3, #3
 8017270:	440b      	add	r3, r1
 8017272:	3314      	adds	r3, #20
 8017274:	781b      	ldrb	r3, [r3, #0]
 8017276:	2b01      	cmp	r3, #1
 8017278:	d923      	bls.n	80172c2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801727a:	7dfa      	ldrb	r2, [r7, #23]
 801727c:	4926      	ldr	r1, [pc, #152]	; (8017318 <etharp_output+0x200>)
 801727e:	4613      	mov	r3, r2
 8017280:	005b      	lsls	r3, r3, #1
 8017282:	4413      	add	r3, r2
 8017284:	00db      	lsls	r3, r3, #3
 8017286:	440b      	add	r3, r1
 8017288:	3308      	adds	r3, #8
 801728a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801728c:	68fa      	ldr	r2, [r7, #12]
 801728e:	429a      	cmp	r2, r3
 8017290:	d117      	bne.n	80172c2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017292:	69bb      	ldr	r3, [r7, #24]
 8017294:	6819      	ldr	r1, [r3, #0]
 8017296:	7dfa      	ldrb	r2, [r7, #23]
 8017298:	481f      	ldr	r0, [pc, #124]	; (8017318 <etharp_output+0x200>)
 801729a:	4613      	mov	r3, r2
 801729c:	005b      	lsls	r3, r3, #1
 801729e:	4413      	add	r3, r2
 80172a0:	00db      	lsls	r3, r3, #3
 80172a2:	4403      	add	r3, r0
 80172a4:	3304      	adds	r3, #4
 80172a6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80172a8:	4299      	cmp	r1, r3
 80172aa:	d10a      	bne.n	80172c2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80172ac:	4a19      	ldr	r2, [pc, #100]	; (8017314 <etharp_output+0x1fc>)
 80172ae:	7dfb      	ldrb	r3, [r7, #23]
 80172b0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80172b2:	7dfb      	ldrb	r3, [r7, #23]
 80172b4:	461a      	mov	r2, r3
 80172b6:	68b9      	ldr	r1, [r7, #8]
 80172b8:	68f8      	ldr	r0, [r7, #12]
 80172ba:	f7ff fe93 	bl	8016fe4 <etharp_output_to_arp_index>
 80172be:	4603      	mov	r3, r0
 80172c0:	e018      	b.n	80172f4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80172c2:	7dfb      	ldrb	r3, [r7, #23]
 80172c4:	3301      	adds	r3, #1
 80172c6:	75fb      	strb	r3, [r7, #23]
 80172c8:	7dfb      	ldrb	r3, [r7, #23]
 80172ca:	2b09      	cmp	r3, #9
 80172cc:	d9ca      	bls.n	8017264 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80172ce:	68ba      	ldr	r2, [r7, #8]
 80172d0:	69b9      	ldr	r1, [r7, #24]
 80172d2:	68f8      	ldr	r0, [r7, #12]
 80172d4:	f000 f822 	bl	801731c <etharp_query>
 80172d8:	4603      	mov	r3, r0
 80172da:	e00b      	b.n	80172f4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80172e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80172e6:	9300      	str	r3, [sp, #0]
 80172e8:	69fb      	ldr	r3, [r7, #28]
 80172ea:	68b9      	ldr	r1, [r7, #8]
 80172ec:	68f8      	ldr	r0, [r7, #12]
 80172ee:	f001 fd3f 	bl	8018d70 <ethernet_output>
 80172f2:	4603      	mov	r3, r0
}
 80172f4:	4618      	mov	r0, r3
 80172f6:	3720      	adds	r7, #32
 80172f8:	46bd      	mov	sp, r7
 80172fa:	bd80      	pop	{r7, pc}
 80172fc:	0801ea34 	.word	0x0801ea34
 8017300:	0801eb84 	.word	0x0801eb84
 8017304:	0801eaac 	.word	0x0801eaac
 8017308:	0801ebd4 	.word	0x0801ebd4
 801730c:	0801eb74 	.word	0x0801eb74
 8017310:	0801f374 	.word	0x0801f374
 8017314:	200008cc 	.word	0x200008cc
 8017318:	200007dc 	.word	0x200007dc

0801731c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801731c:	b580      	push	{r7, lr}
 801731e:	b08c      	sub	sp, #48	; 0x30
 8017320:	af02      	add	r7, sp, #8
 8017322:	60f8      	str	r0, [r7, #12]
 8017324:	60b9      	str	r1, [r7, #8]
 8017326:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	3326      	adds	r3, #38	; 0x26
 801732c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801732e:	23ff      	movs	r3, #255	; 0xff
 8017330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8017334:	2300      	movs	r3, #0
 8017336:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017338:	68bb      	ldr	r3, [r7, #8]
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	68f9      	ldr	r1, [r7, #12]
 801733e:	4618      	mov	r0, r3
 8017340:	f000 fe0e 	bl	8017f60 <ip4_addr_isbroadcast_u32>
 8017344:	4603      	mov	r3, r0
 8017346:	2b00      	cmp	r3, #0
 8017348:	d10c      	bne.n	8017364 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801734a:	68bb      	ldr	r3, [r7, #8]
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017352:	2be0      	cmp	r3, #224	; 0xe0
 8017354:	d006      	beq.n	8017364 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017356:	68bb      	ldr	r3, [r7, #8]
 8017358:	2b00      	cmp	r3, #0
 801735a:	d003      	beq.n	8017364 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801735c:	68bb      	ldr	r3, [r7, #8]
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d102      	bne.n	801736a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017364:	f06f 030f 	mvn.w	r3, #15
 8017368:	e101      	b.n	801756e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801736a:	68fa      	ldr	r2, [r7, #12]
 801736c:	2101      	movs	r1, #1
 801736e:	68b8      	ldr	r0, [r7, #8]
 8017370:	f7ff fb60 	bl	8016a34 <etharp_find_entry>
 8017374:	4603      	mov	r3, r0
 8017376:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017378:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801737c:	2b00      	cmp	r3, #0
 801737e:	da02      	bge.n	8017386 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017380:	8a7b      	ldrh	r3, [r7, #18]
 8017382:	b25b      	sxtb	r3, r3
 8017384:	e0f3      	b.n	801756e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017386:	8a7b      	ldrh	r3, [r7, #18]
 8017388:	2b7e      	cmp	r3, #126	; 0x7e
 801738a:	d906      	bls.n	801739a <etharp_query+0x7e>
 801738c:	4b7a      	ldr	r3, [pc, #488]	; (8017578 <etharp_query+0x25c>)
 801738e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8017392:	497a      	ldr	r1, [pc, #488]	; (801757c <etharp_query+0x260>)
 8017394:	487a      	ldr	r0, [pc, #488]	; (8017580 <etharp_query+0x264>)
 8017396:	f002 fde9 	bl	8019f6c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801739a:	8a7b      	ldrh	r3, [r7, #18]
 801739c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801739e:	7c7a      	ldrb	r2, [r7, #17]
 80173a0:	4978      	ldr	r1, [pc, #480]	; (8017584 <etharp_query+0x268>)
 80173a2:	4613      	mov	r3, r2
 80173a4:	005b      	lsls	r3, r3, #1
 80173a6:	4413      	add	r3, r2
 80173a8:	00db      	lsls	r3, r3, #3
 80173aa:	440b      	add	r3, r1
 80173ac:	3314      	adds	r3, #20
 80173ae:	781b      	ldrb	r3, [r3, #0]
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d115      	bne.n	80173e0 <etharp_query+0xc4>
    is_new_entry = 1;
 80173b4:	2301      	movs	r3, #1
 80173b6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80173b8:	7c7a      	ldrb	r2, [r7, #17]
 80173ba:	4972      	ldr	r1, [pc, #456]	; (8017584 <etharp_query+0x268>)
 80173bc:	4613      	mov	r3, r2
 80173be:	005b      	lsls	r3, r3, #1
 80173c0:	4413      	add	r3, r2
 80173c2:	00db      	lsls	r3, r3, #3
 80173c4:	440b      	add	r3, r1
 80173c6:	3314      	adds	r3, #20
 80173c8:	2201      	movs	r2, #1
 80173ca:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80173cc:	7c7a      	ldrb	r2, [r7, #17]
 80173ce:	496d      	ldr	r1, [pc, #436]	; (8017584 <etharp_query+0x268>)
 80173d0:	4613      	mov	r3, r2
 80173d2:	005b      	lsls	r3, r3, #1
 80173d4:	4413      	add	r3, r2
 80173d6:	00db      	lsls	r3, r3, #3
 80173d8:	440b      	add	r3, r1
 80173da:	3308      	adds	r3, #8
 80173dc:	68fa      	ldr	r2, [r7, #12]
 80173de:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80173e0:	7c7a      	ldrb	r2, [r7, #17]
 80173e2:	4968      	ldr	r1, [pc, #416]	; (8017584 <etharp_query+0x268>)
 80173e4:	4613      	mov	r3, r2
 80173e6:	005b      	lsls	r3, r3, #1
 80173e8:	4413      	add	r3, r2
 80173ea:	00db      	lsls	r3, r3, #3
 80173ec:	440b      	add	r3, r1
 80173ee:	3314      	adds	r3, #20
 80173f0:	781b      	ldrb	r3, [r3, #0]
 80173f2:	2b01      	cmp	r3, #1
 80173f4:	d011      	beq.n	801741a <etharp_query+0xfe>
 80173f6:	7c7a      	ldrb	r2, [r7, #17]
 80173f8:	4962      	ldr	r1, [pc, #392]	; (8017584 <etharp_query+0x268>)
 80173fa:	4613      	mov	r3, r2
 80173fc:	005b      	lsls	r3, r3, #1
 80173fe:	4413      	add	r3, r2
 8017400:	00db      	lsls	r3, r3, #3
 8017402:	440b      	add	r3, r1
 8017404:	3314      	adds	r3, #20
 8017406:	781b      	ldrb	r3, [r3, #0]
 8017408:	2b01      	cmp	r3, #1
 801740a:	d806      	bhi.n	801741a <etharp_query+0xfe>
 801740c:	4b5a      	ldr	r3, [pc, #360]	; (8017578 <etharp_query+0x25c>)
 801740e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8017412:	495d      	ldr	r1, [pc, #372]	; (8017588 <etharp_query+0x26c>)
 8017414:	485a      	ldr	r0, [pc, #360]	; (8017580 <etharp_query+0x264>)
 8017416:	f002 fda9 	bl	8019f6c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801741a:	6a3b      	ldr	r3, [r7, #32]
 801741c:	2b00      	cmp	r3, #0
 801741e:	d102      	bne.n	8017426 <etharp_query+0x10a>
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	2b00      	cmp	r3, #0
 8017424:	d10c      	bne.n	8017440 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017426:	68b9      	ldr	r1, [r7, #8]
 8017428:	68f8      	ldr	r0, [r7, #12]
 801742a:	f000 f963 	bl	80176f4 <etharp_request>
 801742e:	4603      	mov	r3, r0
 8017430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	2b00      	cmp	r3, #0
 8017438:	d102      	bne.n	8017440 <etharp_query+0x124>
      return result;
 801743a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801743e:	e096      	b.n	801756e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d106      	bne.n	8017454 <etharp_query+0x138>
 8017446:	4b4c      	ldr	r3, [pc, #304]	; (8017578 <etharp_query+0x25c>)
 8017448:	f240 32e1 	movw	r2, #993	; 0x3e1
 801744c:	494f      	ldr	r1, [pc, #316]	; (801758c <etharp_query+0x270>)
 801744e:	484c      	ldr	r0, [pc, #304]	; (8017580 <etharp_query+0x264>)
 8017450:	f002 fd8c 	bl	8019f6c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017454:	7c7a      	ldrb	r2, [r7, #17]
 8017456:	494b      	ldr	r1, [pc, #300]	; (8017584 <etharp_query+0x268>)
 8017458:	4613      	mov	r3, r2
 801745a:	005b      	lsls	r3, r3, #1
 801745c:	4413      	add	r3, r2
 801745e:	00db      	lsls	r3, r3, #3
 8017460:	440b      	add	r3, r1
 8017462:	3314      	adds	r3, #20
 8017464:	781b      	ldrb	r3, [r3, #0]
 8017466:	2b01      	cmp	r3, #1
 8017468:	d917      	bls.n	801749a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801746a:	4a49      	ldr	r2, [pc, #292]	; (8017590 <etharp_query+0x274>)
 801746c:	7c7b      	ldrb	r3, [r7, #17]
 801746e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017470:	7c7a      	ldrb	r2, [r7, #17]
 8017472:	4613      	mov	r3, r2
 8017474:	005b      	lsls	r3, r3, #1
 8017476:	4413      	add	r3, r2
 8017478:	00db      	lsls	r3, r3, #3
 801747a:	3308      	adds	r3, #8
 801747c:	4a41      	ldr	r2, [pc, #260]	; (8017584 <etharp_query+0x268>)
 801747e:	4413      	add	r3, r2
 8017480:	3304      	adds	r3, #4
 8017482:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017486:	9200      	str	r2, [sp, #0]
 8017488:	697a      	ldr	r2, [r7, #20]
 801748a:	6879      	ldr	r1, [r7, #4]
 801748c:	68f8      	ldr	r0, [r7, #12]
 801748e:	f001 fc6f 	bl	8018d70 <ethernet_output>
 8017492:	4603      	mov	r3, r0
 8017494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017498:	e067      	b.n	801756a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801749a:	7c7a      	ldrb	r2, [r7, #17]
 801749c:	4939      	ldr	r1, [pc, #228]	; (8017584 <etharp_query+0x268>)
 801749e:	4613      	mov	r3, r2
 80174a0:	005b      	lsls	r3, r3, #1
 80174a2:	4413      	add	r3, r2
 80174a4:	00db      	lsls	r3, r3, #3
 80174a6:	440b      	add	r3, r1
 80174a8:	3314      	adds	r3, #20
 80174aa:	781b      	ldrb	r3, [r3, #0]
 80174ac:	2b01      	cmp	r3, #1
 80174ae:	d15c      	bne.n	801756a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80174b0:	2300      	movs	r3, #0
 80174b2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80174b8:	e01c      	b.n	80174f4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80174ba:	69fb      	ldr	r3, [r7, #28]
 80174bc:	895a      	ldrh	r2, [r3, #10]
 80174be:	69fb      	ldr	r3, [r7, #28]
 80174c0:	891b      	ldrh	r3, [r3, #8]
 80174c2:	429a      	cmp	r2, r3
 80174c4:	d10a      	bne.n	80174dc <etharp_query+0x1c0>
 80174c6:	69fb      	ldr	r3, [r7, #28]
 80174c8:	681b      	ldr	r3, [r3, #0]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d006      	beq.n	80174dc <etharp_query+0x1c0>
 80174ce:	4b2a      	ldr	r3, [pc, #168]	; (8017578 <etharp_query+0x25c>)
 80174d0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80174d4:	492f      	ldr	r1, [pc, #188]	; (8017594 <etharp_query+0x278>)
 80174d6:	482a      	ldr	r0, [pc, #168]	; (8017580 <etharp_query+0x264>)
 80174d8:	f002 fd48 	bl	8019f6c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80174dc:	69fb      	ldr	r3, [r7, #28]
 80174de:	7b1b      	ldrb	r3, [r3, #12]
 80174e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d002      	beq.n	80174ee <etharp_query+0x1d2>
        copy_needed = 1;
 80174e8:	2301      	movs	r3, #1
 80174ea:	61bb      	str	r3, [r7, #24]
        break;
 80174ec:	e005      	b.n	80174fa <etharp_query+0x1de>
      }
      p = p->next;
 80174ee:	69fb      	ldr	r3, [r7, #28]
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80174f4:	69fb      	ldr	r3, [r7, #28]
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d1df      	bne.n	80174ba <etharp_query+0x19e>
    }
    if (copy_needed) {
 80174fa:	69bb      	ldr	r3, [r7, #24]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d007      	beq.n	8017510 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8017500:	687a      	ldr	r2, [r7, #4]
 8017502:	f44f 7120 	mov.w	r1, #640	; 0x280
 8017506:	200e      	movs	r0, #14
 8017508:	f7f8 fec4 	bl	8010294 <pbuf_clone>
 801750c:	61f8      	str	r0, [r7, #28]
 801750e:	e004      	b.n	801751a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017514:	69f8      	ldr	r0, [r7, #28]
 8017516:	f7f8 fc6f 	bl	800fdf8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801751a:	69fb      	ldr	r3, [r7, #28]
 801751c:	2b00      	cmp	r3, #0
 801751e:	d021      	beq.n	8017564 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017520:	7c7a      	ldrb	r2, [r7, #17]
 8017522:	4918      	ldr	r1, [pc, #96]	; (8017584 <etharp_query+0x268>)
 8017524:	4613      	mov	r3, r2
 8017526:	005b      	lsls	r3, r3, #1
 8017528:	4413      	add	r3, r2
 801752a:	00db      	lsls	r3, r3, #3
 801752c:	440b      	add	r3, r1
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	2b00      	cmp	r3, #0
 8017532:	d00a      	beq.n	801754a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017534:	7c7a      	ldrb	r2, [r7, #17]
 8017536:	4913      	ldr	r1, [pc, #76]	; (8017584 <etharp_query+0x268>)
 8017538:	4613      	mov	r3, r2
 801753a:	005b      	lsls	r3, r3, #1
 801753c:	4413      	add	r3, r2
 801753e:	00db      	lsls	r3, r3, #3
 8017540:	440b      	add	r3, r1
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	4618      	mov	r0, r3
 8017546:	f7f8 fbb7 	bl	800fcb8 <pbuf_free>
      }
      arp_table[i].q = p;
 801754a:	7c7a      	ldrb	r2, [r7, #17]
 801754c:	490d      	ldr	r1, [pc, #52]	; (8017584 <etharp_query+0x268>)
 801754e:	4613      	mov	r3, r2
 8017550:	005b      	lsls	r3, r3, #1
 8017552:	4413      	add	r3, r2
 8017554:	00db      	lsls	r3, r3, #3
 8017556:	440b      	add	r3, r1
 8017558:	69fa      	ldr	r2, [r7, #28]
 801755a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801755c:	2300      	movs	r3, #0
 801755e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017562:	e002      	b.n	801756a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017564:	23ff      	movs	r3, #255	; 0xff
 8017566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801756a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801756e:	4618      	mov	r0, r3
 8017570:	3728      	adds	r7, #40	; 0x28
 8017572:	46bd      	mov	sp, r7
 8017574:	bd80      	pop	{r7, pc}
 8017576:	bf00      	nop
 8017578:	0801ea34 	.word	0x0801ea34
 801757c:	0801ebe0 	.word	0x0801ebe0
 8017580:	0801eaac 	.word	0x0801eaac
 8017584:	200007dc 	.word	0x200007dc
 8017588:	0801ebf0 	.word	0x0801ebf0
 801758c:	0801ebd4 	.word	0x0801ebd4
 8017590:	200008cc 	.word	0x200008cc
 8017594:	0801ec18 	.word	0x0801ec18

08017598 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017598:	b580      	push	{r7, lr}
 801759a:	b08a      	sub	sp, #40	; 0x28
 801759c:	af02      	add	r7, sp, #8
 801759e:	60f8      	str	r0, [r7, #12]
 80175a0:	60b9      	str	r1, [r7, #8]
 80175a2:	607a      	str	r2, [r7, #4]
 80175a4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80175a6:	2300      	movs	r3, #0
 80175a8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80175aa:	68fb      	ldr	r3, [r7, #12]
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d106      	bne.n	80175be <etharp_raw+0x26>
 80175b0:	4b3a      	ldr	r3, [pc, #232]	; (801769c <etharp_raw+0x104>)
 80175b2:	f240 4257 	movw	r2, #1111	; 0x457
 80175b6:	493a      	ldr	r1, [pc, #232]	; (80176a0 <etharp_raw+0x108>)
 80175b8:	483a      	ldr	r0, [pc, #232]	; (80176a4 <etharp_raw+0x10c>)
 80175ba:	f002 fcd7 	bl	8019f6c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80175be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80175c2:	211c      	movs	r1, #28
 80175c4:	200e      	movs	r0, #14
 80175c6:	f7f8 f893 	bl	800f6f0 <pbuf_alloc>
 80175ca:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80175cc:	69bb      	ldr	r3, [r7, #24]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d102      	bne.n	80175d8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80175d2:	f04f 33ff 	mov.w	r3, #4294967295
 80175d6:	e05d      	b.n	8017694 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80175d8:	69bb      	ldr	r3, [r7, #24]
 80175da:	895b      	ldrh	r3, [r3, #10]
 80175dc:	2b1b      	cmp	r3, #27
 80175de:	d806      	bhi.n	80175ee <etharp_raw+0x56>
 80175e0:	4b2e      	ldr	r3, [pc, #184]	; (801769c <etharp_raw+0x104>)
 80175e2:	f240 4262 	movw	r2, #1122	; 0x462
 80175e6:	4930      	ldr	r1, [pc, #192]	; (80176a8 <etharp_raw+0x110>)
 80175e8:	482e      	ldr	r0, [pc, #184]	; (80176a4 <etharp_raw+0x10c>)
 80175ea:	f002 fcbf 	bl	8019f6c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80175ee:	69bb      	ldr	r3, [r7, #24]
 80175f0:	685b      	ldr	r3, [r3, #4]
 80175f2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80175f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80175f6:	4618      	mov	r0, r3
 80175f8:	f7f7 f8ab 	bl	800e752 <lwip_htons>
 80175fc:	4603      	mov	r3, r0
 80175fe:	461a      	mov	r2, r3
 8017600:	697b      	ldr	r3, [r7, #20]
 8017602:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801760a:	2b06      	cmp	r3, #6
 801760c:	d006      	beq.n	801761c <etharp_raw+0x84>
 801760e:	4b23      	ldr	r3, [pc, #140]	; (801769c <etharp_raw+0x104>)
 8017610:	f240 4269 	movw	r2, #1129	; 0x469
 8017614:	4925      	ldr	r1, [pc, #148]	; (80176ac <etharp_raw+0x114>)
 8017616:	4823      	ldr	r0, [pc, #140]	; (80176a4 <etharp_raw+0x10c>)
 8017618:	f002 fca8 	bl	8019f6c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801761c:	697b      	ldr	r3, [r7, #20]
 801761e:	3308      	adds	r3, #8
 8017620:	2206      	movs	r2, #6
 8017622:	6839      	ldr	r1, [r7, #0]
 8017624:	4618      	mov	r0, r3
 8017626:	f001 ff77 	bl	8019518 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801762a:	697b      	ldr	r3, [r7, #20]
 801762c:	3312      	adds	r3, #18
 801762e:	2206      	movs	r2, #6
 8017630:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017632:	4618      	mov	r0, r3
 8017634:	f001 ff70 	bl	8019518 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017638:	697b      	ldr	r3, [r7, #20]
 801763a:	330e      	adds	r3, #14
 801763c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801763e:	6812      	ldr	r2, [r2, #0]
 8017640:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017642:	697b      	ldr	r3, [r7, #20]
 8017644:	3318      	adds	r3, #24
 8017646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017648:	6812      	ldr	r2, [r2, #0]
 801764a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801764c:	697b      	ldr	r3, [r7, #20]
 801764e:	2200      	movs	r2, #0
 8017650:	701a      	strb	r2, [r3, #0]
 8017652:	2200      	movs	r2, #0
 8017654:	f042 0201 	orr.w	r2, r2, #1
 8017658:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801765a:	697b      	ldr	r3, [r7, #20]
 801765c:	2200      	movs	r2, #0
 801765e:	f042 0208 	orr.w	r2, r2, #8
 8017662:	709a      	strb	r2, [r3, #2]
 8017664:	2200      	movs	r2, #0
 8017666:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017668:	697b      	ldr	r3, [r7, #20]
 801766a:	2206      	movs	r2, #6
 801766c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801766e:	697b      	ldr	r3, [r7, #20]
 8017670:	2204      	movs	r2, #4
 8017672:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017674:	f640 0306 	movw	r3, #2054	; 0x806
 8017678:	9300      	str	r3, [sp, #0]
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	68ba      	ldr	r2, [r7, #8]
 801767e:	69b9      	ldr	r1, [r7, #24]
 8017680:	68f8      	ldr	r0, [r7, #12]
 8017682:	f001 fb75 	bl	8018d70 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017686:	69b8      	ldr	r0, [r7, #24]
 8017688:	f7f8 fb16 	bl	800fcb8 <pbuf_free>
  p = NULL;
 801768c:	2300      	movs	r3, #0
 801768e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017690:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017694:	4618      	mov	r0, r3
 8017696:	3720      	adds	r7, #32
 8017698:	46bd      	mov	sp, r7
 801769a:	bd80      	pop	{r7, pc}
 801769c:	0801ea34 	.word	0x0801ea34
 80176a0:	0801eb84 	.word	0x0801eb84
 80176a4:	0801eaac 	.word	0x0801eaac
 80176a8:	0801ec34 	.word	0x0801ec34
 80176ac:	0801ec68 	.word	0x0801ec68

080176b0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b088      	sub	sp, #32
 80176b4:	af04      	add	r7, sp, #16
 80176b6:	60f8      	str	r0, [r7, #12]
 80176b8:	60b9      	str	r1, [r7, #8]
 80176ba:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80176cc:	2201      	movs	r2, #1
 80176ce:	9203      	str	r2, [sp, #12]
 80176d0:	68ba      	ldr	r2, [r7, #8]
 80176d2:	9202      	str	r2, [sp, #8]
 80176d4:	4a06      	ldr	r2, [pc, #24]	; (80176f0 <etharp_request_dst+0x40>)
 80176d6:	9201      	str	r2, [sp, #4]
 80176d8:	9300      	str	r3, [sp, #0]
 80176da:	4603      	mov	r3, r0
 80176dc:	687a      	ldr	r2, [r7, #4]
 80176de:	68f8      	ldr	r0, [r7, #12]
 80176e0:	f7ff ff5a 	bl	8017598 <etharp_raw>
 80176e4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80176e6:	4618      	mov	r0, r3
 80176e8:	3710      	adds	r7, #16
 80176ea:	46bd      	mov	sp, r7
 80176ec:	bd80      	pop	{r7, pc}
 80176ee:	bf00      	nop
 80176f0:	0801f37c 	.word	0x0801f37c

080176f4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80176f4:	b580      	push	{r7, lr}
 80176f6:	b082      	sub	sp, #8
 80176f8:	af00      	add	r7, sp, #0
 80176fa:	6078      	str	r0, [r7, #4]
 80176fc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80176fe:	4a05      	ldr	r2, [pc, #20]	; (8017714 <etharp_request+0x20>)
 8017700:	6839      	ldr	r1, [r7, #0]
 8017702:	6878      	ldr	r0, [r7, #4]
 8017704:	f7ff ffd4 	bl	80176b0 <etharp_request_dst>
 8017708:	4603      	mov	r3, r0
}
 801770a:	4618      	mov	r0, r3
 801770c:	3708      	adds	r7, #8
 801770e:	46bd      	mov	sp, r7
 8017710:	bd80      	pop	{r7, pc}
 8017712:	bf00      	nop
 8017714:	0801f374 	.word	0x0801f374

08017718 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017718:	b580      	push	{r7, lr}
 801771a:	b08e      	sub	sp, #56	; 0x38
 801771c:	af04      	add	r7, sp, #16
 801771e:	6078      	str	r0, [r7, #4]
 8017720:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017722:	4b79      	ldr	r3, [pc, #484]	; (8017908 <icmp_input+0x1f0>)
 8017724:	689b      	ldr	r3, [r3, #8]
 8017726:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801772a:	781b      	ldrb	r3, [r3, #0]
 801772c:	f003 030f 	and.w	r3, r3, #15
 8017730:	b2db      	uxtb	r3, r3
 8017732:	009b      	lsls	r3, r3, #2
 8017734:	b2db      	uxtb	r3, r3
 8017736:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017738:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801773a:	2b13      	cmp	r3, #19
 801773c:	f240 80cd 	bls.w	80178da <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	895b      	ldrh	r3, [r3, #10]
 8017744:	2b03      	cmp	r3, #3
 8017746:	f240 80ca 	bls.w	80178de <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	685b      	ldr	r3, [r3, #4]
 801774e:	781b      	ldrb	r3, [r3, #0]
 8017750:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017754:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017758:	2b00      	cmp	r3, #0
 801775a:	f000 80b7 	beq.w	80178cc <icmp_input+0x1b4>
 801775e:	2b08      	cmp	r3, #8
 8017760:	f040 80b7 	bne.w	80178d2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017764:	4b69      	ldr	r3, [pc, #420]	; (801790c <icmp_input+0x1f4>)
 8017766:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017768:	4b67      	ldr	r3, [pc, #412]	; (8017908 <icmp_input+0x1f0>)
 801776a:	695b      	ldr	r3, [r3, #20]
 801776c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017770:	2be0      	cmp	r3, #224	; 0xe0
 8017772:	f000 80bb 	beq.w	80178ec <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017776:	4b64      	ldr	r3, [pc, #400]	; (8017908 <icmp_input+0x1f0>)
 8017778:	695b      	ldr	r3, [r3, #20]
 801777a:	4a63      	ldr	r2, [pc, #396]	; (8017908 <icmp_input+0x1f0>)
 801777c:	6812      	ldr	r2, [r2, #0]
 801777e:	4611      	mov	r1, r2
 8017780:	4618      	mov	r0, r3
 8017782:	f000 fbed 	bl	8017f60 <ip4_addr_isbroadcast_u32>
 8017786:	4603      	mov	r3, r0
 8017788:	2b00      	cmp	r3, #0
 801778a:	f040 80b1 	bne.w	80178f0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	891b      	ldrh	r3, [r3, #8]
 8017792:	2b07      	cmp	r3, #7
 8017794:	f240 80a5 	bls.w	80178e2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017798:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801779a:	330e      	adds	r3, #14
 801779c:	4619      	mov	r1, r3
 801779e:	6878      	ldr	r0, [r7, #4]
 80177a0:	f7f8 f9f4 	bl	800fb8c <pbuf_add_header>
 80177a4:	4603      	mov	r3, r0
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d04b      	beq.n	8017842 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	891a      	ldrh	r2, [r3, #8]
 80177ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80177b0:	4413      	add	r3, r2
 80177b2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	891b      	ldrh	r3, [r3, #8]
 80177b8:	8b7a      	ldrh	r2, [r7, #26]
 80177ba:	429a      	cmp	r2, r3
 80177bc:	f0c0 809a 	bcc.w	80178f4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80177c0:	8b7b      	ldrh	r3, [r7, #26]
 80177c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80177c6:	4619      	mov	r1, r3
 80177c8:	200e      	movs	r0, #14
 80177ca:	f7f7 ff91 	bl	800f6f0 <pbuf_alloc>
 80177ce:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80177d0:	697b      	ldr	r3, [r7, #20]
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	f000 8090 	beq.w	80178f8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80177d8:	697b      	ldr	r3, [r7, #20]
 80177da:	895b      	ldrh	r3, [r3, #10]
 80177dc:	461a      	mov	r2, r3
 80177de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80177e0:	3308      	adds	r3, #8
 80177e2:	429a      	cmp	r2, r3
 80177e4:	d203      	bcs.n	80177ee <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80177e6:	6978      	ldr	r0, [r7, #20]
 80177e8:	f7f8 fa66 	bl	800fcb8 <pbuf_free>
          goto icmperr;
 80177ec:	e085      	b.n	80178fa <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80177ee:	697b      	ldr	r3, [r7, #20]
 80177f0:	685b      	ldr	r3, [r3, #4]
 80177f2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80177f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80177f6:	4618      	mov	r0, r3
 80177f8:	f001 fe8e 	bl	8019518 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80177fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80177fe:	4619      	mov	r1, r3
 8017800:	6978      	ldr	r0, [r7, #20]
 8017802:	f7f8 f9d3 	bl	800fbac <pbuf_remove_header>
 8017806:	4603      	mov	r3, r0
 8017808:	2b00      	cmp	r3, #0
 801780a:	d009      	beq.n	8017820 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801780c:	4b40      	ldr	r3, [pc, #256]	; (8017910 <icmp_input+0x1f8>)
 801780e:	22b6      	movs	r2, #182	; 0xb6
 8017810:	4940      	ldr	r1, [pc, #256]	; (8017914 <icmp_input+0x1fc>)
 8017812:	4841      	ldr	r0, [pc, #260]	; (8017918 <icmp_input+0x200>)
 8017814:	f002 fbaa 	bl	8019f6c <iprintf>
          pbuf_free(r);
 8017818:	6978      	ldr	r0, [r7, #20]
 801781a:	f7f8 fa4d 	bl	800fcb8 <pbuf_free>
          goto icmperr;
 801781e:	e06c      	b.n	80178fa <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017820:	6879      	ldr	r1, [r7, #4]
 8017822:	6978      	ldr	r0, [r7, #20]
 8017824:	f7f8 fb60 	bl	800fee8 <pbuf_copy>
 8017828:	4603      	mov	r3, r0
 801782a:	2b00      	cmp	r3, #0
 801782c:	d003      	beq.n	8017836 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801782e:	6978      	ldr	r0, [r7, #20]
 8017830:	f7f8 fa42 	bl	800fcb8 <pbuf_free>
          goto icmperr;
 8017834:	e061      	b.n	80178fa <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8017836:	6878      	ldr	r0, [r7, #4]
 8017838:	f7f8 fa3e 	bl	800fcb8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801783c:	697b      	ldr	r3, [r7, #20]
 801783e:	607b      	str	r3, [r7, #4]
 8017840:	e00f      	b.n	8017862 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017844:	330e      	adds	r3, #14
 8017846:	4619      	mov	r1, r3
 8017848:	6878      	ldr	r0, [r7, #4]
 801784a:	f7f8 f9af 	bl	800fbac <pbuf_remove_header>
 801784e:	4603      	mov	r3, r0
 8017850:	2b00      	cmp	r3, #0
 8017852:	d006      	beq.n	8017862 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017854:	4b2e      	ldr	r3, [pc, #184]	; (8017910 <icmp_input+0x1f8>)
 8017856:	22c7      	movs	r2, #199	; 0xc7
 8017858:	4930      	ldr	r1, [pc, #192]	; (801791c <icmp_input+0x204>)
 801785a:	482f      	ldr	r0, [pc, #188]	; (8017918 <icmp_input+0x200>)
 801785c:	f002 fb86 	bl	8019f6c <iprintf>
          goto icmperr;
 8017860:	e04b      	b.n	80178fa <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	685b      	ldr	r3, [r3, #4]
 8017866:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017868:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801786a:	4619      	mov	r1, r3
 801786c:	6878      	ldr	r0, [r7, #4]
 801786e:	f7f8 f98d 	bl	800fb8c <pbuf_add_header>
 8017872:	4603      	mov	r3, r0
 8017874:	2b00      	cmp	r3, #0
 8017876:	d12b      	bne.n	80178d0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	685b      	ldr	r3, [r3, #4]
 801787c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801787e:	69fb      	ldr	r3, [r7, #28]
 8017880:	681a      	ldr	r2, [r3, #0]
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017886:	4b20      	ldr	r3, [pc, #128]	; (8017908 <icmp_input+0x1f0>)
 8017888:	691a      	ldr	r2, [r3, #16]
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801788e:	693b      	ldr	r3, [r7, #16]
 8017890:	2200      	movs	r2, #0
 8017892:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017894:	693b      	ldr	r3, [r7, #16]
 8017896:	2200      	movs	r2, #0
 8017898:	709a      	strb	r2, [r3, #2]
 801789a:	2200      	movs	r2, #0
 801789c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	22ff      	movs	r2, #255	; 0xff
 80178a2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	2200      	movs	r2, #0
 80178a8:	729a      	strb	r2, [r3, #10]
 80178aa:	2200      	movs	r2, #0
 80178ac:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80178ae:	683b      	ldr	r3, [r7, #0]
 80178b0:	9302      	str	r3, [sp, #8]
 80178b2:	2301      	movs	r3, #1
 80178b4:	9301      	str	r3, [sp, #4]
 80178b6:	2300      	movs	r3, #0
 80178b8:	9300      	str	r3, [sp, #0]
 80178ba:	23ff      	movs	r3, #255	; 0xff
 80178bc:	2200      	movs	r2, #0
 80178be:	69f9      	ldr	r1, [r7, #28]
 80178c0:	6878      	ldr	r0, [r7, #4]
 80178c2:	f000 fa75 	bl	8017db0 <ip4_output_if>
 80178c6:	4603      	mov	r3, r0
 80178c8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80178ca:	e001      	b.n	80178d0 <icmp_input+0x1b8>
      break;
 80178cc:	bf00      	nop
 80178ce:	e000      	b.n	80178d2 <icmp_input+0x1ba>
      break;
 80178d0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80178d2:	6878      	ldr	r0, [r7, #4]
 80178d4:	f7f8 f9f0 	bl	800fcb8 <pbuf_free>
  return;
 80178d8:	e013      	b.n	8017902 <icmp_input+0x1ea>
    goto lenerr;
 80178da:	bf00      	nop
 80178dc:	e002      	b.n	80178e4 <icmp_input+0x1cc>
    goto lenerr;
 80178de:	bf00      	nop
 80178e0:	e000      	b.n	80178e4 <icmp_input+0x1cc>
        goto lenerr;
 80178e2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80178e4:	6878      	ldr	r0, [r7, #4]
 80178e6:	f7f8 f9e7 	bl	800fcb8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80178ea:	e00a      	b.n	8017902 <icmp_input+0x1ea>
        goto icmperr;
 80178ec:	bf00      	nop
 80178ee:	e004      	b.n	80178fa <icmp_input+0x1e2>
        goto icmperr;
 80178f0:	bf00      	nop
 80178f2:	e002      	b.n	80178fa <icmp_input+0x1e2>
          goto icmperr;
 80178f4:	bf00      	nop
 80178f6:	e000      	b.n	80178fa <icmp_input+0x1e2>
          goto icmperr;
 80178f8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80178fa:	6878      	ldr	r0, [r7, #4]
 80178fc:	f7f8 f9dc 	bl	800fcb8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017900:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017902:	3728      	adds	r7, #40	; 0x28
 8017904:	46bd      	mov	sp, r7
 8017906:	bd80      	pop	{r7, pc}
 8017908:	20007c2c 	.word	0x20007c2c
 801790c:	20007c40 	.word	0x20007c40
 8017910:	0801ecac 	.word	0x0801ecac
 8017914:	0801ece4 	.word	0x0801ece4
 8017918:	0801ed1c 	.word	0x0801ed1c
 801791c:	0801ed44 	.word	0x0801ed44

08017920 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017920:	b580      	push	{r7, lr}
 8017922:	b082      	sub	sp, #8
 8017924:	af00      	add	r7, sp, #0
 8017926:	6078      	str	r0, [r7, #4]
 8017928:	460b      	mov	r3, r1
 801792a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801792c:	78fb      	ldrb	r3, [r7, #3]
 801792e:	461a      	mov	r2, r3
 8017930:	2103      	movs	r1, #3
 8017932:	6878      	ldr	r0, [r7, #4]
 8017934:	f000 f814 	bl	8017960 <icmp_send_response>
}
 8017938:	bf00      	nop
 801793a:	3708      	adds	r7, #8
 801793c:	46bd      	mov	sp, r7
 801793e:	bd80      	pop	{r7, pc}

08017940 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017940:	b580      	push	{r7, lr}
 8017942:	b082      	sub	sp, #8
 8017944:	af00      	add	r7, sp, #0
 8017946:	6078      	str	r0, [r7, #4]
 8017948:	460b      	mov	r3, r1
 801794a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801794c:	78fb      	ldrb	r3, [r7, #3]
 801794e:	461a      	mov	r2, r3
 8017950:	210b      	movs	r1, #11
 8017952:	6878      	ldr	r0, [r7, #4]
 8017954:	f000 f804 	bl	8017960 <icmp_send_response>
}
 8017958:	bf00      	nop
 801795a:	3708      	adds	r7, #8
 801795c:	46bd      	mov	sp, r7
 801795e:	bd80      	pop	{r7, pc}

08017960 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017960:	b580      	push	{r7, lr}
 8017962:	b08c      	sub	sp, #48	; 0x30
 8017964:	af04      	add	r7, sp, #16
 8017966:	6078      	str	r0, [r7, #4]
 8017968:	460b      	mov	r3, r1
 801796a:	70fb      	strb	r3, [r7, #3]
 801796c:	4613      	mov	r3, r2
 801796e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017970:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017974:	2124      	movs	r1, #36	; 0x24
 8017976:	2022      	movs	r0, #34	; 0x22
 8017978:	f7f7 feba 	bl	800f6f0 <pbuf_alloc>
 801797c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801797e:	69fb      	ldr	r3, [r7, #28]
 8017980:	2b00      	cmp	r3, #0
 8017982:	d04c      	beq.n	8017a1e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017984:	69fb      	ldr	r3, [r7, #28]
 8017986:	895b      	ldrh	r3, [r3, #10]
 8017988:	2b23      	cmp	r3, #35	; 0x23
 801798a:	d806      	bhi.n	801799a <icmp_send_response+0x3a>
 801798c:	4b26      	ldr	r3, [pc, #152]	; (8017a28 <icmp_send_response+0xc8>)
 801798e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017992:	4926      	ldr	r1, [pc, #152]	; (8017a2c <icmp_send_response+0xcc>)
 8017994:	4826      	ldr	r0, [pc, #152]	; (8017a30 <icmp_send_response+0xd0>)
 8017996:	f002 fae9 	bl	8019f6c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	685b      	ldr	r3, [r3, #4]
 801799e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80179a0:	69fb      	ldr	r3, [r7, #28]
 80179a2:	685b      	ldr	r3, [r3, #4]
 80179a4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80179a6:	697b      	ldr	r3, [r7, #20]
 80179a8:	78fa      	ldrb	r2, [r7, #3]
 80179aa:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80179ac:	697b      	ldr	r3, [r7, #20]
 80179ae:	78ba      	ldrb	r2, [r7, #2]
 80179b0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80179b2:	697b      	ldr	r3, [r7, #20]
 80179b4:	2200      	movs	r2, #0
 80179b6:	711a      	strb	r2, [r3, #4]
 80179b8:	2200      	movs	r2, #0
 80179ba:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80179bc:	697b      	ldr	r3, [r7, #20]
 80179be:	2200      	movs	r2, #0
 80179c0:	719a      	strb	r2, [r3, #6]
 80179c2:	2200      	movs	r2, #0
 80179c4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80179c6:	69fb      	ldr	r3, [r7, #28]
 80179c8:	685b      	ldr	r3, [r3, #4]
 80179ca:	f103 0008 	add.w	r0, r3, #8
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	685b      	ldr	r3, [r3, #4]
 80179d2:	221c      	movs	r2, #28
 80179d4:	4619      	mov	r1, r3
 80179d6:	f001 fd9f 	bl	8019518 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80179da:	69bb      	ldr	r3, [r7, #24]
 80179dc:	68db      	ldr	r3, [r3, #12]
 80179de:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80179e0:	f107 030c 	add.w	r3, r7, #12
 80179e4:	4618      	mov	r0, r3
 80179e6:	f000 f825 	bl	8017a34 <ip4_route>
 80179ea:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80179ec:	693b      	ldr	r3, [r7, #16]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d011      	beq.n	8017a16 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80179f2:	697b      	ldr	r3, [r7, #20]
 80179f4:	2200      	movs	r2, #0
 80179f6:	709a      	strb	r2, [r3, #2]
 80179f8:	2200      	movs	r2, #0
 80179fa:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80179fc:	f107 020c 	add.w	r2, r7, #12
 8017a00:	693b      	ldr	r3, [r7, #16]
 8017a02:	9302      	str	r3, [sp, #8]
 8017a04:	2301      	movs	r3, #1
 8017a06:	9301      	str	r3, [sp, #4]
 8017a08:	2300      	movs	r3, #0
 8017a0a:	9300      	str	r3, [sp, #0]
 8017a0c:	23ff      	movs	r3, #255	; 0xff
 8017a0e:	2100      	movs	r1, #0
 8017a10:	69f8      	ldr	r0, [r7, #28]
 8017a12:	f000 f9cd 	bl	8017db0 <ip4_output_if>
  }
  pbuf_free(q);
 8017a16:	69f8      	ldr	r0, [r7, #28]
 8017a18:	f7f8 f94e 	bl	800fcb8 <pbuf_free>
 8017a1c:	e000      	b.n	8017a20 <icmp_send_response+0xc0>
    return;
 8017a1e:	bf00      	nop
}
 8017a20:	3720      	adds	r7, #32
 8017a22:	46bd      	mov	sp, r7
 8017a24:	bd80      	pop	{r7, pc}
 8017a26:	bf00      	nop
 8017a28:	0801ecac 	.word	0x0801ecac
 8017a2c:	0801ed78 	.word	0x0801ed78
 8017a30:	0801ed1c 	.word	0x0801ed1c

08017a34 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017a34:	b480      	push	{r7}
 8017a36:	b085      	sub	sp, #20
 8017a38:	af00      	add	r7, sp, #0
 8017a3a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017a3c:	4b33      	ldr	r3, [pc, #204]	; (8017b0c <ip4_route+0xd8>)
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	60fb      	str	r3, [r7, #12]
 8017a42:	e036      	b.n	8017ab2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017a4a:	f003 0301 	and.w	r3, r3, #1
 8017a4e:	b2db      	uxtb	r3, r3
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d02b      	beq.n	8017aac <ip4_route+0x78>
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017a5a:	089b      	lsrs	r3, r3, #2
 8017a5c:	f003 0301 	and.w	r3, r3, #1
 8017a60:	b2db      	uxtb	r3, r3
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d022      	beq.n	8017aac <ip4_route+0x78>
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	3304      	adds	r3, #4
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d01d      	beq.n	8017aac <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	681a      	ldr	r2, [r3, #0]
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	3304      	adds	r3, #4
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	405a      	eors	r2, r3
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	3308      	adds	r3, #8
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	4013      	ands	r3, r2
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d101      	bne.n	8017a8c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017a88:	68fb      	ldr	r3, [r7, #12]
 8017a8a:	e038      	b.n	8017afe <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017a92:	f003 0302 	and.w	r3, r3, #2
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d108      	bne.n	8017aac <ip4_route+0x78>
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	681a      	ldr	r2, [r3, #0]
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	330c      	adds	r3, #12
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	429a      	cmp	r2, r3
 8017aa6:	d101      	bne.n	8017aac <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	e028      	b.n	8017afe <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	60fb      	str	r3, [r7, #12]
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d1c5      	bne.n	8017a44 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017ab8:	4b15      	ldr	r3, [pc, #84]	; (8017b10 <ip4_route+0xdc>)
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d01a      	beq.n	8017af6 <ip4_route+0xc2>
 8017ac0:	4b13      	ldr	r3, [pc, #76]	; (8017b10 <ip4_route+0xdc>)
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017ac8:	f003 0301 	and.w	r3, r3, #1
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d012      	beq.n	8017af6 <ip4_route+0xc2>
 8017ad0:	4b0f      	ldr	r3, [pc, #60]	; (8017b10 <ip4_route+0xdc>)
 8017ad2:	681b      	ldr	r3, [r3, #0]
 8017ad4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017ad8:	f003 0304 	and.w	r3, r3, #4
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d00a      	beq.n	8017af6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017ae0:	4b0b      	ldr	r3, [pc, #44]	; (8017b10 <ip4_route+0xdc>)
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	3304      	adds	r3, #4
 8017ae6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d004      	beq.n	8017af6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	b2db      	uxtb	r3, r3
 8017af2:	2b7f      	cmp	r3, #127	; 0x7f
 8017af4:	d101      	bne.n	8017afa <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017af6:	2300      	movs	r3, #0
 8017af8:	e001      	b.n	8017afe <ip4_route+0xca>
  }

  return netif_default;
 8017afa:	4b05      	ldr	r3, [pc, #20]	; (8017b10 <ip4_route+0xdc>)
 8017afc:	681b      	ldr	r3, [r3, #0]
}
 8017afe:	4618      	mov	r0, r3
 8017b00:	3714      	adds	r7, #20
 8017b02:	46bd      	mov	sp, r7
 8017b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b08:	4770      	bx	lr
 8017b0a:	bf00      	nop
 8017b0c:	2001a9a0 	.word	0x2001a9a0
 8017b10:	2001a9a4 	.word	0x2001a9a4

08017b14 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017b14:	b580      	push	{r7, lr}
 8017b16:	b082      	sub	sp, #8
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017b22:	f003 0301 	and.w	r3, r3, #1
 8017b26:	b2db      	uxtb	r3, r3
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d016      	beq.n	8017b5a <ip4_input_accept+0x46>
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	3304      	adds	r3, #4
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d011      	beq.n	8017b5a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017b36:	4b0b      	ldr	r3, [pc, #44]	; (8017b64 <ip4_input_accept+0x50>)
 8017b38:	695a      	ldr	r2, [r3, #20]
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	3304      	adds	r3, #4
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	429a      	cmp	r2, r3
 8017b42:	d008      	beq.n	8017b56 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017b44:	4b07      	ldr	r3, [pc, #28]	; (8017b64 <ip4_input_accept+0x50>)
 8017b46:	695b      	ldr	r3, [r3, #20]
 8017b48:	6879      	ldr	r1, [r7, #4]
 8017b4a:	4618      	mov	r0, r3
 8017b4c:	f000 fa08 	bl	8017f60 <ip4_addr_isbroadcast_u32>
 8017b50:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d001      	beq.n	8017b5a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017b56:	2301      	movs	r3, #1
 8017b58:	e000      	b.n	8017b5c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017b5a:	2300      	movs	r3, #0
}
 8017b5c:	4618      	mov	r0, r3
 8017b5e:	3708      	adds	r7, #8
 8017b60:	46bd      	mov	sp, r7
 8017b62:	bd80      	pop	{r7, pc}
 8017b64:	20007c2c 	.word	0x20007c2c

08017b68 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017b68:	b580      	push	{r7, lr}
 8017b6a:	b086      	sub	sp, #24
 8017b6c:	af00      	add	r7, sp, #0
 8017b6e:	6078      	str	r0, [r7, #4]
 8017b70:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	685b      	ldr	r3, [r3, #4]
 8017b76:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017b78:	697b      	ldr	r3, [r7, #20]
 8017b7a:	781b      	ldrb	r3, [r3, #0]
 8017b7c:	091b      	lsrs	r3, r3, #4
 8017b7e:	b2db      	uxtb	r3, r3
 8017b80:	2b04      	cmp	r3, #4
 8017b82:	d004      	beq.n	8017b8e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017b84:	6878      	ldr	r0, [r7, #4]
 8017b86:	f7f8 f897 	bl	800fcb8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	e107      	b.n	8017d9e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017b8e:	697b      	ldr	r3, [r7, #20]
 8017b90:	781b      	ldrb	r3, [r3, #0]
 8017b92:	f003 030f 	and.w	r3, r3, #15
 8017b96:	b2db      	uxtb	r3, r3
 8017b98:	009b      	lsls	r3, r3, #2
 8017b9a:	b2db      	uxtb	r3, r3
 8017b9c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017b9e:	697b      	ldr	r3, [r7, #20]
 8017ba0:	885b      	ldrh	r3, [r3, #2]
 8017ba2:	b29b      	uxth	r3, r3
 8017ba4:	4618      	mov	r0, r3
 8017ba6:	f7f6 fdd4 	bl	800e752 <lwip_htons>
 8017baa:	4603      	mov	r3, r0
 8017bac:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	891b      	ldrh	r3, [r3, #8]
 8017bb2:	89ba      	ldrh	r2, [r7, #12]
 8017bb4:	429a      	cmp	r2, r3
 8017bb6:	d204      	bcs.n	8017bc2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8017bb8:	89bb      	ldrh	r3, [r7, #12]
 8017bba:	4619      	mov	r1, r3
 8017bbc:	6878      	ldr	r0, [r7, #4]
 8017bbe:	f7f7 fef5 	bl	800f9ac <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	895b      	ldrh	r3, [r3, #10]
 8017bc6:	89fa      	ldrh	r2, [r7, #14]
 8017bc8:	429a      	cmp	r2, r3
 8017bca:	d807      	bhi.n	8017bdc <ip4_input+0x74>
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	891b      	ldrh	r3, [r3, #8]
 8017bd0:	89ba      	ldrh	r2, [r7, #12]
 8017bd2:	429a      	cmp	r2, r3
 8017bd4:	d802      	bhi.n	8017bdc <ip4_input+0x74>
 8017bd6:	89fb      	ldrh	r3, [r7, #14]
 8017bd8:	2b13      	cmp	r3, #19
 8017bda:	d804      	bhi.n	8017be6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017bdc:	6878      	ldr	r0, [r7, #4]
 8017bde:	f7f8 f86b 	bl	800fcb8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017be2:	2300      	movs	r3, #0
 8017be4:	e0db      	b.n	8017d9e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017be6:	697b      	ldr	r3, [r7, #20]
 8017be8:	691b      	ldr	r3, [r3, #16]
 8017bea:	4a6f      	ldr	r2, [pc, #444]	; (8017da8 <ip4_input+0x240>)
 8017bec:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017bee:	697b      	ldr	r3, [r7, #20]
 8017bf0:	68db      	ldr	r3, [r3, #12]
 8017bf2:	4a6d      	ldr	r2, [pc, #436]	; (8017da8 <ip4_input+0x240>)
 8017bf4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017bf6:	4b6c      	ldr	r3, [pc, #432]	; (8017da8 <ip4_input+0x240>)
 8017bf8:	695b      	ldr	r3, [r3, #20]
 8017bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017bfe:	2be0      	cmp	r3, #224	; 0xe0
 8017c00:	d112      	bne.n	8017c28 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017c02:	683b      	ldr	r3, [r7, #0]
 8017c04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017c08:	f003 0301 	and.w	r3, r3, #1
 8017c0c:	b2db      	uxtb	r3, r3
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d007      	beq.n	8017c22 <ip4_input+0xba>
 8017c12:	683b      	ldr	r3, [r7, #0]
 8017c14:	3304      	adds	r3, #4
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d002      	beq.n	8017c22 <ip4_input+0xba>
      netif = inp;
 8017c1c:	683b      	ldr	r3, [r7, #0]
 8017c1e:	613b      	str	r3, [r7, #16]
 8017c20:	e02a      	b.n	8017c78 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017c22:	2300      	movs	r3, #0
 8017c24:	613b      	str	r3, [r7, #16]
 8017c26:	e027      	b.n	8017c78 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017c28:	6838      	ldr	r0, [r7, #0]
 8017c2a:	f7ff ff73 	bl	8017b14 <ip4_input_accept>
 8017c2e:	4603      	mov	r3, r0
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d002      	beq.n	8017c3a <ip4_input+0xd2>
      netif = inp;
 8017c34:	683b      	ldr	r3, [r7, #0]
 8017c36:	613b      	str	r3, [r7, #16]
 8017c38:	e01e      	b.n	8017c78 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017c3a:	2300      	movs	r3, #0
 8017c3c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017c3e:	4b5a      	ldr	r3, [pc, #360]	; (8017da8 <ip4_input+0x240>)
 8017c40:	695b      	ldr	r3, [r3, #20]
 8017c42:	b2db      	uxtb	r3, r3
 8017c44:	2b7f      	cmp	r3, #127	; 0x7f
 8017c46:	d017      	beq.n	8017c78 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017c48:	4b58      	ldr	r3, [pc, #352]	; (8017dac <ip4_input+0x244>)
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	613b      	str	r3, [r7, #16]
 8017c4e:	e00e      	b.n	8017c6e <ip4_input+0x106>
          if (netif == inp) {
 8017c50:	693a      	ldr	r2, [r7, #16]
 8017c52:	683b      	ldr	r3, [r7, #0]
 8017c54:	429a      	cmp	r2, r3
 8017c56:	d006      	beq.n	8017c66 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017c58:	6938      	ldr	r0, [r7, #16]
 8017c5a:	f7ff ff5b 	bl	8017b14 <ip4_input_accept>
 8017c5e:	4603      	mov	r3, r0
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d108      	bne.n	8017c76 <ip4_input+0x10e>
 8017c64:	e000      	b.n	8017c68 <ip4_input+0x100>
            continue;
 8017c66:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017c68:	693b      	ldr	r3, [r7, #16]
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	613b      	str	r3, [r7, #16]
 8017c6e:	693b      	ldr	r3, [r7, #16]
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d1ed      	bne.n	8017c50 <ip4_input+0xe8>
 8017c74:	e000      	b.n	8017c78 <ip4_input+0x110>
            break;
 8017c76:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017c78:	4b4b      	ldr	r3, [pc, #300]	; (8017da8 <ip4_input+0x240>)
 8017c7a:	691b      	ldr	r3, [r3, #16]
 8017c7c:	6839      	ldr	r1, [r7, #0]
 8017c7e:	4618      	mov	r0, r3
 8017c80:	f000 f96e 	bl	8017f60 <ip4_addr_isbroadcast_u32>
 8017c84:	4603      	mov	r3, r0
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d105      	bne.n	8017c96 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017c8a:	4b47      	ldr	r3, [pc, #284]	; (8017da8 <ip4_input+0x240>)
 8017c8c:	691b      	ldr	r3, [r3, #16]
 8017c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017c92:	2be0      	cmp	r3, #224	; 0xe0
 8017c94:	d104      	bne.n	8017ca0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017c96:	6878      	ldr	r0, [r7, #4]
 8017c98:	f7f8 f80e 	bl	800fcb8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017c9c:	2300      	movs	r3, #0
 8017c9e:	e07e      	b.n	8017d9e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017ca0:	693b      	ldr	r3, [r7, #16]
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d104      	bne.n	8017cb0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017ca6:	6878      	ldr	r0, [r7, #4]
 8017ca8:	f7f8 f806 	bl	800fcb8 <pbuf_free>
    return ERR_OK;
 8017cac:	2300      	movs	r3, #0
 8017cae:	e076      	b.n	8017d9e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017cb0:	697b      	ldr	r3, [r7, #20]
 8017cb2:	88db      	ldrh	r3, [r3, #6]
 8017cb4:	b29b      	uxth	r3, r3
 8017cb6:	461a      	mov	r2, r3
 8017cb8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017cbc:	4013      	ands	r3, r2
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d00b      	beq.n	8017cda <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017cc2:	6878      	ldr	r0, [r7, #4]
 8017cc4:	f000 fc92 	bl	80185ec <ip4_reass>
 8017cc8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d101      	bne.n	8017cd4 <ip4_input+0x16c>
      return ERR_OK;
 8017cd0:	2300      	movs	r3, #0
 8017cd2:	e064      	b.n	8017d9e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	685b      	ldr	r3, [r3, #4]
 8017cd8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017cda:	4a33      	ldr	r2, [pc, #204]	; (8017da8 <ip4_input+0x240>)
 8017cdc:	693b      	ldr	r3, [r7, #16]
 8017cde:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017ce0:	4a31      	ldr	r2, [pc, #196]	; (8017da8 <ip4_input+0x240>)
 8017ce2:	683b      	ldr	r3, [r7, #0]
 8017ce4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017ce6:	4a30      	ldr	r2, [pc, #192]	; (8017da8 <ip4_input+0x240>)
 8017ce8:	697b      	ldr	r3, [r7, #20]
 8017cea:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017cec:	697b      	ldr	r3, [r7, #20]
 8017cee:	781b      	ldrb	r3, [r3, #0]
 8017cf0:	f003 030f 	and.w	r3, r3, #15
 8017cf4:	b2db      	uxtb	r3, r3
 8017cf6:	009b      	lsls	r3, r3, #2
 8017cf8:	b2db      	uxtb	r3, r3
 8017cfa:	b29a      	uxth	r2, r3
 8017cfc:	4b2a      	ldr	r3, [pc, #168]	; (8017da8 <ip4_input+0x240>)
 8017cfe:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017d00:	89fb      	ldrh	r3, [r7, #14]
 8017d02:	4619      	mov	r1, r3
 8017d04:	6878      	ldr	r0, [r7, #4]
 8017d06:	f7f7 ff51 	bl	800fbac <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017d0a:	697b      	ldr	r3, [r7, #20]
 8017d0c:	7a5b      	ldrb	r3, [r3, #9]
 8017d0e:	2b11      	cmp	r3, #17
 8017d10:	d006      	beq.n	8017d20 <ip4_input+0x1b8>
 8017d12:	2b11      	cmp	r3, #17
 8017d14:	dc13      	bgt.n	8017d3e <ip4_input+0x1d6>
 8017d16:	2b01      	cmp	r3, #1
 8017d18:	d00c      	beq.n	8017d34 <ip4_input+0x1cc>
 8017d1a:	2b06      	cmp	r3, #6
 8017d1c:	d005      	beq.n	8017d2a <ip4_input+0x1c2>
 8017d1e:	e00e      	b.n	8017d3e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017d20:	6839      	ldr	r1, [r7, #0]
 8017d22:	6878      	ldr	r0, [r7, #4]
 8017d24:	f7fe fc68 	bl	80165f8 <udp_input>
        break;
 8017d28:	e026      	b.n	8017d78 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017d2a:	6839      	ldr	r1, [r7, #0]
 8017d2c:	6878      	ldr	r0, [r7, #4]
 8017d2e:	f7fa f88b 	bl	8011e48 <tcp_input>
        break;
 8017d32:	e021      	b.n	8017d78 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017d34:	6839      	ldr	r1, [r7, #0]
 8017d36:	6878      	ldr	r0, [r7, #4]
 8017d38:	f7ff fcee 	bl	8017718 <icmp_input>
        break;
 8017d3c:	e01c      	b.n	8017d78 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017d3e:	4b1a      	ldr	r3, [pc, #104]	; (8017da8 <ip4_input+0x240>)
 8017d40:	695b      	ldr	r3, [r3, #20]
 8017d42:	6939      	ldr	r1, [r7, #16]
 8017d44:	4618      	mov	r0, r3
 8017d46:	f000 f90b 	bl	8017f60 <ip4_addr_isbroadcast_u32>
 8017d4a:	4603      	mov	r3, r0
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d10f      	bne.n	8017d70 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017d50:	4b15      	ldr	r3, [pc, #84]	; (8017da8 <ip4_input+0x240>)
 8017d52:	695b      	ldr	r3, [r3, #20]
 8017d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017d58:	2be0      	cmp	r3, #224	; 0xe0
 8017d5a:	d009      	beq.n	8017d70 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017d5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017d60:	4619      	mov	r1, r3
 8017d62:	6878      	ldr	r0, [r7, #4]
 8017d64:	f7f7 ff95 	bl	800fc92 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017d68:	2102      	movs	r1, #2
 8017d6a:	6878      	ldr	r0, [r7, #4]
 8017d6c:	f7ff fdd8 	bl	8017920 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017d70:	6878      	ldr	r0, [r7, #4]
 8017d72:	f7f7 ffa1 	bl	800fcb8 <pbuf_free>
        break;
 8017d76:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017d78:	4b0b      	ldr	r3, [pc, #44]	; (8017da8 <ip4_input+0x240>)
 8017d7a:	2200      	movs	r2, #0
 8017d7c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017d7e:	4b0a      	ldr	r3, [pc, #40]	; (8017da8 <ip4_input+0x240>)
 8017d80:	2200      	movs	r2, #0
 8017d82:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017d84:	4b08      	ldr	r3, [pc, #32]	; (8017da8 <ip4_input+0x240>)
 8017d86:	2200      	movs	r2, #0
 8017d88:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017d8a:	4b07      	ldr	r3, [pc, #28]	; (8017da8 <ip4_input+0x240>)
 8017d8c:	2200      	movs	r2, #0
 8017d8e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017d90:	4b05      	ldr	r3, [pc, #20]	; (8017da8 <ip4_input+0x240>)
 8017d92:	2200      	movs	r2, #0
 8017d94:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017d96:	4b04      	ldr	r3, [pc, #16]	; (8017da8 <ip4_input+0x240>)
 8017d98:	2200      	movs	r2, #0
 8017d9a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017d9c:	2300      	movs	r3, #0
}
 8017d9e:	4618      	mov	r0, r3
 8017da0:	3718      	adds	r7, #24
 8017da2:	46bd      	mov	sp, r7
 8017da4:	bd80      	pop	{r7, pc}
 8017da6:	bf00      	nop
 8017da8:	20007c2c 	.word	0x20007c2c
 8017dac:	2001a9a0 	.word	0x2001a9a0

08017db0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017db0:	b580      	push	{r7, lr}
 8017db2:	b08a      	sub	sp, #40	; 0x28
 8017db4:	af04      	add	r7, sp, #16
 8017db6:	60f8      	str	r0, [r7, #12]
 8017db8:	60b9      	str	r1, [r7, #8]
 8017dba:	607a      	str	r2, [r7, #4]
 8017dbc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017dbe:	68bb      	ldr	r3, [r7, #8]
 8017dc0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d009      	beq.n	8017ddc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017dc8:	68bb      	ldr	r3, [r7, #8]
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d003      	beq.n	8017dd6 <ip4_output_if+0x26>
 8017dce:	68bb      	ldr	r3, [r7, #8]
 8017dd0:	681b      	ldr	r3, [r3, #0]
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d102      	bne.n	8017ddc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dd8:	3304      	adds	r3, #4
 8017dda:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017ddc:	78fa      	ldrb	r2, [r7, #3]
 8017dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017de0:	9302      	str	r3, [sp, #8]
 8017de2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017de6:	9301      	str	r3, [sp, #4]
 8017de8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017dec:	9300      	str	r3, [sp, #0]
 8017dee:	4613      	mov	r3, r2
 8017df0:	687a      	ldr	r2, [r7, #4]
 8017df2:	6979      	ldr	r1, [r7, #20]
 8017df4:	68f8      	ldr	r0, [r7, #12]
 8017df6:	f000 f805 	bl	8017e04 <ip4_output_if_src>
 8017dfa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017dfc:	4618      	mov	r0, r3
 8017dfe:	3718      	adds	r7, #24
 8017e00:	46bd      	mov	sp, r7
 8017e02:	bd80      	pop	{r7, pc}

08017e04 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017e04:	b580      	push	{r7, lr}
 8017e06:	b088      	sub	sp, #32
 8017e08:	af00      	add	r7, sp, #0
 8017e0a:	60f8      	str	r0, [r7, #12]
 8017e0c:	60b9      	str	r1, [r7, #8]
 8017e0e:	607a      	str	r2, [r7, #4]
 8017e10:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017e12:	68fb      	ldr	r3, [r7, #12]
 8017e14:	7b9b      	ldrb	r3, [r3, #14]
 8017e16:	2b01      	cmp	r3, #1
 8017e18:	d006      	beq.n	8017e28 <ip4_output_if_src+0x24>
 8017e1a:	4b4b      	ldr	r3, [pc, #300]	; (8017f48 <ip4_output_if_src+0x144>)
 8017e1c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017e20:	494a      	ldr	r1, [pc, #296]	; (8017f4c <ip4_output_if_src+0x148>)
 8017e22:	484b      	ldr	r0, [pc, #300]	; (8017f50 <ip4_output_if_src+0x14c>)
 8017e24:	f002 f8a2 	bl	8019f6c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d060      	beq.n	8017ef0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017e2e:	2314      	movs	r3, #20
 8017e30:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017e32:	2114      	movs	r1, #20
 8017e34:	68f8      	ldr	r0, [r7, #12]
 8017e36:	f7f7 fea9 	bl	800fb8c <pbuf_add_header>
 8017e3a:	4603      	mov	r3, r0
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d002      	beq.n	8017e46 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017e40:	f06f 0301 	mvn.w	r3, #1
 8017e44:	e07c      	b.n	8017f40 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	685b      	ldr	r3, [r3, #4]
 8017e4a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	895b      	ldrh	r3, [r3, #10]
 8017e50:	2b13      	cmp	r3, #19
 8017e52:	d806      	bhi.n	8017e62 <ip4_output_if_src+0x5e>
 8017e54:	4b3c      	ldr	r3, [pc, #240]	; (8017f48 <ip4_output_if_src+0x144>)
 8017e56:	f44f 7262 	mov.w	r2, #904	; 0x388
 8017e5a:	493e      	ldr	r1, [pc, #248]	; (8017f54 <ip4_output_if_src+0x150>)
 8017e5c:	483c      	ldr	r0, [pc, #240]	; (8017f50 <ip4_output_if_src+0x14c>)
 8017e5e:	f002 f885 	bl	8019f6c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017e62:	69fb      	ldr	r3, [r7, #28]
 8017e64:	78fa      	ldrb	r2, [r7, #3]
 8017e66:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017e68:	69fb      	ldr	r3, [r7, #28]
 8017e6a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017e6e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	681a      	ldr	r2, [r3, #0]
 8017e74:	69fb      	ldr	r3, [r7, #28]
 8017e76:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017e78:	8b7b      	ldrh	r3, [r7, #26]
 8017e7a:	089b      	lsrs	r3, r3, #2
 8017e7c:	b29b      	uxth	r3, r3
 8017e7e:	b2db      	uxtb	r3, r3
 8017e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e84:	b2da      	uxtb	r2, r3
 8017e86:	69fb      	ldr	r3, [r7, #28]
 8017e88:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017e8a:	69fb      	ldr	r3, [r7, #28]
 8017e8c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017e90:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	891b      	ldrh	r3, [r3, #8]
 8017e96:	4618      	mov	r0, r3
 8017e98:	f7f6 fc5b 	bl	800e752 <lwip_htons>
 8017e9c:	4603      	mov	r3, r0
 8017e9e:	461a      	mov	r2, r3
 8017ea0:	69fb      	ldr	r3, [r7, #28]
 8017ea2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017ea4:	69fb      	ldr	r3, [r7, #28]
 8017ea6:	2200      	movs	r2, #0
 8017ea8:	719a      	strb	r2, [r3, #6]
 8017eaa:	2200      	movs	r2, #0
 8017eac:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017eae:	4b2a      	ldr	r3, [pc, #168]	; (8017f58 <ip4_output_if_src+0x154>)
 8017eb0:	881b      	ldrh	r3, [r3, #0]
 8017eb2:	4618      	mov	r0, r3
 8017eb4:	f7f6 fc4d 	bl	800e752 <lwip_htons>
 8017eb8:	4603      	mov	r3, r0
 8017eba:	461a      	mov	r2, r3
 8017ebc:	69fb      	ldr	r3, [r7, #28]
 8017ebe:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017ec0:	4b25      	ldr	r3, [pc, #148]	; (8017f58 <ip4_output_if_src+0x154>)
 8017ec2:	881b      	ldrh	r3, [r3, #0]
 8017ec4:	3301      	adds	r3, #1
 8017ec6:	b29a      	uxth	r2, r3
 8017ec8:	4b23      	ldr	r3, [pc, #140]	; (8017f58 <ip4_output_if_src+0x154>)
 8017eca:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017ecc:	68bb      	ldr	r3, [r7, #8]
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d104      	bne.n	8017edc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017ed2:	4b22      	ldr	r3, [pc, #136]	; (8017f5c <ip4_output_if_src+0x158>)
 8017ed4:	681a      	ldr	r2, [r3, #0]
 8017ed6:	69fb      	ldr	r3, [r7, #28]
 8017ed8:	60da      	str	r2, [r3, #12]
 8017eda:	e003      	b.n	8017ee4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017edc:	68bb      	ldr	r3, [r7, #8]
 8017ede:	681a      	ldr	r2, [r3, #0]
 8017ee0:	69fb      	ldr	r3, [r7, #28]
 8017ee2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017ee4:	69fb      	ldr	r3, [r7, #28]
 8017ee6:	2200      	movs	r2, #0
 8017ee8:	729a      	strb	r2, [r3, #10]
 8017eea:	2200      	movs	r2, #0
 8017eec:	72da      	strb	r2, [r3, #11]
 8017eee:	e00f      	b.n	8017f10 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	895b      	ldrh	r3, [r3, #10]
 8017ef4:	2b13      	cmp	r3, #19
 8017ef6:	d802      	bhi.n	8017efe <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017ef8:	f06f 0301 	mvn.w	r3, #1
 8017efc:	e020      	b.n	8017f40 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	685b      	ldr	r3, [r3, #4]
 8017f02:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017f04:	69fb      	ldr	r3, [r7, #28]
 8017f06:	691b      	ldr	r3, [r3, #16]
 8017f08:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017f0a:	f107 0314 	add.w	r3, r7, #20
 8017f0e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d00c      	beq.n	8017f32 <ip4_output_if_src+0x12e>
 8017f18:	68fb      	ldr	r3, [r7, #12]
 8017f1a:	891a      	ldrh	r2, [r3, #8]
 8017f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f1e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017f20:	429a      	cmp	r2, r3
 8017f22:	d906      	bls.n	8017f32 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017f24:	687a      	ldr	r2, [r7, #4]
 8017f26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017f28:	68f8      	ldr	r0, [r7, #12]
 8017f2a:	f000 fd4d 	bl	80189c8 <ip4_frag>
 8017f2e:	4603      	mov	r3, r0
 8017f30:	e006      	b.n	8017f40 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f34:	695b      	ldr	r3, [r3, #20]
 8017f36:	687a      	ldr	r2, [r7, #4]
 8017f38:	68f9      	ldr	r1, [r7, #12]
 8017f3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f3c:	4798      	blx	r3
 8017f3e:	4603      	mov	r3, r0
}
 8017f40:	4618      	mov	r0, r3
 8017f42:	3720      	adds	r7, #32
 8017f44:	46bd      	mov	sp, r7
 8017f46:	bd80      	pop	{r7, pc}
 8017f48:	0801eda4 	.word	0x0801eda4
 8017f4c:	0801edd8 	.word	0x0801edd8
 8017f50:	0801ede4 	.word	0x0801ede4
 8017f54:	0801ee0c 	.word	0x0801ee0c
 8017f58:	200008ce 	.word	0x200008ce
 8017f5c:	0801f370 	.word	0x0801f370

08017f60 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017f60:	b480      	push	{r7}
 8017f62:	b085      	sub	sp, #20
 8017f64:	af00      	add	r7, sp, #0
 8017f66:	6078      	str	r0, [r7, #4]
 8017f68:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f74:	d002      	beq.n	8017f7c <ip4_addr_isbroadcast_u32+0x1c>
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d101      	bne.n	8017f80 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017f7c:	2301      	movs	r3, #1
 8017f7e:	e02a      	b.n	8017fd6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017f80:	683b      	ldr	r3, [r7, #0]
 8017f82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017f86:	f003 0302 	and.w	r3, r3, #2
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d101      	bne.n	8017f92 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017f8e:	2300      	movs	r3, #0
 8017f90:	e021      	b.n	8017fd6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017f92:	683b      	ldr	r3, [r7, #0]
 8017f94:	3304      	adds	r3, #4
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	687a      	ldr	r2, [r7, #4]
 8017f9a:	429a      	cmp	r2, r3
 8017f9c:	d101      	bne.n	8017fa2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017f9e:	2300      	movs	r3, #0
 8017fa0:	e019      	b.n	8017fd6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017fa2:	68fa      	ldr	r2, [r7, #12]
 8017fa4:	683b      	ldr	r3, [r7, #0]
 8017fa6:	3304      	adds	r3, #4
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	405a      	eors	r2, r3
 8017fac:	683b      	ldr	r3, [r7, #0]
 8017fae:	3308      	adds	r3, #8
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	4013      	ands	r3, r2
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d10d      	bne.n	8017fd4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017fb8:	683b      	ldr	r3, [r7, #0]
 8017fba:	3308      	adds	r3, #8
 8017fbc:	681b      	ldr	r3, [r3, #0]
 8017fbe:	43da      	mvns	r2, r3
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017fc4:	683b      	ldr	r3, [r7, #0]
 8017fc6:	3308      	adds	r3, #8
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017fcc:	429a      	cmp	r2, r3
 8017fce:	d101      	bne.n	8017fd4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017fd0:	2301      	movs	r3, #1
 8017fd2:	e000      	b.n	8017fd6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017fd4:	2300      	movs	r3, #0
  }
}
 8017fd6:	4618      	mov	r0, r3
 8017fd8:	3714      	adds	r7, #20
 8017fda:	46bd      	mov	sp, r7
 8017fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fe0:	4770      	bx	lr
	...

08017fe4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017fe4:	b580      	push	{r7, lr}
 8017fe6:	b084      	sub	sp, #16
 8017fe8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017fea:	2300      	movs	r3, #0
 8017fec:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017fee:	4b12      	ldr	r3, [pc, #72]	; (8018038 <ip_reass_tmr+0x54>)
 8017ff0:	681b      	ldr	r3, [r3, #0]
 8017ff2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017ff4:	e018      	b.n	8018028 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017ff6:	68fb      	ldr	r3, [r7, #12]
 8017ff8:	7fdb      	ldrb	r3, [r3, #31]
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d00b      	beq.n	8018016 <ip_reass_tmr+0x32>
      r->timer--;
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	7fdb      	ldrb	r3, [r3, #31]
 8018002:	3b01      	subs	r3, #1
 8018004:	b2da      	uxtb	r2, r3
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	681b      	ldr	r3, [r3, #0]
 8018012:	60fb      	str	r3, [r7, #12]
 8018014:	e008      	b.n	8018028 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018020:	68b9      	ldr	r1, [r7, #8]
 8018022:	6878      	ldr	r0, [r7, #4]
 8018024:	f000 f80a 	bl	801803c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	2b00      	cmp	r3, #0
 801802c:	d1e3      	bne.n	8017ff6 <ip_reass_tmr+0x12>
    }
  }
}
 801802e:	bf00      	nop
 8018030:	bf00      	nop
 8018032:	3710      	adds	r7, #16
 8018034:	46bd      	mov	sp, r7
 8018036:	bd80      	pop	{r7, pc}
 8018038:	200008d0 	.word	0x200008d0

0801803c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801803c:	b580      	push	{r7, lr}
 801803e:	b088      	sub	sp, #32
 8018040:	af00      	add	r7, sp, #0
 8018042:	6078      	str	r0, [r7, #4]
 8018044:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018046:	2300      	movs	r3, #0
 8018048:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801804a:	683a      	ldr	r2, [r7, #0]
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	429a      	cmp	r2, r3
 8018050:	d105      	bne.n	801805e <ip_reass_free_complete_datagram+0x22>
 8018052:	4b45      	ldr	r3, [pc, #276]	; (8018168 <ip_reass_free_complete_datagram+0x12c>)
 8018054:	22ab      	movs	r2, #171	; 0xab
 8018056:	4945      	ldr	r1, [pc, #276]	; (801816c <ip_reass_free_complete_datagram+0x130>)
 8018058:	4845      	ldr	r0, [pc, #276]	; (8018170 <ip_reass_free_complete_datagram+0x134>)
 801805a:	f001 ff87 	bl	8019f6c <iprintf>
  if (prev != NULL) {
 801805e:	683b      	ldr	r3, [r7, #0]
 8018060:	2b00      	cmp	r3, #0
 8018062:	d00a      	beq.n	801807a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018064:	683b      	ldr	r3, [r7, #0]
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	687a      	ldr	r2, [r7, #4]
 801806a:	429a      	cmp	r2, r3
 801806c:	d005      	beq.n	801807a <ip_reass_free_complete_datagram+0x3e>
 801806e:	4b3e      	ldr	r3, [pc, #248]	; (8018168 <ip_reass_free_complete_datagram+0x12c>)
 8018070:	22ad      	movs	r2, #173	; 0xad
 8018072:	4940      	ldr	r1, [pc, #256]	; (8018174 <ip_reass_free_complete_datagram+0x138>)
 8018074:	483e      	ldr	r0, [pc, #248]	; (8018170 <ip_reass_free_complete_datagram+0x134>)
 8018076:	f001 ff79 	bl	8019f6c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	685b      	ldr	r3, [r3, #4]
 801807e:	685b      	ldr	r3, [r3, #4]
 8018080:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018082:	697b      	ldr	r3, [r7, #20]
 8018084:	889b      	ldrh	r3, [r3, #4]
 8018086:	b29b      	uxth	r3, r3
 8018088:	2b00      	cmp	r3, #0
 801808a:	d12a      	bne.n	80180e2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	685b      	ldr	r3, [r3, #4]
 8018090:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8018092:	697b      	ldr	r3, [r7, #20]
 8018094:	681a      	ldr	r2, [r3, #0]
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801809a:	69bb      	ldr	r3, [r7, #24]
 801809c:	6858      	ldr	r0, [r3, #4]
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	3308      	adds	r3, #8
 80180a2:	2214      	movs	r2, #20
 80180a4:	4619      	mov	r1, r3
 80180a6:	f001 fa37 	bl	8019518 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80180aa:	2101      	movs	r1, #1
 80180ac:	69b8      	ldr	r0, [r7, #24]
 80180ae:	f7ff fc47 	bl	8017940 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80180b2:	69b8      	ldr	r0, [r7, #24]
 80180b4:	f7f7 fe88 	bl	800fdc8 <pbuf_clen>
 80180b8:	4603      	mov	r3, r0
 80180ba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80180bc:	8bfa      	ldrh	r2, [r7, #30]
 80180be:	8a7b      	ldrh	r3, [r7, #18]
 80180c0:	4413      	add	r3, r2
 80180c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80180c6:	db05      	blt.n	80180d4 <ip_reass_free_complete_datagram+0x98>
 80180c8:	4b27      	ldr	r3, [pc, #156]	; (8018168 <ip_reass_free_complete_datagram+0x12c>)
 80180ca:	22bc      	movs	r2, #188	; 0xbc
 80180cc:	492a      	ldr	r1, [pc, #168]	; (8018178 <ip_reass_free_complete_datagram+0x13c>)
 80180ce:	4828      	ldr	r0, [pc, #160]	; (8018170 <ip_reass_free_complete_datagram+0x134>)
 80180d0:	f001 ff4c 	bl	8019f6c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80180d4:	8bfa      	ldrh	r2, [r7, #30]
 80180d6:	8a7b      	ldrh	r3, [r7, #18]
 80180d8:	4413      	add	r3, r2
 80180da:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80180dc:	69b8      	ldr	r0, [r7, #24]
 80180de:	f7f7 fdeb 	bl	800fcb8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	685b      	ldr	r3, [r3, #4]
 80180e6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80180e8:	e01f      	b.n	801812a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80180ea:	69bb      	ldr	r3, [r7, #24]
 80180ec:	685b      	ldr	r3, [r3, #4]
 80180ee:	617b      	str	r3, [r7, #20]
    pcur = p;
 80180f0:	69bb      	ldr	r3, [r7, #24]
 80180f2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80180f4:	697b      	ldr	r3, [r7, #20]
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80180fa:	68f8      	ldr	r0, [r7, #12]
 80180fc:	f7f7 fe64 	bl	800fdc8 <pbuf_clen>
 8018100:	4603      	mov	r3, r0
 8018102:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018104:	8bfa      	ldrh	r2, [r7, #30]
 8018106:	8a7b      	ldrh	r3, [r7, #18]
 8018108:	4413      	add	r3, r2
 801810a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801810e:	db05      	blt.n	801811c <ip_reass_free_complete_datagram+0xe0>
 8018110:	4b15      	ldr	r3, [pc, #84]	; (8018168 <ip_reass_free_complete_datagram+0x12c>)
 8018112:	22cc      	movs	r2, #204	; 0xcc
 8018114:	4918      	ldr	r1, [pc, #96]	; (8018178 <ip_reass_free_complete_datagram+0x13c>)
 8018116:	4816      	ldr	r0, [pc, #88]	; (8018170 <ip_reass_free_complete_datagram+0x134>)
 8018118:	f001 ff28 	bl	8019f6c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801811c:	8bfa      	ldrh	r2, [r7, #30]
 801811e:	8a7b      	ldrh	r3, [r7, #18]
 8018120:	4413      	add	r3, r2
 8018122:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018124:	68f8      	ldr	r0, [r7, #12]
 8018126:	f7f7 fdc7 	bl	800fcb8 <pbuf_free>
  while (p != NULL) {
 801812a:	69bb      	ldr	r3, [r7, #24]
 801812c:	2b00      	cmp	r3, #0
 801812e:	d1dc      	bne.n	80180ea <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018130:	6839      	ldr	r1, [r7, #0]
 8018132:	6878      	ldr	r0, [r7, #4]
 8018134:	f000 f8c2 	bl	80182bc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018138:	4b10      	ldr	r3, [pc, #64]	; (801817c <ip_reass_free_complete_datagram+0x140>)
 801813a:	881b      	ldrh	r3, [r3, #0]
 801813c:	8bfa      	ldrh	r2, [r7, #30]
 801813e:	429a      	cmp	r2, r3
 8018140:	d905      	bls.n	801814e <ip_reass_free_complete_datagram+0x112>
 8018142:	4b09      	ldr	r3, [pc, #36]	; (8018168 <ip_reass_free_complete_datagram+0x12c>)
 8018144:	22d2      	movs	r2, #210	; 0xd2
 8018146:	490e      	ldr	r1, [pc, #56]	; (8018180 <ip_reass_free_complete_datagram+0x144>)
 8018148:	4809      	ldr	r0, [pc, #36]	; (8018170 <ip_reass_free_complete_datagram+0x134>)
 801814a:	f001 ff0f 	bl	8019f6c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801814e:	4b0b      	ldr	r3, [pc, #44]	; (801817c <ip_reass_free_complete_datagram+0x140>)
 8018150:	881a      	ldrh	r2, [r3, #0]
 8018152:	8bfb      	ldrh	r3, [r7, #30]
 8018154:	1ad3      	subs	r3, r2, r3
 8018156:	b29a      	uxth	r2, r3
 8018158:	4b08      	ldr	r3, [pc, #32]	; (801817c <ip_reass_free_complete_datagram+0x140>)
 801815a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801815c:	8bfb      	ldrh	r3, [r7, #30]
}
 801815e:	4618      	mov	r0, r3
 8018160:	3720      	adds	r7, #32
 8018162:	46bd      	mov	sp, r7
 8018164:	bd80      	pop	{r7, pc}
 8018166:	bf00      	nop
 8018168:	0801ee3c 	.word	0x0801ee3c
 801816c:	0801ee78 	.word	0x0801ee78
 8018170:	0801ee84 	.word	0x0801ee84
 8018174:	0801eeac 	.word	0x0801eeac
 8018178:	0801eec0 	.word	0x0801eec0
 801817c:	200008d4 	.word	0x200008d4
 8018180:	0801eee0 	.word	0x0801eee0

08018184 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018184:	b580      	push	{r7, lr}
 8018186:	b08a      	sub	sp, #40	; 0x28
 8018188:	af00      	add	r7, sp, #0
 801818a:	6078      	str	r0, [r7, #4]
 801818c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801818e:	2300      	movs	r3, #0
 8018190:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018192:	2300      	movs	r3, #0
 8018194:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018196:	2300      	movs	r3, #0
 8018198:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801819a:	2300      	movs	r3, #0
 801819c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801819e:	2300      	movs	r3, #0
 80181a0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80181a2:	4b28      	ldr	r3, [pc, #160]	; (8018244 <ip_reass_remove_oldest_datagram+0xc0>)
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80181a8:	e030      	b.n	801820c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80181aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181ac:	695a      	ldr	r2, [r3, #20]
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	68db      	ldr	r3, [r3, #12]
 80181b2:	429a      	cmp	r2, r3
 80181b4:	d10c      	bne.n	80181d0 <ip_reass_remove_oldest_datagram+0x4c>
 80181b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181b8:	699a      	ldr	r2, [r3, #24]
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	691b      	ldr	r3, [r3, #16]
 80181be:	429a      	cmp	r2, r3
 80181c0:	d106      	bne.n	80181d0 <ip_reass_remove_oldest_datagram+0x4c>
 80181c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181c4:	899a      	ldrh	r2, [r3, #12]
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	889b      	ldrh	r3, [r3, #4]
 80181ca:	b29b      	uxth	r3, r3
 80181cc:	429a      	cmp	r2, r3
 80181ce:	d014      	beq.n	80181fa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80181d0:	693b      	ldr	r3, [r7, #16]
 80181d2:	3301      	adds	r3, #1
 80181d4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80181d6:	6a3b      	ldr	r3, [r7, #32]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d104      	bne.n	80181e6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80181dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181de:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80181e0:	69fb      	ldr	r3, [r7, #28]
 80181e2:	61bb      	str	r3, [r7, #24]
 80181e4:	e009      	b.n	80181fa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80181e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181e8:	7fda      	ldrb	r2, [r3, #31]
 80181ea:	6a3b      	ldr	r3, [r7, #32]
 80181ec:	7fdb      	ldrb	r3, [r3, #31]
 80181ee:	429a      	cmp	r2, r3
 80181f0:	d803      	bhi.n	80181fa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80181f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181f4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80181f6:	69fb      	ldr	r3, [r7, #28]
 80181f8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80181fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	2b00      	cmp	r3, #0
 8018200:	d001      	beq.n	8018206 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8018202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018204:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8018206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801820c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801820e:	2b00      	cmp	r3, #0
 8018210:	d1cb      	bne.n	80181aa <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8018212:	6a3b      	ldr	r3, [r7, #32]
 8018214:	2b00      	cmp	r3, #0
 8018216:	d008      	beq.n	801822a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018218:	69b9      	ldr	r1, [r7, #24]
 801821a:	6a38      	ldr	r0, [r7, #32]
 801821c:	f7ff ff0e 	bl	801803c <ip_reass_free_complete_datagram>
 8018220:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8018222:	697a      	ldr	r2, [r7, #20]
 8018224:	68fb      	ldr	r3, [r7, #12]
 8018226:	4413      	add	r3, r2
 8018228:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801822a:	697a      	ldr	r2, [r7, #20]
 801822c:	683b      	ldr	r3, [r7, #0]
 801822e:	429a      	cmp	r2, r3
 8018230:	da02      	bge.n	8018238 <ip_reass_remove_oldest_datagram+0xb4>
 8018232:	693b      	ldr	r3, [r7, #16]
 8018234:	2b01      	cmp	r3, #1
 8018236:	dcac      	bgt.n	8018192 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018238:	697b      	ldr	r3, [r7, #20]
}
 801823a:	4618      	mov	r0, r3
 801823c:	3728      	adds	r7, #40	; 0x28
 801823e:	46bd      	mov	sp, r7
 8018240:	bd80      	pop	{r7, pc}
 8018242:	bf00      	nop
 8018244:	200008d0 	.word	0x200008d0

08018248 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018248:	b580      	push	{r7, lr}
 801824a:	b084      	sub	sp, #16
 801824c:	af00      	add	r7, sp, #0
 801824e:	6078      	str	r0, [r7, #4]
 8018250:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018252:	2004      	movs	r0, #4
 8018254:	f7f6 fed2 	bl	800effc <memp_malloc>
 8018258:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	2b00      	cmp	r3, #0
 801825e:	d110      	bne.n	8018282 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018260:	6839      	ldr	r1, [r7, #0]
 8018262:	6878      	ldr	r0, [r7, #4]
 8018264:	f7ff ff8e 	bl	8018184 <ip_reass_remove_oldest_datagram>
 8018268:	4602      	mov	r2, r0
 801826a:	683b      	ldr	r3, [r7, #0]
 801826c:	4293      	cmp	r3, r2
 801826e:	dc03      	bgt.n	8018278 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018270:	2004      	movs	r0, #4
 8018272:	f7f6 fec3 	bl	800effc <memp_malloc>
 8018276:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	2b00      	cmp	r3, #0
 801827c:	d101      	bne.n	8018282 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801827e:	2300      	movs	r3, #0
 8018280:	e016      	b.n	80182b0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018282:	2220      	movs	r2, #32
 8018284:	2100      	movs	r1, #0
 8018286:	68f8      	ldr	r0, [r7, #12]
 8018288:	f001 f954 	bl	8019534 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801828c:	68fb      	ldr	r3, [r7, #12]
 801828e:	220f      	movs	r2, #15
 8018290:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018292:	4b09      	ldr	r3, [pc, #36]	; (80182b8 <ip_reass_enqueue_new_datagram+0x70>)
 8018294:	681a      	ldr	r2, [r3, #0]
 8018296:	68fb      	ldr	r3, [r7, #12]
 8018298:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801829a:	4a07      	ldr	r2, [pc, #28]	; (80182b8 <ip_reass_enqueue_new_datagram+0x70>)
 801829c:	68fb      	ldr	r3, [r7, #12]
 801829e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	3308      	adds	r3, #8
 80182a4:	2214      	movs	r2, #20
 80182a6:	6879      	ldr	r1, [r7, #4]
 80182a8:	4618      	mov	r0, r3
 80182aa:	f001 f935 	bl	8019518 <memcpy>
  return ipr;
 80182ae:	68fb      	ldr	r3, [r7, #12]
}
 80182b0:	4618      	mov	r0, r3
 80182b2:	3710      	adds	r7, #16
 80182b4:	46bd      	mov	sp, r7
 80182b6:	bd80      	pop	{r7, pc}
 80182b8:	200008d0 	.word	0x200008d0

080182bc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80182bc:	b580      	push	{r7, lr}
 80182be:	b082      	sub	sp, #8
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	6078      	str	r0, [r7, #4]
 80182c4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80182c6:	4b10      	ldr	r3, [pc, #64]	; (8018308 <ip_reass_dequeue_datagram+0x4c>)
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	687a      	ldr	r2, [r7, #4]
 80182cc:	429a      	cmp	r2, r3
 80182ce:	d104      	bne.n	80182da <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	4a0c      	ldr	r2, [pc, #48]	; (8018308 <ip_reass_dequeue_datagram+0x4c>)
 80182d6:	6013      	str	r3, [r2, #0]
 80182d8:	e00d      	b.n	80182f6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80182da:	683b      	ldr	r3, [r7, #0]
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d106      	bne.n	80182ee <ip_reass_dequeue_datagram+0x32>
 80182e0:	4b0a      	ldr	r3, [pc, #40]	; (801830c <ip_reass_dequeue_datagram+0x50>)
 80182e2:	f240 1245 	movw	r2, #325	; 0x145
 80182e6:	490a      	ldr	r1, [pc, #40]	; (8018310 <ip_reass_dequeue_datagram+0x54>)
 80182e8:	480a      	ldr	r0, [pc, #40]	; (8018314 <ip_reass_dequeue_datagram+0x58>)
 80182ea:	f001 fe3f 	bl	8019f6c <iprintf>
    prev->next = ipr->next;
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	681a      	ldr	r2, [r3, #0]
 80182f2:	683b      	ldr	r3, [r7, #0]
 80182f4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80182f6:	6879      	ldr	r1, [r7, #4]
 80182f8:	2004      	movs	r0, #4
 80182fa:	f7f6 fecb 	bl	800f094 <memp_free>
}
 80182fe:	bf00      	nop
 8018300:	3708      	adds	r7, #8
 8018302:	46bd      	mov	sp, r7
 8018304:	bd80      	pop	{r7, pc}
 8018306:	bf00      	nop
 8018308:	200008d0 	.word	0x200008d0
 801830c:	0801ee3c 	.word	0x0801ee3c
 8018310:	0801ef04 	.word	0x0801ef04
 8018314:	0801ee84 	.word	0x0801ee84

08018318 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018318:	b580      	push	{r7, lr}
 801831a:	b08c      	sub	sp, #48	; 0x30
 801831c:	af00      	add	r7, sp, #0
 801831e:	60f8      	str	r0, [r7, #12]
 8018320:	60b9      	str	r1, [r7, #8]
 8018322:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018324:	2300      	movs	r3, #0
 8018326:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018328:	2301      	movs	r3, #1
 801832a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801832c:	68bb      	ldr	r3, [r7, #8]
 801832e:	685b      	ldr	r3, [r3, #4]
 8018330:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018332:	69fb      	ldr	r3, [r7, #28]
 8018334:	885b      	ldrh	r3, [r3, #2]
 8018336:	b29b      	uxth	r3, r3
 8018338:	4618      	mov	r0, r3
 801833a:	f7f6 fa0a 	bl	800e752 <lwip_htons>
 801833e:	4603      	mov	r3, r0
 8018340:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8018342:	69fb      	ldr	r3, [r7, #28]
 8018344:	781b      	ldrb	r3, [r3, #0]
 8018346:	f003 030f 	and.w	r3, r3, #15
 801834a:	b2db      	uxtb	r3, r3
 801834c:	009b      	lsls	r3, r3, #2
 801834e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018350:	7e7b      	ldrb	r3, [r7, #25]
 8018352:	b29b      	uxth	r3, r3
 8018354:	8b7a      	ldrh	r2, [r7, #26]
 8018356:	429a      	cmp	r2, r3
 8018358:	d202      	bcs.n	8018360 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801835a:	f04f 33ff 	mov.w	r3, #4294967295
 801835e:	e135      	b.n	80185cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018360:	7e7b      	ldrb	r3, [r7, #25]
 8018362:	b29b      	uxth	r3, r3
 8018364:	8b7a      	ldrh	r2, [r7, #26]
 8018366:	1ad3      	subs	r3, r2, r3
 8018368:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801836a:	69fb      	ldr	r3, [r7, #28]
 801836c:	88db      	ldrh	r3, [r3, #6]
 801836e:	b29b      	uxth	r3, r3
 8018370:	4618      	mov	r0, r3
 8018372:	f7f6 f9ee 	bl	800e752 <lwip_htons>
 8018376:	4603      	mov	r3, r0
 8018378:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801837c:	b29b      	uxth	r3, r3
 801837e:	00db      	lsls	r3, r3, #3
 8018380:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8018382:	68bb      	ldr	r3, [r7, #8]
 8018384:	685b      	ldr	r3, [r3, #4]
 8018386:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801838a:	2200      	movs	r2, #0
 801838c:	701a      	strb	r2, [r3, #0]
 801838e:	2200      	movs	r2, #0
 8018390:	705a      	strb	r2, [r3, #1]
 8018392:	2200      	movs	r2, #0
 8018394:	709a      	strb	r2, [r3, #2]
 8018396:	2200      	movs	r2, #0
 8018398:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801839a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801839c:	8afa      	ldrh	r2, [r7, #22]
 801839e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80183a0:	8afa      	ldrh	r2, [r7, #22]
 80183a2:	8b7b      	ldrh	r3, [r7, #26]
 80183a4:	4413      	add	r3, r2
 80183a6:	b29a      	uxth	r2, r3
 80183a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183aa:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80183ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183ae:	88db      	ldrh	r3, [r3, #6]
 80183b0:	b29b      	uxth	r3, r3
 80183b2:	8afa      	ldrh	r2, [r7, #22]
 80183b4:	429a      	cmp	r2, r3
 80183b6:	d902      	bls.n	80183be <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80183b8:	f04f 33ff 	mov.w	r3, #4294967295
 80183bc:	e106      	b.n	80185cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	685b      	ldr	r3, [r3, #4]
 80183c2:	627b      	str	r3, [r7, #36]	; 0x24
 80183c4:	e068      	b.n	8018498 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80183c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183c8:	685b      	ldr	r3, [r3, #4]
 80183ca:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80183cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183ce:	889b      	ldrh	r3, [r3, #4]
 80183d0:	b29a      	uxth	r2, r3
 80183d2:	693b      	ldr	r3, [r7, #16]
 80183d4:	889b      	ldrh	r3, [r3, #4]
 80183d6:	b29b      	uxth	r3, r3
 80183d8:	429a      	cmp	r2, r3
 80183da:	d235      	bcs.n	8018448 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80183dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80183e0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80183e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d020      	beq.n	801842a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80183e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183ea:	889b      	ldrh	r3, [r3, #4]
 80183ec:	b29a      	uxth	r2, r3
 80183ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183f0:	88db      	ldrh	r3, [r3, #6]
 80183f2:	b29b      	uxth	r3, r3
 80183f4:	429a      	cmp	r2, r3
 80183f6:	d307      	bcc.n	8018408 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80183f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183fa:	88db      	ldrh	r3, [r3, #6]
 80183fc:	b29a      	uxth	r2, r3
 80183fe:	693b      	ldr	r3, [r7, #16]
 8018400:	889b      	ldrh	r3, [r3, #4]
 8018402:	b29b      	uxth	r3, r3
 8018404:	429a      	cmp	r2, r3
 8018406:	d902      	bls.n	801840e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018408:	f04f 33ff 	mov.w	r3, #4294967295
 801840c:	e0de      	b.n	80185cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801840e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018410:	68ba      	ldr	r2, [r7, #8]
 8018412:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018416:	88db      	ldrh	r3, [r3, #6]
 8018418:	b29a      	uxth	r2, r3
 801841a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801841c:	889b      	ldrh	r3, [r3, #4]
 801841e:	b29b      	uxth	r3, r3
 8018420:	429a      	cmp	r2, r3
 8018422:	d03d      	beq.n	80184a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018424:	2300      	movs	r3, #0
 8018426:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018428:	e03a      	b.n	80184a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801842a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801842c:	88db      	ldrh	r3, [r3, #6]
 801842e:	b29a      	uxth	r2, r3
 8018430:	693b      	ldr	r3, [r7, #16]
 8018432:	889b      	ldrh	r3, [r3, #4]
 8018434:	b29b      	uxth	r3, r3
 8018436:	429a      	cmp	r2, r3
 8018438:	d902      	bls.n	8018440 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801843a:	f04f 33ff 	mov.w	r3, #4294967295
 801843e:	e0c5      	b.n	80185cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	68ba      	ldr	r2, [r7, #8]
 8018444:	605a      	str	r2, [r3, #4]
      break;
 8018446:	e02b      	b.n	80184a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801844a:	889b      	ldrh	r3, [r3, #4]
 801844c:	b29a      	uxth	r2, r3
 801844e:	693b      	ldr	r3, [r7, #16]
 8018450:	889b      	ldrh	r3, [r3, #4]
 8018452:	b29b      	uxth	r3, r3
 8018454:	429a      	cmp	r2, r3
 8018456:	d102      	bne.n	801845e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018458:	f04f 33ff 	mov.w	r3, #4294967295
 801845c:	e0b6      	b.n	80185cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801845e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018460:	889b      	ldrh	r3, [r3, #4]
 8018462:	b29a      	uxth	r2, r3
 8018464:	693b      	ldr	r3, [r7, #16]
 8018466:	88db      	ldrh	r3, [r3, #6]
 8018468:	b29b      	uxth	r3, r3
 801846a:	429a      	cmp	r2, r3
 801846c:	d202      	bcs.n	8018474 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801846e:	f04f 33ff 	mov.w	r3, #4294967295
 8018472:	e0ab      	b.n	80185cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018476:	2b00      	cmp	r3, #0
 8018478:	d009      	beq.n	801848e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801847a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801847c:	88db      	ldrh	r3, [r3, #6]
 801847e:	b29a      	uxth	r2, r3
 8018480:	693b      	ldr	r3, [r7, #16]
 8018482:	889b      	ldrh	r3, [r3, #4]
 8018484:	b29b      	uxth	r3, r3
 8018486:	429a      	cmp	r2, r3
 8018488:	d001      	beq.n	801848e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801848a:	2300      	movs	r3, #0
 801848c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801848e:	693b      	ldr	r3, [r7, #16]
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018494:	693b      	ldr	r3, [r7, #16]
 8018496:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801849a:	2b00      	cmp	r3, #0
 801849c:	d193      	bne.n	80183c6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801849e:	e000      	b.n	80184a2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80184a0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80184a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d12d      	bne.n	8018504 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80184a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d01c      	beq.n	80184e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80184ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184b0:	88db      	ldrh	r3, [r3, #6]
 80184b2:	b29a      	uxth	r2, r3
 80184b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184b6:	889b      	ldrh	r3, [r3, #4]
 80184b8:	b29b      	uxth	r3, r3
 80184ba:	429a      	cmp	r2, r3
 80184bc:	d906      	bls.n	80184cc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80184be:	4b45      	ldr	r3, [pc, #276]	; (80185d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80184c0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80184c4:	4944      	ldr	r1, [pc, #272]	; (80185d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80184c6:	4845      	ldr	r0, [pc, #276]	; (80185dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80184c8:	f001 fd50 	bl	8019f6c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80184cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184ce:	68ba      	ldr	r2, [r7, #8]
 80184d0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80184d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184d4:	88db      	ldrh	r3, [r3, #6]
 80184d6:	b29a      	uxth	r2, r3
 80184d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184da:	889b      	ldrh	r3, [r3, #4]
 80184dc:	b29b      	uxth	r3, r3
 80184de:	429a      	cmp	r2, r3
 80184e0:	d010      	beq.n	8018504 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80184e2:	2300      	movs	r3, #0
 80184e4:	623b      	str	r3, [r7, #32]
 80184e6:	e00d      	b.n	8018504 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	685b      	ldr	r3, [r3, #4]
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d006      	beq.n	80184fe <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80184f0:	4b38      	ldr	r3, [pc, #224]	; (80185d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80184f2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80184f6:	493a      	ldr	r1, [pc, #232]	; (80185e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80184f8:	4838      	ldr	r0, [pc, #224]	; (80185dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80184fa:	f001 fd37 	bl	8019f6c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	68ba      	ldr	r2, [r7, #8]
 8018502:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	2b00      	cmp	r3, #0
 8018508:	d105      	bne.n	8018516 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	7f9b      	ldrb	r3, [r3, #30]
 801850e:	f003 0301 	and.w	r3, r3, #1
 8018512:	2b00      	cmp	r3, #0
 8018514:	d059      	beq.n	80185ca <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018516:	6a3b      	ldr	r3, [r7, #32]
 8018518:	2b00      	cmp	r3, #0
 801851a:	d04f      	beq.n	80185bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	685b      	ldr	r3, [r3, #4]
 8018520:	2b00      	cmp	r3, #0
 8018522:	d006      	beq.n	8018532 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	685b      	ldr	r3, [r3, #4]
 8018528:	685b      	ldr	r3, [r3, #4]
 801852a:	889b      	ldrh	r3, [r3, #4]
 801852c:	b29b      	uxth	r3, r3
 801852e:	2b00      	cmp	r3, #0
 8018530:	d002      	beq.n	8018538 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018532:	2300      	movs	r3, #0
 8018534:	623b      	str	r3, [r7, #32]
 8018536:	e041      	b.n	80185bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801853a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801853c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018542:	e012      	b.n	801856a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018546:	685b      	ldr	r3, [r3, #4]
 8018548:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801854a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801854c:	88db      	ldrh	r3, [r3, #6]
 801854e:	b29a      	uxth	r2, r3
 8018550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018552:	889b      	ldrh	r3, [r3, #4]
 8018554:	b29b      	uxth	r3, r3
 8018556:	429a      	cmp	r2, r3
 8018558:	d002      	beq.n	8018560 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801855a:	2300      	movs	r3, #0
 801855c:	623b      	str	r3, [r7, #32]
            break;
 801855e:	e007      	b.n	8018570 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018562:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801856a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801856c:	2b00      	cmp	r3, #0
 801856e:	d1e9      	bne.n	8018544 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018570:	6a3b      	ldr	r3, [r7, #32]
 8018572:	2b00      	cmp	r3, #0
 8018574:	d022      	beq.n	80185bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018576:	68fb      	ldr	r3, [r7, #12]
 8018578:	685b      	ldr	r3, [r3, #4]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d106      	bne.n	801858c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801857e:	4b15      	ldr	r3, [pc, #84]	; (80185d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018580:	f240 12df 	movw	r2, #479	; 0x1df
 8018584:	4917      	ldr	r1, [pc, #92]	; (80185e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018586:	4815      	ldr	r0, [pc, #84]	; (80185dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018588:	f001 fcf0 	bl	8019f6c <iprintf>
          LWIP_ASSERT("sanity check",
 801858c:	68fb      	ldr	r3, [r7, #12]
 801858e:	685b      	ldr	r3, [r3, #4]
 8018590:	685b      	ldr	r3, [r3, #4]
 8018592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018594:	429a      	cmp	r2, r3
 8018596:	d106      	bne.n	80185a6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018598:	4b0e      	ldr	r3, [pc, #56]	; (80185d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801859a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801859e:	4911      	ldr	r1, [pc, #68]	; (80185e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80185a0:	480e      	ldr	r0, [pc, #56]	; (80185dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80185a2:	f001 fce3 	bl	8019f6c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80185a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d006      	beq.n	80185bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80185ae:	4b09      	ldr	r3, [pc, #36]	; (80185d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80185b0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80185b4:	490c      	ldr	r1, [pc, #48]	; (80185e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80185b6:	4809      	ldr	r0, [pc, #36]	; (80185dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80185b8:	f001 fcd8 	bl	8019f6c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80185bc:	6a3b      	ldr	r3, [r7, #32]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	bf14      	ite	ne
 80185c2:	2301      	movne	r3, #1
 80185c4:	2300      	moveq	r3, #0
 80185c6:	b2db      	uxtb	r3, r3
 80185c8:	e000      	b.n	80185cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80185ca:	2300      	movs	r3, #0
}
 80185cc:	4618      	mov	r0, r3
 80185ce:	3730      	adds	r7, #48	; 0x30
 80185d0:	46bd      	mov	sp, r7
 80185d2:	bd80      	pop	{r7, pc}
 80185d4:	0801ee3c 	.word	0x0801ee3c
 80185d8:	0801ef20 	.word	0x0801ef20
 80185dc:	0801ee84 	.word	0x0801ee84
 80185e0:	0801ef40 	.word	0x0801ef40
 80185e4:	0801ef78 	.word	0x0801ef78
 80185e8:	0801ef88 	.word	0x0801ef88

080185ec <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80185ec:	b580      	push	{r7, lr}
 80185ee:	b08e      	sub	sp, #56	; 0x38
 80185f0:	af00      	add	r7, sp, #0
 80185f2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	685b      	ldr	r3, [r3, #4]
 80185f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80185fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185fc:	781b      	ldrb	r3, [r3, #0]
 80185fe:	f003 030f 	and.w	r3, r3, #15
 8018602:	b2db      	uxtb	r3, r3
 8018604:	009b      	lsls	r3, r3, #2
 8018606:	b2db      	uxtb	r3, r3
 8018608:	2b14      	cmp	r3, #20
 801860a:	f040 8167 	bne.w	80188dc <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801860e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018610:	88db      	ldrh	r3, [r3, #6]
 8018612:	b29b      	uxth	r3, r3
 8018614:	4618      	mov	r0, r3
 8018616:	f7f6 f89c 	bl	800e752 <lwip_htons>
 801861a:	4603      	mov	r3, r0
 801861c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018620:	b29b      	uxth	r3, r3
 8018622:	00db      	lsls	r3, r3, #3
 8018624:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018628:	885b      	ldrh	r3, [r3, #2]
 801862a:	b29b      	uxth	r3, r3
 801862c:	4618      	mov	r0, r3
 801862e:	f7f6 f890 	bl	800e752 <lwip_htons>
 8018632:	4603      	mov	r3, r0
 8018634:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018638:	781b      	ldrb	r3, [r3, #0]
 801863a:	f003 030f 	and.w	r3, r3, #15
 801863e:	b2db      	uxtb	r3, r3
 8018640:	009b      	lsls	r3, r3, #2
 8018642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018646:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801864a:	b29b      	uxth	r3, r3
 801864c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801864e:	429a      	cmp	r2, r3
 8018650:	f0c0 8146 	bcc.w	80188e0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018654:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018658:	b29b      	uxth	r3, r3
 801865a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801865c:	1ad3      	subs	r3, r2, r3
 801865e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018660:	6878      	ldr	r0, [r7, #4]
 8018662:	f7f7 fbb1 	bl	800fdc8 <pbuf_clen>
 8018666:	4603      	mov	r3, r0
 8018668:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801866a:	4b9f      	ldr	r3, [pc, #636]	; (80188e8 <ip4_reass+0x2fc>)
 801866c:	881b      	ldrh	r3, [r3, #0]
 801866e:	461a      	mov	r2, r3
 8018670:	8c3b      	ldrh	r3, [r7, #32]
 8018672:	4413      	add	r3, r2
 8018674:	2b0a      	cmp	r3, #10
 8018676:	dd10      	ble.n	801869a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018678:	8c3b      	ldrh	r3, [r7, #32]
 801867a:	4619      	mov	r1, r3
 801867c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801867e:	f7ff fd81 	bl	8018184 <ip_reass_remove_oldest_datagram>
 8018682:	4603      	mov	r3, r0
 8018684:	2b00      	cmp	r3, #0
 8018686:	f000 812d 	beq.w	80188e4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801868a:	4b97      	ldr	r3, [pc, #604]	; (80188e8 <ip4_reass+0x2fc>)
 801868c:	881b      	ldrh	r3, [r3, #0]
 801868e:	461a      	mov	r2, r3
 8018690:	8c3b      	ldrh	r3, [r7, #32]
 8018692:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018694:	2b0a      	cmp	r3, #10
 8018696:	f300 8125 	bgt.w	80188e4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801869a:	4b94      	ldr	r3, [pc, #592]	; (80188ec <ip4_reass+0x300>)
 801869c:	681b      	ldr	r3, [r3, #0]
 801869e:	633b      	str	r3, [r7, #48]	; 0x30
 80186a0:	e015      	b.n	80186ce <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80186a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186a4:	695a      	ldr	r2, [r3, #20]
 80186a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186a8:	68db      	ldr	r3, [r3, #12]
 80186aa:	429a      	cmp	r2, r3
 80186ac:	d10c      	bne.n	80186c8 <ip4_reass+0xdc>
 80186ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186b0:	699a      	ldr	r2, [r3, #24]
 80186b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186b4:	691b      	ldr	r3, [r3, #16]
 80186b6:	429a      	cmp	r2, r3
 80186b8:	d106      	bne.n	80186c8 <ip4_reass+0xdc>
 80186ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186bc:	899a      	ldrh	r2, [r3, #12]
 80186be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186c0:	889b      	ldrh	r3, [r3, #4]
 80186c2:	b29b      	uxth	r3, r3
 80186c4:	429a      	cmp	r2, r3
 80186c6:	d006      	beq.n	80186d6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80186c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	633b      	str	r3, [r7, #48]	; 0x30
 80186ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d1e6      	bne.n	80186a2 <ip4_reass+0xb6>
 80186d4:	e000      	b.n	80186d8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80186d6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80186d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d109      	bne.n	80186f2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80186de:	8c3b      	ldrh	r3, [r7, #32]
 80186e0:	4619      	mov	r1, r3
 80186e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80186e4:	f7ff fdb0 	bl	8018248 <ip_reass_enqueue_new_datagram>
 80186e8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80186ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d11c      	bne.n	801872a <ip4_reass+0x13e>
      goto nullreturn;
 80186f0:	e109      	b.n	8018906 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80186f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186f4:	88db      	ldrh	r3, [r3, #6]
 80186f6:	b29b      	uxth	r3, r3
 80186f8:	4618      	mov	r0, r3
 80186fa:	f7f6 f82a 	bl	800e752 <lwip_htons>
 80186fe:	4603      	mov	r3, r0
 8018700:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018704:	2b00      	cmp	r3, #0
 8018706:	d110      	bne.n	801872a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801870a:	89db      	ldrh	r3, [r3, #14]
 801870c:	4618      	mov	r0, r3
 801870e:	f7f6 f820 	bl	800e752 <lwip_htons>
 8018712:	4603      	mov	r3, r0
 8018714:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018718:	2b00      	cmp	r3, #0
 801871a:	d006      	beq.n	801872a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801871c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801871e:	3308      	adds	r3, #8
 8018720:	2214      	movs	r2, #20
 8018722:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018724:	4618      	mov	r0, r3
 8018726:	f000 fef7 	bl	8019518 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801872a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801872c:	88db      	ldrh	r3, [r3, #6]
 801872e:	b29b      	uxth	r3, r3
 8018730:	f003 0320 	and.w	r3, r3, #32
 8018734:	2b00      	cmp	r3, #0
 8018736:	bf0c      	ite	eq
 8018738:	2301      	moveq	r3, #1
 801873a:	2300      	movne	r3, #0
 801873c:	b2db      	uxtb	r3, r3
 801873e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018740:	69fb      	ldr	r3, [r7, #28]
 8018742:	2b00      	cmp	r3, #0
 8018744:	d00e      	beq.n	8018764 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018746:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018748:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801874a:	4413      	add	r3, r2
 801874c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801874e:	8b7a      	ldrh	r2, [r7, #26]
 8018750:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018752:	429a      	cmp	r2, r3
 8018754:	f0c0 80a0 	bcc.w	8018898 <ip4_reass+0x2ac>
 8018758:	8b7b      	ldrh	r3, [r7, #26]
 801875a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801875e:	4293      	cmp	r3, r2
 8018760:	f200 809a 	bhi.w	8018898 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018764:	69fa      	ldr	r2, [r7, #28]
 8018766:	6879      	ldr	r1, [r7, #4]
 8018768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801876a:	f7ff fdd5 	bl	8018318 <ip_reass_chain_frag_into_datagram_and_validate>
 801876e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018770:	697b      	ldr	r3, [r7, #20]
 8018772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018776:	f000 8091 	beq.w	801889c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801877a:	4b5b      	ldr	r3, [pc, #364]	; (80188e8 <ip4_reass+0x2fc>)
 801877c:	881a      	ldrh	r2, [r3, #0]
 801877e:	8c3b      	ldrh	r3, [r7, #32]
 8018780:	4413      	add	r3, r2
 8018782:	b29a      	uxth	r2, r3
 8018784:	4b58      	ldr	r3, [pc, #352]	; (80188e8 <ip4_reass+0x2fc>)
 8018786:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018788:	69fb      	ldr	r3, [r7, #28]
 801878a:	2b00      	cmp	r3, #0
 801878c:	d00d      	beq.n	80187aa <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801878e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018790:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018792:	4413      	add	r3, r2
 8018794:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018798:	8a7a      	ldrh	r2, [r7, #18]
 801879a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801879c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801879e:	7f9b      	ldrb	r3, [r3, #30]
 80187a0:	f043 0301 	orr.w	r3, r3, #1
 80187a4:	b2da      	uxtb	r2, r3
 80187a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187a8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80187aa:	697b      	ldr	r3, [r7, #20]
 80187ac:	2b01      	cmp	r3, #1
 80187ae:	d171      	bne.n	8018894 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80187b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187b2:	8b9b      	ldrh	r3, [r3, #28]
 80187b4:	3314      	adds	r3, #20
 80187b6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80187b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187ba:	685b      	ldr	r3, [r3, #4]
 80187bc:	685b      	ldr	r3, [r3, #4]
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80187c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187c4:	685b      	ldr	r3, [r3, #4]
 80187c6:	685b      	ldr	r3, [r3, #4]
 80187c8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80187ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187cc:	3308      	adds	r3, #8
 80187ce:	2214      	movs	r2, #20
 80187d0:	4619      	mov	r1, r3
 80187d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80187d4:	f000 fea0 	bl	8019518 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80187d8:	8a3b      	ldrh	r3, [r7, #16]
 80187da:	4618      	mov	r0, r3
 80187dc:	f7f5 ffb9 	bl	800e752 <lwip_htons>
 80187e0:	4603      	mov	r3, r0
 80187e2:	461a      	mov	r2, r3
 80187e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187e6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80187e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187ea:	2200      	movs	r2, #0
 80187ec:	719a      	strb	r2, [r3, #6]
 80187ee:	2200      	movs	r2, #0
 80187f0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80187f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187f4:	2200      	movs	r2, #0
 80187f6:	729a      	strb	r2, [r3, #10]
 80187f8:	2200      	movs	r2, #0
 80187fa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80187fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187fe:	685b      	ldr	r3, [r3, #4]
 8018800:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018802:	e00d      	b.n	8018820 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018806:	685b      	ldr	r3, [r3, #4]
 8018808:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801880a:	2114      	movs	r1, #20
 801880c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801880e:	f7f7 f9cd 	bl	800fbac <pbuf_remove_header>
      pbuf_cat(p, r);
 8018812:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018814:	6878      	ldr	r0, [r7, #4]
 8018816:	f7f7 fb11 	bl	800fe3c <pbuf_cat>
      r = iprh->next_pbuf;
 801881a:	68fb      	ldr	r3, [r7, #12]
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018822:	2b00      	cmp	r3, #0
 8018824:	d1ee      	bne.n	8018804 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018826:	4b31      	ldr	r3, [pc, #196]	; (80188ec <ip4_reass+0x300>)
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801882c:	429a      	cmp	r2, r3
 801882e:	d102      	bne.n	8018836 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018830:	2300      	movs	r3, #0
 8018832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018834:	e010      	b.n	8018858 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018836:	4b2d      	ldr	r3, [pc, #180]	; (80188ec <ip4_reass+0x300>)
 8018838:	681b      	ldr	r3, [r3, #0]
 801883a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801883c:	e007      	b.n	801884e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801883e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018844:	429a      	cmp	r2, r3
 8018846:	d006      	beq.n	8018856 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801884e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018850:	2b00      	cmp	r3, #0
 8018852:	d1f4      	bne.n	801883e <ip4_reass+0x252>
 8018854:	e000      	b.n	8018858 <ip4_reass+0x26c>
          break;
 8018856:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018858:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801885a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801885c:	f7ff fd2e 	bl	80182bc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018860:	6878      	ldr	r0, [r7, #4]
 8018862:	f7f7 fab1 	bl	800fdc8 <pbuf_clen>
 8018866:	4603      	mov	r3, r0
 8018868:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801886a:	4b1f      	ldr	r3, [pc, #124]	; (80188e8 <ip4_reass+0x2fc>)
 801886c:	881b      	ldrh	r3, [r3, #0]
 801886e:	8c3a      	ldrh	r2, [r7, #32]
 8018870:	429a      	cmp	r2, r3
 8018872:	d906      	bls.n	8018882 <ip4_reass+0x296>
 8018874:	4b1e      	ldr	r3, [pc, #120]	; (80188f0 <ip4_reass+0x304>)
 8018876:	f240 229b 	movw	r2, #667	; 0x29b
 801887a:	491e      	ldr	r1, [pc, #120]	; (80188f4 <ip4_reass+0x308>)
 801887c:	481e      	ldr	r0, [pc, #120]	; (80188f8 <ip4_reass+0x30c>)
 801887e:	f001 fb75 	bl	8019f6c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018882:	4b19      	ldr	r3, [pc, #100]	; (80188e8 <ip4_reass+0x2fc>)
 8018884:	881a      	ldrh	r2, [r3, #0]
 8018886:	8c3b      	ldrh	r3, [r7, #32]
 8018888:	1ad3      	subs	r3, r2, r3
 801888a:	b29a      	uxth	r2, r3
 801888c:	4b16      	ldr	r3, [pc, #88]	; (80188e8 <ip4_reass+0x2fc>)
 801888e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	e03c      	b.n	801890e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018894:	2300      	movs	r3, #0
 8018896:	e03a      	b.n	801890e <ip4_reass+0x322>
      goto nullreturn_ipr;
 8018898:	bf00      	nop
 801889a:	e000      	b.n	801889e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801889c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801889e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d106      	bne.n	80188b2 <ip4_reass+0x2c6>
 80188a4:	4b12      	ldr	r3, [pc, #72]	; (80188f0 <ip4_reass+0x304>)
 80188a6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80188aa:	4914      	ldr	r1, [pc, #80]	; (80188fc <ip4_reass+0x310>)
 80188ac:	4812      	ldr	r0, [pc, #72]	; (80188f8 <ip4_reass+0x30c>)
 80188ae:	f001 fb5d 	bl	8019f6c <iprintf>
  if (ipr->p == NULL) {
 80188b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188b4:	685b      	ldr	r3, [r3, #4]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d124      	bne.n	8018904 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80188ba:	4b0c      	ldr	r3, [pc, #48]	; (80188ec <ip4_reass+0x300>)
 80188bc:	681b      	ldr	r3, [r3, #0]
 80188be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80188c0:	429a      	cmp	r2, r3
 80188c2:	d006      	beq.n	80188d2 <ip4_reass+0x2e6>
 80188c4:	4b0a      	ldr	r3, [pc, #40]	; (80188f0 <ip4_reass+0x304>)
 80188c6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80188ca:	490d      	ldr	r1, [pc, #52]	; (8018900 <ip4_reass+0x314>)
 80188cc:	480a      	ldr	r0, [pc, #40]	; (80188f8 <ip4_reass+0x30c>)
 80188ce:	f001 fb4d 	bl	8019f6c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80188d2:	2100      	movs	r1, #0
 80188d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80188d6:	f7ff fcf1 	bl	80182bc <ip_reass_dequeue_datagram>
 80188da:	e014      	b.n	8018906 <ip4_reass+0x31a>
    goto nullreturn;
 80188dc:	bf00      	nop
 80188de:	e012      	b.n	8018906 <ip4_reass+0x31a>
    goto nullreturn;
 80188e0:	bf00      	nop
 80188e2:	e010      	b.n	8018906 <ip4_reass+0x31a>
      goto nullreturn;
 80188e4:	bf00      	nop
 80188e6:	e00e      	b.n	8018906 <ip4_reass+0x31a>
 80188e8:	200008d4 	.word	0x200008d4
 80188ec:	200008d0 	.word	0x200008d0
 80188f0:	0801ee3c 	.word	0x0801ee3c
 80188f4:	0801efac 	.word	0x0801efac
 80188f8:	0801ee84 	.word	0x0801ee84
 80188fc:	0801efc8 	.word	0x0801efc8
 8018900:	0801efd4 	.word	0x0801efd4
  }

nullreturn:
 8018904:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018906:	6878      	ldr	r0, [r7, #4]
 8018908:	f7f7 f9d6 	bl	800fcb8 <pbuf_free>
  return NULL;
 801890c:	2300      	movs	r3, #0
}
 801890e:	4618      	mov	r0, r3
 8018910:	3738      	adds	r7, #56	; 0x38
 8018912:	46bd      	mov	sp, r7
 8018914:	bd80      	pop	{r7, pc}
 8018916:	bf00      	nop

08018918 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018918:	b580      	push	{r7, lr}
 801891a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801891c:	2005      	movs	r0, #5
 801891e:	f7f6 fb6d 	bl	800effc <memp_malloc>
 8018922:	4603      	mov	r3, r0
}
 8018924:	4618      	mov	r0, r3
 8018926:	bd80      	pop	{r7, pc}

08018928 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018928:	b580      	push	{r7, lr}
 801892a:	b082      	sub	sp, #8
 801892c:	af00      	add	r7, sp, #0
 801892e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	2b00      	cmp	r3, #0
 8018934:	d106      	bne.n	8018944 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018936:	4b07      	ldr	r3, [pc, #28]	; (8018954 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018938:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801893c:	4906      	ldr	r1, [pc, #24]	; (8018958 <ip_frag_free_pbuf_custom_ref+0x30>)
 801893e:	4807      	ldr	r0, [pc, #28]	; (801895c <ip_frag_free_pbuf_custom_ref+0x34>)
 8018940:	f001 fb14 	bl	8019f6c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018944:	6879      	ldr	r1, [r7, #4]
 8018946:	2005      	movs	r0, #5
 8018948:	f7f6 fba4 	bl	800f094 <memp_free>
}
 801894c:	bf00      	nop
 801894e:	3708      	adds	r7, #8
 8018950:	46bd      	mov	sp, r7
 8018952:	bd80      	pop	{r7, pc}
 8018954:	0801ee3c 	.word	0x0801ee3c
 8018958:	0801eff4 	.word	0x0801eff4
 801895c:	0801ee84 	.word	0x0801ee84

08018960 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018960:	b580      	push	{r7, lr}
 8018962:	b084      	sub	sp, #16
 8018964:	af00      	add	r7, sp, #0
 8018966:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801896c:	68fb      	ldr	r3, [r7, #12]
 801896e:	2b00      	cmp	r3, #0
 8018970:	d106      	bne.n	8018980 <ipfrag_free_pbuf_custom+0x20>
 8018972:	4b11      	ldr	r3, [pc, #68]	; (80189b8 <ipfrag_free_pbuf_custom+0x58>)
 8018974:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018978:	4910      	ldr	r1, [pc, #64]	; (80189bc <ipfrag_free_pbuf_custom+0x5c>)
 801897a:	4811      	ldr	r0, [pc, #68]	; (80189c0 <ipfrag_free_pbuf_custom+0x60>)
 801897c:	f001 faf6 	bl	8019f6c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018980:	68fa      	ldr	r2, [r7, #12]
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	429a      	cmp	r2, r3
 8018986:	d006      	beq.n	8018996 <ipfrag_free_pbuf_custom+0x36>
 8018988:	4b0b      	ldr	r3, [pc, #44]	; (80189b8 <ipfrag_free_pbuf_custom+0x58>)
 801898a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801898e:	490d      	ldr	r1, [pc, #52]	; (80189c4 <ipfrag_free_pbuf_custom+0x64>)
 8018990:	480b      	ldr	r0, [pc, #44]	; (80189c0 <ipfrag_free_pbuf_custom+0x60>)
 8018992:	f001 faeb 	bl	8019f6c <iprintf>
  if (pcr->original != NULL) {
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	695b      	ldr	r3, [r3, #20]
 801899a:	2b00      	cmp	r3, #0
 801899c:	d004      	beq.n	80189a8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	695b      	ldr	r3, [r3, #20]
 80189a2:	4618      	mov	r0, r3
 80189a4:	f7f7 f988 	bl	800fcb8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80189a8:	68f8      	ldr	r0, [r7, #12]
 80189aa:	f7ff ffbd 	bl	8018928 <ip_frag_free_pbuf_custom_ref>
}
 80189ae:	bf00      	nop
 80189b0:	3710      	adds	r7, #16
 80189b2:	46bd      	mov	sp, r7
 80189b4:	bd80      	pop	{r7, pc}
 80189b6:	bf00      	nop
 80189b8:	0801ee3c 	.word	0x0801ee3c
 80189bc:	0801f000 	.word	0x0801f000
 80189c0:	0801ee84 	.word	0x0801ee84
 80189c4:	0801f00c 	.word	0x0801f00c

080189c8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80189c8:	b580      	push	{r7, lr}
 80189ca:	b094      	sub	sp, #80	; 0x50
 80189cc:	af02      	add	r7, sp, #8
 80189ce:	60f8      	str	r0, [r7, #12]
 80189d0:	60b9      	str	r1, [r7, #8]
 80189d2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80189d4:	2300      	movs	r3, #0
 80189d6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80189da:	68bb      	ldr	r3, [r7, #8]
 80189dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80189de:	3b14      	subs	r3, #20
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	da00      	bge.n	80189e6 <ip4_frag+0x1e>
 80189e4:	3307      	adds	r3, #7
 80189e6:	10db      	asrs	r3, r3, #3
 80189e8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80189ea:	2314      	movs	r3, #20
 80189ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80189ee:	68fb      	ldr	r3, [r7, #12]
 80189f0:	685b      	ldr	r3, [r3, #4]
 80189f2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80189f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189f6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80189f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189fa:	781b      	ldrb	r3, [r3, #0]
 80189fc:	f003 030f 	and.w	r3, r3, #15
 8018a00:	b2db      	uxtb	r3, r3
 8018a02:	009b      	lsls	r3, r3, #2
 8018a04:	b2db      	uxtb	r3, r3
 8018a06:	2b14      	cmp	r3, #20
 8018a08:	d002      	beq.n	8018a10 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018a0a:	f06f 0305 	mvn.w	r3, #5
 8018a0e:	e110      	b.n	8018c32 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018a10:	68fb      	ldr	r3, [r7, #12]
 8018a12:	895b      	ldrh	r3, [r3, #10]
 8018a14:	2b13      	cmp	r3, #19
 8018a16:	d809      	bhi.n	8018a2c <ip4_frag+0x64>
 8018a18:	4b88      	ldr	r3, [pc, #544]	; (8018c3c <ip4_frag+0x274>)
 8018a1a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8018a1e:	4988      	ldr	r1, [pc, #544]	; (8018c40 <ip4_frag+0x278>)
 8018a20:	4888      	ldr	r0, [pc, #544]	; (8018c44 <ip4_frag+0x27c>)
 8018a22:	f001 faa3 	bl	8019f6c <iprintf>
 8018a26:	f06f 0305 	mvn.w	r3, #5
 8018a2a:	e102      	b.n	8018c32 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a2e:	88db      	ldrh	r3, [r3, #6]
 8018a30:	b29b      	uxth	r3, r3
 8018a32:	4618      	mov	r0, r3
 8018a34:	f7f5 fe8d 	bl	800e752 <lwip_htons>
 8018a38:	4603      	mov	r3, r0
 8018a3a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018a3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018a3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018a42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018a46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018a4c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018a4e:	68fb      	ldr	r3, [r7, #12]
 8018a50:	891b      	ldrh	r3, [r3, #8]
 8018a52:	3b14      	subs	r3, #20
 8018a54:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018a58:	e0e1      	b.n	8018c1e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018a5a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018a5c:	00db      	lsls	r3, r3, #3
 8018a5e:	b29b      	uxth	r3, r3
 8018a60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018a64:	4293      	cmp	r3, r2
 8018a66:	bf28      	it	cs
 8018a68:	4613      	movcs	r3, r2
 8018a6a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018a6c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018a70:	2114      	movs	r1, #20
 8018a72:	200e      	movs	r0, #14
 8018a74:	f7f6 fe3c 	bl	800f6f0 <pbuf_alloc>
 8018a78:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	f000 80d5 	beq.w	8018c2c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a84:	895b      	ldrh	r3, [r3, #10]
 8018a86:	2b13      	cmp	r3, #19
 8018a88:	d806      	bhi.n	8018a98 <ip4_frag+0xd0>
 8018a8a:	4b6c      	ldr	r3, [pc, #432]	; (8018c3c <ip4_frag+0x274>)
 8018a8c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8018a90:	496d      	ldr	r1, [pc, #436]	; (8018c48 <ip4_frag+0x280>)
 8018a92:	486c      	ldr	r0, [pc, #432]	; (8018c44 <ip4_frag+0x27c>)
 8018a94:	f001 fa6a 	bl	8019f6c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a9a:	685b      	ldr	r3, [r3, #4]
 8018a9c:	2214      	movs	r2, #20
 8018a9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	f000 fd39 	bl	8019518 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aa8:	685b      	ldr	r3, [r3, #4]
 8018aaa:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018aac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018aae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018ab2:	e064      	b.n	8018b7e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018ab4:	68fb      	ldr	r3, [r7, #12]
 8018ab6:	895a      	ldrh	r2, [r3, #10]
 8018ab8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018aba:	1ad3      	subs	r3, r2, r3
 8018abc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018abe:	68fb      	ldr	r3, [r7, #12]
 8018ac0:	895b      	ldrh	r3, [r3, #10]
 8018ac2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018ac4:	429a      	cmp	r2, r3
 8018ac6:	d906      	bls.n	8018ad6 <ip4_frag+0x10e>
 8018ac8:	4b5c      	ldr	r3, [pc, #368]	; (8018c3c <ip4_frag+0x274>)
 8018aca:	f240 322d 	movw	r2, #813	; 0x32d
 8018ace:	495f      	ldr	r1, [pc, #380]	; (8018c4c <ip4_frag+0x284>)
 8018ad0:	485c      	ldr	r0, [pc, #368]	; (8018c44 <ip4_frag+0x27c>)
 8018ad2:	f001 fa4b 	bl	8019f6c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018ad6:	8bfa      	ldrh	r2, [r7, #30]
 8018ad8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018adc:	4293      	cmp	r3, r2
 8018ade:	bf28      	it	cs
 8018ae0:	4613      	movcs	r3, r2
 8018ae2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018ae6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d105      	bne.n	8018afa <ip4_frag+0x132>
        poff = 0;
 8018aee:	2300      	movs	r3, #0
 8018af0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	681b      	ldr	r3, [r3, #0]
 8018af6:	60fb      	str	r3, [r7, #12]
        continue;
 8018af8:	e041      	b.n	8018b7e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018afa:	f7ff ff0d 	bl	8018918 <ip_frag_alloc_pbuf_custom_ref>
 8018afe:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018b00:	69bb      	ldr	r3, [r7, #24]
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d103      	bne.n	8018b0e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018b06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018b08:	f7f7 f8d6 	bl	800fcb8 <pbuf_free>
        goto memerr;
 8018b0c:	e08f      	b.n	8018c2e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018b0e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018b14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018b16:	4413      	add	r3, r2
 8018b18:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018b1c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018b20:	9201      	str	r2, [sp, #4]
 8018b22:	9300      	str	r3, [sp, #0]
 8018b24:	4603      	mov	r3, r0
 8018b26:	2241      	movs	r2, #65	; 0x41
 8018b28:	2000      	movs	r0, #0
 8018b2a:	f7f6 ff0b 	bl	800f944 <pbuf_alloced_custom>
 8018b2e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018b30:	697b      	ldr	r3, [r7, #20]
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d106      	bne.n	8018b44 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018b36:	69b8      	ldr	r0, [r7, #24]
 8018b38:	f7ff fef6 	bl	8018928 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018b3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018b3e:	f7f7 f8bb 	bl	800fcb8 <pbuf_free>
        goto memerr;
 8018b42:	e074      	b.n	8018c2e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018b44:	68f8      	ldr	r0, [r7, #12]
 8018b46:	f7f7 f957 	bl	800fdf8 <pbuf_ref>
      pcr->original = p;
 8018b4a:	69bb      	ldr	r3, [r7, #24]
 8018b4c:	68fa      	ldr	r2, [r7, #12]
 8018b4e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018b50:	69bb      	ldr	r3, [r7, #24]
 8018b52:	4a3f      	ldr	r2, [pc, #252]	; (8018c50 <ip4_frag+0x288>)
 8018b54:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018b56:	6979      	ldr	r1, [r7, #20]
 8018b58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018b5a:	f7f7 f96f 	bl	800fe3c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018b5e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018b62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018b66:	1ad3      	subs	r3, r2, r3
 8018b68:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018b6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d004      	beq.n	8018b7e <ip4_frag+0x1b6>
        poff = 0;
 8018b74:	2300      	movs	r3, #0
 8018b76:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018b78:	68fb      	ldr	r3, [r7, #12]
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018b7e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d196      	bne.n	8018ab4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018b86:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018b88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018b8c:	4413      	add	r3, r2
 8018b8e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018b90:	68bb      	ldr	r3, [r7, #8]
 8018b92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018b94:	f1a3 0213 	sub.w	r2, r3, #19
 8018b98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018b9c:	429a      	cmp	r2, r3
 8018b9e:	bfcc      	ite	gt
 8018ba0:	2301      	movgt	r3, #1
 8018ba2:	2300      	movle	r3, #0
 8018ba4:	b2db      	uxtb	r3, r3
 8018ba6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018ba8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018bac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018bb0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018bb2:	6a3b      	ldr	r3, [r7, #32]
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d002      	beq.n	8018bbe <ip4_frag+0x1f6>
 8018bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d003      	beq.n	8018bc6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018bbe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018bc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018bc4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018bc6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018bc8:	4618      	mov	r0, r3
 8018bca:	f7f5 fdc2 	bl	800e752 <lwip_htons>
 8018bce:	4603      	mov	r3, r0
 8018bd0:	461a      	mov	r2, r3
 8018bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bd4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018bd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018bd8:	3314      	adds	r3, #20
 8018bda:	b29b      	uxth	r3, r3
 8018bdc:	4618      	mov	r0, r3
 8018bde:	f7f5 fdb8 	bl	800e752 <lwip_htons>
 8018be2:	4603      	mov	r3, r0
 8018be4:	461a      	mov	r2, r3
 8018be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018be8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bec:	2200      	movs	r2, #0
 8018bee:	729a      	strb	r2, [r3, #10]
 8018bf0:	2200      	movs	r2, #0
 8018bf2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018bf4:	68bb      	ldr	r3, [r7, #8]
 8018bf6:	695b      	ldr	r3, [r3, #20]
 8018bf8:	687a      	ldr	r2, [r7, #4]
 8018bfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018bfc:	68b8      	ldr	r0, [r7, #8]
 8018bfe:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018c00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018c02:	f7f7 f859 	bl	800fcb8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018c06:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018c0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018c0c:	1ad3      	subs	r3, r2, r3
 8018c0e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018c12:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018c16:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018c18:	4413      	add	r3, r2
 8018c1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8018c1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	f47f af19 	bne.w	8018a5a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018c28:	2300      	movs	r3, #0
 8018c2a:	e002      	b.n	8018c32 <ip4_frag+0x26a>
      goto memerr;
 8018c2c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018c32:	4618      	mov	r0, r3
 8018c34:	3748      	adds	r7, #72	; 0x48
 8018c36:	46bd      	mov	sp, r7
 8018c38:	bd80      	pop	{r7, pc}
 8018c3a:	bf00      	nop
 8018c3c:	0801ee3c 	.word	0x0801ee3c
 8018c40:	0801f018 	.word	0x0801f018
 8018c44:	0801ee84 	.word	0x0801ee84
 8018c48:	0801f034 	.word	0x0801f034
 8018c4c:	0801f054 	.word	0x0801f054
 8018c50:	08018961 	.word	0x08018961

08018c54 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018c54:	b580      	push	{r7, lr}
 8018c56:	b086      	sub	sp, #24
 8018c58:	af00      	add	r7, sp, #0
 8018c5a:	6078      	str	r0, [r7, #4]
 8018c5c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018c5e:	230e      	movs	r3, #14
 8018c60:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	895b      	ldrh	r3, [r3, #10]
 8018c66:	2b0e      	cmp	r3, #14
 8018c68:	d96e      	bls.n	8018d48 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	7bdb      	ldrb	r3, [r3, #15]
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d106      	bne.n	8018c80 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018c72:	683b      	ldr	r3, [r7, #0]
 8018c74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018c78:	3301      	adds	r3, #1
 8018c7a:	b2da      	uxtb	r2, r3
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	685b      	ldr	r3, [r3, #4]
 8018c84:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018c86:	693b      	ldr	r3, [r7, #16]
 8018c88:	7b1a      	ldrb	r2, [r3, #12]
 8018c8a:	7b5b      	ldrb	r3, [r3, #13]
 8018c8c:	021b      	lsls	r3, r3, #8
 8018c8e:	4313      	orrs	r3, r2
 8018c90:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018c92:	693b      	ldr	r3, [r7, #16]
 8018c94:	781b      	ldrb	r3, [r3, #0]
 8018c96:	f003 0301 	and.w	r3, r3, #1
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d023      	beq.n	8018ce6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018c9e:	693b      	ldr	r3, [r7, #16]
 8018ca0:	781b      	ldrb	r3, [r3, #0]
 8018ca2:	2b01      	cmp	r3, #1
 8018ca4:	d10f      	bne.n	8018cc6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018ca6:	693b      	ldr	r3, [r7, #16]
 8018ca8:	785b      	ldrb	r3, [r3, #1]
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d11b      	bne.n	8018ce6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018cae:	693b      	ldr	r3, [r7, #16]
 8018cb0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018cb2:	2b5e      	cmp	r3, #94	; 0x5e
 8018cb4:	d117      	bne.n	8018ce6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	7b5b      	ldrb	r3, [r3, #13]
 8018cba:	f043 0310 	orr.w	r3, r3, #16
 8018cbe:	b2da      	uxtb	r2, r3
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	735a      	strb	r2, [r3, #13]
 8018cc4:	e00f      	b.n	8018ce6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018cc6:	693b      	ldr	r3, [r7, #16]
 8018cc8:	2206      	movs	r2, #6
 8018cca:	4928      	ldr	r1, [pc, #160]	; (8018d6c <ethernet_input+0x118>)
 8018ccc:	4618      	mov	r0, r3
 8018cce:	f000 fc15 	bl	80194fc <memcmp>
 8018cd2:	4603      	mov	r3, r0
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d106      	bne.n	8018ce6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	7b5b      	ldrb	r3, [r3, #13]
 8018cdc:	f043 0308 	orr.w	r3, r3, #8
 8018ce0:	b2da      	uxtb	r2, r3
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018ce6:	89fb      	ldrh	r3, [r7, #14]
 8018ce8:	2b08      	cmp	r3, #8
 8018cea:	d003      	beq.n	8018cf4 <ethernet_input+0xa0>
 8018cec:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018cf0:	d014      	beq.n	8018d1c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018cf2:	e032      	b.n	8018d5a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018cf4:	683b      	ldr	r3, [r7, #0]
 8018cf6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018cfa:	f003 0308 	and.w	r3, r3, #8
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d024      	beq.n	8018d4c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018d02:	8afb      	ldrh	r3, [r7, #22]
 8018d04:	4619      	mov	r1, r3
 8018d06:	6878      	ldr	r0, [r7, #4]
 8018d08:	f7f6 ff50 	bl	800fbac <pbuf_remove_header>
 8018d0c:	4603      	mov	r3, r0
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	d11e      	bne.n	8018d50 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018d12:	6839      	ldr	r1, [r7, #0]
 8018d14:	6878      	ldr	r0, [r7, #4]
 8018d16:	f7fe ff27 	bl	8017b68 <ip4_input>
      break;
 8018d1a:	e013      	b.n	8018d44 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018d1c:	683b      	ldr	r3, [r7, #0]
 8018d1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018d22:	f003 0308 	and.w	r3, r3, #8
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d014      	beq.n	8018d54 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018d2a:	8afb      	ldrh	r3, [r7, #22]
 8018d2c:	4619      	mov	r1, r3
 8018d2e:	6878      	ldr	r0, [r7, #4]
 8018d30:	f7f6 ff3c 	bl	800fbac <pbuf_remove_header>
 8018d34:	4603      	mov	r3, r0
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d10e      	bne.n	8018d58 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018d3a:	6839      	ldr	r1, [r7, #0]
 8018d3c:	6878      	ldr	r0, [r7, #4]
 8018d3e:	f7fe f8c7 	bl	8016ed0 <etharp_input>
      break;
 8018d42:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018d44:	2300      	movs	r3, #0
 8018d46:	e00c      	b.n	8018d62 <ethernet_input+0x10e>
    goto free_and_return;
 8018d48:	bf00      	nop
 8018d4a:	e006      	b.n	8018d5a <ethernet_input+0x106>
        goto free_and_return;
 8018d4c:	bf00      	nop
 8018d4e:	e004      	b.n	8018d5a <ethernet_input+0x106>
        goto free_and_return;
 8018d50:	bf00      	nop
 8018d52:	e002      	b.n	8018d5a <ethernet_input+0x106>
        goto free_and_return;
 8018d54:	bf00      	nop
 8018d56:	e000      	b.n	8018d5a <ethernet_input+0x106>
        goto free_and_return;
 8018d58:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018d5a:	6878      	ldr	r0, [r7, #4]
 8018d5c:	f7f6 ffac 	bl	800fcb8 <pbuf_free>
  return ERR_OK;
 8018d60:	2300      	movs	r3, #0
}
 8018d62:	4618      	mov	r0, r3
 8018d64:	3718      	adds	r7, #24
 8018d66:	46bd      	mov	sp, r7
 8018d68:	bd80      	pop	{r7, pc}
 8018d6a:	bf00      	nop
 8018d6c:	0801f374 	.word	0x0801f374

08018d70 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018d70:	b580      	push	{r7, lr}
 8018d72:	b086      	sub	sp, #24
 8018d74:	af00      	add	r7, sp, #0
 8018d76:	60f8      	str	r0, [r7, #12]
 8018d78:	60b9      	str	r1, [r7, #8]
 8018d7a:	607a      	str	r2, [r7, #4]
 8018d7c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018d7e:	8c3b      	ldrh	r3, [r7, #32]
 8018d80:	4618      	mov	r0, r3
 8018d82:	f7f5 fce6 	bl	800e752 <lwip_htons>
 8018d86:	4603      	mov	r3, r0
 8018d88:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018d8a:	210e      	movs	r1, #14
 8018d8c:	68b8      	ldr	r0, [r7, #8]
 8018d8e:	f7f6 fefd 	bl	800fb8c <pbuf_add_header>
 8018d92:	4603      	mov	r3, r0
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d125      	bne.n	8018de4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018d98:	68bb      	ldr	r3, [r7, #8]
 8018d9a:	685b      	ldr	r3, [r3, #4]
 8018d9c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018d9e:	693b      	ldr	r3, [r7, #16]
 8018da0:	8afa      	ldrh	r2, [r7, #22]
 8018da2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018da4:	693b      	ldr	r3, [r7, #16]
 8018da6:	2206      	movs	r2, #6
 8018da8:	6839      	ldr	r1, [r7, #0]
 8018daa:	4618      	mov	r0, r3
 8018dac:	f000 fbb4 	bl	8019518 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018db0:	693b      	ldr	r3, [r7, #16]
 8018db2:	3306      	adds	r3, #6
 8018db4:	2206      	movs	r2, #6
 8018db6:	6879      	ldr	r1, [r7, #4]
 8018db8:	4618      	mov	r0, r3
 8018dba:	f000 fbad 	bl	8019518 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018dbe:	68fb      	ldr	r3, [r7, #12]
 8018dc0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018dc4:	2b06      	cmp	r3, #6
 8018dc6:	d006      	beq.n	8018dd6 <ethernet_output+0x66>
 8018dc8:	4b0a      	ldr	r3, [pc, #40]	; (8018df4 <ethernet_output+0x84>)
 8018dca:	f44f 7299 	mov.w	r2, #306	; 0x132
 8018dce:	490a      	ldr	r1, [pc, #40]	; (8018df8 <ethernet_output+0x88>)
 8018dd0:	480a      	ldr	r0, [pc, #40]	; (8018dfc <ethernet_output+0x8c>)
 8018dd2:	f001 f8cb 	bl	8019f6c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018dd6:	68fb      	ldr	r3, [r7, #12]
 8018dd8:	699b      	ldr	r3, [r3, #24]
 8018dda:	68b9      	ldr	r1, [r7, #8]
 8018ddc:	68f8      	ldr	r0, [r7, #12]
 8018dde:	4798      	blx	r3
 8018de0:	4603      	mov	r3, r0
 8018de2:	e002      	b.n	8018dea <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018de4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018de6:	f06f 0301 	mvn.w	r3, #1
}
 8018dea:	4618      	mov	r0, r3
 8018dec:	3718      	adds	r7, #24
 8018dee:	46bd      	mov	sp, r7
 8018df0:	bd80      	pop	{r7, pc}
 8018df2:	bf00      	nop
 8018df4:	0801f064 	.word	0x0801f064
 8018df8:	0801f09c 	.word	0x0801f09c
 8018dfc:	0801f0d0 	.word	0x0801f0d0

08018e00 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8018e00:	b580      	push	{r7, lr}
 8018e02:	b082      	sub	sp, #8
 8018e04:	af00      	add	r7, sp, #0
 8018e06:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8018e08:	1d39      	adds	r1, r7, #4
 8018e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8018e0e:	2201      	movs	r2, #1
 8018e10:	4803      	ldr	r0, [pc, #12]	; (8018e20 <__io_putchar+0x20>)
 8018e12:	f7ef fc80 	bl	8008716 <HAL_UART_Transmit>
  return ch;
 8018e16:	687b      	ldr	r3, [r7, #4]
}
 8018e18:	4618      	mov	r0, r3
 8018e1a:	3708      	adds	r7, #8
 8018e1c:	46bd      	mov	sp, r7
 8018e1e:	bd80      	pop	{r7, pc}
 8018e20:	20002a44 	.word	0x20002a44

08018e24 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8018e24:	b580      	push	{r7, lr}
 8018e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8018e28:	2201      	movs	r2, #1
 8018e2a:	490e      	ldr	r1, [pc, #56]	; (8018e64 <MX_USB_HOST_Init+0x40>)
 8018e2c:	480e      	ldr	r0, [pc, #56]	; (8018e68 <MX_USB_HOST_Init+0x44>)
 8018e2e:	f7f3 ff13 	bl	800cc58 <USBH_Init>
 8018e32:	4603      	mov	r3, r0
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d001      	beq.n	8018e3c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8018e38:	f7e8 fb2c 	bl	8001494 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8018e3c:	490b      	ldr	r1, [pc, #44]	; (8018e6c <MX_USB_HOST_Init+0x48>)
 8018e3e:	480a      	ldr	r0, [pc, #40]	; (8018e68 <MX_USB_HOST_Init+0x44>)
 8018e40:	f7f3 ffa6 	bl	800cd90 <USBH_RegisterClass>
 8018e44:	4603      	mov	r3, r0
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d001      	beq.n	8018e4e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8018e4a:	f7e8 fb23 	bl	8001494 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8018e4e:	4806      	ldr	r0, [pc, #24]	; (8018e68 <MX_USB_HOST_Init+0x44>)
 8018e50:	f7f4 f88c 	bl	800cf6c <USBH_Start>
 8018e54:	4603      	mov	r3, r0
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	d001      	beq.n	8018e5e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8018e5a:	f7e8 fb1b 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8018e5e:	bf00      	nop
 8018e60:	bd80      	pop	{r7, pc}
 8018e62:	bf00      	nop
 8018e64:	08018e85 	.word	0x08018e85
 8018e68:	2001a9cc 	.word	0x2001a9cc
 8018e6c:	20000514 	.word	0x20000514

08018e70 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8018e70:	b580      	push	{r7, lr}
 8018e72:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8018e74:	4802      	ldr	r0, [pc, #8]	; (8018e80 <MX_USB_HOST_Process+0x10>)
 8018e76:	f7f4 f889 	bl	800cf8c <USBH_Process>
}
 8018e7a:	bf00      	nop
 8018e7c:	bd80      	pop	{r7, pc}
 8018e7e:	bf00      	nop
 8018e80:	2001a9cc 	.word	0x2001a9cc

08018e84 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8018e84:	b480      	push	{r7}
 8018e86:	b083      	sub	sp, #12
 8018e88:	af00      	add	r7, sp, #0
 8018e8a:	6078      	str	r0, [r7, #4]
 8018e8c:	460b      	mov	r3, r1
 8018e8e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8018e90:	78fb      	ldrb	r3, [r7, #3]
 8018e92:	3b01      	subs	r3, #1
 8018e94:	2b04      	cmp	r3, #4
 8018e96:	d819      	bhi.n	8018ecc <USBH_UserProcess+0x48>
 8018e98:	a201      	add	r2, pc, #4	; (adr r2, 8018ea0 <USBH_UserProcess+0x1c>)
 8018e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e9e:	bf00      	nop
 8018ea0:	08018ecd 	.word	0x08018ecd
 8018ea4:	08018ebd 	.word	0x08018ebd
 8018ea8:	08018ecd 	.word	0x08018ecd
 8018eac:	08018ec5 	.word	0x08018ec5
 8018eb0:	08018eb5 	.word	0x08018eb5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8018eb4:	4b09      	ldr	r3, [pc, #36]	; (8018edc <USBH_UserProcess+0x58>)
 8018eb6:	2203      	movs	r2, #3
 8018eb8:	701a      	strb	r2, [r3, #0]
  break;
 8018eba:	e008      	b.n	8018ece <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8018ebc:	4b07      	ldr	r3, [pc, #28]	; (8018edc <USBH_UserProcess+0x58>)
 8018ebe:	2202      	movs	r2, #2
 8018ec0:	701a      	strb	r2, [r3, #0]
//  {
//    printf("USB Device Process Error\n");
//    /* Error : Hang Here */
//    while(1);
//  }
  break;
 8018ec2:	e004      	b.n	8018ece <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8018ec4:	4b05      	ldr	r3, [pc, #20]	; (8018edc <USBH_UserProcess+0x58>)
 8018ec6:	2201      	movs	r2, #1
 8018ec8:	701a      	strb	r2, [r3, #0]
  break;
 8018eca:	e000      	b.n	8018ece <USBH_UserProcess+0x4a>

  default:
  break;
 8018ecc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8018ece:	bf00      	nop
 8018ed0:	370c      	adds	r7, #12
 8018ed2:	46bd      	mov	sp, r7
 8018ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ed8:	4770      	bx	lr
 8018eda:	bf00      	nop
 8018edc:	200008d6 	.word	0x200008d6

08018ee0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8018ee0:	b580      	push	{r7, lr}
 8018ee2:	b08a      	sub	sp, #40	; 0x28
 8018ee4:	af00      	add	r7, sp, #0
 8018ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018ee8:	f107 0314 	add.w	r3, r7, #20
 8018eec:	2200      	movs	r2, #0
 8018eee:	601a      	str	r2, [r3, #0]
 8018ef0:	605a      	str	r2, [r3, #4]
 8018ef2:	609a      	str	r2, [r3, #8]
 8018ef4:	60da      	str	r2, [r3, #12]
 8018ef6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018f00:	d147      	bne.n	8018f92 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018f02:	2300      	movs	r3, #0
 8018f04:	613b      	str	r3, [r7, #16]
 8018f06:	4b25      	ldr	r3, [pc, #148]	; (8018f9c <HAL_HCD_MspInit+0xbc>)
 8018f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f0a:	4a24      	ldr	r2, [pc, #144]	; (8018f9c <HAL_HCD_MspInit+0xbc>)
 8018f0c:	f043 0301 	orr.w	r3, r3, #1
 8018f10:	6313      	str	r3, [r2, #48]	; 0x30
 8018f12:	4b22      	ldr	r3, [pc, #136]	; (8018f9c <HAL_HCD_MspInit+0xbc>)
 8018f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f16:	f003 0301 	and.w	r3, r3, #1
 8018f1a:	613b      	str	r3, [r7, #16]
 8018f1c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8018f1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018f24:	2300      	movs	r3, #0
 8018f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018f28:	2300      	movs	r3, #0
 8018f2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018f2c:	f107 0314 	add.w	r3, r7, #20
 8018f30:	4619      	mov	r1, r3
 8018f32:	481b      	ldr	r0, [pc, #108]	; (8018fa0 <HAL_HCD_MspInit+0xc0>)
 8018f34:	f7ec ff44 	bl	8005dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018f38:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018f3e:	2302      	movs	r3, #2
 8018f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018f42:	2300      	movs	r3, #0
 8018f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018f46:	2303      	movs	r3, #3
 8018f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018f4a:	230a      	movs	r3, #10
 8018f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018f4e:	f107 0314 	add.w	r3, r7, #20
 8018f52:	4619      	mov	r1, r3
 8018f54:	4812      	ldr	r0, [pc, #72]	; (8018fa0 <HAL_HCD_MspInit+0xc0>)
 8018f56:	f7ec ff33 	bl	8005dc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018f5a:	4b10      	ldr	r3, [pc, #64]	; (8018f9c <HAL_HCD_MspInit+0xbc>)
 8018f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018f5e:	4a0f      	ldr	r2, [pc, #60]	; (8018f9c <HAL_HCD_MspInit+0xbc>)
 8018f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018f64:	6353      	str	r3, [r2, #52]	; 0x34
 8018f66:	2300      	movs	r3, #0
 8018f68:	60fb      	str	r3, [r7, #12]
 8018f6a:	4b0c      	ldr	r3, [pc, #48]	; (8018f9c <HAL_HCD_MspInit+0xbc>)
 8018f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f6e:	4a0b      	ldr	r2, [pc, #44]	; (8018f9c <HAL_HCD_MspInit+0xbc>)
 8018f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018f74:	6453      	str	r3, [r2, #68]	; 0x44
 8018f76:	4b09      	ldr	r3, [pc, #36]	; (8018f9c <HAL_HCD_MspInit+0xbc>)
 8018f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018f7e:	60fb      	str	r3, [r7, #12]
 8018f80:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8018f82:	2200      	movs	r2, #0
 8018f84:	2100      	movs	r1, #0
 8018f86:	2043      	movs	r0, #67	; 0x43
 8018f88:	f7e9 fcd1 	bl	800292e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018f8c:	2043      	movs	r0, #67	; 0x43
 8018f8e:	f7e9 fcea 	bl	8002966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018f92:	bf00      	nop
 8018f94:	3728      	adds	r7, #40	; 0x28
 8018f96:	46bd      	mov	sp, r7
 8018f98:	bd80      	pop	{r7, pc}
 8018f9a:	bf00      	nop
 8018f9c:	40023800 	.word	0x40023800
 8018fa0:	40020000 	.word	0x40020000

08018fa4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8018fa4:	b580      	push	{r7, lr}
 8018fa6:	b082      	sub	sp, #8
 8018fa8:	af00      	add	r7, sp, #0
 8018faa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8018fb2:	4618      	mov	r0, r3
 8018fb4:	f7f4 fd09 	bl	800d9ca <USBH_LL_IncTimer>
}
 8018fb8:	bf00      	nop
 8018fba:	3708      	adds	r7, #8
 8018fbc:	46bd      	mov	sp, r7
 8018fbe:	bd80      	pop	{r7, pc}

08018fc0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8018fc0:	b580      	push	{r7, lr}
 8018fc2:	b082      	sub	sp, #8
 8018fc4:	af00      	add	r7, sp, #0
 8018fc6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8018fce:	4618      	mov	r0, r3
 8018fd0:	f7f4 fd41 	bl	800da56 <USBH_LL_Connect>
}
 8018fd4:	bf00      	nop
 8018fd6:	3708      	adds	r7, #8
 8018fd8:	46bd      	mov	sp, r7
 8018fda:	bd80      	pop	{r7, pc}

08018fdc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8018fdc:	b580      	push	{r7, lr}
 8018fde:	b082      	sub	sp, #8
 8018fe0:	af00      	add	r7, sp, #0
 8018fe2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8018fea:	4618      	mov	r0, r3
 8018fec:	f7f4 fd4a 	bl	800da84 <USBH_LL_Disconnect>
}
 8018ff0:	bf00      	nop
 8018ff2:	3708      	adds	r7, #8
 8018ff4:	46bd      	mov	sp, r7
 8018ff6:	bd80      	pop	{r7, pc}

08018ff8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8018ff8:	b480      	push	{r7}
 8018ffa:	b083      	sub	sp, #12
 8018ffc:	af00      	add	r7, sp, #0
 8018ffe:	6078      	str	r0, [r7, #4]
 8019000:	460b      	mov	r3, r1
 8019002:	70fb      	strb	r3, [r7, #3]
 8019004:	4613      	mov	r3, r2
 8019006:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8019008:	bf00      	nop
 801900a:	370c      	adds	r7, #12
 801900c:	46bd      	mov	sp, r7
 801900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019012:	4770      	bx	lr

08019014 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8019014:	b580      	push	{r7, lr}
 8019016:	b082      	sub	sp, #8
 8019018:	af00      	add	r7, sp, #0
 801901a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019022:	4618      	mov	r0, r3
 8019024:	f7f4 fcfb 	bl	800da1e <USBH_LL_PortEnabled>
}
 8019028:	bf00      	nop
 801902a:	3708      	adds	r7, #8
 801902c:	46bd      	mov	sp, r7
 801902e:	bd80      	pop	{r7, pc}

08019030 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8019030:	b580      	push	{r7, lr}
 8019032:	b082      	sub	sp, #8
 8019034:	af00      	add	r7, sp, #0
 8019036:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801903e:	4618      	mov	r0, r3
 8019040:	f7f4 fcfb 	bl	800da3a <USBH_LL_PortDisabled>
}
 8019044:	bf00      	nop
 8019046:	3708      	adds	r7, #8
 8019048:	46bd      	mov	sp, r7
 801904a:	bd80      	pop	{r7, pc}

0801904c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801904c:	b580      	push	{r7, lr}
 801904e:	b082      	sub	sp, #8
 8019050:	af00      	add	r7, sp, #0
 8019052:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801905a:	2b01      	cmp	r3, #1
 801905c:	d12a      	bne.n	80190b4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801905e:	4a18      	ldr	r2, [pc, #96]	; (80190c0 <USBH_LL_Init+0x74>)
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	4a15      	ldr	r2, [pc, #84]	; (80190c0 <USBH_LL_Init+0x74>)
 801906a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801906e:	4b14      	ldr	r3, [pc, #80]	; (80190c0 <USBH_LL_Init+0x74>)
 8019070:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8019074:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8019076:	4b12      	ldr	r3, [pc, #72]	; (80190c0 <USBH_LL_Init+0x74>)
 8019078:	2208      	movs	r2, #8
 801907a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801907c:	4b10      	ldr	r3, [pc, #64]	; (80190c0 <USBH_LL_Init+0x74>)
 801907e:	2201      	movs	r2, #1
 8019080:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8019082:	4b0f      	ldr	r3, [pc, #60]	; (80190c0 <USBH_LL_Init+0x74>)
 8019084:	2200      	movs	r2, #0
 8019086:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8019088:	4b0d      	ldr	r3, [pc, #52]	; (80190c0 <USBH_LL_Init+0x74>)
 801908a:	2202      	movs	r2, #2
 801908c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801908e:	4b0c      	ldr	r3, [pc, #48]	; (80190c0 <USBH_LL_Init+0x74>)
 8019090:	2200      	movs	r2, #0
 8019092:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8019094:	480a      	ldr	r0, [pc, #40]	; (80190c0 <USBH_LL_Init+0x74>)
 8019096:	f7ed f860 	bl	800615a <HAL_HCD_Init>
 801909a:	4603      	mov	r3, r0
 801909c:	2b00      	cmp	r3, #0
 801909e:	d001      	beq.n	80190a4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80190a0:	f7e8 f9f8 	bl	8001494 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80190a4:	4806      	ldr	r0, [pc, #24]	; (80190c0 <USBH_LL_Init+0x74>)
 80190a6:	f7ed fc44 	bl	8006932 <HAL_HCD_GetCurrentFrame>
 80190aa:	4603      	mov	r3, r0
 80190ac:	4619      	mov	r1, r3
 80190ae:	6878      	ldr	r0, [r7, #4]
 80190b0:	f7f4 fc7c 	bl	800d9ac <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80190b4:	2300      	movs	r3, #0
}
 80190b6:	4618      	mov	r0, r3
 80190b8:	3708      	adds	r7, #8
 80190ba:	46bd      	mov	sp, r7
 80190bc:	bd80      	pop	{r7, pc}
 80190be:	bf00      	nop
 80190c0:	2001ada4 	.word	0x2001ada4

080190c4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80190c4:	b580      	push	{r7, lr}
 80190c6:	b084      	sub	sp, #16
 80190c8:	af00      	add	r7, sp, #0
 80190ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80190cc:	2300      	movs	r3, #0
 80190ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80190d0:	2300      	movs	r3, #0
 80190d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80190da:	4618      	mov	r0, r3
 80190dc:	f7ed fbb3 	bl	8006846 <HAL_HCD_Start>
 80190e0:	4603      	mov	r3, r0
 80190e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80190e4:	7bfb      	ldrb	r3, [r7, #15]
 80190e6:	4618      	mov	r0, r3
 80190e8:	f000 f98c 	bl	8019404 <USBH_Get_USB_Status>
 80190ec:	4603      	mov	r3, r0
 80190ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80190f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80190f2:	4618      	mov	r0, r3
 80190f4:	3710      	adds	r7, #16
 80190f6:	46bd      	mov	sp, r7
 80190f8:	bd80      	pop	{r7, pc}

080190fa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80190fa:	b580      	push	{r7, lr}
 80190fc:	b084      	sub	sp, #16
 80190fe:	af00      	add	r7, sp, #0
 8019100:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019102:	2300      	movs	r3, #0
 8019104:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019106:	2300      	movs	r3, #0
 8019108:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019110:	4618      	mov	r0, r3
 8019112:	f7ed fbbb 	bl	800688c <HAL_HCD_Stop>
 8019116:	4603      	mov	r3, r0
 8019118:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801911a:	7bfb      	ldrb	r3, [r7, #15]
 801911c:	4618      	mov	r0, r3
 801911e:	f000 f971 	bl	8019404 <USBH_Get_USB_Status>
 8019122:	4603      	mov	r3, r0
 8019124:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019126:	7bbb      	ldrb	r3, [r7, #14]
}
 8019128:	4618      	mov	r0, r3
 801912a:	3710      	adds	r7, #16
 801912c:	46bd      	mov	sp, r7
 801912e:	bd80      	pop	{r7, pc}

08019130 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8019130:	b580      	push	{r7, lr}
 8019132:	b084      	sub	sp, #16
 8019134:	af00      	add	r7, sp, #0
 8019136:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8019138:	2301      	movs	r3, #1
 801913a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019142:	4618      	mov	r0, r3
 8019144:	f7ed fc03 	bl	800694e <HAL_HCD_GetCurrentSpeed>
 8019148:	4603      	mov	r3, r0
 801914a:	2b02      	cmp	r3, #2
 801914c:	d00c      	beq.n	8019168 <USBH_LL_GetSpeed+0x38>
 801914e:	2b02      	cmp	r3, #2
 8019150:	d80d      	bhi.n	801916e <USBH_LL_GetSpeed+0x3e>
 8019152:	2b00      	cmp	r3, #0
 8019154:	d002      	beq.n	801915c <USBH_LL_GetSpeed+0x2c>
 8019156:	2b01      	cmp	r3, #1
 8019158:	d003      	beq.n	8019162 <USBH_LL_GetSpeed+0x32>
 801915a:	e008      	b.n	801916e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801915c:	2300      	movs	r3, #0
 801915e:	73fb      	strb	r3, [r7, #15]
    break;
 8019160:	e008      	b.n	8019174 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8019162:	2301      	movs	r3, #1
 8019164:	73fb      	strb	r3, [r7, #15]
    break;
 8019166:	e005      	b.n	8019174 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8019168:	2302      	movs	r3, #2
 801916a:	73fb      	strb	r3, [r7, #15]
    break;
 801916c:	e002      	b.n	8019174 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801916e:	2301      	movs	r3, #1
 8019170:	73fb      	strb	r3, [r7, #15]
    break;
 8019172:	bf00      	nop
  }
  return  speed;
 8019174:	7bfb      	ldrb	r3, [r7, #15]
}
 8019176:	4618      	mov	r0, r3
 8019178:	3710      	adds	r7, #16
 801917a:	46bd      	mov	sp, r7
 801917c:	bd80      	pop	{r7, pc}

0801917e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801917e:	b580      	push	{r7, lr}
 8019180:	b084      	sub	sp, #16
 8019182:	af00      	add	r7, sp, #0
 8019184:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019186:	2300      	movs	r3, #0
 8019188:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801918a:	2300      	movs	r3, #0
 801918c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019194:	4618      	mov	r0, r3
 8019196:	f7ed fb96 	bl	80068c6 <HAL_HCD_ResetPort>
 801919a:	4603      	mov	r3, r0
 801919c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801919e:	7bfb      	ldrb	r3, [r7, #15]
 80191a0:	4618      	mov	r0, r3
 80191a2:	f000 f92f 	bl	8019404 <USBH_Get_USB_Status>
 80191a6:	4603      	mov	r3, r0
 80191a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80191aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80191ac:	4618      	mov	r0, r3
 80191ae:	3710      	adds	r7, #16
 80191b0:	46bd      	mov	sp, r7
 80191b2:	bd80      	pop	{r7, pc}

080191b4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80191b4:	b580      	push	{r7, lr}
 80191b6:	b082      	sub	sp, #8
 80191b8:	af00      	add	r7, sp, #0
 80191ba:	6078      	str	r0, [r7, #4]
 80191bc:	460b      	mov	r3, r1
 80191be:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80191c6:	78fa      	ldrb	r2, [r7, #3]
 80191c8:	4611      	mov	r1, r2
 80191ca:	4618      	mov	r0, r3
 80191cc:	f7ed fb9d 	bl	800690a <HAL_HCD_HC_GetXferCount>
 80191d0:	4603      	mov	r3, r0
}
 80191d2:	4618      	mov	r0, r3
 80191d4:	3708      	adds	r7, #8
 80191d6:	46bd      	mov	sp, r7
 80191d8:	bd80      	pop	{r7, pc}

080191da <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80191da:	b590      	push	{r4, r7, lr}
 80191dc:	b089      	sub	sp, #36	; 0x24
 80191de:	af04      	add	r7, sp, #16
 80191e0:	6078      	str	r0, [r7, #4]
 80191e2:	4608      	mov	r0, r1
 80191e4:	4611      	mov	r1, r2
 80191e6:	461a      	mov	r2, r3
 80191e8:	4603      	mov	r3, r0
 80191ea:	70fb      	strb	r3, [r7, #3]
 80191ec:	460b      	mov	r3, r1
 80191ee:	70bb      	strb	r3, [r7, #2]
 80191f0:	4613      	mov	r3, r2
 80191f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80191f4:	2300      	movs	r3, #0
 80191f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80191f8:	2300      	movs	r3, #0
 80191fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8019202:	787c      	ldrb	r4, [r7, #1]
 8019204:	78ba      	ldrb	r2, [r7, #2]
 8019206:	78f9      	ldrb	r1, [r7, #3]
 8019208:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801920a:	9302      	str	r3, [sp, #8]
 801920c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019210:	9301      	str	r3, [sp, #4]
 8019212:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019216:	9300      	str	r3, [sp, #0]
 8019218:	4623      	mov	r3, r4
 801921a:	f7ed f800 	bl	800621e <HAL_HCD_HC_Init>
 801921e:	4603      	mov	r3, r0
 8019220:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8019222:	7bfb      	ldrb	r3, [r7, #15]
 8019224:	4618      	mov	r0, r3
 8019226:	f000 f8ed 	bl	8019404 <USBH_Get_USB_Status>
 801922a:	4603      	mov	r3, r0
 801922c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801922e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019230:	4618      	mov	r0, r3
 8019232:	3714      	adds	r7, #20
 8019234:	46bd      	mov	sp, r7
 8019236:	bd90      	pop	{r4, r7, pc}

08019238 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019238:	b580      	push	{r7, lr}
 801923a:	b084      	sub	sp, #16
 801923c:	af00      	add	r7, sp, #0
 801923e:	6078      	str	r0, [r7, #4]
 8019240:	460b      	mov	r3, r1
 8019242:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019244:	2300      	movs	r3, #0
 8019246:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019248:	2300      	movs	r3, #0
 801924a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019252:	78fa      	ldrb	r2, [r7, #3]
 8019254:	4611      	mov	r1, r2
 8019256:	4618      	mov	r0, r3
 8019258:	f7ed f870 	bl	800633c <HAL_HCD_HC_Halt>
 801925c:	4603      	mov	r3, r0
 801925e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019260:	7bfb      	ldrb	r3, [r7, #15]
 8019262:	4618      	mov	r0, r3
 8019264:	f000 f8ce 	bl	8019404 <USBH_Get_USB_Status>
 8019268:	4603      	mov	r3, r0
 801926a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801926c:	7bbb      	ldrb	r3, [r7, #14]
}
 801926e:	4618      	mov	r0, r3
 8019270:	3710      	adds	r7, #16
 8019272:	46bd      	mov	sp, r7
 8019274:	bd80      	pop	{r7, pc}

08019276 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8019276:	b590      	push	{r4, r7, lr}
 8019278:	b089      	sub	sp, #36	; 0x24
 801927a:	af04      	add	r7, sp, #16
 801927c:	6078      	str	r0, [r7, #4]
 801927e:	4608      	mov	r0, r1
 8019280:	4611      	mov	r1, r2
 8019282:	461a      	mov	r2, r3
 8019284:	4603      	mov	r3, r0
 8019286:	70fb      	strb	r3, [r7, #3]
 8019288:	460b      	mov	r3, r1
 801928a:	70bb      	strb	r3, [r7, #2]
 801928c:	4613      	mov	r3, r2
 801928e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019290:	2300      	movs	r3, #0
 8019292:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019294:	2300      	movs	r3, #0
 8019296:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801929e:	787c      	ldrb	r4, [r7, #1]
 80192a0:	78ba      	ldrb	r2, [r7, #2]
 80192a2:	78f9      	ldrb	r1, [r7, #3]
 80192a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80192a8:	9303      	str	r3, [sp, #12]
 80192aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80192ac:	9302      	str	r3, [sp, #8]
 80192ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192b0:	9301      	str	r3, [sp, #4]
 80192b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80192b6:	9300      	str	r3, [sp, #0]
 80192b8:	4623      	mov	r3, r4
 80192ba:	f7ed f863 	bl	8006384 <HAL_HCD_HC_SubmitRequest>
 80192be:	4603      	mov	r3, r0
 80192c0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80192c2:	7bfb      	ldrb	r3, [r7, #15]
 80192c4:	4618      	mov	r0, r3
 80192c6:	f000 f89d 	bl	8019404 <USBH_Get_USB_Status>
 80192ca:	4603      	mov	r3, r0
 80192cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80192ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80192d0:	4618      	mov	r0, r3
 80192d2:	3714      	adds	r7, #20
 80192d4:	46bd      	mov	sp, r7
 80192d6:	bd90      	pop	{r4, r7, pc}

080192d8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80192d8:	b580      	push	{r7, lr}
 80192da:	b082      	sub	sp, #8
 80192dc:	af00      	add	r7, sp, #0
 80192de:	6078      	str	r0, [r7, #4]
 80192e0:	460b      	mov	r3, r1
 80192e2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80192ea:	78fa      	ldrb	r2, [r7, #3]
 80192ec:	4611      	mov	r1, r2
 80192ee:	4618      	mov	r0, r3
 80192f0:	f7ed faf7 	bl	80068e2 <HAL_HCD_HC_GetURBState>
 80192f4:	4603      	mov	r3, r0
}
 80192f6:	4618      	mov	r0, r3
 80192f8:	3708      	adds	r7, #8
 80192fa:	46bd      	mov	sp, r7
 80192fc:	bd80      	pop	{r7, pc}

080192fe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80192fe:	b580      	push	{r7, lr}
 8019300:	b082      	sub	sp, #8
 8019302:	af00      	add	r7, sp, #0
 8019304:	6078      	str	r0, [r7, #4]
 8019306:	460b      	mov	r3, r1
 8019308:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8019310:	2b01      	cmp	r3, #1
 8019312:	d103      	bne.n	801931c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8019314:	78fb      	ldrb	r3, [r7, #3]
 8019316:	4618      	mov	r0, r3
 8019318:	f000 f8a0 	bl	801945c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801931c:	20c8      	movs	r0, #200	; 0xc8
 801931e:	f7e9 fa07 	bl	8002730 <HAL_Delay>
  return USBH_OK;
 8019322:	2300      	movs	r3, #0
}
 8019324:	4618      	mov	r0, r3
 8019326:	3708      	adds	r7, #8
 8019328:	46bd      	mov	sp, r7
 801932a:	bd80      	pop	{r7, pc}

0801932c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801932c:	b480      	push	{r7}
 801932e:	b085      	sub	sp, #20
 8019330:	af00      	add	r7, sp, #0
 8019332:	6078      	str	r0, [r7, #4]
 8019334:	460b      	mov	r3, r1
 8019336:	70fb      	strb	r3, [r7, #3]
 8019338:	4613      	mov	r3, r2
 801933a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019342:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8019344:	78fb      	ldrb	r3, [r7, #3]
 8019346:	68fa      	ldr	r2, [r7, #12]
 8019348:	212c      	movs	r1, #44	; 0x2c
 801934a:	fb01 f303 	mul.w	r3, r1, r3
 801934e:	4413      	add	r3, r2
 8019350:	333b      	adds	r3, #59	; 0x3b
 8019352:	781b      	ldrb	r3, [r3, #0]
 8019354:	2b00      	cmp	r3, #0
 8019356:	d009      	beq.n	801936c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8019358:	78fb      	ldrb	r3, [r7, #3]
 801935a:	68fa      	ldr	r2, [r7, #12]
 801935c:	212c      	movs	r1, #44	; 0x2c
 801935e:	fb01 f303 	mul.w	r3, r1, r3
 8019362:	4413      	add	r3, r2
 8019364:	3354      	adds	r3, #84	; 0x54
 8019366:	78ba      	ldrb	r2, [r7, #2]
 8019368:	701a      	strb	r2, [r3, #0]
 801936a:	e008      	b.n	801937e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801936c:	78fb      	ldrb	r3, [r7, #3]
 801936e:	68fa      	ldr	r2, [r7, #12]
 8019370:	212c      	movs	r1, #44	; 0x2c
 8019372:	fb01 f303 	mul.w	r3, r1, r3
 8019376:	4413      	add	r3, r2
 8019378:	3355      	adds	r3, #85	; 0x55
 801937a:	78ba      	ldrb	r2, [r7, #2]
 801937c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801937e:	2300      	movs	r3, #0
}
 8019380:	4618      	mov	r0, r3
 8019382:	3714      	adds	r7, #20
 8019384:	46bd      	mov	sp, r7
 8019386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801938a:	4770      	bx	lr

0801938c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801938c:	b480      	push	{r7}
 801938e:	b085      	sub	sp, #20
 8019390:	af00      	add	r7, sp, #0
 8019392:	6078      	str	r0, [r7, #4]
 8019394:	460b      	mov	r3, r1
 8019396:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8019398:	2300      	movs	r3, #0
 801939a:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80193a2:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 80193a4:	78fb      	ldrb	r3, [r7, #3]
 80193a6:	68ba      	ldr	r2, [r7, #8]
 80193a8:	212c      	movs	r1, #44	; 0x2c
 80193aa:	fb01 f303 	mul.w	r3, r1, r3
 80193ae:	4413      	add	r3, r2
 80193b0:	333b      	adds	r3, #59	; 0x3b
 80193b2:	781b      	ldrb	r3, [r3, #0]
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	d009      	beq.n	80193cc <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 80193b8:	78fb      	ldrb	r3, [r7, #3]
 80193ba:	68ba      	ldr	r2, [r7, #8]
 80193bc:	212c      	movs	r1, #44	; 0x2c
 80193be:	fb01 f303 	mul.w	r3, r1, r3
 80193c2:	4413      	add	r3, r2
 80193c4:	3354      	adds	r3, #84	; 0x54
 80193c6:	781b      	ldrb	r3, [r3, #0]
 80193c8:	73fb      	strb	r3, [r7, #15]
 80193ca:	e008      	b.n	80193de <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 80193cc:	78fb      	ldrb	r3, [r7, #3]
 80193ce:	68ba      	ldr	r2, [r7, #8]
 80193d0:	212c      	movs	r1, #44	; 0x2c
 80193d2:	fb01 f303 	mul.w	r3, r1, r3
 80193d6:	4413      	add	r3, r2
 80193d8:	3355      	adds	r3, #85	; 0x55
 80193da:	781b      	ldrb	r3, [r3, #0]
 80193dc:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 80193de:	7bfb      	ldrb	r3, [r7, #15]
}
 80193e0:	4618      	mov	r0, r3
 80193e2:	3714      	adds	r7, #20
 80193e4:	46bd      	mov	sp, r7
 80193e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ea:	4770      	bx	lr

080193ec <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80193ec:	b580      	push	{r7, lr}
 80193ee:	b082      	sub	sp, #8
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80193f4:	6878      	ldr	r0, [r7, #4]
 80193f6:	f7e9 f99b 	bl	8002730 <HAL_Delay>
}
 80193fa:	bf00      	nop
 80193fc:	3708      	adds	r7, #8
 80193fe:	46bd      	mov	sp, r7
 8019400:	bd80      	pop	{r7, pc}
	...

08019404 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019404:	b480      	push	{r7}
 8019406:	b085      	sub	sp, #20
 8019408:	af00      	add	r7, sp, #0
 801940a:	4603      	mov	r3, r0
 801940c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801940e:	2300      	movs	r3, #0
 8019410:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019412:	79fb      	ldrb	r3, [r7, #7]
 8019414:	2b03      	cmp	r3, #3
 8019416:	d817      	bhi.n	8019448 <USBH_Get_USB_Status+0x44>
 8019418:	a201      	add	r2, pc, #4	; (adr r2, 8019420 <USBH_Get_USB_Status+0x1c>)
 801941a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801941e:	bf00      	nop
 8019420:	08019431 	.word	0x08019431
 8019424:	08019437 	.word	0x08019437
 8019428:	0801943d 	.word	0x0801943d
 801942c:	08019443 	.word	0x08019443
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8019430:	2300      	movs	r3, #0
 8019432:	73fb      	strb	r3, [r7, #15]
    break;
 8019434:	e00b      	b.n	801944e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8019436:	2302      	movs	r3, #2
 8019438:	73fb      	strb	r3, [r7, #15]
    break;
 801943a:	e008      	b.n	801944e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801943c:	2301      	movs	r3, #1
 801943e:	73fb      	strb	r3, [r7, #15]
    break;
 8019440:	e005      	b.n	801944e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8019442:	2302      	movs	r3, #2
 8019444:	73fb      	strb	r3, [r7, #15]
    break;
 8019446:	e002      	b.n	801944e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8019448:	2302      	movs	r3, #2
 801944a:	73fb      	strb	r3, [r7, #15]
    break;
 801944c:	bf00      	nop
  }
  return usb_status;
 801944e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019450:	4618      	mov	r0, r3
 8019452:	3714      	adds	r7, #20
 8019454:	46bd      	mov	sp, r7
 8019456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801945a:	4770      	bx	lr

0801945c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801945c:	b580      	push	{r7, lr}
 801945e:	b084      	sub	sp, #16
 8019460:	af00      	add	r7, sp, #0
 8019462:	4603      	mov	r3, r0
 8019464:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8019466:	79fb      	ldrb	r3, [r7, #7]
 8019468:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801946a:	79fb      	ldrb	r3, [r7, #7]
 801946c:	2b00      	cmp	r3, #0
 801946e:	d102      	bne.n	8019476 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8019470:	2300      	movs	r3, #0
 8019472:	73fb      	strb	r3, [r7, #15]
 8019474:	e001      	b.n	801947a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8019476:	2301      	movs	r3, #1
 8019478:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,(GPIO_PinState)data);
 801947a:	7bfb      	ldrb	r3, [r7, #15]
 801947c:	461a      	mov	r2, r3
 801947e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8019482:	4803      	ldr	r0, [pc, #12]	; (8019490 <MX_DriverVbusFS+0x34>)
 8019484:	f7ec fe50 	bl	8006128 <HAL_GPIO_WritePin>
}
 8019488:	bf00      	nop
 801948a:	3710      	adds	r7, #16
 801948c:	46bd      	mov	sp, r7
 801948e:	bd80      	pop	{r7, pc}
 8019490:	40020400 	.word	0x40020400

08019494 <__libc_init_array>:
 8019494:	b570      	push	{r4, r5, r6, lr}
 8019496:	4d0d      	ldr	r5, [pc, #52]	; (80194cc <__libc_init_array+0x38>)
 8019498:	4c0d      	ldr	r4, [pc, #52]	; (80194d0 <__libc_init_array+0x3c>)
 801949a:	1b64      	subs	r4, r4, r5
 801949c:	10a4      	asrs	r4, r4, #2
 801949e:	2600      	movs	r6, #0
 80194a0:	42a6      	cmp	r6, r4
 80194a2:	d109      	bne.n	80194b8 <__libc_init_array+0x24>
 80194a4:	4d0b      	ldr	r5, [pc, #44]	; (80194d4 <__libc_init_array+0x40>)
 80194a6:	4c0c      	ldr	r4, [pc, #48]	; (80194d8 <__libc_init_array+0x44>)
 80194a8:	f002 fdbe 	bl	801c028 <_init>
 80194ac:	1b64      	subs	r4, r4, r5
 80194ae:	10a4      	asrs	r4, r4, #2
 80194b0:	2600      	movs	r6, #0
 80194b2:	42a6      	cmp	r6, r4
 80194b4:	d105      	bne.n	80194c2 <__libc_init_array+0x2e>
 80194b6:	bd70      	pop	{r4, r5, r6, pc}
 80194b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80194bc:	4798      	blx	r3
 80194be:	3601      	adds	r6, #1
 80194c0:	e7ee      	b.n	80194a0 <__libc_init_array+0xc>
 80194c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80194c6:	4798      	blx	r3
 80194c8:	3601      	adds	r6, #1
 80194ca:	e7f2      	b.n	80194b2 <__libc_init_array+0x1e>
 80194cc:	0801f7d0 	.word	0x0801f7d0
 80194d0:	0801f7d0 	.word	0x0801f7d0
 80194d4:	0801f7d0 	.word	0x0801f7d0
 80194d8:	0801f7d4 	.word	0x0801f7d4

080194dc <malloc>:
 80194dc:	4b02      	ldr	r3, [pc, #8]	; (80194e8 <malloc+0xc>)
 80194de:	4601      	mov	r1, r0
 80194e0:	6818      	ldr	r0, [r3, #0]
 80194e2:	f000 b87f 	b.w	80195e4 <_malloc_r>
 80194e6:	bf00      	nop
 80194e8:	20000540 	.word	0x20000540

080194ec <free>:
 80194ec:	4b02      	ldr	r3, [pc, #8]	; (80194f8 <free+0xc>)
 80194ee:	4601      	mov	r1, r0
 80194f0:	6818      	ldr	r0, [r3, #0]
 80194f2:	f000 b827 	b.w	8019544 <_free_r>
 80194f6:	bf00      	nop
 80194f8:	20000540 	.word	0x20000540

080194fc <memcmp>:
 80194fc:	b530      	push	{r4, r5, lr}
 80194fe:	3901      	subs	r1, #1
 8019500:	2400      	movs	r4, #0
 8019502:	42a2      	cmp	r2, r4
 8019504:	d101      	bne.n	801950a <memcmp+0xe>
 8019506:	2000      	movs	r0, #0
 8019508:	e005      	b.n	8019516 <memcmp+0x1a>
 801950a:	5d03      	ldrb	r3, [r0, r4]
 801950c:	3401      	adds	r4, #1
 801950e:	5d0d      	ldrb	r5, [r1, r4]
 8019510:	42ab      	cmp	r3, r5
 8019512:	d0f6      	beq.n	8019502 <memcmp+0x6>
 8019514:	1b58      	subs	r0, r3, r5
 8019516:	bd30      	pop	{r4, r5, pc}

08019518 <memcpy>:
 8019518:	440a      	add	r2, r1
 801951a:	4291      	cmp	r1, r2
 801951c:	f100 33ff 	add.w	r3, r0, #4294967295
 8019520:	d100      	bne.n	8019524 <memcpy+0xc>
 8019522:	4770      	bx	lr
 8019524:	b510      	push	{r4, lr}
 8019526:	f811 4b01 	ldrb.w	r4, [r1], #1
 801952a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801952e:	4291      	cmp	r1, r2
 8019530:	d1f9      	bne.n	8019526 <memcpy+0xe>
 8019532:	bd10      	pop	{r4, pc}

08019534 <memset>:
 8019534:	4402      	add	r2, r0
 8019536:	4603      	mov	r3, r0
 8019538:	4293      	cmp	r3, r2
 801953a:	d100      	bne.n	801953e <memset+0xa>
 801953c:	4770      	bx	lr
 801953e:	f803 1b01 	strb.w	r1, [r3], #1
 8019542:	e7f9      	b.n	8019538 <memset+0x4>

08019544 <_free_r>:
 8019544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019546:	2900      	cmp	r1, #0
 8019548:	d048      	beq.n	80195dc <_free_r+0x98>
 801954a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801954e:	9001      	str	r0, [sp, #4]
 8019550:	2b00      	cmp	r3, #0
 8019552:	f1a1 0404 	sub.w	r4, r1, #4
 8019556:	bfb8      	it	lt
 8019558:	18e4      	addlt	r4, r4, r3
 801955a:	f001 ff13 	bl	801b384 <__malloc_lock>
 801955e:	4a20      	ldr	r2, [pc, #128]	; (80195e0 <_free_r+0x9c>)
 8019560:	9801      	ldr	r0, [sp, #4]
 8019562:	6813      	ldr	r3, [r2, #0]
 8019564:	4615      	mov	r5, r2
 8019566:	b933      	cbnz	r3, 8019576 <_free_r+0x32>
 8019568:	6063      	str	r3, [r4, #4]
 801956a:	6014      	str	r4, [r2, #0]
 801956c:	b003      	add	sp, #12
 801956e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019572:	f001 bf0d 	b.w	801b390 <__malloc_unlock>
 8019576:	42a3      	cmp	r3, r4
 8019578:	d90b      	bls.n	8019592 <_free_r+0x4e>
 801957a:	6821      	ldr	r1, [r4, #0]
 801957c:	1862      	adds	r2, r4, r1
 801957e:	4293      	cmp	r3, r2
 8019580:	bf04      	itt	eq
 8019582:	681a      	ldreq	r2, [r3, #0]
 8019584:	685b      	ldreq	r3, [r3, #4]
 8019586:	6063      	str	r3, [r4, #4]
 8019588:	bf04      	itt	eq
 801958a:	1852      	addeq	r2, r2, r1
 801958c:	6022      	streq	r2, [r4, #0]
 801958e:	602c      	str	r4, [r5, #0]
 8019590:	e7ec      	b.n	801956c <_free_r+0x28>
 8019592:	461a      	mov	r2, r3
 8019594:	685b      	ldr	r3, [r3, #4]
 8019596:	b10b      	cbz	r3, 801959c <_free_r+0x58>
 8019598:	42a3      	cmp	r3, r4
 801959a:	d9fa      	bls.n	8019592 <_free_r+0x4e>
 801959c:	6811      	ldr	r1, [r2, #0]
 801959e:	1855      	adds	r5, r2, r1
 80195a0:	42a5      	cmp	r5, r4
 80195a2:	d10b      	bne.n	80195bc <_free_r+0x78>
 80195a4:	6824      	ldr	r4, [r4, #0]
 80195a6:	4421      	add	r1, r4
 80195a8:	1854      	adds	r4, r2, r1
 80195aa:	42a3      	cmp	r3, r4
 80195ac:	6011      	str	r1, [r2, #0]
 80195ae:	d1dd      	bne.n	801956c <_free_r+0x28>
 80195b0:	681c      	ldr	r4, [r3, #0]
 80195b2:	685b      	ldr	r3, [r3, #4]
 80195b4:	6053      	str	r3, [r2, #4]
 80195b6:	4421      	add	r1, r4
 80195b8:	6011      	str	r1, [r2, #0]
 80195ba:	e7d7      	b.n	801956c <_free_r+0x28>
 80195bc:	d902      	bls.n	80195c4 <_free_r+0x80>
 80195be:	230c      	movs	r3, #12
 80195c0:	6003      	str	r3, [r0, #0]
 80195c2:	e7d3      	b.n	801956c <_free_r+0x28>
 80195c4:	6825      	ldr	r5, [r4, #0]
 80195c6:	1961      	adds	r1, r4, r5
 80195c8:	428b      	cmp	r3, r1
 80195ca:	bf04      	itt	eq
 80195cc:	6819      	ldreq	r1, [r3, #0]
 80195ce:	685b      	ldreq	r3, [r3, #4]
 80195d0:	6063      	str	r3, [r4, #4]
 80195d2:	bf04      	itt	eq
 80195d4:	1949      	addeq	r1, r1, r5
 80195d6:	6021      	streq	r1, [r4, #0]
 80195d8:	6054      	str	r4, [r2, #4]
 80195da:	e7c7      	b.n	801956c <_free_r+0x28>
 80195dc:	b003      	add	sp, #12
 80195de:	bd30      	pop	{r4, r5, pc}
 80195e0:	200008d8 	.word	0x200008d8

080195e4 <_malloc_r>:
 80195e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195e6:	1ccd      	adds	r5, r1, #3
 80195e8:	f025 0503 	bic.w	r5, r5, #3
 80195ec:	3508      	adds	r5, #8
 80195ee:	2d0c      	cmp	r5, #12
 80195f0:	bf38      	it	cc
 80195f2:	250c      	movcc	r5, #12
 80195f4:	2d00      	cmp	r5, #0
 80195f6:	4606      	mov	r6, r0
 80195f8:	db01      	blt.n	80195fe <_malloc_r+0x1a>
 80195fa:	42a9      	cmp	r1, r5
 80195fc:	d903      	bls.n	8019606 <_malloc_r+0x22>
 80195fe:	230c      	movs	r3, #12
 8019600:	6033      	str	r3, [r6, #0]
 8019602:	2000      	movs	r0, #0
 8019604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019606:	f001 febd 	bl	801b384 <__malloc_lock>
 801960a:	4921      	ldr	r1, [pc, #132]	; (8019690 <_malloc_r+0xac>)
 801960c:	680a      	ldr	r2, [r1, #0]
 801960e:	4614      	mov	r4, r2
 8019610:	b99c      	cbnz	r4, 801963a <_malloc_r+0x56>
 8019612:	4f20      	ldr	r7, [pc, #128]	; (8019694 <_malloc_r+0xb0>)
 8019614:	683b      	ldr	r3, [r7, #0]
 8019616:	b923      	cbnz	r3, 8019622 <_malloc_r+0x3e>
 8019618:	4621      	mov	r1, r4
 801961a:	4630      	mov	r0, r6
 801961c:	f000 fd14 	bl	801a048 <_sbrk_r>
 8019620:	6038      	str	r0, [r7, #0]
 8019622:	4629      	mov	r1, r5
 8019624:	4630      	mov	r0, r6
 8019626:	f000 fd0f 	bl	801a048 <_sbrk_r>
 801962a:	1c43      	adds	r3, r0, #1
 801962c:	d123      	bne.n	8019676 <_malloc_r+0x92>
 801962e:	230c      	movs	r3, #12
 8019630:	6033      	str	r3, [r6, #0]
 8019632:	4630      	mov	r0, r6
 8019634:	f001 feac 	bl	801b390 <__malloc_unlock>
 8019638:	e7e3      	b.n	8019602 <_malloc_r+0x1e>
 801963a:	6823      	ldr	r3, [r4, #0]
 801963c:	1b5b      	subs	r3, r3, r5
 801963e:	d417      	bmi.n	8019670 <_malloc_r+0x8c>
 8019640:	2b0b      	cmp	r3, #11
 8019642:	d903      	bls.n	801964c <_malloc_r+0x68>
 8019644:	6023      	str	r3, [r4, #0]
 8019646:	441c      	add	r4, r3
 8019648:	6025      	str	r5, [r4, #0]
 801964a:	e004      	b.n	8019656 <_malloc_r+0x72>
 801964c:	6863      	ldr	r3, [r4, #4]
 801964e:	42a2      	cmp	r2, r4
 8019650:	bf0c      	ite	eq
 8019652:	600b      	streq	r3, [r1, #0]
 8019654:	6053      	strne	r3, [r2, #4]
 8019656:	4630      	mov	r0, r6
 8019658:	f001 fe9a 	bl	801b390 <__malloc_unlock>
 801965c:	f104 000b 	add.w	r0, r4, #11
 8019660:	1d23      	adds	r3, r4, #4
 8019662:	f020 0007 	bic.w	r0, r0, #7
 8019666:	1ac2      	subs	r2, r0, r3
 8019668:	d0cc      	beq.n	8019604 <_malloc_r+0x20>
 801966a:	1a1b      	subs	r3, r3, r0
 801966c:	50a3      	str	r3, [r4, r2]
 801966e:	e7c9      	b.n	8019604 <_malloc_r+0x20>
 8019670:	4622      	mov	r2, r4
 8019672:	6864      	ldr	r4, [r4, #4]
 8019674:	e7cc      	b.n	8019610 <_malloc_r+0x2c>
 8019676:	1cc4      	adds	r4, r0, #3
 8019678:	f024 0403 	bic.w	r4, r4, #3
 801967c:	42a0      	cmp	r0, r4
 801967e:	d0e3      	beq.n	8019648 <_malloc_r+0x64>
 8019680:	1a21      	subs	r1, r4, r0
 8019682:	4630      	mov	r0, r6
 8019684:	f000 fce0 	bl	801a048 <_sbrk_r>
 8019688:	3001      	adds	r0, #1
 801968a:	d1dd      	bne.n	8019648 <_malloc_r+0x64>
 801968c:	e7cf      	b.n	801962e <_malloc_r+0x4a>
 801968e:	bf00      	nop
 8019690:	200008d8 	.word	0x200008d8
 8019694:	200008dc 	.word	0x200008dc

08019698 <__cvt>:
 8019698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801969c:	ec55 4b10 	vmov	r4, r5, d0
 80196a0:	2d00      	cmp	r5, #0
 80196a2:	460e      	mov	r6, r1
 80196a4:	4619      	mov	r1, r3
 80196a6:	462b      	mov	r3, r5
 80196a8:	bfbb      	ittet	lt
 80196aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80196ae:	461d      	movlt	r5, r3
 80196b0:	2300      	movge	r3, #0
 80196b2:	232d      	movlt	r3, #45	; 0x2d
 80196b4:	700b      	strb	r3, [r1, #0]
 80196b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80196b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80196bc:	4691      	mov	r9, r2
 80196be:	f023 0820 	bic.w	r8, r3, #32
 80196c2:	bfbc      	itt	lt
 80196c4:	4622      	movlt	r2, r4
 80196c6:	4614      	movlt	r4, r2
 80196c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80196cc:	d005      	beq.n	80196da <__cvt+0x42>
 80196ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80196d2:	d100      	bne.n	80196d6 <__cvt+0x3e>
 80196d4:	3601      	adds	r6, #1
 80196d6:	2102      	movs	r1, #2
 80196d8:	e000      	b.n	80196dc <__cvt+0x44>
 80196da:	2103      	movs	r1, #3
 80196dc:	ab03      	add	r3, sp, #12
 80196de:	9301      	str	r3, [sp, #4]
 80196e0:	ab02      	add	r3, sp, #8
 80196e2:	9300      	str	r3, [sp, #0]
 80196e4:	ec45 4b10 	vmov	d0, r4, r5
 80196e8:	4653      	mov	r3, sl
 80196ea:	4632      	mov	r2, r6
 80196ec:	f000 fe28 	bl	801a340 <_dtoa_r>
 80196f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80196f4:	4607      	mov	r7, r0
 80196f6:	d102      	bne.n	80196fe <__cvt+0x66>
 80196f8:	f019 0f01 	tst.w	r9, #1
 80196fc:	d022      	beq.n	8019744 <__cvt+0xac>
 80196fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019702:	eb07 0906 	add.w	r9, r7, r6
 8019706:	d110      	bne.n	801972a <__cvt+0x92>
 8019708:	783b      	ldrb	r3, [r7, #0]
 801970a:	2b30      	cmp	r3, #48	; 0x30
 801970c:	d10a      	bne.n	8019724 <__cvt+0x8c>
 801970e:	2200      	movs	r2, #0
 8019710:	2300      	movs	r3, #0
 8019712:	4620      	mov	r0, r4
 8019714:	4629      	mov	r1, r5
 8019716:	f7e7 f9d7 	bl	8000ac8 <__aeabi_dcmpeq>
 801971a:	b918      	cbnz	r0, 8019724 <__cvt+0x8c>
 801971c:	f1c6 0601 	rsb	r6, r6, #1
 8019720:	f8ca 6000 	str.w	r6, [sl]
 8019724:	f8da 3000 	ldr.w	r3, [sl]
 8019728:	4499      	add	r9, r3
 801972a:	2200      	movs	r2, #0
 801972c:	2300      	movs	r3, #0
 801972e:	4620      	mov	r0, r4
 8019730:	4629      	mov	r1, r5
 8019732:	f7e7 f9c9 	bl	8000ac8 <__aeabi_dcmpeq>
 8019736:	b108      	cbz	r0, 801973c <__cvt+0xa4>
 8019738:	f8cd 900c 	str.w	r9, [sp, #12]
 801973c:	2230      	movs	r2, #48	; 0x30
 801973e:	9b03      	ldr	r3, [sp, #12]
 8019740:	454b      	cmp	r3, r9
 8019742:	d307      	bcc.n	8019754 <__cvt+0xbc>
 8019744:	9b03      	ldr	r3, [sp, #12]
 8019746:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019748:	1bdb      	subs	r3, r3, r7
 801974a:	4638      	mov	r0, r7
 801974c:	6013      	str	r3, [r2, #0]
 801974e:	b004      	add	sp, #16
 8019750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019754:	1c59      	adds	r1, r3, #1
 8019756:	9103      	str	r1, [sp, #12]
 8019758:	701a      	strb	r2, [r3, #0]
 801975a:	e7f0      	b.n	801973e <__cvt+0xa6>

0801975c <__exponent>:
 801975c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801975e:	4603      	mov	r3, r0
 8019760:	2900      	cmp	r1, #0
 8019762:	bfb8      	it	lt
 8019764:	4249      	neglt	r1, r1
 8019766:	f803 2b02 	strb.w	r2, [r3], #2
 801976a:	bfb4      	ite	lt
 801976c:	222d      	movlt	r2, #45	; 0x2d
 801976e:	222b      	movge	r2, #43	; 0x2b
 8019770:	2909      	cmp	r1, #9
 8019772:	7042      	strb	r2, [r0, #1]
 8019774:	dd2a      	ble.n	80197cc <__exponent+0x70>
 8019776:	f10d 0407 	add.w	r4, sp, #7
 801977a:	46a4      	mov	ip, r4
 801977c:	270a      	movs	r7, #10
 801977e:	46a6      	mov	lr, r4
 8019780:	460a      	mov	r2, r1
 8019782:	fb91 f6f7 	sdiv	r6, r1, r7
 8019786:	fb07 1516 	mls	r5, r7, r6, r1
 801978a:	3530      	adds	r5, #48	; 0x30
 801978c:	2a63      	cmp	r2, #99	; 0x63
 801978e:	f104 34ff 	add.w	r4, r4, #4294967295
 8019792:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019796:	4631      	mov	r1, r6
 8019798:	dcf1      	bgt.n	801977e <__exponent+0x22>
 801979a:	3130      	adds	r1, #48	; 0x30
 801979c:	f1ae 0502 	sub.w	r5, lr, #2
 80197a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80197a4:	1c44      	adds	r4, r0, #1
 80197a6:	4629      	mov	r1, r5
 80197a8:	4561      	cmp	r1, ip
 80197aa:	d30a      	bcc.n	80197c2 <__exponent+0x66>
 80197ac:	f10d 0209 	add.w	r2, sp, #9
 80197b0:	eba2 020e 	sub.w	r2, r2, lr
 80197b4:	4565      	cmp	r5, ip
 80197b6:	bf88      	it	hi
 80197b8:	2200      	movhi	r2, #0
 80197ba:	4413      	add	r3, r2
 80197bc:	1a18      	subs	r0, r3, r0
 80197be:	b003      	add	sp, #12
 80197c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80197c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80197c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80197ca:	e7ed      	b.n	80197a8 <__exponent+0x4c>
 80197cc:	2330      	movs	r3, #48	; 0x30
 80197ce:	3130      	adds	r1, #48	; 0x30
 80197d0:	7083      	strb	r3, [r0, #2]
 80197d2:	70c1      	strb	r1, [r0, #3]
 80197d4:	1d03      	adds	r3, r0, #4
 80197d6:	e7f1      	b.n	80197bc <__exponent+0x60>

080197d8 <_printf_float>:
 80197d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197dc:	ed2d 8b02 	vpush	{d8}
 80197e0:	b08d      	sub	sp, #52	; 0x34
 80197e2:	460c      	mov	r4, r1
 80197e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80197e8:	4616      	mov	r6, r2
 80197ea:	461f      	mov	r7, r3
 80197ec:	4605      	mov	r5, r0
 80197ee:	f001 fd5d 	bl	801b2ac <_localeconv_r>
 80197f2:	f8d0 a000 	ldr.w	sl, [r0]
 80197f6:	4650      	mov	r0, sl
 80197f8:	f7e6 fcea 	bl	80001d0 <strlen>
 80197fc:	2300      	movs	r3, #0
 80197fe:	930a      	str	r3, [sp, #40]	; 0x28
 8019800:	6823      	ldr	r3, [r4, #0]
 8019802:	9305      	str	r3, [sp, #20]
 8019804:	f8d8 3000 	ldr.w	r3, [r8]
 8019808:	f894 b018 	ldrb.w	fp, [r4, #24]
 801980c:	3307      	adds	r3, #7
 801980e:	f023 0307 	bic.w	r3, r3, #7
 8019812:	f103 0208 	add.w	r2, r3, #8
 8019816:	f8c8 2000 	str.w	r2, [r8]
 801981a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801981e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019822:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019826:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801982a:	9307      	str	r3, [sp, #28]
 801982c:	f8cd 8018 	str.w	r8, [sp, #24]
 8019830:	ee08 0a10 	vmov	s16, r0
 8019834:	4b9f      	ldr	r3, [pc, #636]	; (8019ab4 <_printf_float+0x2dc>)
 8019836:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801983a:	f04f 32ff 	mov.w	r2, #4294967295
 801983e:	f7e7 f975 	bl	8000b2c <__aeabi_dcmpun>
 8019842:	bb88      	cbnz	r0, 80198a8 <_printf_float+0xd0>
 8019844:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019848:	4b9a      	ldr	r3, [pc, #616]	; (8019ab4 <_printf_float+0x2dc>)
 801984a:	f04f 32ff 	mov.w	r2, #4294967295
 801984e:	f7e7 f94f 	bl	8000af0 <__aeabi_dcmple>
 8019852:	bb48      	cbnz	r0, 80198a8 <_printf_float+0xd0>
 8019854:	2200      	movs	r2, #0
 8019856:	2300      	movs	r3, #0
 8019858:	4640      	mov	r0, r8
 801985a:	4649      	mov	r1, r9
 801985c:	f7e7 f93e 	bl	8000adc <__aeabi_dcmplt>
 8019860:	b110      	cbz	r0, 8019868 <_printf_float+0x90>
 8019862:	232d      	movs	r3, #45	; 0x2d
 8019864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019868:	4b93      	ldr	r3, [pc, #588]	; (8019ab8 <_printf_float+0x2e0>)
 801986a:	4894      	ldr	r0, [pc, #592]	; (8019abc <_printf_float+0x2e4>)
 801986c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019870:	bf94      	ite	ls
 8019872:	4698      	movls	r8, r3
 8019874:	4680      	movhi	r8, r0
 8019876:	2303      	movs	r3, #3
 8019878:	6123      	str	r3, [r4, #16]
 801987a:	9b05      	ldr	r3, [sp, #20]
 801987c:	f023 0204 	bic.w	r2, r3, #4
 8019880:	6022      	str	r2, [r4, #0]
 8019882:	f04f 0900 	mov.w	r9, #0
 8019886:	9700      	str	r7, [sp, #0]
 8019888:	4633      	mov	r3, r6
 801988a:	aa0b      	add	r2, sp, #44	; 0x2c
 801988c:	4621      	mov	r1, r4
 801988e:	4628      	mov	r0, r5
 8019890:	f000 f9d8 	bl	8019c44 <_printf_common>
 8019894:	3001      	adds	r0, #1
 8019896:	f040 8090 	bne.w	80199ba <_printf_float+0x1e2>
 801989a:	f04f 30ff 	mov.w	r0, #4294967295
 801989e:	b00d      	add	sp, #52	; 0x34
 80198a0:	ecbd 8b02 	vpop	{d8}
 80198a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198a8:	4642      	mov	r2, r8
 80198aa:	464b      	mov	r3, r9
 80198ac:	4640      	mov	r0, r8
 80198ae:	4649      	mov	r1, r9
 80198b0:	f7e7 f93c 	bl	8000b2c <__aeabi_dcmpun>
 80198b4:	b140      	cbz	r0, 80198c8 <_printf_float+0xf0>
 80198b6:	464b      	mov	r3, r9
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	bfbc      	itt	lt
 80198bc:	232d      	movlt	r3, #45	; 0x2d
 80198be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80198c2:	487f      	ldr	r0, [pc, #508]	; (8019ac0 <_printf_float+0x2e8>)
 80198c4:	4b7f      	ldr	r3, [pc, #508]	; (8019ac4 <_printf_float+0x2ec>)
 80198c6:	e7d1      	b.n	801986c <_printf_float+0x94>
 80198c8:	6863      	ldr	r3, [r4, #4]
 80198ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80198ce:	9206      	str	r2, [sp, #24]
 80198d0:	1c5a      	adds	r2, r3, #1
 80198d2:	d13f      	bne.n	8019954 <_printf_float+0x17c>
 80198d4:	2306      	movs	r3, #6
 80198d6:	6063      	str	r3, [r4, #4]
 80198d8:	9b05      	ldr	r3, [sp, #20]
 80198da:	6861      	ldr	r1, [r4, #4]
 80198dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80198e0:	2300      	movs	r3, #0
 80198e2:	9303      	str	r3, [sp, #12]
 80198e4:	ab0a      	add	r3, sp, #40	; 0x28
 80198e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80198ea:	ab09      	add	r3, sp, #36	; 0x24
 80198ec:	ec49 8b10 	vmov	d0, r8, r9
 80198f0:	9300      	str	r3, [sp, #0]
 80198f2:	6022      	str	r2, [r4, #0]
 80198f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80198f8:	4628      	mov	r0, r5
 80198fa:	f7ff fecd 	bl	8019698 <__cvt>
 80198fe:	9b06      	ldr	r3, [sp, #24]
 8019900:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019902:	2b47      	cmp	r3, #71	; 0x47
 8019904:	4680      	mov	r8, r0
 8019906:	d108      	bne.n	801991a <_printf_float+0x142>
 8019908:	1cc8      	adds	r0, r1, #3
 801990a:	db02      	blt.n	8019912 <_printf_float+0x13a>
 801990c:	6863      	ldr	r3, [r4, #4]
 801990e:	4299      	cmp	r1, r3
 8019910:	dd41      	ble.n	8019996 <_printf_float+0x1be>
 8019912:	f1ab 0b02 	sub.w	fp, fp, #2
 8019916:	fa5f fb8b 	uxtb.w	fp, fp
 801991a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801991e:	d820      	bhi.n	8019962 <_printf_float+0x18a>
 8019920:	3901      	subs	r1, #1
 8019922:	465a      	mov	r2, fp
 8019924:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019928:	9109      	str	r1, [sp, #36]	; 0x24
 801992a:	f7ff ff17 	bl	801975c <__exponent>
 801992e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019930:	1813      	adds	r3, r2, r0
 8019932:	2a01      	cmp	r2, #1
 8019934:	4681      	mov	r9, r0
 8019936:	6123      	str	r3, [r4, #16]
 8019938:	dc02      	bgt.n	8019940 <_printf_float+0x168>
 801993a:	6822      	ldr	r2, [r4, #0]
 801993c:	07d2      	lsls	r2, r2, #31
 801993e:	d501      	bpl.n	8019944 <_printf_float+0x16c>
 8019940:	3301      	adds	r3, #1
 8019942:	6123      	str	r3, [r4, #16]
 8019944:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019948:	2b00      	cmp	r3, #0
 801994a:	d09c      	beq.n	8019886 <_printf_float+0xae>
 801994c:	232d      	movs	r3, #45	; 0x2d
 801994e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019952:	e798      	b.n	8019886 <_printf_float+0xae>
 8019954:	9a06      	ldr	r2, [sp, #24]
 8019956:	2a47      	cmp	r2, #71	; 0x47
 8019958:	d1be      	bne.n	80198d8 <_printf_float+0x100>
 801995a:	2b00      	cmp	r3, #0
 801995c:	d1bc      	bne.n	80198d8 <_printf_float+0x100>
 801995e:	2301      	movs	r3, #1
 8019960:	e7b9      	b.n	80198d6 <_printf_float+0xfe>
 8019962:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8019966:	d118      	bne.n	801999a <_printf_float+0x1c2>
 8019968:	2900      	cmp	r1, #0
 801996a:	6863      	ldr	r3, [r4, #4]
 801996c:	dd0b      	ble.n	8019986 <_printf_float+0x1ae>
 801996e:	6121      	str	r1, [r4, #16]
 8019970:	b913      	cbnz	r3, 8019978 <_printf_float+0x1a0>
 8019972:	6822      	ldr	r2, [r4, #0]
 8019974:	07d0      	lsls	r0, r2, #31
 8019976:	d502      	bpl.n	801997e <_printf_float+0x1a6>
 8019978:	3301      	adds	r3, #1
 801997a:	440b      	add	r3, r1
 801997c:	6123      	str	r3, [r4, #16]
 801997e:	65a1      	str	r1, [r4, #88]	; 0x58
 8019980:	f04f 0900 	mov.w	r9, #0
 8019984:	e7de      	b.n	8019944 <_printf_float+0x16c>
 8019986:	b913      	cbnz	r3, 801998e <_printf_float+0x1b6>
 8019988:	6822      	ldr	r2, [r4, #0]
 801998a:	07d2      	lsls	r2, r2, #31
 801998c:	d501      	bpl.n	8019992 <_printf_float+0x1ba>
 801998e:	3302      	adds	r3, #2
 8019990:	e7f4      	b.n	801997c <_printf_float+0x1a4>
 8019992:	2301      	movs	r3, #1
 8019994:	e7f2      	b.n	801997c <_printf_float+0x1a4>
 8019996:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801999a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801999c:	4299      	cmp	r1, r3
 801999e:	db05      	blt.n	80199ac <_printf_float+0x1d4>
 80199a0:	6823      	ldr	r3, [r4, #0]
 80199a2:	6121      	str	r1, [r4, #16]
 80199a4:	07d8      	lsls	r0, r3, #31
 80199a6:	d5ea      	bpl.n	801997e <_printf_float+0x1a6>
 80199a8:	1c4b      	adds	r3, r1, #1
 80199aa:	e7e7      	b.n	801997c <_printf_float+0x1a4>
 80199ac:	2900      	cmp	r1, #0
 80199ae:	bfd4      	ite	le
 80199b0:	f1c1 0202 	rsble	r2, r1, #2
 80199b4:	2201      	movgt	r2, #1
 80199b6:	4413      	add	r3, r2
 80199b8:	e7e0      	b.n	801997c <_printf_float+0x1a4>
 80199ba:	6823      	ldr	r3, [r4, #0]
 80199bc:	055a      	lsls	r2, r3, #21
 80199be:	d407      	bmi.n	80199d0 <_printf_float+0x1f8>
 80199c0:	6923      	ldr	r3, [r4, #16]
 80199c2:	4642      	mov	r2, r8
 80199c4:	4631      	mov	r1, r6
 80199c6:	4628      	mov	r0, r5
 80199c8:	47b8      	blx	r7
 80199ca:	3001      	adds	r0, #1
 80199cc:	d12c      	bne.n	8019a28 <_printf_float+0x250>
 80199ce:	e764      	b.n	801989a <_printf_float+0xc2>
 80199d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80199d4:	f240 80e0 	bls.w	8019b98 <_printf_float+0x3c0>
 80199d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80199dc:	2200      	movs	r2, #0
 80199de:	2300      	movs	r3, #0
 80199e0:	f7e7 f872 	bl	8000ac8 <__aeabi_dcmpeq>
 80199e4:	2800      	cmp	r0, #0
 80199e6:	d034      	beq.n	8019a52 <_printf_float+0x27a>
 80199e8:	4a37      	ldr	r2, [pc, #220]	; (8019ac8 <_printf_float+0x2f0>)
 80199ea:	2301      	movs	r3, #1
 80199ec:	4631      	mov	r1, r6
 80199ee:	4628      	mov	r0, r5
 80199f0:	47b8      	blx	r7
 80199f2:	3001      	adds	r0, #1
 80199f4:	f43f af51 	beq.w	801989a <_printf_float+0xc2>
 80199f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80199fc:	429a      	cmp	r2, r3
 80199fe:	db02      	blt.n	8019a06 <_printf_float+0x22e>
 8019a00:	6823      	ldr	r3, [r4, #0]
 8019a02:	07d8      	lsls	r0, r3, #31
 8019a04:	d510      	bpl.n	8019a28 <_printf_float+0x250>
 8019a06:	ee18 3a10 	vmov	r3, s16
 8019a0a:	4652      	mov	r2, sl
 8019a0c:	4631      	mov	r1, r6
 8019a0e:	4628      	mov	r0, r5
 8019a10:	47b8      	blx	r7
 8019a12:	3001      	adds	r0, #1
 8019a14:	f43f af41 	beq.w	801989a <_printf_float+0xc2>
 8019a18:	f04f 0800 	mov.w	r8, #0
 8019a1c:	f104 091a 	add.w	r9, r4, #26
 8019a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019a22:	3b01      	subs	r3, #1
 8019a24:	4543      	cmp	r3, r8
 8019a26:	dc09      	bgt.n	8019a3c <_printf_float+0x264>
 8019a28:	6823      	ldr	r3, [r4, #0]
 8019a2a:	079b      	lsls	r3, r3, #30
 8019a2c:	f100 8105 	bmi.w	8019c3a <_printf_float+0x462>
 8019a30:	68e0      	ldr	r0, [r4, #12]
 8019a32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019a34:	4298      	cmp	r0, r3
 8019a36:	bfb8      	it	lt
 8019a38:	4618      	movlt	r0, r3
 8019a3a:	e730      	b.n	801989e <_printf_float+0xc6>
 8019a3c:	2301      	movs	r3, #1
 8019a3e:	464a      	mov	r2, r9
 8019a40:	4631      	mov	r1, r6
 8019a42:	4628      	mov	r0, r5
 8019a44:	47b8      	blx	r7
 8019a46:	3001      	adds	r0, #1
 8019a48:	f43f af27 	beq.w	801989a <_printf_float+0xc2>
 8019a4c:	f108 0801 	add.w	r8, r8, #1
 8019a50:	e7e6      	b.n	8019a20 <_printf_float+0x248>
 8019a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	dc39      	bgt.n	8019acc <_printf_float+0x2f4>
 8019a58:	4a1b      	ldr	r2, [pc, #108]	; (8019ac8 <_printf_float+0x2f0>)
 8019a5a:	2301      	movs	r3, #1
 8019a5c:	4631      	mov	r1, r6
 8019a5e:	4628      	mov	r0, r5
 8019a60:	47b8      	blx	r7
 8019a62:	3001      	adds	r0, #1
 8019a64:	f43f af19 	beq.w	801989a <_printf_float+0xc2>
 8019a68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019a6c:	4313      	orrs	r3, r2
 8019a6e:	d102      	bne.n	8019a76 <_printf_float+0x29e>
 8019a70:	6823      	ldr	r3, [r4, #0]
 8019a72:	07d9      	lsls	r1, r3, #31
 8019a74:	d5d8      	bpl.n	8019a28 <_printf_float+0x250>
 8019a76:	ee18 3a10 	vmov	r3, s16
 8019a7a:	4652      	mov	r2, sl
 8019a7c:	4631      	mov	r1, r6
 8019a7e:	4628      	mov	r0, r5
 8019a80:	47b8      	blx	r7
 8019a82:	3001      	adds	r0, #1
 8019a84:	f43f af09 	beq.w	801989a <_printf_float+0xc2>
 8019a88:	f04f 0900 	mov.w	r9, #0
 8019a8c:	f104 0a1a 	add.w	sl, r4, #26
 8019a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a92:	425b      	negs	r3, r3
 8019a94:	454b      	cmp	r3, r9
 8019a96:	dc01      	bgt.n	8019a9c <_printf_float+0x2c4>
 8019a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019a9a:	e792      	b.n	80199c2 <_printf_float+0x1ea>
 8019a9c:	2301      	movs	r3, #1
 8019a9e:	4652      	mov	r2, sl
 8019aa0:	4631      	mov	r1, r6
 8019aa2:	4628      	mov	r0, r5
 8019aa4:	47b8      	blx	r7
 8019aa6:	3001      	adds	r0, #1
 8019aa8:	f43f aef7 	beq.w	801989a <_printf_float+0xc2>
 8019aac:	f109 0901 	add.w	r9, r9, #1
 8019ab0:	e7ee      	b.n	8019a90 <_printf_float+0x2b8>
 8019ab2:	bf00      	nop
 8019ab4:	7fefffff 	.word	0x7fefffff
 8019ab8:	0801f488 	.word	0x0801f488
 8019abc:	0801f48c 	.word	0x0801f48c
 8019ac0:	0801f494 	.word	0x0801f494
 8019ac4:	0801f490 	.word	0x0801f490
 8019ac8:	0801f498 	.word	0x0801f498
 8019acc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019ace:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019ad0:	429a      	cmp	r2, r3
 8019ad2:	bfa8      	it	ge
 8019ad4:	461a      	movge	r2, r3
 8019ad6:	2a00      	cmp	r2, #0
 8019ad8:	4691      	mov	r9, r2
 8019ada:	dc37      	bgt.n	8019b4c <_printf_float+0x374>
 8019adc:	f04f 0b00 	mov.w	fp, #0
 8019ae0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019ae4:	f104 021a 	add.w	r2, r4, #26
 8019ae8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019aea:	9305      	str	r3, [sp, #20]
 8019aec:	eba3 0309 	sub.w	r3, r3, r9
 8019af0:	455b      	cmp	r3, fp
 8019af2:	dc33      	bgt.n	8019b5c <_printf_float+0x384>
 8019af4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019af8:	429a      	cmp	r2, r3
 8019afa:	db3b      	blt.n	8019b74 <_printf_float+0x39c>
 8019afc:	6823      	ldr	r3, [r4, #0]
 8019afe:	07da      	lsls	r2, r3, #31
 8019b00:	d438      	bmi.n	8019b74 <_printf_float+0x39c>
 8019b02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019b04:	9b05      	ldr	r3, [sp, #20]
 8019b06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019b08:	1ad3      	subs	r3, r2, r3
 8019b0a:	eba2 0901 	sub.w	r9, r2, r1
 8019b0e:	4599      	cmp	r9, r3
 8019b10:	bfa8      	it	ge
 8019b12:	4699      	movge	r9, r3
 8019b14:	f1b9 0f00 	cmp.w	r9, #0
 8019b18:	dc35      	bgt.n	8019b86 <_printf_float+0x3ae>
 8019b1a:	f04f 0800 	mov.w	r8, #0
 8019b1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019b22:	f104 0a1a 	add.w	sl, r4, #26
 8019b26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019b2a:	1a9b      	subs	r3, r3, r2
 8019b2c:	eba3 0309 	sub.w	r3, r3, r9
 8019b30:	4543      	cmp	r3, r8
 8019b32:	f77f af79 	ble.w	8019a28 <_printf_float+0x250>
 8019b36:	2301      	movs	r3, #1
 8019b38:	4652      	mov	r2, sl
 8019b3a:	4631      	mov	r1, r6
 8019b3c:	4628      	mov	r0, r5
 8019b3e:	47b8      	blx	r7
 8019b40:	3001      	adds	r0, #1
 8019b42:	f43f aeaa 	beq.w	801989a <_printf_float+0xc2>
 8019b46:	f108 0801 	add.w	r8, r8, #1
 8019b4a:	e7ec      	b.n	8019b26 <_printf_float+0x34e>
 8019b4c:	4613      	mov	r3, r2
 8019b4e:	4631      	mov	r1, r6
 8019b50:	4642      	mov	r2, r8
 8019b52:	4628      	mov	r0, r5
 8019b54:	47b8      	blx	r7
 8019b56:	3001      	adds	r0, #1
 8019b58:	d1c0      	bne.n	8019adc <_printf_float+0x304>
 8019b5a:	e69e      	b.n	801989a <_printf_float+0xc2>
 8019b5c:	2301      	movs	r3, #1
 8019b5e:	4631      	mov	r1, r6
 8019b60:	4628      	mov	r0, r5
 8019b62:	9205      	str	r2, [sp, #20]
 8019b64:	47b8      	blx	r7
 8019b66:	3001      	adds	r0, #1
 8019b68:	f43f ae97 	beq.w	801989a <_printf_float+0xc2>
 8019b6c:	9a05      	ldr	r2, [sp, #20]
 8019b6e:	f10b 0b01 	add.w	fp, fp, #1
 8019b72:	e7b9      	b.n	8019ae8 <_printf_float+0x310>
 8019b74:	ee18 3a10 	vmov	r3, s16
 8019b78:	4652      	mov	r2, sl
 8019b7a:	4631      	mov	r1, r6
 8019b7c:	4628      	mov	r0, r5
 8019b7e:	47b8      	blx	r7
 8019b80:	3001      	adds	r0, #1
 8019b82:	d1be      	bne.n	8019b02 <_printf_float+0x32a>
 8019b84:	e689      	b.n	801989a <_printf_float+0xc2>
 8019b86:	9a05      	ldr	r2, [sp, #20]
 8019b88:	464b      	mov	r3, r9
 8019b8a:	4442      	add	r2, r8
 8019b8c:	4631      	mov	r1, r6
 8019b8e:	4628      	mov	r0, r5
 8019b90:	47b8      	blx	r7
 8019b92:	3001      	adds	r0, #1
 8019b94:	d1c1      	bne.n	8019b1a <_printf_float+0x342>
 8019b96:	e680      	b.n	801989a <_printf_float+0xc2>
 8019b98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019b9a:	2a01      	cmp	r2, #1
 8019b9c:	dc01      	bgt.n	8019ba2 <_printf_float+0x3ca>
 8019b9e:	07db      	lsls	r3, r3, #31
 8019ba0:	d538      	bpl.n	8019c14 <_printf_float+0x43c>
 8019ba2:	2301      	movs	r3, #1
 8019ba4:	4642      	mov	r2, r8
 8019ba6:	4631      	mov	r1, r6
 8019ba8:	4628      	mov	r0, r5
 8019baa:	47b8      	blx	r7
 8019bac:	3001      	adds	r0, #1
 8019bae:	f43f ae74 	beq.w	801989a <_printf_float+0xc2>
 8019bb2:	ee18 3a10 	vmov	r3, s16
 8019bb6:	4652      	mov	r2, sl
 8019bb8:	4631      	mov	r1, r6
 8019bba:	4628      	mov	r0, r5
 8019bbc:	47b8      	blx	r7
 8019bbe:	3001      	adds	r0, #1
 8019bc0:	f43f ae6b 	beq.w	801989a <_printf_float+0xc2>
 8019bc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019bc8:	2200      	movs	r2, #0
 8019bca:	2300      	movs	r3, #0
 8019bcc:	f7e6 ff7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8019bd0:	b9d8      	cbnz	r0, 8019c0a <_printf_float+0x432>
 8019bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019bd4:	f108 0201 	add.w	r2, r8, #1
 8019bd8:	3b01      	subs	r3, #1
 8019bda:	4631      	mov	r1, r6
 8019bdc:	4628      	mov	r0, r5
 8019bde:	47b8      	blx	r7
 8019be0:	3001      	adds	r0, #1
 8019be2:	d10e      	bne.n	8019c02 <_printf_float+0x42a>
 8019be4:	e659      	b.n	801989a <_printf_float+0xc2>
 8019be6:	2301      	movs	r3, #1
 8019be8:	4652      	mov	r2, sl
 8019bea:	4631      	mov	r1, r6
 8019bec:	4628      	mov	r0, r5
 8019bee:	47b8      	blx	r7
 8019bf0:	3001      	adds	r0, #1
 8019bf2:	f43f ae52 	beq.w	801989a <_printf_float+0xc2>
 8019bf6:	f108 0801 	add.w	r8, r8, #1
 8019bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019bfc:	3b01      	subs	r3, #1
 8019bfe:	4543      	cmp	r3, r8
 8019c00:	dcf1      	bgt.n	8019be6 <_printf_float+0x40e>
 8019c02:	464b      	mov	r3, r9
 8019c04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019c08:	e6dc      	b.n	80199c4 <_printf_float+0x1ec>
 8019c0a:	f04f 0800 	mov.w	r8, #0
 8019c0e:	f104 0a1a 	add.w	sl, r4, #26
 8019c12:	e7f2      	b.n	8019bfa <_printf_float+0x422>
 8019c14:	2301      	movs	r3, #1
 8019c16:	4642      	mov	r2, r8
 8019c18:	e7df      	b.n	8019bda <_printf_float+0x402>
 8019c1a:	2301      	movs	r3, #1
 8019c1c:	464a      	mov	r2, r9
 8019c1e:	4631      	mov	r1, r6
 8019c20:	4628      	mov	r0, r5
 8019c22:	47b8      	blx	r7
 8019c24:	3001      	adds	r0, #1
 8019c26:	f43f ae38 	beq.w	801989a <_printf_float+0xc2>
 8019c2a:	f108 0801 	add.w	r8, r8, #1
 8019c2e:	68e3      	ldr	r3, [r4, #12]
 8019c30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019c32:	1a5b      	subs	r3, r3, r1
 8019c34:	4543      	cmp	r3, r8
 8019c36:	dcf0      	bgt.n	8019c1a <_printf_float+0x442>
 8019c38:	e6fa      	b.n	8019a30 <_printf_float+0x258>
 8019c3a:	f04f 0800 	mov.w	r8, #0
 8019c3e:	f104 0919 	add.w	r9, r4, #25
 8019c42:	e7f4      	b.n	8019c2e <_printf_float+0x456>

08019c44 <_printf_common>:
 8019c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c48:	4616      	mov	r6, r2
 8019c4a:	4699      	mov	r9, r3
 8019c4c:	688a      	ldr	r2, [r1, #8]
 8019c4e:	690b      	ldr	r3, [r1, #16]
 8019c50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019c54:	4293      	cmp	r3, r2
 8019c56:	bfb8      	it	lt
 8019c58:	4613      	movlt	r3, r2
 8019c5a:	6033      	str	r3, [r6, #0]
 8019c5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019c60:	4607      	mov	r7, r0
 8019c62:	460c      	mov	r4, r1
 8019c64:	b10a      	cbz	r2, 8019c6a <_printf_common+0x26>
 8019c66:	3301      	adds	r3, #1
 8019c68:	6033      	str	r3, [r6, #0]
 8019c6a:	6823      	ldr	r3, [r4, #0]
 8019c6c:	0699      	lsls	r1, r3, #26
 8019c6e:	bf42      	ittt	mi
 8019c70:	6833      	ldrmi	r3, [r6, #0]
 8019c72:	3302      	addmi	r3, #2
 8019c74:	6033      	strmi	r3, [r6, #0]
 8019c76:	6825      	ldr	r5, [r4, #0]
 8019c78:	f015 0506 	ands.w	r5, r5, #6
 8019c7c:	d106      	bne.n	8019c8c <_printf_common+0x48>
 8019c7e:	f104 0a19 	add.w	sl, r4, #25
 8019c82:	68e3      	ldr	r3, [r4, #12]
 8019c84:	6832      	ldr	r2, [r6, #0]
 8019c86:	1a9b      	subs	r3, r3, r2
 8019c88:	42ab      	cmp	r3, r5
 8019c8a:	dc26      	bgt.n	8019cda <_printf_common+0x96>
 8019c8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019c90:	1e13      	subs	r3, r2, #0
 8019c92:	6822      	ldr	r2, [r4, #0]
 8019c94:	bf18      	it	ne
 8019c96:	2301      	movne	r3, #1
 8019c98:	0692      	lsls	r2, r2, #26
 8019c9a:	d42b      	bmi.n	8019cf4 <_printf_common+0xb0>
 8019c9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019ca0:	4649      	mov	r1, r9
 8019ca2:	4638      	mov	r0, r7
 8019ca4:	47c0      	blx	r8
 8019ca6:	3001      	adds	r0, #1
 8019ca8:	d01e      	beq.n	8019ce8 <_printf_common+0xa4>
 8019caa:	6823      	ldr	r3, [r4, #0]
 8019cac:	68e5      	ldr	r5, [r4, #12]
 8019cae:	6832      	ldr	r2, [r6, #0]
 8019cb0:	f003 0306 	and.w	r3, r3, #6
 8019cb4:	2b04      	cmp	r3, #4
 8019cb6:	bf08      	it	eq
 8019cb8:	1aad      	subeq	r5, r5, r2
 8019cba:	68a3      	ldr	r3, [r4, #8]
 8019cbc:	6922      	ldr	r2, [r4, #16]
 8019cbe:	bf0c      	ite	eq
 8019cc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019cc4:	2500      	movne	r5, #0
 8019cc6:	4293      	cmp	r3, r2
 8019cc8:	bfc4      	itt	gt
 8019cca:	1a9b      	subgt	r3, r3, r2
 8019ccc:	18ed      	addgt	r5, r5, r3
 8019cce:	2600      	movs	r6, #0
 8019cd0:	341a      	adds	r4, #26
 8019cd2:	42b5      	cmp	r5, r6
 8019cd4:	d11a      	bne.n	8019d0c <_printf_common+0xc8>
 8019cd6:	2000      	movs	r0, #0
 8019cd8:	e008      	b.n	8019cec <_printf_common+0xa8>
 8019cda:	2301      	movs	r3, #1
 8019cdc:	4652      	mov	r2, sl
 8019cde:	4649      	mov	r1, r9
 8019ce0:	4638      	mov	r0, r7
 8019ce2:	47c0      	blx	r8
 8019ce4:	3001      	adds	r0, #1
 8019ce6:	d103      	bne.n	8019cf0 <_printf_common+0xac>
 8019ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8019cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019cf0:	3501      	adds	r5, #1
 8019cf2:	e7c6      	b.n	8019c82 <_printf_common+0x3e>
 8019cf4:	18e1      	adds	r1, r4, r3
 8019cf6:	1c5a      	adds	r2, r3, #1
 8019cf8:	2030      	movs	r0, #48	; 0x30
 8019cfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019cfe:	4422      	add	r2, r4
 8019d00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019d04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019d08:	3302      	adds	r3, #2
 8019d0a:	e7c7      	b.n	8019c9c <_printf_common+0x58>
 8019d0c:	2301      	movs	r3, #1
 8019d0e:	4622      	mov	r2, r4
 8019d10:	4649      	mov	r1, r9
 8019d12:	4638      	mov	r0, r7
 8019d14:	47c0      	blx	r8
 8019d16:	3001      	adds	r0, #1
 8019d18:	d0e6      	beq.n	8019ce8 <_printf_common+0xa4>
 8019d1a:	3601      	adds	r6, #1
 8019d1c:	e7d9      	b.n	8019cd2 <_printf_common+0x8e>
	...

08019d20 <_printf_i>:
 8019d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019d24:	460c      	mov	r4, r1
 8019d26:	4691      	mov	r9, r2
 8019d28:	7e27      	ldrb	r7, [r4, #24]
 8019d2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019d2c:	2f78      	cmp	r7, #120	; 0x78
 8019d2e:	4680      	mov	r8, r0
 8019d30:	469a      	mov	sl, r3
 8019d32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019d36:	d807      	bhi.n	8019d48 <_printf_i+0x28>
 8019d38:	2f62      	cmp	r7, #98	; 0x62
 8019d3a:	d80a      	bhi.n	8019d52 <_printf_i+0x32>
 8019d3c:	2f00      	cmp	r7, #0
 8019d3e:	f000 80d8 	beq.w	8019ef2 <_printf_i+0x1d2>
 8019d42:	2f58      	cmp	r7, #88	; 0x58
 8019d44:	f000 80a3 	beq.w	8019e8e <_printf_i+0x16e>
 8019d48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019d4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019d50:	e03a      	b.n	8019dc8 <_printf_i+0xa8>
 8019d52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019d56:	2b15      	cmp	r3, #21
 8019d58:	d8f6      	bhi.n	8019d48 <_printf_i+0x28>
 8019d5a:	a001      	add	r0, pc, #4	; (adr r0, 8019d60 <_printf_i+0x40>)
 8019d5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8019d60:	08019db9 	.word	0x08019db9
 8019d64:	08019dcd 	.word	0x08019dcd
 8019d68:	08019d49 	.word	0x08019d49
 8019d6c:	08019d49 	.word	0x08019d49
 8019d70:	08019d49 	.word	0x08019d49
 8019d74:	08019d49 	.word	0x08019d49
 8019d78:	08019dcd 	.word	0x08019dcd
 8019d7c:	08019d49 	.word	0x08019d49
 8019d80:	08019d49 	.word	0x08019d49
 8019d84:	08019d49 	.word	0x08019d49
 8019d88:	08019d49 	.word	0x08019d49
 8019d8c:	08019ed9 	.word	0x08019ed9
 8019d90:	08019dfd 	.word	0x08019dfd
 8019d94:	08019ebb 	.word	0x08019ebb
 8019d98:	08019d49 	.word	0x08019d49
 8019d9c:	08019d49 	.word	0x08019d49
 8019da0:	08019efb 	.word	0x08019efb
 8019da4:	08019d49 	.word	0x08019d49
 8019da8:	08019dfd 	.word	0x08019dfd
 8019dac:	08019d49 	.word	0x08019d49
 8019db0:	08019d49 	.word	0x08019d49
 8019db4:	08019ec3 	.word	0x08019ec3
 8019db8:	680b      	ldr	r3, [r1, #0]
 8019dba:	1d1a      	adds	r2, r3, #4
 8019dbc:	681b      	ldr	r3, [r3, #0]
 8019dbe:	600a      	str	r2, [r1, #0]
 8019dc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019dc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019dc8:	2301      	movs	r3, #1
 8019dca:	e0a3      	b.n	8019f14 <_printf_i+0x1f4>
 8019dcc:	6825      	ldr	r5, [r4, #0]
 8019dce:	6808      	ldr	r0, [r1, #0]
 8019dd0:	062e      	lsls	r6, r5, #24
 8019dd2:	f100 0304 	add.w	r3, r0, #4
 8019dd6:	d50a      	bpl.n	8019dee <_printf_i+0xce>
 8019dd8:	6805      	ldr	r5, [r0, #0]
 8019dda:	600b      	str	r3, [r1, #0]
 8019ddc:	2d00      	cmp	r5, #0
 8019dde:	da03      	bge.n	8019de8 <_printf_i+0xc8>
 8019de0:	232d      	movs	r3, #45	; 0x2d
 8019de2:	426d      	negs	r5, r5
 8019de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019de8:	485e      	ldr	r0, [pc, #376]	; (8019f64 <_printf_i+0x244>)
 8019dea:	230a      	movs	r3, #10
 8019dec:	e019      	b.n	8019e22 <_printf_i+0x102>
 8019dee:	f015 0f40 	tst.w	r5, #64	; 0x40
 8019df2:	6805      	ldr	r5, [r0, #0]
 8019df4:	600b      	str	r3, [r1, #0]
 8019df6:	bf18      	it	ne
 8019df8:	b22d      	sxthne	r5, r5
 8019dfa:	e7ef      	b.n	8019ddc <_printf_i+0xbc>
 8019dfc:	680b      	ldr	r3, [r1, #0]
 8019dfe:	6825      	ldr	r5, [r4, #0]
 8019e00:	1d18      	adds	r0, r3, #4
 8019e02:	6008      	str	r0, [r1, #0]
 8019e04:	0628      	lsls	r0, r5, #24
 8019e06:	d501      	bpl.n	8019e0c <_printf_i+0xec>
 8019e08:	681d      	ldr	r5, [r3, #0]
 8019e0a:	e002      	b.n	8019e12 <_printf_i+0xf2>
 8019e0c:	0669      	lsls	r1, r5, #25
 8019e0e:	d5fb      	bpl.n	8019e08 <_printf_i+0xe8>
 8019e10:	881d      	ldrh	r5, [r3, #0]
 8019e12:	4854      	ldr	r0, [pc, #336]	; (8019f64 <_printf_i+0x244>)
 8019e14:	2f6f      	cmp	r7, #111	; 0x6f
 8019e16:	bf0c      	ite	eq
 8019e18:	2308      	moveq	r3, #8
 8019e1a:	230a      	movne	r3, #10
 8019e1c:	2100      	movs	r1, #0
 8019e1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019e22:	6866      	ldr	r6, [r4, #4]
 8019e24:	60a6      	str	r6, [r4, #8]
 8019e26:	2e00      	cmp	r6, #0
 8019e28:	bfa2      	ittt	ge
 8019e2a:	6821      	ldrge	r1, [r4, #0]
 8019e2c:	f021 0104 	bicge.w	r1, r1, #4
 8019e30:	6021      	strge	r1, [r4, #0]
 8019e32:	b90d      	cbnz	r5, 8019e38 <_printf_i+0x118>
 8019e34:	2e00      	cmp	r6, #0
 8019e36:	d04d      	beq.n	8019ed4 <_printf_i+0x1b4>
 8019e38:	4616      	mov	r6, r2
 8019e3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8019e3e:	fb03 5711 	mls	r7, r3, r1, r5
 8019e42:	5dc7      	ldrb	r7, [r0, r7]
 8019e44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019e48:	462f      	mov	r7, r5
 8019e4a:	42bb      	cmp	r3, r7
 8019e4c:	460d      	mov	r5, r1
 8019e4e:	d9f4      	bls.n	8019e3a <_printf_i+0x11a>
 8019e50:	2b08      	cmp	r3, #8
 8019e52:	d10b      	bne.n	8019e6c <_printf_i+0x14c>
 8019e54:	6823      	ldr	r3, [r4, #0]
 8019e56:	07df      	lsls	r7, r3, #31
 8019e58:	d508      	bpl.n	8019e6c <_printf_i+0x14c>
 8019e5a:	6923      	ldr	r3, [r4, #16]
 8019e5c:	6861      	ldr	r1, [r4, #4]
 8019e5e:	4299      	cmp	r1, r3
 8019e60:	bfde      	ittt	le
 8019e62:	2330      	movle	r3, #48	; 0x30
 8019e64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019e68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019e6c:	1b92      	subs	r2, r2, r6
 8019e6e:	6122      	str	r2, [r4, #16]
 8019e70:	f8cd a000 	str.w	sl, [sp]
 8019e74:	464b      	mov	r3, r9
 8019e76:	aa03      	add	r2, sp, #12
 8019e78:	4621      	mov	r1, r4
 8019e7a:	4640      	mov	r0, r8
 8019e7c:	f7ff fee2 	bl	8019c44 <_printf_common>
 8019e80:	3001      	adds	r0, #1
 8019e82:	d14c      	bne.n	8019f1e <_printf_i+0x1fe>
 8019e84:	f04f 30ff 	mov.w	r0, #4294967295
 8019e88:	b004      	add	sp, #16
 8019e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e8e:	4835      	ldr	r0, [pc, #212]	; (8019f64 <_printf_i+0x244>)
 8019e90:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019e94:	6823      	ldr	r3, [r4, #0]
 8019e96:	680e      	ldr	r6, [r1, #0]
 8019e98:	061f      	lsls	r7, r3, #24
 8019e9a:	f856 5b04 	ldr.w	r5, [r6], #4
 8019e9e:	600e      	str	r6, [r1, #0]
 8019ea0:	d514      	bpl.n	8019ecc <_printf_i+0x1ac>
 8019ea2:	07d9      	lsls	r1, r3, #31
 8019ea4:	bf44      	itt	mi
 8019ea6:	f043 0320 	orrmi.w	r3, r3, #32
 8019eaa:	6023      	strmi	r3, [r4, #0]
 8019eac:	b91d      	cbnz	r5, 8019eb6 <_printf_i+0x196>
 8019eae:	6823      	ldr	r3, [r4, #0]
 8019eb0:	f023 0320 	bic.w	r3, r3, #32
 8019eb4:	6023      	str	r3, [r4, #0]
 8019eb6:	2310      	movs	r3, #16
 8019eb8:	e7b0      	b.n	8019e1c <_printf_i+0xfc>
 8019eba:	6823      	ldr	r3, [r4, #0]
 8019ebc:	f043 0320 	orr.w	r3, r3, #32
 8019ec0:	6023      	str	r3, [r4, #0]
 8019ec2:	2378      	movs	r3, #120	; 0x78
 8019ec4:	4828      	ldr	r0, [pc, #160]	; (8019f68 <_printf_i+0x248>)
 8019ec6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019eca:	e7e3      	b.n	8019e94 <_printf_i+0x174>
 8019ecc:	065e      	lsls	r6, r3, #25
 8019ece:	bf48      	it	mi
 8019ed0:	b2ad      	uxthmi	r5, r5
 8019ed2:	e7e6      	b.n	8019ea2 <_printf_i+0x182>
 8019ed4:	4616      	mov	r6, r2
 8019ed6:	e7bb      	b.n	8019e50 <_printf_i+0x130>
 8019ed8:	680b      	ldr	r3, [r1, #0]
 8019eda:	6826      	ldr	r6, [r4, #0]
 8019edc:	6960      	ldr	r0, [r4, #20]
 8019ede:	1d1d      	adds	r5, r3, #4
 8019ee0:	600d      	str	r5, [r1, #0]
 8019ee2:	0635      	lsls	r5, r6, #24
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	d501      	bpl.n	8019eec <_printf_i+0x1cc>
 8019ee8:	6018      	str	r0, [r3, #0]
 8019eea:	e002      	b.n	8019ef2 <_printf_i+0x1d2>
 8019eec:	0671      	lsls	r1, r6, #25
 8019eee:	d5fb      	bpl.n	8019ee8 <_printf_i+0x1c8>
 8019ef0:	8018      	strh	r0, [r3, #0]
 8019ef2:	2300      	movs	r3, #0
 8019ef4:	6123      	str	r3, [r4, #16]
 8019ef6:	4616      	mov	r6, r2
 8019ef8:	e7ba      	b.n	8019e70 <_printf_i+0x150>
 8019efa:	680b      	ldr	r3, [r1, #0]
 8019efc:	1d1a      	adds	r2, r3, #4
 8019efe:	600a      	str	r2, [r1, #0]
 8019f00:	681e      	ldr	r6, [r3, #0]
 8019f02:	6862      	ldr	r2, [r4, #4]
 8019f04:	2100      	movs	r1, #0
 8019f06:	4630      	mov	r0, r6
 8019f08:	f7e6 f96a 	bl	80001e0 <memchr>
 8019f0c:	b108      	cbz	r0, 8019f12 <_printf_i+0x1f2>
 8019f0e:	1b80      	subs	r0, r0, r6
 8019f10:	6060      	str	r0, [r4, #4]
 8019f12:	6863      	ldr	r3, [r4, #4]
 8019f14:	6123      	str	r3, [r4, #16]
 8019f16:	2300      	movs	r3, #0
 8019f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019f1c:	e7a8      	b.n	8019e70 <_printf_i+0x150>
 8019f1e:	6923      	ldr	r3, [r4, #16]
 8019f20:	4632      	mov	r2, r6
 8019f22:	4649      	mov	r1, r9
 8019f24:	4640      	mov	r0, r8
 8019f26:	47d0      	blx	sl
 8019f28:	3001      	adds	r0, #1
 8019f2a:	d0ab      	beq.n	8019e84 <_printf_i+0x164>
 8019f2c:	6823      	ldr	r3, [r4, #0]
 8019f2e:	079b      	lsls	r3, r3, #30
 8019f30:	d413      	bmi.n	8019f5a <_printf_i+0x23a>
 8019f32:	68e0      	ldr	r0, [r4, #12]
 8019f34:	9b03      	ldr	r3, [sp, #12]
 8019f36:	4298      	cmp	r0, r3
 8019f38:	bfb8      	it	lt
 8019f3a:	4618      	movlt	r0, r3
 8019f3c:	e7a4      	b.n	8019e88 <_printf_i+0x168>
 8019f3e:	2301      	movs	r3, #1
 8019f40:	4632      	mov	r2, r6
 8019f42:	4649      	mov	r1, r9
 8019f44:	4640      	mov	r0, r8
 8019f46:	47d0      	blx	sl
 8019f48:	3001      	adds	r0, #1
 8019f4a:	d09b      	beq.n	8019e84 <_printf_i+0x164>
 8019f4c:	3501      	adds	r5, #1
 8019f4e:	68e3      	ldr	r3, [r4, #12]
 8019f50:	9903      	ldr	r1, [sp, #12]
 8019f52:	1a5b      	subs	r3, r3, r1
 8019f54:	42ab      	cmp	r3, r5
 8019f56:	dcf2      	bgt.n	8019f3e <_printf_i+0x21e>
 8019f58:	e7eb      	b.n	8019f32 <_printf_i+0x212>
 8019f5a:	2500      	movs	r5, #0
 8019f5c:	f104 0619 	add.w	r6, r4, #25
 8019f60:	e7f5      	b.n	8019f4e <_printf_i+0x22e>
 8019f62:	bf00      	nop
 8019f64:	0801f49a 	.word	0x0801f49a
 8019f68:	0801f4ab 	.word	0x0801f4ab

08019f6c <iprintf>:
 8019f6c:	b40f      	push	{r0, r1, r2, r3}
 8019f6e:	4b0a      	ldr	r3, [pc, #40]	; (8019f98 <iprintf+0x2c>)
 8019f70:	b513      	push	{r0, r1, r4, lr}
 8019f72:	681c      	ldr	r4, [r3, #0]
 8019f74:	b124      	cbz	r4, 8019f80 <iprintf+0x14>
 8019f76:	69a3      	ldr	r3, [r4, #24]
 8019f78:	b913      	cbnz	r3, 8019f80 <iprintf+0x14>
 8019f7a:	4620      	mov	r0, r4
 8019f7c:	f001 f8e6 	bl	801b14c <__sinit>
 8019f80:	ab05      	add	r3, sp, #20
 8019f82:	9a04      	ldr	r2, [sp, #16]
 8019f84:	68a1      	ldr	r1, [r4, #8]
 8019f86:	9301      	str	r3, [sp, #4]
 8019f88:	4620      	mov	r0, r4
 8019f8a:	f001 fdbd 	bl	801bb08 <_vfiprintf_r>
 8019f8e:	b002      	add	sp, #8
 8019f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f94:	b004      	add	sp, #16
 8019f96:	4770      	bx	lr
 8019f98:	20000540 	.word	0x20000540

08019f9c <putchar>:
 8019f9c:	4b09      	ldr	r3, [pc, #36]	; (8019fc4 <putchar+0x28>)
 8019f9e:	b513      	push	{r0, r1, r4, lr}
 8019fa0:	681c      	ldr	r4, [r3, #0]
 8019fa2:	4601      	mov	r1, r0
 8019fa4:	b134      	cbz	r4, 8019fb4 <putchar+0x18>
 8019fa6:	69a3      	ldr	r3, [r4, #24]
 8019fa8:	b923      	cbnz	r3, 8019fb4 <putchar+0x18>
 8019faa:	9001      	str	r0, [sp, #4]
 8019fac:	4620      	mov	r0, r4
 8019fae:	f001 f8cd 	bl	801b14c <__sinit>
 8019fb2:	9901      	ldr	r1, [sp, #4]
 8019fb4:	68a2      	ldr	r2, [r4, #8]
 8019fb6:	4620      	mov	r0, r4
 8019fb8:	b002      	add	sp, #8
 8019fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019fbe:	f001 bed3 	b.w	801bd68 <_putc_r>
 8019fc2:	bf00      	nop
 8019fc4:	20000540 	.word	0x20000540

08019fc8 <rand>:
 8019fc8:	4b17      	ldr	r3, [pc, #92]	; (801a028 <rand+0x60>)
 8019fca:	b510      	push	{r4, lr}
 8019fcc:	681c      	ldr	r4, [r3, #0]
 8019fce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019fd0:	b9b3      	cbnz	r3, 801a000 <rand+0x38>
 8019fd2:	2018      	movs	r0, #24
 8019fd4:	f7ff fa82 	bl	80194dc <malloc>
 8019fd8:	63a0      	str	r0, [r4, #56]	; 0x38
 8019fda:	b928      	cbnz	r0, 8019fe8 <rand+0x20>
 8019fdc:	4602      	mov	r2, r0
 8019fde:	4b13      	ldr	r3, [pc, #76]	; (801a02c <rand+0x64>)
 8019fe0:	4813      	ldr	r0, [pc, #76]	; (801a030 <rand+0x68>)
 8019fe2:	214e      	movs	r1, #78	; 0x4e
 8019fe4:	f000 f900 	bl	801a1e8 <__assert_func>
 8019fe8:	4a12      	ldr	r2, [pc, #72]	; (801a034 <rand+0x6c>)
 8019fea:	4b13      	ldr	r3, [pc, #76]	; (801a038 <rand+0x70>)
 8019fec:	e9c0 2300 	strd	r2, r3, [r0]
 8019ff0:	4b12      	ldr	r3, [pc, #72]	; (801a03c <rand+0x74>)
 8019ff2:	6083      	str	r3, [r0, #8]
 8019ff4:	230b      	movs	r3, #11
 8019ff6:	8183      	strh	r3, [r0, #12]
 8019ff8:	2201      	movs	r2, #1
 8019ffa:	2300      	movs	r3, #0
 8019ffc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801a000:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a002:	480f      	ldr	r0, [pc, #60]	; (801a040 <rand+0x78>)
 801a004:	690a      	ldr	r2, [r1, #16]
 801a006:	694b      	ldr	r3, [r1, #20]
 801a008:	4c0e      	ldr	r4, [pc, #56]	; (801a044 <rand+0x7c>)
 801a00a:	4350      	muls	r0, r2
 801a00c:	fb04 0003 	mla	r0, r4, r3, r0
 801a010:	fba2 3404 	umull	r3, r4, r2, r4
 801a014:	1c5a      	adds	r2, r3, #1
 801a016:	4404      	add	r4, r0
 801a018:	f144 0000 	adc.w	r0, r4, #0
 801a01c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801a020:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a024:	bd10      	pop	{r4, pc}
 801a026:	bf00      	nop
 801a028:	20000540 	.word	0x20000540
 801a02c:	0801f4bc 	.word	0x0801f4bc
 801a030:	0801f4d3 	.word	0x0801f4d3
 801a034:	abcd330e 	.word	0xabcd330e
 801a038:	e66d1234 	.word	0xe66d1234
 801a03c:	0005deec 	.word	0x0005deec
 801a040:	5851f42d 	.word	0x5851f42d
 801a044:	4c957f2d 	.word	0x4c957f2d

0801a048 <_sbrk_r>:
 801a048:	b538      	push	{r3, r4, r5, lr}
 801a04a:	4d06      	ldr	r5, [pc, #24]	; (801a064 <_sbrk_r+0x1c>)
 801a04c:	2300      	movs	r3, #0
 801a04e:	4604      	mov	r4, r0
 801a050:	4608      	mov	r0, r1
 801a052:	602b      	str	r3, [r5, #0]
 801a054:	f7e8 f832 	bl	80020bc <_sbrk>
 801a058:	1c43      	adds	r3, r0, #1
 801a05a:	d102      	bne.n	801a062 <_sbrk_r+0x1a>
 801a05c:	682b      	ldr	r3, [r5, #0]
 801a05e:	b103      	cbz	r3, 801a062 <_sbrk_r+0x1a>
 801a060:	6023      	str	r3, [r4, #0]
 801a062:	bd38      	pop	{r3, r4, r5, pc}
 801a064:	2001b0a8 	.word	0x2001b0a8

0801a068 <__swbuf_r>:
 801a068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a06a:	460e      	mov	r6, r1
 801a06c:	4614      	mov	r4, r2
 801a06e:	4605      	mov	r5, r0
 801a070:	b118      	cbz	r0, 801a07a <__swbuf_r+0x12>
 801a072:	6983      	ldr	r3, [r0, #24]
 801a074:	b90b      	cbnz	r3, 801a07a <__swbuf_r+0x12>
 801a076:	f001 f869 	bl	801b14c <__sinit>
 801a07a:	4b21      	ldr	r3, [pc, #132]	; (801a100 <__swbuf_r+0x98>)
 801a07c:	429c      	cmp	r4, r3
 801a07e:	d12b      	bne.n	801a0d8 <__swbuf_r+0x70>
 801a080:	686c      	ldr	r4, [r5, #4]
 801a082:	69a3      	ldr	r3, [r4, #24]
 801a084:	60a3      	str	r3, [r4, #8]
 801a086:	89a3      	ldrh	r3, [r4, #12]
 801a088:	071a      	lsls	r2, r3, #28
 801a08a:	d52f      	bpl.n	801a0ec <__swbuf_r+0x84>
 801a08c:	6923      	ldr	r3, [r4, #16]
 801a08e:	b36b      	cbz	r3, 801a0ec <__swbuf_r+0x84>
 801a090:	6923      	ldr	r3, [r4, #16]
 801a092:	6820      	ldr	r0, [r4, #0]
 801a094:	1ac0      	subs	r0, r0, r3
 801a096:	6963      	ldr	r3, [r4, #20]
 801a098:	b2f6      	uxtb	r6, r6
 801a09a:	4283      	cmp	r3, r0
 801a09c:	4637      	mov	r7, r6
 801a09e:	dc04      	bgt.n	801a0aa <__swbuf_r+0x42>
 801a0a0:	4621      	mov	r1, r4
 801a0a2:	4628      	mov	r0, r5
 801a0a4:	f000 ffbe 	bl	801b024 <_fflush_r>
 801a0a8:	bb30      	cbnz	r0, 801a0f8 <__swbuf_r+0x90>
 801a0aa:	68a3      	ldr	r3, [r4, #8]
 801a0ac:	3b01      	subs	r3, #1
 801a0ae:	60a3      	str	r3, [r4, #8]
 801a0b0:	6823      	ldr	r3, [r4, #0]
 801a0b2:	1c5a      	adds	r2, r3, #1
 801a0b4:	6022      	str	r2, [r4, #0]
 801a0b6:	701e      	strb	r6, [r3, #0]
 801a0b8:	6963      	ldr	r3, [r4, #20]
 801a0ba:	3001      	adds	r0, #1
 801a0bc:	4283      	cmp	r3, r0
 801a0be:	d004      	beq.n	801a0ca <__swbuf_r+0x62>
 801a0c0:	89a3      	ldrh	r3, [r4, #12]
 801a0c2:	07db      	lsls	r3, r3, #31
 801a0c4:	d506      	bpl.n	801a0d4 <__swbuf_r+0x6c>
 801a0c6:	2e0a      	cmp	r6, #10
 801a0c8:	d104      	bne.n	801a0d4 <__swbuf_r+0x6c>
 801a0ca:	4621      	mov	r1, r4
 801a0cc:	4628      	mov	r0, r5
 801a0ce:	f000 ffa9 	bl	801b024 <_fflush_r>
 801a0d2:	b988      	cbnz	r0, 801a0f8 <__swbuf_r+0x90>
 801a0d4:	4638      	mov	r0, r7
 801a0d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0d8:	4b0a      	ldr	r3, [pc, #40]	; (801a104 <__swbuf_r+0x9c>)
 801a0da:	429c      	cmp	r4, r3
 801a0dc:	d101      	bne.n	801a0e2 <__swbuf_r+0x7a>
 801a0de:	68ac      	ldr	r4, [r5, #8]
 801a0e0:	e7cf      	b.n	801a082 <__swbuf_r+0x1a>
 801a0e2:	4b09      	ldr	r3, [pc, #36]	; (801a108 <__swbuf_r+0xa0>)
 801a0e4:	429c      	cmp	r4, r3
 801a0e6:	bf08      	it	eq
 801a0e8:	68ec      	ldreq	r4, [r5, #12]
 801a0ea:	e7ca      	b.n	801a082 <__swbuf_r+0x1a>
 801a0ec:	4621      	mov	r1, r4
 801a0ee:	4628      	mov	r0, r5
 801a0f0:	f000 f80c 	bl	801a10c <__swsetup_r>
 801a0f4:	2800      	cmp	r0, #0
 801a0f6:	d0cb      	beq.n	801a090 <__swbuf_r+0x28>
 801a0f8:	f04f 37ff 	mov.w	r7, #4294967295
 801a0fc:	e7ea      	b.n	801a0d4 <__swbuf_r+0x6c>
 801a0fe:	bf00      	nop
 801a100:	0801f60c 	.word	0x0801f60c
 801a104:	0801f62c 	.word	0x0801f62c
 801a108:	0801f5ec 	.word	0x0801f5ec

0801a10c <__swsetup_r>:
 801a10c:	4b32      	ldr	r3, [pc, #200]	; (801a1d8 <__swsetup_r+0xcc>)
 801a10e:	b570      	push	{r4, r5, r6, lr}
 801a110:	681d      	ldr	r5, [r3, #0]
 801a112:	4606      	mov	r6, r0
 801a114:	460c      	mov	r4, r1
 801a116:	b125      	cbz	r5, 801a122 <__swsetup_r+0x16>
 801a118:	69ab      	ldr	r3, [r5, #24]
 801a11a:	b913      	cbnz	r3, 801a122 <__swsetup_r+0x16>
 801a11c:	4628      	mov	r0, r5
 801a11e:	f001 f815 	bl	801b14c <__sinit>
 801a122:	4b2e      	ldr	r3, [pc, #184]	; (801a1dc <__swsetup_r+0xd0>)
 801a124:	429c      	cmp	r4, r3
 801a126:	d10f      	bne.n	801a148 <__swsetup_r+0x3c>
 801a128:	686c      	ldr	r4, [r5, #4]
 801a12a:	89a3      	ldrh	r3, [r4, #12]
 801a12c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a130:	0719      	lsls	r1, r3, #28
 801a132:	d42c      	bmi.n	801a18e <__swsetup_r+0x82>
 801a134:	06dd      	lsls	r5, r3, #27
 801a136:	d411      	bmi.n	801a15c <__swsetup_r+0x50>
 801a138:	2309      	movs	r3, #9
 801a13a:	6033      	str	r3, [r6, #0]
 801a13c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a140:	81a3      	strh	r3, [r4, #12]
 801a142:	f04f 30ff 	mov.w	r0, #4294967295
 801a146:	e03e      	b.n	801a1c6 <__swsetup_r+0xba>
 801a148:	4b25      	ldr	r3, [pc, #148]	; (801a1e0 <__swsetup_r+0xd4>)
 801a14a:	429c      	cmp	r4, r3
 801a14c:	d101      	bne.n	801a152 <__swsetup_r+0x46>
 801a14e:	68ac      	ldr	r4, [r5, #8]
 801a150:	e7eb      	b.n	801a12a <__swsetup_r+0x1e>
 801a152:	4b24      	ldr	r3, [pc, #144]	; (801a1e4 <__swsetup_r+0xd8>)
 801a154:	429c      	cmp	r4, r3
 801a156:	bf08      	it	eq
 801a158:	68ec      	ldreq	r4, [r5, #12]
 801a15a:	e7e6      	b.n	801a12a <__swsetup_r+0x1e>
 801a15c:	0758      	lsls	r0, r3, #29
 801a15e:	d512      	bpl.n	801a186 <__swsetup_r+0x7a>
 801a160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a162:	b141      	cbz	r1, 801a176 <__swsetup_r+0x6a>
 801a164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a168:	4299      	cmp	r1, r3
 801a16a:	d002      	beq.n	801a172 <__swsetup_r+0x66>
 801a16c:	4630      	mov	r0, r6
 801a16e:	f7ff f9e9 	bl	8019544 <_free_r>
 801a172:	2300      	movs	r3, #0
 801a174:	6363      	str	r3, [r4, #52]	; 0x34
 801a176:	89a3      	ldrh	r3, [r4, #12]
 801a178:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a17c:	81a3      	strh	r3, [r4, #12]
 801a17e:	2300      	movs	r3, #0
 801a180:	6063      	str	r3, [r4, #4]
 801a182:	6923      	ldr	r3, [r4, #16]
 801a184:	6023      	str	r3, [r4, #0]
 801a186:	89a3      	ldrh	r3, [r4, #12]
 801a188:	f043 0308 	orr.w	r3, r3, #8
 801a18c:	81a3      	strh	r3, [r4, #12]
 801a18e:	6923      	ldr	r3, [r4, #16]
 801a190:	b94b      	cbnz	r3, 801a1a6 <__swsetup_r+0x9a>
 801a192:	89a3      	ldrh	r3, [r4, #12]
 801a194:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a19c:	d003      	beq.n	801a1a6 <__swsetup_r+0x9a>
 801a19e:	4621      	mov	r1, r4
 801a1a0:	4630      	mov	r0, r6
 801a1a2:	f001 f8af 	bl	801b304 <__smakebuf_r>
 801a1a6:	89a0      	ldrh	r0, [r4, #12]
 801a1a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a1ac:	f010 0301 	ands.w	r3, r0, #1
 801a1b0:	d00a      	beq.n	801a1c8 <__swsetup_r+0xbc>
 801a1b2:	2300      	movs	r3, #0
 801a1b4:	60a3      	str	r3, [r4, #8]
 801a1b6:	6963      	ldr	r3, [r4, #20]
 801a1b8:	425b      	negs	r3, r3
 801a1ba:	61a3      	str	r3, [r4, #24]
 801a1bc:	6923      	ldr	r3, [r4, #16]
 801a1be:	b943      	cbnz	r3, 801a1d2 <__swsetup_r+0xc6>
 801a1c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a1c4:	d1ba      	bne.n	801a13c <__swsetup_r+0x30>
 801a1c6:	bd70      	pop	{r4, r5, r6, pc}
 801a1c8:	0781      	lsls	r1, r0, #30
 801a1ca:	bf58      	it	pl
 801a1cc:	6963      	ldrpl	r3, [r4, #20]
 801a1ce:	60a3      	str	r3, [r4, #8]
 801a1d0:	e7f4      	b.n	801a1bc <__swsetup_r+0xb0>
 801a1d2:	2000      	movs	r0, #0
 801a1d4:	e7f7      	b.n	801a1c6 <__swsetup_r+0xba>
 801a1d6:	bf00      	nop
 801a1d8:	20000540 	.word	0x20000540
 801a1dc:	0801f60c 	.word	0x0801f60c
 801a1e0:	0801f62c 	.word	0x0801f62c
 801a1e4:	0801f5ec 	.word	0x0801f5ec

0801a1e8 <__assert_func>:
 801a1e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a1ea:	4614      	mov	r4, r2
 801a1ec:	461a      	mov	r2, r3
 801a1ee:	4b09      	ldr	r3, [pc, #36]	; (801a214 <__assert_func+0x2c>)
 801a1f0:	681b      	ldr	r3, [r3, #0]
 801a1f2:	4605      	mov	r5, r0
 801a1f4:	68d8      	ldr	r0, [r3, #12]
 801a1f6:	b14c      	cbz	r4, 801a20c <__assert_func+0x24>
 801a1f8:	4b07      	ldr	r3, [pc, #28]	; (801a218 <__assert_func+0x30>)
 801a1fa:	9100      	str	r1, [sp, #0]
 801a1fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a200:	4906      	ldr	r1, [pc, #24]	; (801a21c <__assert_func+0x34>)
 801a202:	462b      	mov	r3, r5
 801a204:	f001 f820 	bl	801b248 <fiprintf>
 801a208:	f001 fe4c 	bl	801bea4 <abort>
 801a20c:	4b04      	ldr	r3, [pc, #16]	; (801a220 <__assert_func+0x38>)
 801a20e:	461c      	mov	r4, r3
 801a210:	e7f3      	b.n	801a1fa <__assert_func+0x12>
 801a212:	bf00      	nop
 801a214:	20000540 	.word	0x20000540
 801a218:	0801f532 	.word	0x0801f532
 801a21c:	0801f53f 	.word	0x0801f53f
 801a220:	0801f56d 	.word	0x0801f56d

0801a224 <quorem>:
 801a224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a228:	6903      	ldr	r3, [r0, #16]
 801a22a:	690c      	ldr	r4, [r1, #16]
 801a22c:	42a3      	cmp	r3, r4
 801a22e:	4607      	mov	r7, r0
 801a230:	f2c0 8081 	blt.w	801a336 <quorem+0x112>
 801a234:	3c01      	subs	r4, #1
 801a236:	f101 0814 	add.w	r8, r1, #20
 801a23a:	f100 0514 	add.w	r5, r0, #20
 801a23e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a242:	9301      	str	r3, [sp, #4]
 801a244:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a248:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a24c:	3301      	adds	r3, #1
 801a24e:	429a      	cmp	r2, r3
 801a250:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a254:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a258:	fbb2 f6f3 	udiv	r6, r2, r3
 801a25c:	d331      	bcc.n	801a2c2 <quorem+0x9e>
 801a25e:	f04f 0e00 	mov.w	lr, #0
 801a262:	4640      	mov	r0, r8
 801a264:	46ac      	mov	ip, r5
 801a266:	46f2      	mov	sl, lr
 801a268:	f850 2b04 	ldr.w	r2, [r0], #4
 801a26c:	b293      	uxth	r3, r2
 801a26e:	fb06 e303 	mla	r3, r6, r3, lr
 801a272:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801a276:	b29b      	uxth	r3, r3
 801a278:	ebaa 0303 	sub.w	r3, sl, r3
 801a27c:	0c12      	lsrs	r2, r2, #16
 801a27e:	f8dc a000 	ldr.w	sl, [ip]
 801a282:	fb06 e202 	mla	r2, r6, r2, lr
 801a286:	fa13 f38a 	uxtah	r3, r3, sl
 801a28a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a28e:	fa1f fa82 	uxth.w	sl, r2
 801a292:	f8dc 2000 	ldr.w	r2, [ip]
 801a296:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801a29a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a29e:	b29b      	uxth	r3, r3
 801a2a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a2a4:	4581      	cmp	r9, r0
 801a2a6:	f84c 3b04 	str.w	r3, [ip], #4
 801a2aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801a2ae:	d2db      	bcs.n	801a268 <quorem+0x44>
 801a2b0:	f855 300b 	ldr.w	r3, [r5, fp]
 801a2b4:	b92b      	cbnz	r3, 801a2c2 <quorem+0x9e>
 801a2b6:	9b01      	ldr	r3, [sp, #4]
 801a2b8:	3b04      	subs	r3, #4
 801a2ba:	429d      	cmp	r5, r3
 801a2bc:	461a      	mov	r2, r3
 801a2be:	d32e      	bcc.n	801a31e <quorem+0xfa>
 801a2c0:	613c      	str	r4, [r7, #16]
 801a2c2:	4638      	mov	r0, r7
 801a2c4:	f001 fae8 	bl	801b898 <__mcmp>
 801a2c8:	2800      	cmp	r0, #0
 801a2ca:	db24      	blt.n	801a316 <quorem+0xf2>
 801a2cc:	3601      	adds	r6, #1
 801a2ce:	4628      	mov	r0, r5
 801a2d0:	f04f 0c00 	mov.w	ip, #0
 801a2d4:	f858 2b04 	ldr.w	r2, [r8], #4
 801a2d8:	f8d0 e000 	ldr.w	lr, [r0]
 801a2dc:	b293      	uxth	r3, r2
 801a2de:	ebac 0303 	sub.w	r3, ip, r3
 801a2e2:	0c12      	lsrs	r2, r2, #16
 801a2e4:	fa13 f38e 	uxtah	r3, r3, lr
 801a2e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801a2ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a2f0:	b29b      	uxth	r3, r3
 801a2f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a2f6:	45c1      	cmp	r9, r8
 801a2f8:	f840 3b04 	str.w	r3, [r0], #4
 801a2fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a300:	d2e8      	bcs.n	801a2d4 <quorem+0xb0>
 801a302:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a306:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a30a:	b922      	cbnz	r2, 801a316 <quorem+0xf2>
 801a30c:	3b04      	subs	r3, #4
 801a30e:	429d      	cmp	r5, r3
 801a310:	461a      	mov	r2, r3
 801a312:	d30a      	bcc.n	801a32a <quorem+0x106>
 801a314:	613c      	str	r4, [r7, #16]
 801a316:	4630      	mov	r0, r6
 801a318:	b003      	add	sp, #12
 801a31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a31e:	6812      	ldr	r2, [r2, #0]
 801a320:	3b04      	subs	r3, #4
 801a322:	2a00      	cmp	r2, #0
 801a324:	d1cc      	bne.n	801a2c0 <quorem+0x9c>
 801a326:	3c01      	subs	r4, #1
 801a328:	e7c7      	b.n	801a2ba <quorem+0x96>
 801a32a:	6812      	ldr	r2, [r2, #0]
 801a32c:	3b04      	subs	r3, #4
 801a32e:	2a00      	cmp	r2, #0
 801a330:	d1f0      	bne.n	801a314 <quorem+0xf0>
 801a332:	3c01      	subs	r4, #1
 801a334:	e7eb      	b.n	801a30e <quorem+0xea>
 801a336:	2000      	movs	r0, #0
 801a338:	e7ee      	b.n	801a318 <quorem+0xf4>
 801a33a:	0000      	movs	r0, r0
 801a33c:	0000      	movs	r0, r0
	...

0801a340 <_dtoa_r>:
 801a340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a344:	ed2d 8b02 	vpush	{d8}
 801a348:	ec57 6b10 	vmov	r6, r7, d0
 801a34c:	b095      	sub	sp, #84	; 0x54
 801a34e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a350:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801a354:	9105      	str	r1, [sp, #20]
 801a356:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801a35a:	4604      	mov	r4, r0
 801a35c:	9209      	str	r2, [sp, #36]	; 0x24
 801a35e:	930f      	str	r3, [sp, #60]	; 0x3c
 801a360:	b975      	cbnz	r5, 801a380 <_dtoa_r+0x40>
 801a362:	2010      	movs	r0, #16
 801a364:	f7ff f8ba 	bl	80194dc <malloc>
 801a368:	4602      	mov	r2, r0
 801a36a:	6260      	str	r0, [r4, #36]	; 0x24
 801a36c:	b920      	cbnz	r0, 801a378 <_dtoa_r+0x38>
 801a36e:	4bb2      	ldr	r3, [pc, #712]	; (801a638 <_dtoa_r+0x2f8>)
 801a370:	21ea      	movs	r1, #234	; 0xea
 801a372:	48b2      	ldr	r0, [pc, #712]	; (801a63c <_dtoa_r+0x2fc>)
 801a374:	f7ff ff38 	bl	801a1e8 <__assert_func>
 801a378:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a37c:	6005      	str	r5, [r0, #0]
 801a37e:	60c5      	str	r5, [r0, #12]
 801a380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a382:	6819      	ldr	r1, [r3, #0]
 801a384:	b151      	cbz	r1, 801a39c <_dtoa_r+0x5c>
 801a386:	685a      	ldr	r2, [r3, #4]
 801a388:	604a      	str	r2, [r1, #4]
 801a38a:	2301      	movs	r3, #1
 801a38c:	4093      	lsls	r3, r2
 801a38e:	608b      	str	r3, [r1, #8]
 801a390:	4620      	mov	r0, r4
 801a392:	f001 f843 	bl	801b41c <_Bfree>
 801a396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a398:	2200      	movs	r2, #0
 801a39a:	601a      	str	r2, [r3, #0]
 801a39c:	1e3b      	subs	r3, r7, #0
 801a39e:	bfb9      	ittee	lt
 801a3a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801a3a4:	9303      	strlt	r3, [sp, #12]
 801a3a6:	2300      	movge	r3, #0
 801a3a8:	f8c8 3000 	strge.w	r3, [r8]
 801a3ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801a3b0:	4ba3      	ldr	r3, [pc, #652]	; (801a640 <_dtoa_r+0x300>)
 801a3b2:	bfbc      	itt	lt
 801a3b4:	2201      	movlt	r2, #1
 801a3b6:	f8c8 2000 	strlt.w	r2, [r8]
 801a3ba:	ea33 0309 	bics.w	r3, r3, r9
 801a3be:	d11b      	bne.n	801a3f8 <_dtoa_r+0xb8>
 801a3c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a3c2:	f242 730f 	movw	r3, #9999	; 0x270f
 801a3c6:	6013      	str	r3, [r2, #0]
 801a3c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a3cc:	4333      	orrs	r3, r6
 801a3ce:	f000 857a 	beq.w	801aec6 <_dtoa_r+0xb86>
 801a3d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a3d4:	b963      	cbnz	r3, 801a3f0 <_dtoa_r+0xb0>
 801a3d6:	4b9b      	ldr	r3, [pc, #620]	; (801a644 <_dtoa_r+0x304>)
 801a3d8:	e024      	b.n	801a424 <_dtoa_r+0xe4>
 801a3da:	4b9b      	ldr	r3, [pc, #620]	; (801a648 <_dtoa_r+0x308>)
 801a3dc:	9300      	str	r3, [sp, #0]
 801a3de:	3308      	adds	r3, #8
 801a3e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a3e2:	6013      	str	r3, [r2, #0]
 801a3e4:	9800      	ldr	r0, [sp, #0]
 801a3e6:	b015      	add	sp, #84	; 0x54
 801a3e8:	ecbd 8b02 	vpop	{d8}
 801a3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3f0:	4b94      	ldr	r3, [pc, #592]	; (801a644 <_dtoa_r+0x304>)
 801a3f2:	9300      	str	r3, [sp, #0]
 801a3f4:	3303      	adds	r3, #3
 801a3f6:	e7f3      	b.n	801a3e0 <_dtoa_r+0xa0>
 801a3f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a3fc:	2200      	movs	r2, #0
 801a3fe:	ec51 0b17 	vmov	r0, r1, d7
 801a402:	2300      	movs	r3, #0
 801a404:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801a408:	f7e6 fb5e 	bl	8000ac8 <__aeabi_dcmpeq>
 801a40c:	4680      	mov	r8, r0
 801a40e:	b158      	cbz	r0, 801a428 <_dtoa_r+0xe8>
 801a410:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a412:	2301      	movs	r3, #1
 801a414:	6013      	str	r3, [r2, #0]
 801a416:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a418:	2b00      	cmp	r3, #0
 801a41a:	f000 8551 	beq.w	801aec0 <_dtoa_r+0xb80>
 801a41e:	488b      	ldr	r0, [pc, #556]	; (801a64c <_dtoa_r+0x30c>)
 801a420:	6018      	str	r0, [r3, #0]
 801a422:	1e43      	subs	r3, r0, #1
 801a424:	9300      	str	r3, [sp, #0]
 801a426:	e7dd      	b.n	801a3e4 <_dtoa_r+0xa4>
 801a428:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801a42c:	aa12      	add	r2, sp, #72	; 0x48
 801a42e:	a913      	add	r1, sp, #76	; 0x4c
 801a430:	4620      	mov	r0, r4
 801a432:	f001 fad5 	bl	801b9e0 <__d2b>
 801a436:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801a43a:	4683      	mov	fp, r0
 801a43c:	2d00      	cmp	r5, #0
 801a43e:	d07c      	beq.n	801a53a <_dtoa_r+0x1fa>
 801a440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a442:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801a446:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a44a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801a44e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801a452:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801a456:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801a45a:	4b7d      	ldr	r3, [pc, #500]	; (801a650 <_dtoa_r+0x310>)
 801a45c:	2200      	movs	r2, #0
 801a45e:	4630      	mov	r0, r6
 801a460:	4639      	mov	r1, r7
 801a462:	f7e5 ff11 	bl	8000288 <__aeabi_dsub>
 801a466:	a36e      	add	r3, pc, #440	; (adr r3, 801a620 <_dtoa_r+0x2e0>)
 801a468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a46c:	f7e6 f8c4 	bl	80005f8 <__aeabi_dmul>
 801a470:	a36d      	add	r3, pc, #436	; (adr r3, 801a628 <_dtoa_r+0x2e8>)
 801a472:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a476:	f7e5 ff09 	bl	800028c <__adddf3>
 801a47a:	4606      	mov	r6, r0
 801a47c:	4628      	mov	r0, r5
 801a47e:	460f      	mov	r7, r1
 801a480:	f7e6 f850 	bl	8000524 <__aeabi_i2d>
 801a484:	a36a      	add	r3, pc, #424	; (adr r3, 801a630 <_dtoa_r+0x2f0>)
 801a486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a48a:	f7e6 f8b5 	bl	80005f8 <__aeabi_dmul>
 801a48e:	4602      	mov	r2, r0
 801a490:	460b      	mov	r3, r1
 801a492:	4630      	mov	r0, r6
 801a494:	4639      	mov	r1, r7
 801a496:	f7e5 fef9 	bl	800028c <__adddf3>
 801a49a:	4606      	mov	r6, r0
 801a49c:	460f      	mov	r7, r1
 801a49e:	f7e6 fb5b 	bl	8000b58 <__aeabi_d2iz>
 801a4a2:	2200      	movs	r2, #0
 801a4a4:	4682      	mov	sl, r0
 801a4a6:	2300      	movs	r3, #0
 801a4a8:	4630      	mov	r0, r6
 801a4aa:	4639      	mov	r1, r7
 801a4ac:	f7e6 fb16 	bl	8000adc <__aeabi_dcmplt>
 801a4b0:	b148      	cbz	r0, 801a4c6 <_dtoa_r+0x186>
 801a4b2:	4650      	mov	r0, sl
 801a4b4:	f7e6 f836 	bl	8000524 <__aeabi_i2d>
 801a4b8:	4632      	mov	r2, r6
 801a4ba:	463b      	mov	r3, r7
 801a4bc:	f7e6 fb04 	bl	8000ac8 <__aeabi_dcmpeq>
 801a4c0:	b908      	cbnz	r0, 801a4c6 <_dtoa_r+0x186>
 801a4c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a4c6:	f1ba 0f16 	cmp.w	sl, #22
 801a4ca:	d854      	bhi.n	801a576 <_dtoa_r+0x236>
 801a4cc:	4b61      	ldr	r3, [pc, #388]	; (801a654 <_dtoa_r+0x314>)
 801a4ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a4da:	f7e6 faff 	bl	8000adc <__aeabi_dcmplt>
 801a4de:	2800      	cmp	r0, #0
 801a4e0:	d04b      	beq.n	801a57a <_dtoa_r+0x23a>
 801a4e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a4e6:	2300      	movs	r3, #0
 801a4e8:	930e      	str	r3, [sp, #56]	; 0x38
 801a4ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a4ec:	1b5d      	subs	r5, r3, r5
 801a4ee:	1e6b      	subs	r3, r5, #1
 801a4f0:	9304      	str	r3, [sp, #16]
 801a4f2:	bf43      	ittte	mi
 801a4f4:	2300      	movmi	r3, #0
 801a4f6:	f1c5 0801 	rsbmi	r8, r5, #1
 801a4fa:	9304      	strmi	r3, [sp, #16]
 801a4fc:	f04f 0800 	movpl.w	r8, #0
 801a500:	f1ba 0f00 	cmp.w	sl, #0
 801a504:	db3b      	blt.n	801a57e <_dtoa_r+0x23e>
 801a506:	9b04      	ldr	r3, [sp, #16]
 801a508:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801a50c:	4453      	add	r3, sl
 801a50e:	9304      	str	r3, [sp, #16]
 801a510:	2300      	movs	r3, #0
 801a512:	9306      	str	r3, [sp, #24]
 801a514:	9b05      	ldr	r3, [sp, #20]
 801a516:	2b09      	cmp	r3, #9
 801a518:	d869      	bhi.n	801a5ee <_dtoa_r+0x2ae>
 801a51a:	2b05      	cmp	r3, #5
 801a51c:	bfc4      	itt	gt
 801a51e:	3b04      	subgt	r3, #4
 801a520:	9305      	strgt	r3, [sp, #20]
 801a522:	9b05      	ldr	r3, [sp, #20]
 801a524:	f1a3 0302 	sub.w	r3, r3, #2
 801a528:	bfcc      	ite	gt
 801a52a:	2500      	movgt	r5, #0
 801a52c:	2501      	movle	r5, #1
 801a52e:	2b03      	cmp	r3, #3
 801a530:	d869      	bhi.n	801a606 <_dtoa_r+0x2c6>
 801a532:	e8df f003 	tbb	[pc, r3]
 801a536:	4e2c      	.short	0x4e2c
 801a538:	5a4c      	.short	0x5a4c
 801a53a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801a53e:	441d      	add	r5, r3
 801a540:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801a544:	2b20      	cmp	r3, #32
 801a546:	bfc1      	itttt	gt
 801a548:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801a54c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801a550:	fa09 f303 	lslgt.w	r3, r9, r3
 801a554:	fa26 f000 	lsrgt.w	r0, r6, r0
 801a558:	bfda      	itte	le
 801a55a:	f1c3 0320 	rsble	r3, r3, #32
 801a55e:	fa06 f003 	lslle.w	r0, r6, r3
 801a562:	4318      	orrgt	r0, r3
 801a564:	f7e5 ffce 	bl	8000504 <__aeabi_ui2d>
 801a568:	2301      	movs	r3, #1
 801a56a:	4606      	mov	r6, r0
 801a56c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801a570:	3d01      	subs	r5, #1
 801a572:	9310      	str	r3, [sp, #64]	; 0x40
 801a574:	e771      	b.n	801a45a <_dtoa_r+0x11a>
 801a576:	2301      	movs	r3, #1
 801a578:	e7b6      	b.n	801a4e8 <_dtoa_r+0x1a8>
 801a57a:	900e      	str	r0, [sp, #56]	; 0x38
 801a57c:	e7b5      	b.n	801a4ea <_dtoa_r+0x1aa>
 801a57e:	f1ca 0300 	rsb	r3, sl, #0
 801a582:	9306      	str	r3, [sp, #24]
 801a584:	2300      	movs	r3, #0
 801a586:	eba8 080a 	sub.w	r8, r8, sl
 801a58a:	930d      	str	r3, [sp, #52]	; 0x34
 801a58c:	e7c2      	b.n	801a514 <_dtoa_r+0x1d4>
 801a58e:	2300      	movs	r3, #0
 801a590:	9308      	str	r3, [sp, #32]
 801a592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a594:	2b00      	cmp	r3, #0
 801a596:	dc39      	bgt.n	801a60c <_dtoa_r+0x2cc>
 801a598:	f04f 0901 	mov.w	r9, #1
 801a59c:	f8cd 9004 	str.w	r9, [sp, #4]
 801a5a0:	464b      	mov	r3, r9
 801a5a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801a5a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801a5a8:	2200      	movs	r2, #0
 801a5aa:	6042      	str	r2, [r0, #4]
 801a5ac:	2204      	movs	r2, #4
 801a5ae:	f102 0614 	add.w	r6, r2, #20
 801a5b2:	429e      	cmp	r6, r3
 801a5b4:	6841      	ldr	r1, [r0, #4]
 801a5b6:	d92f      	bls.n	801a618 <_dtoa_r+0x2d8>
 801a5b8:	4620      	mov	r0, r4
 801a5ba:	f000 feef 	bl	801b39c <_Balloc>
 801a5be:	9000      	str	r0, [sp, #0]
 801a5c0:	2800      	cmp	r0, #0
 801a5c2:	d14b      	bne.n	801a65c <_dtoa_r+0x31c>
 801a5c4:	4b24      	ldr	r3, [pc, #144]	; (801a658 <_dtoa_r+0x318>)
 801a5c6:	4602      	mov	r2, r0
 801a5c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801a5cc:	e6d1      	b.n	801a372 <_dtoa_r+0x32>
 801a5ce:	2301      	movs	r3, #1
 801a5d0:	e7de      	b.n	801a590 <_dtoa_r+0x250>
 801a5d2:	2300      	movs	r3, #0
 801a5d4:	9308      	str	r3, [sp, #32]
 801a5d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5d8:	eb0a 0903 	add.w	r9, sl, r3
 801a5dc:	f109 0301 	add.w	r3, r9, #1
 801a5e0:	2b01      	cmp	r3, #1
 801a5e2:	9301      	str	r3, [sp, #4]
 801a5e4:	bfb8      	it	lt
 801a5e6:	2301      	movlt	r3, #1
 801a5e8:	e7dd      	b.n	801a5a6 <_dtoa_r+0x266>
 801a5ea:	2301      	movs	r3, #1
 801a5ec:	e7f2      	b.n	801a5d4 <_dtoa_r+0x294>
 801a5ee:	2501      	movs	r5, #1
 801a5f0:	2300      	movs	r3, #0
 801a5f2:	9305      	str	r3, [sp, #20]
 801a5f4:	9508      	str	r5, [sp, #32]
 801a5f6:	f04f 39ff 	mov.w	r9, #4294967295
 801a5fa:	2200      	movs	r2, #0
 801a5fc:	f8cd 9004 	str.w	r9, [sp, #4]
 801a600:	2312      	movs	r3, #18
 801a602:	9209      	str	r2, [sp, #36]	; 0x24
 801a604:	e7cf      	b.n	801a5a6 <_dtoa_r+0x266>
 801a606:	2301      	movs	r3, #1
 801a608:	9308      	str	r3, [sp, #32]
 801a60a:	e7f4      	b.n	801a5f6 <_dtoa_r+0x2b6>
 801a60c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801a610:	f8cd 9004 	str.w	r9, [sp, #4]
 801a614:	464b      	mov	r3, r9
 801a616:	e7c6      	b.n	801a5a6 <_dtoa_r+0x266>
 801a618:	3101      	adds	r1, #1
 801a61a:	6041      	str	r1, [r0, #4]
 801a61c:	0052      	lsls	r2, r2, #1
 801a61e:	e7c6      	b.n	801a5ae <_dtoa_r+0x26e>
 801a620:	636f4361 	.word	0x636f4361
 801a624:	3fd287a7 	.word	0x3fd287a7
 801a628:	8b60c8b3 	.word	0x8b60c8b3
 801a62c:	3fc68a28 	.word	0x3fc68a28
 801a630:	509f79fb 	.word	0x509f79fb
 801a634:	3fd34413 	.word	0x3fd34413
 801a638:	0801f4bc 	.word	0x0801f4bc
 801a63c:	0801f57b 	.word	0x0801f57b
 801a640:	7ff00000 	.word	0x7ff00000
 801a644:	0801f577 	.word	0x0801f577
 801a648:	0801f56e 	.word	0x0801f56e
 801a64c:	0801f499 	.word	0x0801f499
 801a650:	3ff80000 	.word	0x3ff80000
 801a654:	0801f6d8 	.word	0x0801f6d8
 801a658:	0801f5da 	.word	0x0801f5da
 801a65c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a65e:	9a00      	ldr	r2, [sp, #0]
 801a660:	601a      	str	r2, [r3, #0]
 801a662:	9b01      	ldr	r3, [sp, #4]
 801a664:	2b0e      	cmp	r3, #14
 801a666:	f200 80ad 	bhi.w	801a7c4 <_dtoa_r+0x484>
 801a66a:	2d00      	cmp	r5, #0
 801a66c:	f000 80aa 	beq.w	801a7c4 <_dtoa_r+0x484>
 801a670:	f1ba 0f00 	cmp.w	sl, #0
 801a674:	dd36      	ble.n	801a6e4 <_dtoa_r+0x3a4>
 801a676:	4ac3      	ldr	r2, [pc, #780]	; (801a984 <_dtoa_r+0x644>)
 801a678:	f00a 030f 	and.w	r3, sl, #15
 801a67c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801a680:	ed93 7b00 	vldr	d7, [r3]
 801a684:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801a688:	ea4f 172a 	mov.w	r7, sl, asr #4
 801a68c:	eeb0 8a47 	vmov.f32	s16, s14
 801a690:	eef0 8a67 	vmov.f32	s17, s15
 801a694:	d016      	beq.n	801a6c4 <_dtoa_r+0x384>
 801a696:	4bbc      	ldr	r3, [pc, #752]	; (801a988 <_dtoa_r+0x648>)
 801a698:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a69c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a6a0:	f7e6 f8d4 	bl	800084c <__aeabi_ddiv>
 801a6a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a6a8:	f007 070f 	and.w	r7, r7, #15
 801a6ac:	2503      	movs	r5, #3
 801a6ae:	4eb6      	ldr	r6, [pc, #728]	; (801a988 <_dtoa_r+0x648>)
 801a6b0:	b957      	cbnz	r7, 801a6c8 <_dtoa_r+0x388>
 801a6b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a6b6:	ec53 2b18 	vmov	r2, r3, d8
 801a6ba:	f7e6 f8c7 	bl	800084c <__aeabi_ddiv>
 801a6be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a6c2:	e029      	b.n	801a718 <_dtoa_r+0x3d8>
 801a6c4:	2502      	movs	r5, #2
 801a6c6:	e7f2      	b.n	801a6ae <_dtoa_r+0x36e>
 801a6c8:	07f9      	lsls	r1, r7, #31
 801a6ca:	d508      	bpl.n	801a6de <_dtoa_r+0x39e>
 801a6cc:	ec51 0b18 	vmov	r0, r1, d8
 801a6d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a6d4:	f7e5 ff90 	bl	80005f8 <__aeabi_dmul>
 801a6d8:	ec41 0b18 	vmov	d8, r0, r1
 801a6dc:	3501      	adds	r5, #1
 801a6de:	107f      	asrs	r7, r7, #1
 801a6e0:	3608      	adds	r6, #8
 801a6e2:	e7e5      	b.n	801a6b0 <_dtoa_r+0x370>
 801a6e4:	f000 80a6 	beq.w	801a834 <_dtoa_r+0x4f4>
 801a6e8:	f1ca 0600 	rsb	r6, sl, #0
 801a6ec:	4ba5      	ldr	r3, [pc, #660]	; (801a984 <_dtoa_r+0x644>)
 801a6ee:	4fa6      	ldr	r7, [pc, #664]	; (801a988 <_dtoa_r+0x648>)
 801a6f0:	f006 020f 	and.w	r2, r6, #15
 801a6f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a700:	f7e5 ff7a 	bl	80005f8 <__aeabi_dmul>
 801a704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a708:	1136      	asrs	r6, r6, #4
 801a70a:	2300      	movs	r3, #0
 801a70c:	2502      	movs	r5, #2
 801a70e:	2e00      	cmp	r6, #0
 801a710:	f040 8085 	bne.w	801a81e <_dtoa_r+0x4de>
 801a714:	2b00      	cmp	r3, #0
 801a716:	d1d2      	bne.n	801a6be <_dtoa_r+0x37e>
 801a718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a71a:	2b00      	cmp	r3, #0
 801a71c:	f000 808c 	beq.w	801a838 <_dtoa_r+0x4f8>
 801a720:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801a724:	4b99      	ldr	r3, [pc, #612]	; (801a98c <_dtoa_r+0x64c>)
 801a726:	2200      	movs	r2, #0
 801a728:	4630      	mov	r0, r6
 801a72a:	4639      	mov	r1, r7
 801a72c:	f7e6 f9d6 	bl	8000adc <__aeabi_dcmplt>
 801a730:	2800      	cmp	r0, #0
 801a732:	f000 8081 	beq.w	801a838 <_dtoa_r+0x4f8>
 801a736:	9b01      	ldr	r3, [sp, #4]
 801a738:	2b00      	cmp	r3, #0
 801a73a:	d07d      	beq.n	801a838 <_dtoa_r+0x4f8>
 801a73c:	f1b9 0f00 	cmp.w	r9, #0
 801a740:	dd3c      	ble.n	801a7bc <_dtoa_r+0x47c>
 801a742:	f10a 33ff 	add.w	r3, sl, #4294967295
 801a746:	9307      	str	r3, [sp, #28]
 801a748:	2200      	movs	r2, #0
 801a74a:	4b91      	ldr	r3, [pc, #580]	; (801a990 <_dtoa_r+0x650>)
 801a74c:	4630      	mov	r0, r6
 801a74e:	4639      	mov	r1, r7
 801a750:	f7e5 ff52 	bl	80005f8 <__aeabi_dmul>
 801a754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a758:	3501      	adds	r5, #1
 801a75a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801a75e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801a762:	4628      	mov	r0, r5
 801a764:	f7e5 fede 	bl	8000524 <__aeabi_i2d>
 801a768:	4632      	mov	r2, r6
 801a76a:	463b      	mov	r3, r7
 801a76c:	f7e5 ff44 	bl	80005f8 <__aeabi_dmul>
 801a770:	4b88      	ldr	r3, [pc, #544]	; (801a994 <_dtoa_r+0x654>)
 801a772:	2200      	movs	r2, #0
 801a774:	f7e5 fd8a 	bl	800028c <__adddf3>
 801a778:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801a77c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a780:	9303      	str	r3, [sp, #12]
 801a782:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a784:	2b00      	cmp	r3, #0
 801a786:	d15c      	bne.n	801a842 <_dtoa_r+0x502>
 801a788:	4b83      	ldr	r3, [pc, #524]	; (801a998 <_dtoa_r+0x658>)
 801a78a:	2200      	movs	r2, #0
 801a78c:	4630      	mov	r0, r6
 801a78e:	4639      	mov	r1, r7
 801a790:	f7e5 fd7a 	bl	8000288 <__aeabi_dsub>
 801a794:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a798:	4606      	mov	r6, r0
 801a79a:	460f      	mov	r7, r1
 801a79c:	f7e6 f9bc 	bl	8000b18 <__aeabi_dcmpgt>
 801a7a0:	2800      	cmp	r0, #0
 801a7a2:	f040 8296 	bne.w	801acd2 <_dtoa_r+0x992>
 801a7a6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801a7aa:	4630      	mov	r0, r6
 801a7ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a7b0:	4639      	mov	r1, r7
 801a7b2:	f7e6 f993 	bl	8000adc <__aeabi_dcmplt>
 801a7b6:	2800      	cmp	r0, #0
 801a7b8:	f040 8288 	bne.w	801accc <_dtoa_r+0x98c>
 801a7bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a7c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a7c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	f2c0 8158 	blt.w	801aa7c <_dtoa_r+0x73c>
 801a7cc:	f1ba 0f0e 	cmp.w	sl, #14
 801a7d0:	f300 8154 	bgt.w	801aa7c <_dtoa_r+0x73c>
 801a7d4:	4b6b      	ldr	r3, [pc, #428]	; (801a984 <_dtoa_r+0x644>)
 801a7d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a7da:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a7e0:	2b00      	cmp	r3, #0
 801a7e2:	f280 80e3 	bge.w	801a9ac <_dtoa_r+0x66c>
 801a7e6:	9b01      	ldr	r3, [sp, #4]
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	f300 80df 	bgt.w	801a9ac <_dtoa_r+0x66c>
 801a7ee:	f040 826d 	bne.w	801accc <_dtoa_r+0x98c>
 801a7f2:	4b69      	ldr	r3, [pc, #420]	; (801a998 <_dtoa_r+0x658>)
 801a7f4:	2200      	movs	r2, #0
 801a7f6:	4640      	mov	r0, r8
 801a7f8:	4649      	mov	r1, r9
 801a7fa:	f7e5 fefd 	bl	80005f8 <__aeabi_dmul>
 801a7fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a802:	f7e6 f97f 	bl	8000b04 <__aeabi_dcmpge>
 801a806:	9e01      	ldr	r6, [sp, #4]
 801a808:	4637      	mov	r7, r6
 801a80a:	2800      	cmp	r0, #0
 801a80c:	f040 8243 	bne.w	801ac96 <_dtoa_r+0x956>
 801a810:	9d00      	ldr	r5, [sp, #0]
 801a812:	2331      	movs	r3, #49	; 0x31
 801a814:	f805 3b01 	strb.w	r3, [r5], #1
 801a818:	f10a 0a01 	add.w	sl, sl, #1
 801a81c:	e23f      	b.n	801ac9e <_dtoa_r+0x95e>
 801a81e:	07f2      	lsls	r2, r6, #31
 801a820:	d505      	bpl.n	801a82e <_dtoa_r+0x4ee>
 801a822:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a826:	f7e5 fee7 	bl	80005f8 <__aeabi_dmul>
 801a82a:	3501      	adds	r5, #1
 801a82c:	2301      	movs	r3, #1
 801a82e:	1076      	asrs	r6, r6, #1
 801a830:	3708      	adds	r7, #8
 801a832:	e76c      	b.n	801a70e <_dtoa_r+0x3ce>
 801a834:	2502      	movs	r5, #2
 801a836:	e76f      	b.n	801a718 <_dtoa_r+0x3d8>
 801a838:	9b01      	ldr	r3, [sp, #4]
 801a83a:	f8cd a01c 	str.w	sl, [sp, #28]
 801a83e:	930c      	str	r3, [sp, #48]	; 0x30
 801a840:	e78d      	b.n	801a75e <_dtoa_r+0x41e>
 801a842:	9900      	ldr	r1, [sp, #0]
 801a844:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a846:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a848:	4b4e      	ldr	r3, [pc, #312]	; (801a984 <_dtoa_r+0x644>)
 801a84a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a84e:	4401      	add	r1, r0
 801a850:	9102      	str	r1, [sp, #8]
 801a852:	9908      	ldr	r1, [sp, #32]
 801a854:	eeb0 8a47 	vmov.f32	s16, s14
 801a858:	eef0 8a67 	vmov.f32	s17, s15
 801a85c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a860:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801a864:	2900      	cmp	r1, #0
 801a866:	d045      	beq.n	801a8f4 <_dtoa_r+0x5b4>
 801a868:	494c      	ldr	r1, [pc, #304]	; (801a99c <_dtoa_r+0x65c>)
 801a86a:	2000      	movs	r0, #0
 801a86c:	f7e5 ffee 	bl	800084c <__aeabi_ddiv>
 801a870:	ec53 2b18 	vmov	r2, r3, d8
 801a874:	f7e5 fd08 	bl	8000288 <__aeabi_dsub>
 801a878:	9d00      	ldr	r5, [sp, #0]
 801a87a:	ec41 0b18 	vmov	d8, r0, r1
 801a87e:	4639      	mov	r1, r7
 801a880:	4630      	mov	r0, r6
 801a882:	f7e6 f969 	bl	8000b58 <__aeabi_d2iz>
 801a886:	900c      	str	r0, [sp, #48]	; 0x30
 801a888:	f7e5 fe4c 	bl	8000524 <__aeabi_i2d>
 801a88c:	4602      	mov	r2, r0
 801a88e:	460b      	mov	r3, r1
 801a890:	4630      	mov	r0, r6
 801a892:	4639      	mov	r1, r7
 801a894:	f7e5 fcf8 	bl	8000288 <__aeabi_dsub>
 801a898:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a89a:	3330      	adds	r3, #48	; 0x30
 801a89c:	f805 3b01 	strb.w	r3, [r5], #1
 801a8a0:	ec53 2b18 	vmov	r2, r3, d8
 801a8a4:	4606      	mov	r6, r0
 801a8a6:	460f      	mov	r7, r1
 801a8a8:	f7e6 f918 	bl	8000adc <__aeabi_dcmplt>
 801a8ac:	2800      	cmp	r0, #0
 801a8ae:	d165      	bne.n	801a97c <_dtoa_r+0x63c>
 801a8b0:	4632      	mov	r2, r6
 801a8b2:	463b      	mov	r3, r7
 801a8b4:	4935      	ldr	r1, [pc, #212]	; (801a98c <_dtoa_r+0x64c>)
 801a8b6:	2000      	movs	r0, #0
 801a8b8:	f7e5 fce6 	bl	8000288 <__aeabi_dsub>
 801a8bc:	ec53 2b18 	vmov	r2, r3, d8
 801a8c0:	f7e6 f90c 	bl	8000adc <__aeabi_dcmplt>
 801a8c4:	2800      	cmp	r0, #0
 801a8c6:	f040 80b9 	bne.w	801aa3c <_dtoa_r+0x6fc>
 801a8ca:	9b02      	ldr	r3, [sp, #8]
 801a8cc:	429d      	cmp	r5, r3
 801a8ce:	f43f af75 	beq.w	801a7bc <_dtoa_r+0x47c>
 801a8d2:	4b2f      	ldr	r3, [pc, #188]	; (801a990 <_dtoa_r+0x650>)
 801a8d4:	ec51 0b18 	vmov	r0, r1, d8
 801a8d8:	2200      	movs	r2, #0
 801a8da:	f7e5 fe8d 	bl	80005f8 <__aeabi_dmul>
 801a8de:	4b2c      	ldr	r3, [pc, #176]	; (801a990 <_dtoa_r+0x650>)
 801a8e0:	ec41 0b18 	vmov	d8, r0, r1
 801a8e4:	2200      	movs	r2, #0
 801a8e6:	4630      	mov	r0, r6
 801a8e8:	4639      	mov	r1, r7
 801a8ea:	f7e5 fe85 	bl	80005f8 <__aeabi_dmul>
 801a8ee:	4606      	mov	r6, r0
 801a8f0:	460f      	mov	r7, r1
 801a8f2:	e7c4      	b.n	801a87e <_dtoa_r+0x53e>
 801a8f4:	ec51 0b17 	vmov	r0, r1, d7
 801a8f8:	f7e5 fe7e 	bl	80005f8 <__aeabi_dmul>
 801a8fc:	9b02      	ldr	r3, [sp, #8]
 801a8fe:	9d00      	ldr	r5, [sp, #0]
 801a900:	930c      	str	r3, [sp, #48]	; 0x30
 801a902:	ec41 0b18 	vmov	d8, r0, r1
 801a906:	4639      	mov	r1, r7
 801a908:	4630      	mov	r0, r6
 801a90a:	f7e6 f925 	bl	8000b58 <__aeabi_d2iz>
 801a90e:	9011      	str	r0, [sp, #68]	; 0x44
 801a910:	f7e5 fe08 	bl	8000524 <__aeabi_i2d>
 801a914:	4602      	mov	r2, r0
 801a916:	460b      	mov	r3, r1
 801a918:	4630      	mov	r0, r6
 801a91a:	4639      	mov	r1, r7
 801a91c:	f7e5 fcb4 	bl	8000288 <__aeabi_dsub>
 801a920:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a922:	3330      	adds	r3, #48	; 0x30
 801a924:	f805 3b01 	strb.w	r3, [r5], #1
 801a928:	9b02      	ldr	r3, [sp, #8]
 801a92a:	429d      	cmp	r5, r3
 801a92c:	4606      	mov	r6, r0
 801a92e:	460f      	mov	r7, r1
 801a930:	f04f 0200 	mov.w	r2, #0
 801a934:	d134      	bne.n	801a9a0 <_dtoa_r+0x660>
 801a936:	4b19      	ldr	r3, [pc, #100]	; (801a99c <_dtoa_r+0x65c>)
 801a938:	ec51 0b18 	vmov	r0, r1, d8
 801a93c:	f7e5 fca6 	bl	800028c <__adddf3>
 801a940:	4602      	mov	r2, r0
 801a942:	460b      	mov	r3, r1
 801a944:	4630      	mov	r0, r6
 801a946:	4639      	mov	r1, r7
 801a948:	f7e6 f8e6 	bl	8000b18 <__aeabi_dcmpgt>
 801a94c:	2800      	cmp	r0, #0
 801a94e:	d175      	bne.n	801aa3c <_dtoa_r+0x6fc>
 801a950:	ec53 2b18 	vmov	r2, r3, d8
 801a954:	4911      	ldr	r1, [pc, #68]	; (801a99c <_dtoa_r+0x65c>)
 801a956:	2000      	movs	r0, #0
 801a958:	f7e5 fc96 	bl	8000288 <__aeabi_dsub>
 801a95c:	4602      	mov	r2, r0
 801a95e:	460b      	mov	r3, r1
 801a960:	4630      	mov	r0, r6
 801a962:	4639      	mov	r1, r7
 801a964:	f7e6 f8ba 	bl	8000adc <__aeabi_dcmplt>
 801a968:	2800      	cmp	r0, #0
 801a96a:	f43f af27 	beq.w	801a7bc <_dtoa_r+0x47c>
 801a96e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a970:	1e6b      	subs	r3, r5, #1
 801a972:	930c      	str	r3, [sp, #48]	; 0x30
 801a974:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801a978:	2b30      	cmp	r3, #48	; 0x30
 801a97a:	d0f8      	beq.n	801a96e <_dtoa_r+0x62e>
 801a97c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801a980:	e04a      	b.n	801aa18 <_dtoa_r+0x6d8>
 801a982:	bf00      	nop
 801a984:	0801f6d8 	.word	0x0801f6d8
 801a988:	0801f6b0 	.word	0x0801f6b0
 801a98c:	3ff00000 	.word	0x3ff00000
 801a990:	40240000 	.word	0x40240000
 801a994:	401c0000 	.word	0x401c0000
 801a998:	40140000 	.word	0x40140000
 801a99c:	3fe00000 	.word	0x3fe00000
 801a9a0:	4baf      	ldr	r3, [pc, #700]	; (801ac60 <_dtoa_r+0x920>)
 801a9a2:	f7e5 fe29 	bl	80005f8 <__aeabi_dmul>
 801a9a6:	4606      	mov	r6, r0
 801a9a8:	460f      	mov	r7, r1
 801a9aa:	e7ac      	b.n	801a906 <_dtoa_r+0x5c6>
 801a9ac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801a9b0:	9d00      	ldr	r5, [sp, #0]
 801a9b2:	4642      	mov	r2, r8
 801a9b4:	464b      	mov	r3, r9
 801a9b6:	4630      	mov	r0, r6
 801a9b8:	4639      	mov	r1, r7
 801a9ba:	f7e5 ff47 	bl	800084c <__aeabi_ddiv>
 801a9be:	f7e6 f8cb 	bl	8000b58 <__aeabi_d2iz>
 801a9c2:	9002      	str	r0, [sp, #8]
 801a9c4:	f7e5 fdae 	bl	8000524 <__aeabi_i2d>
 801a9c8:	4642      	mov	r2, r8
 801a9ca:	464b      	mov	r3, r9
 801a9cc:	f7e5 fe14 	bl	80005f8 <__aeabi_dmul>
 801a9d0:	4602      	mov	r2, r0
 801a9d2:	460b      	mov	r3, r1
 801a9d4:	4630      	mov	r0, r6
 801a9d6:	4639      	mov	r1, r7
 801a9d8:	f7e5 fc56 	bl	8000288 <__aeabi_dsub>
 801a9dc:	9e02      	ldr	r6, [sp, #8]
 801a9de:	9f01      	ldr	r7, [sp, #4]
 801a9e0:	3630      	adds	r6, #48	; 0x30
 801a9e2:	f805 6b01 	strb.w	r6, [r5], #1
 801a9e6:	9e00      	ldr	r6, [sp, #0]
 801a9e8:	1bae      	subs	r6, r5, r6
 801a9ea:	42b7      	cmp	r7, r6
 801a9ec:	4602      	mov	r2, r0
 801a9ee:	460b      	mov	r3, r1
 801a9f0:	d137      	bne.n	801aa62 <_dtoa_r+0x722>
 801a9f2:	f7e5 fc4b 	bl	800028c <__adddf3>
 801a9f6:	4642      	mov	r2, r8
 801a9f8:	464b      	mov	r3, r9
 801a9fa:	4606      	mov	r6, r0
 801a9fc:	460f      	mov	r7, r1
 801a9fe:	f7e6 f88b 	bl	8000b18 <__aeabi_dcmpgt>
 801aa02:	b9c8      	cbnz	r0, 801aa38 <_dtoa_r+0x6f8>
 801aa04:	4642      	mov	r2, r8
 801aa06:	464b      	mov	r3, r9
 801aa08:	4630      	mov	r0, r6
 801aa0a:	4639      	mov	r1, r7
 801aa0c:	f7e6 f85c 	bl	8000ac8 <__aeabi_dcmpeq>
 801aa10:	b110      	cbz	r0, 801aa18 <_dtoa_r+0x6d8>
 801aa12:	9b02      	ldr	r3, [sp, #8]
 801aa14:	07d9      	lsls	r1, r3, #31
 801aa16:	d40f      	bmi.n	801aa38 <_dtoa_r+0x6f8>
 801aa18:	4620      	mov	r0, r4
 801aa1a:	4659      	mov	r1, fp
 801aa1c:	f000 fcfe 	bl	801b41c <_Bfree>
 801aa20:	2300      	movs	r3, #0
 801aa22:	702b      	strb	r3, [r5, #0]
 801aa24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aa26:	f10a 0001 	add.w	r0, sl, #1
 801aa2a:	6018      	str	r0, [r3, #0]
 801aa2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	f43f acd8 	beq.w	801a3e4 <_dtoa_r+0xa4>
 801aa34:	601d      	str	r5, [r3, #0]
 801aa36:	e4d5      	b.n	801a3e4 <_dtoa_r+0xa4>
 801aa38:	f8cd a01c 	str.w	sl, [sp, #28]
 801aa3c:	462b      	mov	r3, r5
 801aa3e:	461d      	mov	r5, r3
 801aa40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801aa44:	2a39      	cmp	r2, #57	; 0x39
 801aa46:	d108      	bne.n	801aa5a <_dtoa_r+0x71a>
 801aa48:	9a00      	ldr	r2, [sp, #0]
 801aa4a:	429a      	cmp	r2, r3
 801aa4c:	d1f7      	bne.n	801aa3e <_dtoa_r+0x6fe>
 801aa4e:	9a07      	ldr	r2, [sp, #28]
 801aa50:	9900      	ldr	r1, [sp, #0]
 801aa52:	3201      	adds	r2, #1
 801aa54:	9207      	str	r2, [sp, #28]
 801aa56:	2230      	movs	r2, #48	; 0x30
 801aa58:	700a      	strb	r2, [r1, #0]
 801aa5a:	781a      	ldrb	r2, [r3, #0]
 801aa5c:	3201      	adds	r2, #1
 801aa5e:	701a      	strb	r2, [r3, #0]
 801aa60:	e78c      	b.n	801a97c <_dtoa_r+0x63c>
 801aa62:	4b7f      	ldr	r3, [pc, #508]	; (801ac60 <_dtoa_r+0x920>)
 801aa64:	2200      	movs	r2, #0
 801aa66:	f7e5 fdc7 	bl	80005f8 <__aeabi_dmul>
 801aa6a:	2200      	movs	r2, #0
 801aa6c:	2300      	movs	r3, #0
 801aa6e:	4606      	mov	r6, r0
 801aa70:	460f      	mov	r7, r1
 801aa72:	f7e6 f829 	bl	8000ac8 <__aeabi_dcmpeq>
 801aa76:	2800      	cmp	r0, #0
 801aa78:	d09b      	beq.n	801a9b2 <_dtoa_r+0x672>
 801aa7a:	e7cd      	b.n	801aa18 <_dtoa_r+0x6d8>
 801aa7c:	9a08      	ldr	r2, [sp, #32]
 801aa7e:	2a00      	cmp	r2, #0
 801aa80:	f000 80c4 	beq.w	801ac0c <_dtoa_r+0x8cc>
 801aa84:	9a05      	ldr	r2, [sp, #20]
 801aa86:	2a01      	cmp	r2, #1
 801aa88:	f300 80a8 	bgt.w	801abdc <_dtoa_r+0x89c>
 801aa8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801aa8e:	2a00      	cmp	r2, #0
 801aa90:	f000 80a0 	beq.w	801abd4 <_dtoa_r+0x894>
 801aa94:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801aa98:	9e06      	ldr	r6, [sp, #24]
 801aa9a:	4645      	mov	r5, r8
 801aa9c:	9a04      	ldr	r2, [sp, #16]
 801aa9e:	2101      	movs	r1, #1
 801aaa0:	441a      	add	r2, r3
 801aaa2:	4620      	mov	r0, r4
 801aaa4:	4498      	add	r8, r3
 801aaa6:	9204      	str	r2, [sp, #16]
 801aaa8:	f000 fd74 	bl	801b594 <__i2b>
 801aaac:	4607      	mov	r7, r0
 801aaae:	2d00      	cmp	r5, #0
 801aab0:	dd0b      	ble.n	801aaca <_dtoa_r+0x78a>
 801aab2:	9b04      	ldr	r3, [sp, #16]
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	dd08      	ble.n	801aaca <_dtoa_r+0x78a>
 801aab8:	42ab      	cmp	r3, r5
 801aaba:	9a04      	ldr	r2, [sp, #16]
 801aabc:	bfa8      	it	ge
 801aabe:	462b      	movge	r3, r5
 801aac0:	eba8 0803 	sub.w	r8, r8, r3
 801aac4:	1aed      	subs	r5, r5, r3
 801aac6:	1ad3      	subs	r3, r2, r3
 801aac8:	9304      	str	r3, [sp, #16]
 801aaca:	9b06      	ldr	r3, [sp, #24]
 801aacc:	b1fb      	cbz	r3, 801ab0e <_dtoa_r+0x7ce>
 801aace:	9b08      	ldr	r3, [sp, #32]
 801aad0:	2b00      	cmp	r3, #0
 801aad2:	f000 809f 	beq.w	801ac14 <_dtoa_r+0x8d4>
 801aad6:	2e00      	cmp	r6, #0
 801aad8:	dd11      	ble.n	801aafe <_dtoa_r+0x7be>
 801aada:	4639      	mov	r1, r7
 801aadc:	4632      	mov	r2, r6
 801aade:	4620      	mov	r0, r4
 801aae0:	f000 fe14 	bl	801b70c <__pow5mult>
 801aae4:	465a      	mov	r2, fp
 801aae6:	4601      	mov	r1, r0
 801aae8:	4607      	mov	r7, r0
 801aaea:	4620      	mov	r0, r4
 801aaec:	f000 fd68 	bl	801b5c0 <__multiply>
 801aaf0:	4659      	mov	r1, fp
 801aaf2:	9007      	str	r0, [sp, #28]
 801aaf4:	4620      	mov	r0, r4
 801aaf6:	f000 fc91 	bl	801b41c <_Bfree>
 801aafa:	9b07      	ldr	r3, [sp, #28]
 801aafc:	469b      	mov	fp, r3
 801aafe:	9b06      	ldr	r3, [sp, #24]
 801ab00:	1b9a      	subs	r2, r3, r6
 801ab02:	d004      	beq.n	801ab0e <_dtoa_r+0x7ce>
 801ab04:	4659      	mov	r1, fp
 801ab06:	4620      	mov	r0, r4
 801ab08:	f000 fe00 	bl	801b70c <__pow5mult>
 801ab0c:	4683      	mov	fp, r0
 801ab0e:	2101      	movs	r1, #1
 801ab10:	4620      	mov	r0, r4
 801ab12:	f000 fd3f 	bl	801b594 <__i2b>
 801ab16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	4606      	mov	r6, r0
 801ab1c:	dd7c      	ble.n	801ac18 <_dtoa_r+0x8d8>
 801ab1e:	461a      	mov	r2, r3
 801ab20:	4601      	mov	r1, r0
 801ab22:	4620      	mov	r0, r4
 801ab24:	f000 fdf2 	bl	801b70c <__pow5mult>
 801ab28:	9b05      	ldr	r3, [sp, #20]
 801ab2a:	2b01      	cmp	r3, #1
 801ab2c:	4606      	mov	r6, r0
 801ab2e:	dd76      	ble.n	801ac1e <_dtoa_r+0x8de>
 801ab30:	2300      	movs	r3, #0
 801ab32:	9306      	str	r3, [sp, #24]
 801ab34:	6933      	ldr	r3, [r6, #16]
 801ab36:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801ab3a:	6918      	ldr	r0, [r3, #16]
 801ab3c:	f000 fcda 	bl	801b4f4 <__hi0bits>
 801ab40:	f1c0 0020 	rsb	r0, r0, #32
 801ab44:	9b04      	ldr	r3, [sp, #16]
 801ab46:	4418      	add	r0, r3
 801ab48:	f010 001f 	ands.w	r0, r0, #31
 801ab4c:	f000 8086 	beq.w	801ac5c <_dtoa_r+0x91c>
 801ab50:	f1c0 0320 	rsb	r3, r0, #32
 801ab54:	2b04      	cmp	r3, #4
 801ab56:	dd7f      	ble.n	801ac58 <_dtoa_r+0x918>
 801ab58:	f1c0 001c 	rsb	r0, r0, #28
 801ab5c:	9b04      	ldr	r3, [sp, #16]
 801ab5e:	4403      	add	r3, r0
 801ab60:	4480      	add	r8, r0
 801ab62:	4405      	add	r5, r0
 801ab64:	9304      	str	r3, [sp, #16]
 801ab66:	f1b8 0f00 	cmp.w	r8, #0
 801ab6a:	dd05      	ble.n	801ab78 <_dtoa_r+0x838>
 801ab6c:	4659      	mov	r1, fp
 801ab6e:	4642      	mov	r2, r8
 801ab70:	4620      	mov	r0, r4
 801ab72:	f000 fe25 	bl	801b7c0 <__lshift>
 801ab76:	4683      	mov	fp, r0
 801ab78:	9b04      	ldr	r3, [sp, #16]
 801ab7a:	2b00      	cmp	r3, #0
 801ab7c:	dd05      	ble.n	801ab8a <_dtoa_r+0x84a>
 801ab7e:	4631      	mov	r1, r6
 801ab80:	461a      	mov	r2, r3
 801ab82:	4620      	mov	r0, r4
 801ab84:	f000 fe1c 	bl	801b7c0 <__lshift>
 801ab88:	4606      	mov	r6, r0
 801ab8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ab8c:	2b00      	cmp	r3, #0
 801ab8e:	d069      	beq.n	801ac64 <_dtoa_r+0x924>
 801ab90:	4631      	mov	r1, r6
 801ab92:	4658      	mov	r0, fp
 801ab94:	f000 fe80 	bl	801b898 <__mcmp>
 801ab98:	2800      	cmp	r0, #0
 801ab9a:	da63      	bge.n	801ac64 <_dtoa_r+0x924>
 801ab9c:	2300      	movs	r3, #0
 801ab9e:	4659      	mov	r1, fp
 801aba0:	220a      	movs	r2, #10
 801aba2:	4620      	mov	r0, r4
 801aba4:	f000 fc5c 	bl	801b460 <__multadd>
 801aba8:	9b08      	ldr	r3, [sp, #32]
 801abaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801abae:	4683      	mov	fp, r0
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	f000 818f 	beq.w	801aed4 <_dtoa_r+0xb94>
 801abb6:	4639      	mov	r1, r7
 801abb8:	2300      	movs	r3, #0
 801abba:	220a      	movs	r2, #10
 801abbc:	4620      	mov	r0, r4
 801abbe:	f000 fc4f 	bl	801b460 <__multadd>
 801abc2:	f1b9 0f00 	cmp.w	r9, #0
 801abc6:	4607      	mov	r7, r0
 801abc8:	f300 808e 	bgt.w	801ace8 <_dtoa_r+0x9a8>
 801abcc:	9b05      	ldr	r3, [sp, #20]
 801abce:	2b02      	cmp	r3, #2
 801abd0:	dc50      	bgt.n	801ac74 <_dtoa_r+0x934>
 801abd2:	e089      	b.n	801ace8 <_dtoa_r+0x9a8>
 801abd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801abd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801abda:	e75d      	b.n	801aa98 <_dtoa_r+0x758>
 801abdc:	9b01      	ldr	r3, [sp, #4]
 801abde:	1e5e      	subs	r6, r3, #1
 801abe0:	9b06      	ldr	r3, [sp, #24]
 801abe2:	42b3      	cmp	r3, r6
 801abe4:	bfbf      	itttt	lt
 801abe6:	9b06      	ldrlt	r3, [sp, #24]
 801abe8:	9606      	strlt	r6, [sp, #24]
 801abea:	1af2      	sublt	r2, r6, r3
 801abec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801abee:	bfb6      	itet	lt
 801abf0:	189b      	addlt	r3, r3, r2
 801abf2:	1b9e      	subge	r6, r3, r6
 801abf4:	930d      	strlt	r3, [sp, #52]	; 0x34
 801abf6:	9b01      	ldr	r3, [sp, #4]
 801abf8:	bfb8      	it	lt
 801abfa:	2600      	movlt	r6, #0
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	bfb5      	itete	lt
 801ac00:	eba8 0503 	sublt.w	r5, r8, r3
 801ac04:	9b01      	ldrge	r3, [sp, #4]
 801ac06:	2300      	movlt	r3, #0
 801ac08:	4645      	movge	r5, r8
 801ac0a:	e747      	b.n	801aa9c <_dtoa_r+0x75c>
 801ac0c:	9e06      	ldr	r6, [sp, #24]
 801ac0e:	9f08      	ldr	r7, [sp, #32]
 801ac10:	4645      	mov	r5, r8
 801ac12:	e74c      	b.n	801aaae <_dtoa_r+0x76e>
 801ac14:	9a06      	ldr	r2, [sp, #24]
 801ac16:	e775      	b.n	801ab04 <_dtoa_r+0x7c4>
 801ac18:	9b05      	ldr	r3, [sp, #20]
 801ac1a:	2b01      	cmp	r3, #1
 801ac1c:	dc18      	bgt.n	801ac50 <_dtoa_r+0x910>
 801ac1e:	9b02      	ldr	r3, [sp, #8]
 801ac20:	b9b3      	cbnz	r3, 801ac50 <_dtoa_r+0x910>
 801ac22:	9b03      	ldr	r3, [sp, #12]
 801ac24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ac28:	b9a3      	cbnz	r3, 801ac54 <_dtoa_r+0x914>
 801ac2a:	9b03      	ldr	r3, [sp, #12]
 801ac2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ac30:	0d1b      	lsrs	r3, r3, #20
 801ac32:	051b      	lsls	r3, r3, #20
 801ac34:	b12b      	cbz	r3, 801ac42 <_dtoa_r+0x902>
 801ac36:	9b04      	ldr	r3, [sp, #16]
 801ac38:	3301      	adds	r3, #1
 801ac3a:	9304      	str	r3, [sp, #16]
 801ac3c:	f108 0801 	add.w	r8, r8, #1
 801ac40:	2301      	movs	r3, #1
 801ac42:	9306      	str	r3, [sp, #24]
 801ac44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ac46:	2b00      	cmp	r3, #0
 801ac48:	f47f af74 	bne.w	801ab34 <_dtoa_r+0x7f4>
 801ac4c:	2001      	movs	r0, #1
 801ac4e:	e779      	b.n	801ab44 <_dtoa_r+0x804>
 801ac50:	2300      	movs	r3, #0
 801ac52:	e7f6      	b.n	801ac42 <_dtoa_r+0x902>
 801ac54:	9b02      	ldr	r3, [sp, #8]
 801ac56:	e7f4      	b.n	801ac42 <_dtoa_r+0x902>
 801ac58:	d085      	beq.n	801ab66 <_dtoa_r+0x826>
 801ac5a:	4618      	mov	r0, r3
 801ac5c:	301c      	adds	r0, #28
 801ac5e:	e77d      	b.n	801ab5c <_dtoa_r+0x81c>
 801ac60:	40240000 	.word	0x40240000
 801ac64:	9b01      	ldr	r3, [sp, #4]
 801ac66:	2b00      	cmp	r3, #0
 801ac68:	dc38      	bgt.n	801acdc <_dtoa_r+0x99c>
 801ac6a:	9b05      	ldr	r3, [sp, #20]
 801ac6c:	2b02      	cmp	r3, #2
 801ac6e:	dd35      	ble.n	801acdc <_dtoa_r+0x99c>
 801ac70:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801ac74:	f1b9 0f00 	cmp.w	r9, #0
 801ac78:	d10d      	bne.n	801ac96 <_dtoa_r+0x956>
 801ac7a:	4631      	mov	r1, r6
 801ac7c:	464b      	mov	r3, r9
 801ac7e:	2205      	movs	r2, #5
 801ac80:	4620      	mov	r0, r4
 801ac82:	f000 fbed 	bl	801b460 <__multadd>
 801ac86:	4601      	mov	r1, r0
 801ac88:	4606      	mov	r6, r0
 801ac8a:	4658      	mov	r0, fp
 801ac8c:	f000 fe04 	bl	801b898 <__mcmp>
 801ac90:	2800      	cmp	r0, #0
 801ac92:	f73f adbd 	bgt.w	801a810 <_dtoa_r+0x4d0>
 801ac96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac98:	9d00      	ldr	r5, [sp, #0]
 801ac9a:	ea6f 0a03 	mvn.w	sl, r3
 801ac9e:	f04f 0800 	mov.w	r8, #0
 801aca2:	4631      	mov	r1, r6
 801aca4:	4620      	mov	r0, r4
 801aca6:	f000 fbb9 	bl	801b41c <_Bfree>
 801acaa:	2f00      	cmp	r7, #0
 801acac:	f43f aeb4 	beq.w	801aa18 <_dtoa_r+0x6d8>
 801acb0:	f1b8 0f00 	cmp.w	r8, #0
 801acb4:	d005      	beq.n	801acc2 <_dtoa_r+0x982>
 801acb6:	45b8      	cmp	r8, r7
 801acb8:	d003      	beq.n	801acc2 <_dtoa_r+0x982>
 801acba:	4641      	mov	r1, r8
 801acbc:	4620      	mov	r0, r4
 801acbe:	f000 fbad 	bl	801b41c <_Bfree>
 801acc2:	4639      	mov	r1, r7
 801acc4:	4620      	mov	r0, r4
 801acc6:	f000 fba9 	bl	801b41c <_Bfree>
 801acca:	e6a5      	b.n	801aa18 <_dtoa_r+0x6d8>
 801accc:	2600      	movs	r6, #0
 801acce:	4637      	mov	r7, r6
 801acd0:	e7e1      	b.n	801ac96 <_dtoa_r+0x956>
 801acd2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801acd4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801acd8:	4637      	mov	r7, r6
 801acda:	e599      	b.n	801a810 <_dtoa_r+0x4d0>
 801acdc:	9b08      	ldr	r3, [sp, #32]
 801acde:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801ace2:	2b00      	cmp	r3, #0
 801ace4:	f000 80fd 	beq.w	801aee2 <_dtoa_r+0xba2>
 801ace8:	2d00      	cmp	r5, #0
 801acea:	dd05      	ble.n	801acf8 <_dtoa_r+0x9b8>
 801acec:	4639      	mov	r1, r7
 801acee:	462a      	mov	r2, r5
 801acf0:	4620      	mov	r0, r4
 801acf2:	f000 fd65 	bl	801b7c0 <__lshift>
 801acf6:	4607      	mov	r7, r0
 801acf8:	9b06      	ldr	r3, [sp, #24]
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	d05c      	beq.n	801adb8 <_dtoa_r+0xa78>
 801acfe:	6879      	ldr	r1, [r7, #4]
 801ad00:	4620      	mov	r0, r4
 801ad02:	f000 fb4b 	bl	801b39c <_Balloc>
 801ad06:	4605      	mov	r5, r0
 801ad08:	b928      	cbnz	r0, 801ad16 <_dtoa_r+0x9d6>
 801ad0a:	4b80      	ldr	r3, [pc, #512]	; (801af0c <_dtoa_r+0xbcc>)
 801ad0c:	4602      	mov	r2, r0
 801ad0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 801ad12:	f7ff bb2e 	b.w	801a372 <_dtoa_r+0x32>
 801ad16:	693a      	ldr	r2, [r7, #16]
 801ad18:	3202      	adds	r2, #2
 801ad1a:	0092      	lsls	r2, r2, #2
 801ad1c:	f107 010c 	add.w	r1, r7, #12
 801ad20:	300c      	adds	r0, #12
 801ad22:	f7fe fbf9 	bl	8019518 <memcpy>
 801ad26:	2201      	movs	r2, #1
 801ad28:	4629      	mov	r1, r5
 801ad2a:	4620      	mov	r0, r4
 801ad2c:	f000 fd48 	bl	801b7c0 <__lshift>
 801ad30:	9b00      	ldr	r3, [sp, #0]
 801ad32:	3301      	adds	r3, #1
 801ad34:	9301      	str	r3, [sp, #4]
 801ad36:	9b00      	ldr	r3, [sp, #0]
 801ad38:	444b      	add	r3, r9
 801ad3a:	9307      	str	r3, [sp, #28]
 801ad3c:	9b02      	ldr	r3, [sp, #8]
 801ad3e:	f003 0301 	and.w	r3, r3, #1
 801ad42:	46b8      	mov	r8, r7
 801ad44:	9306      	str	r3, [sp, #24]
 801ad46:	4607      	mov	r7, r0
 801ad48:	9b01      	ldr	r3, [sp, #4]
 801ad4a:	4631      	mov	r1, r6
 801ad4c:	3b01      	subs	r3, #1
 801ad4e:	4658      	mov	r0, fp
 801ad50:	9302      	str	r3, [sp, #8]
 801ad52:	f7ff fa67 	bl	801a224 <quorem>
 801ad56:	4603      	mov	r3, r0
 801ad58:	3330      	adds	r3, #48	; 0x30
 801ad5a:	9004      	str	r0, [sp, #16]
 801ad5c:	4641      	mov	r1, r8
 801ad5e:	4658      	mov	r0, fp
 801ad60:	9308      	str	r3, [sp, #32]
 801ad62:	f000 fd99 	bl	801b898 <__mcmp>
 801ad66:	463a      	mov	r2, r7
 801ad68:	4681      	mov	r9, r0
 801ad6a:	4631      	mov	r1, r6
 801ad6c:	4620      	mov	r0, r4
 801ad6e:	f000 fdaf 	bl	801b8d0 <__mdiff>
 801ad72:	68c2      	ldr	r2, [r0, #12]
 801ad74:	9b08      	ldr	r3, [sp, #32]
 801ad76:	4605      	mov	r5, r0
 801ad78:	bb02      	cbnz	r2, 801adbc <_dtoa_r+0xa7c>
 801ad7a:	4601      	mov	r1, r0
 801ad7c:	4658      	mov	r0, fp
 801ad7e:	f000 fd8b 	bl	801b898 <__mcmp>
 801ad82:	9b08      	ldr	r3, [sp, #32]
 801ad84:	4602      	mov	r2, r0
 801ad86:	4629      	mov	r1, r5
 801ad88:	4620      	mov	r0, r4
 801ad8a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801ad8e:	f000 fb45 	bl	801b41c <_Bfree>
 801ad92:	9b05      	ldr	r3, [sp, #20]
 801ad94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ad96:	9d01      	ldr	r5, [sp, #4]
 801ad98:	ea43 0102 	orr.w	r1, r3, r2
 801ad9c:	9b06      	ldr	r3, [sp, #24]
 801ad9e:	430b      	orrs	r3, r1
 801ada0:	9b08      	ldr	r3, [sp, #32]
 801ada2:	d10d      	bne.n	801adc0 <_dtoa_r+0xa80>
 801ada4:	2b39      	cmp	r3, #57	; 0x39
 801ada6:	d029      	beq.n	801adfc <_dtoa_r+0xabc>
 801ada8:	f1b9 0f00 	cmp.w	r9, #0
 801adac:	dd01      	ble.n	801adb2 <_dtoa_r+0xa72>
 801adae:	9b04      	ldr	r3, [sp, #16]
 801adb0:	3331      	adds	r3, #49	; 0x31
 801adb2:	9a02      	ldr	r2, [sp, #8]
 801adb4:	7013      	strb	r3, [r2, #0]
 801adb6:	e774      	b.n	801aca2 <_dtoa_r+0x962>
 801adb8:	4638      	mov	r0, r7
 801adba:	e7b9      	b.n	801ad30 <_dtoa_r+0x9f0>
 801adbc:	2201      	movs	r2, #1
 801adbe:	e7e2      	b.n	801ad86 <_dtoa_r+0xa46>
 801adc0:	f1b9 0f00 	cmp.w	r9, #0
 801adc4:	db06      	blt.n	801add4 <_dtoa_r+0xa94>
 801adc6:	9905      	ldr	r1, [sp, #20]
 801adc8:	ea41 0909 	orr.w	r9, r1, r9
 801adcc:	9906      	ldr	r1, [sp, #24]
 801adce:	ea59 0101 	orrs.w	r1, r9, r1
 801add2:	d120      	bne.n	801ae16 <_dtoa_r+0xad6>
 801add4:	2a00      	cmp	r2, #0
 801add6:	ddec      	ble.n	801adb2 <_dtoa_r+0xa72>
 801add8:	4659      	mov	r1, fp
 801adda:	2201      	movs	r2, #1
 801addc:	4620      	mov	r0, r4
 801adde:	9301      	str	r3, [sp, #4]
 801ade0:	f000 fcee 	bl	801b7c0 <__lshift>
 801ade4:	4631      	mov	r1, r6
 801ade6:	4683      	mov	fp, r0
 801ade8:	f000 fd56 	bl	801b898 <__mcmp>
 801adec:	2800      	cmp	r0, #0
 801adee:	9b01      	ldr	r3, [sp, #4]
 801adf0:	dc02      	bgt.n	801adf8 <_dtoa_r+0xab8>
 801adf2:	d1de      	bne.n	801adb2 <_dtoa_r+0xa72>
 801adf4:	07da      	lsls	r2, r3, #31
 801adf6:	d5dc      	bpl.n	801adb2 <_dtoa_r+0xa72>
 801adf8:	2b39      	cmp	r3, #57	; 0x39
 801adfa:	d1d8      	bne.n	801adae <_dtoa_r+0xa6e>
 801adfc:	9a02      	ldr	r2, [sp, #8]
 801adfe:	2339      	movs	r3, #57	; 0x39
 801ae00:	7013      	strb	r3, [r2, #0]
 801ae02:	462b      	mov	r3, r5
 801ae04:	461d      	mov	r5, r3
 801ae06:	3b01      	subs	r3, #1
 801ae08:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801ae0c:	2a39      	cmp	r2, #57	; 0x39
 801ae0e:	d050      	beq.n	801aeb2 <_dtoa_r+0xb72>
 801ae10:	3201      	adds	r2, #1
 801ae12:	701a      	strb	r2, [r3, #0]
 801ae14:	e745      	b.n	801aca2 <_dtoa_r+0x962>
 801ae16:	2a00      	cmp	r2, #0
 801ae18:	dd03      	ble.n	801ae22 <_dtoa_r+0xae2>
 801ae1a:	2b39      	cmp	r3, #57	; 0x39
 801ae1c:	d0ee      	beq.n	801adfc <_dtoa_r+0xabc>
 801ae1e:	3301      	adds	r3, #1
 801ae20:	e7c7      	b.n	801adb2 <_dtoa_r+0xa72>
 801ae22:	9a01      	ldr	r2, [sp, #4]
 801ae24:	9907      	ldr	r1, [sp, #28]
 801ae26:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ae2a:	428a      	cmp	r2, r1
 801ae2c:	d02a      	beq.n	801ae84 <_dtoa_r+0xb44>
 801ae2e:	4659      	mov	r1, fp
 801ae30:	2300      	movs	r3, #0
 801ae32:	220a      	movs	r2, #10
 801ae34:	4620      	mov	r0, r4
 801ae36:	f000 fb13 	bl	801b460 <__multadd>
 801ae3a:	45b8      	cmp	r8, r7
 801ae3c:	4683      	mov	fp, r0
 801ae3e:	f04f 0300 	mov.w	r3, #0
 801ae42:	f04f 020a 	mov.w	r2, #10
 801ae46:	4641      	mov	r1, r8
 801ae48:	4620      	mov	r0, r4
 801ae4a:	d107      	bne.n	801ae5c <_dtoa_r+0xb1c>
 801ae4c:	f000 fb08 	bl	801b460 <__multadd>
 801ae50:	4680      	mov	r8, r0
 801ae52:	4607      	mov	r7, r0
 801ae54:	9b01      	ldr	r3, [sp, #4]
 801ae56:	3301      	adds	r3, #1
 801ae58:	9301      	str	r3, [sp, #4]
 801ae5a:	e775      	b.n	801ad48 <_dtoa_r+0xa08>
 801ae5c:	f000 fb00 	bl	801b460 <__multadd>
 801ae60:	4639      	mov	r1, r7
 801ae62:	4680      	mov	r8, r0
 801ae64:	2300      	movs	r3, #0
 801ae66:	220a      	movs	r2, #10
 801ae68:	4620      	mov	r0, r4
 801ae6a:	f000 faf9 	bl	801b460 <__multadd>
 801ae6e:	4607      	mov	r7, r0
 801ae70:	e7f0      	b.n	801ae54 <_dtoa_r+0xb14>
 801ae72:	f1b9 0f00 	cmp.w	r9, #0
 801ae76:	9a00      	ldr	r2, [sp, #0]
 801ae78:	bfcc      	ite	gt
 801ae7a:	464d      	movgt	r5, r9
 801ae7c:	2501      	movle	r5, #1
 801ae7e:	4415      	add	r5, r2
 801ae80:	f04f 0800 	mov.w	r8, #0
 801ae84:	4659      	mov	r1, fp
 801ae86:	2201      	movs	r2, #1
 801ae88:	4620      	mov	r0, r4
 801ae8a:	9301      	str	r3, [sp, #4]
 801ae8c:	f000 fc98 	bl	801b7c0 <__lshift>
 801ae90:	4631      	mov	r1, r6
 801ae92:	4683      	mov	fp, r0
 801ae94:	f000 fd00 	bl	801b898 <__mcmp>
 801ae98:	2800      	cmp	r0, #0
 801ae9a:	dcb2      	bgt.n	801ae02 <_dtoa_r+0xac2>
 801ae9c:	d102      	bne.n	801aea4 <_dtoa_r+0xb64>
 801ae9e:	9b01      	ldr	r3, [sp, #4]
 801aea0:	07db      	lsls	r3, r3, #31
 801aea2:	d4ae      	bmi.n	801ae02 <_dtoa_r+0xac2>
 801aea4:	462b      	mov	r3, r5
 801aea6:	461d      	mov	r5, r3
 801aea8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801aeac:	2a30      	cmp	r2, #48	; 0x30
 801aeae:	d0fa      	beq.n	801aea6 <_dtoa_r+0xb66>
 801aeb0:	e6f7      	b.n	801aca2 <_dtoa_r+0x962>
 801aeb2:	9a00      	ldr	r2, [sp, #0]
 801aeb4:	429a      	cmp	r2, r3
 801aeb6:	d1a5      	bne.n	801ae04 <_dtoa_r+0xac4>
 801aeb8:	f10a 0a01 	add.w	sl, sl, #1
 801aebc:	2331      	movs	r3, #49	; 0x31
 801aebe:	e779      	b.n	801adb4 <_dtoa_r+0xa74>
 801aec0:	4b13      	ldr	r3, [pc, #76]	; (801af10 <_dtoa_r+0xbd0>)
 801aec2:	f7ff baaf 	b.w	801a424 <_dtoa_r+0xe4>
 801aec6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801aec8:	2b00      	cmp	r3, #0
 801aeca:	f47f aa86 	bne.w	801a3da <_dtoa_r+0x9a>
 801aece:	4b11      	ldr	r3, [pc, #68]	; (801af14 <_dtoa_r+0xbd4>)
 801aed0:	f7ff baa8 	b.w	801a424 <_dtoa_r+0xe4>
 801aed4:	f1b9 0f00 	cmp.w	r9, #0
 801aed8:	dc03      	bgt.n	801aee2 <_dtoa_r+0xba2>
 801aeda:	9b05      	ldr	r3, [sp, #20]
 801aedc:	2b02      	cmp	r3, #2
 801aede:	f73f aec9 	bgt.w	801ac74 <_dtoa_r+0x934>
 801aee2:	9d00      	ldr	r5, [sp, #0]
 801aee4:	4631      	mov	r1, r6
 801aee6:	4658      	mov	r0, fp
 801aee8:	f7ff f99c 	bl	801a224 <quorem>
 801aeec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801aef0:	f805 3b01 	strb.w	r3, [r5], #1
 801aef4:	9a00      	ldr	r2, [sp, #0]
 801aef6:	1aaa      	subs	r2, r5, r2
 801aef8:	4591      	cmp	r9, r2
 801aefa:	ddba      	ble.n	801ae72 <_dtoa_r+0xb32>
 801aefc:	4659      	mov	r1, fp
 801aefe:	2300      	movs	r3, #0
 801af00:	220a      	movs	r2, #10
 801af02:	4620      	mov	r0, r4
 801af04:	f000 faac 	bl	801b460 <__multadd>
 801af08:	4683      	mov	fp, r0
 801af0a:	e7eb      	b.n	801aee4 <_dtoa_r+0xba4>
 801af0c:	0801f5da 	.word	0x0801f5da
 801af10:	0801f498 	.word	0x0801f498
 801af14:	0801f56e 	.word	0x0801f56e

0801af18 <__sflush_r>:
 801af18:	898a      	ldrh	r2, [r1, #12]
 801af1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af1e:	4605      	mov	r5, r0
 801af20:	0710      	lsls	r0, r2, #28
 801af22:	460c      	mov	r4, r1
 801af24:	d458      	bmi.n	801afd8 <__sflush_r+0xc0>
 801af26:	684b      	ldr	r3, [r1, #4]
 801af28:	2b00      	cmp	r3, #0
 801af2a:	dc05      	bgt.n	801af38 <__sflush_r+0x20>
 801af2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801af2e:	2b00      	cmp	r3, #0
 801af30:	dc02      	bgt.n	801af38 <__sflush_r+0x20>
 801af32:	2000      	movs	r0, #0
 801af34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801af3a:	2e00      	cmp	r6, #0
 801af3c:	d0f9      	beq.n	801af32 <__sflush_r+0x1a>
 801af3e:	2300      	movs	r3, #0
 801af40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801af44:	682f      	ldr	r7, [r5, #0]
 801af46:	602b      	str	r3, [r5, #0]
 801af48:	d032      	beq.n	801afb0 <__sflush_r+0x98>
 801af4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801af4c:	89a3      	ldrh	r3, [r4, #12]
 801af4e:	075a      	lsls	r2, r3, #29
 801af50:	d505      	bpl.n	801af5e <__sflush_r+0x46>
 801af52:	6863      	ldr	r3, [r4, #4]
 801af54:	1ac0      	subs	r0, r0, r3
 801af56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801af58:	b10b      	cbz	r3, 801af5e <__sflush_r+0x46>
 801af5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801af5c:	1ac0      	subs	r0, r0, r3
 801af5e:	2300      	movs	r3, #0
 801af60:	4602      	mov	r2, r0
 801af62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801af64:	6a21      	ldr	r1, [r4, #32]
 801af66:	4628      	mov	r0, r5
 801af68:	47b0      	blx	r6
 801af6a:	1c43      	adds	r3, r0, #1
 801af6c:	89a3      	ldrh	r3, [r4, #12]
 801af6e:	d106      	bne.n	801af7e <__sflush_r+0x66>
 801af70:	6829      	ldr	r1, [r5, #0]
 801af72:	291d      	cmp	r1, #29
 801af74:	d82c      	bhi.n	801afd0 <__sflush_r+0xb8>
 801af76:	4a2a      	ldr	r2, [pc, #168]	; (801b020 <__sflush_r+0x108>)
 801af78:	40ca      	lsrs	r2, r1
 801af7a:	07d6      	lsls	r6, r2, #31
 801af7c:	d528      	bpl.n	801afd0 <__sflush_r+0xb8>
 801af7e:	2200      	movs	r2, #0
 801af80:	6062      	str	r2, [r4, #4]
 801af82:	04d9      	lsls	r1, r3, #19
 801af84:	6922      	ldr	r2, [r4, #16]
 801af86:	6022      	str	r2, [r4, #0]
 801af88:	d504      	bpl.n	801af94 <__sflush_r+0x7c>
 801af8a:	1c42      	adds	r2, r0, #1
 801af8c:	d101      	bne.n	801af92 <__sflush_r+0x7a>
 801af8e:	682b      	ldr	r3, [r5, #0]
 801af90:	b903      	cbnz	r3, 801af94 <__sflush_r+0x7c>
 801af92:	6560      	str	r0, [r4, #84]	; 0x54
 801af94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801af96:	602f      	str	r7, [r5, #0]
 801af98:	2900      	cmp	r1, #0
 801af9a:	d0ca      	beq.n	801af32 <__sflush_r+0x1a>
 801af9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801afa0:	4299      	cmp	r1, r3
 801afa2:	d002      	beq.n	801afaa <__sflush_r+0x92>
 801afa4:	4628      	mov	r0, r5
 801afa6:	f7fe facd 	bl	8019544 <_free_r>
 801afaa:	2000      	movs	r0, #0
 801afac:	6360      	str	r0, [r4, #52]	; 0x34
 801afae:	e7c1      	b.n	801af34 <__sflush_r+0x1c>
 801afb0:	6a21      	ldr	r1, [r4, #32]
 801afb2:	2301      	movs	r3, #1
 801afb4:	4628      	mov	r0, r5
 801afb6:	47b0      	blx	r6
 801afb8:	1c41      	adds	r1, r0, #1
 801afba:	d1c7      	bne.n	801af4c <__sflush_r+0x34>
 801afbc:	682b      	ldr	r3, [r5, #0]
 801afbe:	2b00      	cmp	r3, #0
 801afc0:	d0c4      	beq.n	801af4c <__sflush_r+0x34>
 801afc2:	2b1d      	cmp	r3, #29
 801afc4:	d001      	beq.n	801afca <__sflush_r+0xb2>
 801afc6:	2b16      	cmp	r3, #22
 801afc8:	d101      	bne.n	801afce <__sflush_r+0xb6>
 801afca:	602f      	str	r7, [r5, #0]
 801afcc:	e7b1      	b.n	801af32 <__sflush_r+0x1a>
 801afce:	89a3      	ldrh	r3, [r4, #12]
 801afd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801afd4:	81a3      	strh	r3, [r4, #12]
 801afd6:	e7ad      	b.n	801af34 <__sflush_r+0x1c>
 801afd8:	690f      	ldr	r7, [r1, #16]
 801afda:	2f00      	cmp	r7, #0
 801afdc:	d0a9      	beq.n	801af32 <__sflush_r+0x1a>
 801afde:	0793      	lsls	r3, r2, #30
 801afe0:	680e      	ldr	r6, [r1, #0]
 801afe2:	bf08      	it	eq
 801afe4:	694b      	ldreq	r3, [r1, #20]
 801afe6:	600f      	str	r7, [r1, #0]
 801afe8:	bf18      	it	ne
 801afea:	2300      	movne	r3, #0
 801afec:	eba6 0807 	sub.w	r8, r6, r7
 801aff0:	608b      	str	r3, [r1, #8]
 801aff2:	f1b8 0f00 	cmp.w	r8, #0
 801aff6:	dd9c      	ble.n	801af32 <__sflush_r+0x1a>
 801aff8:	6a21      	ldr	r1, [r4, #32]
 801affa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801affc:	4643      	mov	r3, r8
 801affe:	463a      	mov	r2, r7
 801b000:	4628      	mov	r0, r5
 801b002:	47b0      	blx	r6
 801b004:	2800      	cmp	r0, #0
 801b006:	dc06      	bgt.n	801b016 <__sflush_r+0xfe>
 801b008:	89a3      	ldrh	r3, [r4, #12]
 801b00a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b00e:	81a3      	strh	r3, [r4, #12]
 801b010:	f04f 30ff 	mov.w	r0, #4294967295
 801b014:	e78e      	b.n	801af34 <__sflush_r+0x1c>
 801b016:	4407      	add	r7, r0
 801b018:	eba8 0800 	sub.w	r8, r8, r0
 801b01c:	e7e9      	b.n	801aff2 <__sflush_r+0xda>
 801b01e:	bf00      	nop
 801b020:	20400001 	.word	0x20400001

0801b024 <_fflush_r>:
 801b024:	b538      	push	{r3, r4, r5, lr}
 801b026:	690b      	ldr	r3, [r1, #16]
 801b028:	4605      	mov	r5, r0
 801b02a:	460c      	mov	r4, r1
 801b02c:	b913      	cbnz	r3, 801b034 <_fflush_r+0x10>
 801b02e:	2500      	movs	r5, #0
 801b030:	4628      	mov	r0, r5
 801b032:	bd38      	pop	{r3, r4, r5, pc}
 801b034:	b118      	cbz	r0, 801b03e <_fflush_r+0x1a>
 801b036:	6983      	ldr	r3, [r0, #24]
 801b038:	b90b      	cbnz	r3, 801b03e <_fflush_r+0x1a>
 801b03a:	f000 f887 	bl	801b14c <__sinit>
 801b03e:	4b14      	ldr	r3, [pc, #80]	; (801b090 <_fflush_r+0x6c>)
 801b040:	429c      	cmp	r4, r3
 801b042:	d11b      	bne.n	801b07c <_fflush_r+0x58>
 801b044:	686c      	ldr	r4, [r5, #4]
 801b046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	d0ef      	beq.n	801b02e <_fflush_r+0xa>
 801b04e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b050:	07d0      	lsls	r0, r2, #31
 801b052:	d404      	bmi.n	801b05e <_fflush_r+0x3a>
 801b054:	0599      	lsls	r1, r3, #22
 801b056:	d402      	bmi.n	801b05e <_fflush_r+0x3a>
 801b058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b05a:	f000 f92c 	bl	801b2b6 <__retarget_lock_acquire_recursive>
 801b05e:	4628      	mov	r0, r5
 801b060:	4621      	mov	r1, r4
 801b062:	f7ff ff59 	bl	801af18 <__sflush_r>
 801b066:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b068:	07da      	lsls	r2, r3, #31
 801b06a:	4605      	mov	r5, r0
 801b06c:	d4e0      	bmi.n	801b030 <_fflush_r+0xc>
 801b06e:	89a3      	ldrh	r3, [r4, #12]
 801b070:	059b      	lsls	r3, r3, #22
 801b072:	d4dd      	bmi.n	801b030 <_fflush_r+0xc>
 801b074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b076:	f000 f91f 	bl	801b2b8 <__retarget_lock_release_recursive>
 801b07a:	e7d9      	b.n	801b030 <_fflush_r+0xc>
 801b07c:	4b05      	ldr	r3, [pc, #20]	; (801b094 <_fflush_r+0x70>)
 801b07e:	429c      	cmp	r4, r3
 801b080:	d101      	bne.n	801b086 <_fflush_r+0x62>
 801b082:	68ac      	ldr	r4, [r5, #8]
 801b084:	e7df      	b.n	801b046 <_fflush_r+0x22>
 801b086:	4b04      	ldr	r3, [pc, #16]	; (801b098 <_fflush_r+0x74>)
 801b088:	429c      	cmp	r4, r3
 801b08a:	bf08      	it	eq
 801b08c:	68ec      	ldreq	r4, [r5, #12]
 801b08e:	e7da      	b.n	801b046 <_fflush_r+0x22>
 801b090:	0801f60c 	.word	0x0801f60c
 801b094:	0801f62c 	.word	0x0801f62c
 801b098:	0801f5ec 	.word	0x0801f5ec

0801b09c <std>:
 801b09c:	2300      	movs	r3, #0
 801b09e:	b510      	push	{r4, lr}
 801b0a0:	4604      	mov	r4, r0
 801b0a2:	e9c0 3300 	strd	r3, r3, [r0]
 801b0a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b0aa:	6083      	str	r3, [r0, #8]
 801b0ac:	8181      	strh	r1, [r0, #12]
 801b0ae:	6643      	str	r3, [r0, #100]	; 0x64
 801b0b0:	81c2      	strh	r2, [r0, #14]
 801b0b2:	6183      	str	r3, [r0, #24]
 801b0b4:	4619      	mov	r1, r3
 801b0b6:	2208      	movs	r2, #8
 801b0b8:	305c      	adds	r0, #92	; 0x5c
 801b0ba:	f7fe fa3b 	bl	8019534 <memset>
 801b0be:	4b05      	ldr	r3, [pc, #20]	; (801b0d4 <std+0x38>)
 801b0c0:	6263      	str	r3, [r4, #36]	; 0x24
 801b0c2:	4b05      	ldr	r3, [pc, #20]	; (801b0d8 <std+0x3c>)
 801b0c4:	62a3      	str	r3, [r4, #40]	; 0x28
 801b0c6:	4b05      	ldr	r3, [pc, #20]	; (801b0dc <std+0x40>)
 801b0c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b0ca:	4b05      	ldr	r3, [pc, #20]	; (801b0e0 <std+0x44>)
 801b0cc:	6224      	str	r4, [r4, #32]
 801b0ce:	6323      	str	r3, [r4, #48]	; 0x30
 801b0d0:	bd10      	pop	{r4, pc}
 801b0d2:	bf00      	nop
 801b0d4:	0801bdf9 	.word	0x0801bdf9
 801b0d8:	0801be1b 	.word	0x0801be1b
 801b0dc:	0801be53 	.word	0x0801be53
 801b0e0:	0801be77 	.word	0x0801be77

0801b0e4 <_cleanup_r>:
 801b0e4:	4901      	ldr	r1, [pc, #4]	; (801b0ec <_cleanup_r+0x8>)
 801b0e6:	f000 b8c1 	b.w	801b26c <_fwalk_reent>
 801b0ea:	bf00      	nop
 801b0ec:	0801b025 	.word	0x0801b025

0801b0f0 <__sfmoreglue>:
 801b0f0:	b570      	push	{r4, r5, r6, lr}
 801b0f2:	1e4a      	subs	r2, r1, #1
 801b0f4:	2568      	movs	r5, #104	; 0x68
 801b0f6:	4355      	muls	r5, r2
 801b0f8:	460e      	mov	r6, r1
 801b0fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b0fe:	f7fe fa71 	bl	80195e4 <_malloc_r>
 801b102:	4604      	mov	r4, r0
 801b104:	b140      	cbz	r0, 801b118 <__sfmoreglue+0x28>
 801b106:	2100      	movs	r1, #0
 801b108:	e9c0 1600 	strd	r1, r6, [r0]
 801b10c:	300c      	adds	r0, #12
 801b10e:	60a0      	str	r0, [r4, #8]
 801b110:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b114:	f7fe fa0e 	bl	8019534 <memset>
 801b118:	4620      	mov	r0, r4
 801b11a:	bd70      	pop	{r4, r5, r6, pc}

0801b11c <__sfp_lock_acquire>:
 801b11c:	4801      	ldr	r0, [pc, #4]	; (801b124 <__sfp_lock_acquire+0x8>)
 801b11e:	f000 b8ca 	b.w	801b2b6 <__retarget_lock_acquire_recursive>
 801b122:	bf00      	nop
 801b124:	2001b0b4 	.word	0x2001b0b4

0801b128 <__sfp_lock_release>:
 801b128:	4801      	ldr	r0, [pc, #4]	; (801b130 <__sfp_lock_release+0x8>)
 801b12a:	f000 b8c5 	b.w	801b2b8 <__retarget_lock_release_recursive>
 801b12e:	bf00      	nop
 801b130:	2001b0b4 	.word	0x2001b0b4

0801b134 <__sinit_lock_acquire>:
 801b134:	4801      	ldr	r0, [pc, #4]	; (801b13c <__sinit_lock_acquire+0x8>)
 801b136:	f000 b8be 	b.w	801b2b6 <__retarget_lock_acquire_recursive>
 801b13a:	bf00      	nop
 801b13c:	2001b0af 	.word	0x2001b0af

0801b140 <__sinit_lock_release>:
 801b140:	4801      	ldr	r0, [pc, #4]	; (801b148 <__sinit_lock_release+0x8>)
 801b142:	f000 b8b9 	b.w	801b2b8 <__retarget_lock_release_recursive>
 801b146:	bf00      	nop
 801b148:	2001b0af 	.word	0x2001b0af

0801b14c <__sinit>:
 801b14c:	b510      	push	{r4, lr}
 801b14e:	4604      	mov	r4, r0
 801b150:	f7ff fff0 	bl	801b134 <__sinit_lock_acquire>
 801b154:	69a3      	ldr	r3, [r4, #24]
 801b156:	b11b      	cbz	r3, 801b160 <__sinit+0x14>
 801b158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b15c:	f7ff bff0 	b.w	801b140 <__sinit_lock_release>
 801b160:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b164:	6523      	str	r3, [r4, #80]	; 0x50
 801b166:	4b13      	ldr	r3, [pc, #76]	; (801b1b4 <__sinit+0x68>)
 801b168:	4a13      	ldr	r2, [pc, #76]	; (801b1b8 <__sinit+0x6c>)
 801b16a:	681b      	ldr	r3, [r3, #0]
 801b16c:	62a2      	str	r2, [r4, #40]	; 0x28
 801b16e:	42a3      	cmp	r3, r4
 801b170:	bf04      	itt	eq
 801b172:	2301      	moveq	r3, #1
 801b174:	61a3      	streq	r3, [r4, #24]
 801b176:	4620      	mov	r0, r4
 801b178:	f000 f820 	bl	801b1bc <__sfp>
 801b17c:	6060      	str	r0, [r4, #4]
 801b17e:	4620      	mov	r0, r4
 801b180:	f000 f81c 	bl	801b1bc <__sfp>
 801b184:	60a0      	str	r0, [r4, #8]
 801b186:	4620      	mov	r0, r4
 801b188:	f000 f818 	bl	801b1bc <__sfp>
 801b18c:	2200      	movs	r2, #0
 801b18e:	60e0      	str	r0, [r4, #12]
 801b190:	2104      	movs	r1, #4
 801b192:	6860      	ldr	r0, [r4, #4]
 801b194:	f7ff ff82 	bl	801b09c <std>
 801b198:	68a0      	ldr	r0, [r4, #8]
 801b19a:	2201      	movs	r2, #1
 801b19c:	2109      	movs	r1, #9
 801b19e:	f7ff ff7d 	bl	801b09c <std>
 801b1a2:	68e0      	ldr	r0, [r4, #12]
 801b1a4:	2202      	movs	r2, #2
 801b1a6:	2112      	movs	r1, #18
 801b1a8:	f7ff ff78 	bl	801b09c <std>
 801b1ac:	2301      	movs	r3, #1
 801b1ae:	61a3      	str	r3, [r4, #24]
 801b1b0:	e7d2      	b.n	801b158 <__sinit+0xc>
 801b1b2:	bf00      	nop
 801b1b4:	0801f484 	.word	0x0801f484
 801b1b8:	0801b0e5 	.word	0x0801b0e5

0801b1bc <__sfp>:
 801b1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1be:	4607      	mov	r7, r0
 801b1c0:	f7ff ffac 	bl	801b11c <__sfp_lock_acquire>
 801b1c4:	4b1e      	ldr	r3, [pc, #120]	; (801b240 <__sfp+0x84>)
 801b1c6:	681e      	ldr	r6, [r3, #0]
 801b1c8:	69b3      	ldr	r3, [r6, #24]
 801b1ca:	b913      	cbnz	r3, 801b1d2 <__sfp+0x16>
 801b1cc:	4630      	mov	r0, r6
 801b1ce:	f7ff ffbd 	bl	801b14c <__sinit>
 801b1d2:	3648      	adds	r6, #72	; 0x48
 801b1d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b1d8:	3b01      	subs	r3, #1
 801b1da:	d503      	bpl.n	801b1e4 <__sfp+0x28>
 801b1dc:	6833      	ldr	r3, [r6, #0]
 801b1de:	b30b      	cbz	r3, 801b224 <__sfp+0x68>
 801b1e0:	6836      	ldr	r6, [r6, #0]
 801b1e2:	e7f7      	b.n	801b1d4 <__sfp+0x18>
 801b1e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b1e8:	b9d5      	cbnz	r5, 801b220 <__sfp+0x64>
 801b1ea:	4b16      	ldr	r3, [pc, #88]	; (801b244 <__sfp+0x88>)
 801b1ec:	60e3      	str	r3, [r4, #12]
 801b1ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b1f2:	6665      	str	r5, [r4, #100]	; 0x64
 801b1f4:	f000 f85e 	bl	801b2b4 <__retarget_lock_init_recursive>
 801b1f8:	f7ff ff96 	bl	801b128 <__sfp_lock_release>
 801b1fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b200:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b204:	6025      	str	r5, [r4, #0]
 801b206:	61a5      	str	r5, [r4, #24]
 801b208:	2208      	movs	r2, #8
 801b20a:	4629      	mov	r1, r5
 801b20c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b210:	f7fe f990 	bl	8019534 <memset>
 801b214:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b218:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b21c:	4620      	mov	r0, r4
 801b21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b220:	3468      	adds	r4, #104	; 0x68
 801b222:	e7d9      	b.n	801b1d8 <__sfp+0x1c>
 801b224:	2104      	movs	r1, #4
 801b226:	4638      	mov	r0, r7
 801b228:	f7ff ff62 	bl	801b0f0 <__sfmoreglue>
 801b22c:	4604      	mov	r4, r0
 801b22e:	6030      	str	r0, [r6, #0]
 801b230:	2800      	cmp	r0, #0
 801b232:	d1d5      	bne.n	801b1e0 <__sfp+0x24>
 801b234:	f7ff ff78 	bl	801b128 <__sfp_lock_release>
 801b238:	230c      	movs	r3, #12
 801b23a:	603b      	str	r3, [r7, #0]
 801b23c:	e7ee      	b.n	801b21c <__sfp+0x60>
 801b23e:	bf00      	nop
 801b240:	0801f484 	.word	0x0801f484
 801b244:	ffff0001 	.word	0xffff0001

0801b248 <fiprintf>:
 801b248:	b40e      	push	{r1, r2, r3}
 801b24a:	b503      	push	{r0, r1, lr}
 801b24c:	4601      	mov	r1, r0
 801b24e:	ab03      	add	r3, sp, #12
 801b250:	4805      	ldr	r0, [pc, #20]	; (801b268 <fiprintf+0x20>)
 801b252:	f853 2b04 	ldr.w	r2, [r3], #4
 801b256:	6800      	ldr	r0, [r0, #0]
 801b258:	9301      	str	r3, [sp, #4]
 801b25a:	f000 fc55 	bl	801bb08 <_vfiprintf_r>
 801b25e:	b002      	add	sp, #8
 801b260:	f85d eb04 	ldr.w	lr, [sp], #4
 801b264:	b003      	add	sp, #12
 801b266:	4770      	bx	lr
 801b268:	20000540 	.word	0x20000540

0801b26c <_fwalk_reent>:
 801b26c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b270:	4606      	mov	r6, r0
 801b272:	4688      	mov	r8, r1
 801b274:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b278:	2700      	movs	r7, #0
 801b27a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b27e:	f1b9 0901 	subs.w	r9, r9, #1
 801b282:	d505      	bpl.n	801b290 <_fwalk_reent+0x24>
 801b284:	6824      	ldr	r4, [r4, #0]
 801b286:	2c00      	cmp	r4, #0
 801b288:	d1f7      	bne.n	801b27a <_fwalk_reent+0xe>
 801b28a:	4638      	mov	r0, r7
 801b28c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b290:	89ab      	ldrh	r3, [r5, #12]
 801b292:	2b01      	cmp	r3, #1
 801b294:	d907      	bls.n	801b2a6 <_fwalk_reent+0x3a>
 801b296:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b29a:	3301      	adds	r3, #1
 801b29c:	d003      	beq.n	801b2a6 <_fwalk_reent+0x3a>
 801b29e:	4629      	mov	r1, r5
 801b2a0:	4630      	mov	r0, r6
 801b2a2:	47c0      	blx	r8
 801b2a4:	4307      	orrs	r7, r0
 801b2a6:	3568      	adds	r5, #104	; 0x68
 801b2a8:	e7e9      	b.n	801b27e <_fwalk_reent+0x12>
	...

0801b2ac <_localeconv_r>:
 801b2ac:	4800      	ldr	r0, [pc, #0]	; (801b2b0 <_localeconv_r+0x4>)
 801b2ae:	4770      	bx	lr
 801b2b0:	20000694 	.word	0x20000694

0801b2b4 <__retarget_lock_init_recursive>:
 801b2b4:	4770      	bx	lr

0801b2b6 <__retarget_lock_acquire_recursive>:
 801b2b6:	4770      	bx	lr

0801b2b8 <__retarget_lock_release_recursive>:
 801b2b8:	4770      	bx	lr

0801b2ba <__swhatbuf_r>:
 801b2ba:	b570      	push	{r4, r5, r6, lr}
 801b2bc:	460e      	mov	r6, r1
 801b2be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2c2:	2900      	cmp	r1, #0
 801b2c4:	b096      	sub	sp, #88	; 0x58
 801b2c6:	4614      	mov	r4, r2
 801b2c8:	461d      	mov	r5, r3
 801b2ca:	da07      	bge.n	801b2dc <__swhatbuf_r+0x22>
 801b2cc:	2300      	movs	r3, #0
 801b2ce:	602b      	str	r3, [r5, #0]
 801b2d0:	89b3      	ldrh	r3, [r6, #12]
 801b2d2:	061a      	lsls	r2, r3, #24
 801b2d4:	d410      	bmi.n	801b2f8 <__swhatbuf_r+0x3e>
 801b2d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b2da:	e00e      	b.n	801b2fa <__swhatbuf_r+0x40>
 801b2dc:	466a      	mov	r2, sp
 801b2de:	f000 fdf9 	bl	801bed4 <_fstat_r>
 801b2e2:	2800      	cmp	r0, #0
 801b2e4:	dbf2      	blt.n	801b2cc <__swhatbuf_r+0x12>
 801b2e6:	9a01      	ldr	r2, [sp, #4]
 801b2e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b2ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b2f0:	425a      	negs	r2, r3
 801b2f2:	415a      	adcs	r2, r3
 801b2f4:	602a      	str	r2, [r5, #0]
 801b2f6:	e7ee      	b.n	801b2d6 <__swhatbuf_r+0x1c>
 801b2f8:	2340      	movs	r3, #64	; 0x40
 801b2fa:	2000      	movs	r0, #0
 801b2fc:	6023      	str	r3, [r4, #0]
 801b2fe:	b016      	add	sp, #88	; 0x58
 801b300:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b304 <__smakebuf_r>:
 801b304:	898b      	ldrh	r3, [r1, #12]
 801b306:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b308:	079d      	lsls	r5, r3, #30
 801b30a:	4606      	mov	r6, r0
 801b30c:	460c      	mov	r4, r1
 801b30e:	d507      	bpl.n	801b320 <__smakebuf_r+0x1c>
 801b310:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b314:	6023      	str	r3, [r4, #0]
 801b316:	6123      	str	r3, [r4, #16]
 801b318:	2301      	movs	r3, #1
 801b31a:	6163      	str	r3, [r4, #20]
 801b31c:	b002      	add	sp, #8
 801b31e:	bd70      	pop	{r4, r5, r6, pc}
 801b320:	ab01      	add	r3, sp, #4
 801b322:	466a      	mov	r2, sp
 801b324:	f7ff ffc9 	bl	801b2ba <__swhatbuf_r>
 801b328:	9900      	ldr	r1, [sp, #0]
 801b32a:	4605      	mov	r5, r0
 801b32c:	4630      	mov	r0, r6
 801b32e:	f7fe f959 	bl	80195e4 <_malloc_r>
 801b332:	b948      	cbnz	r0, 801b348 <__smakebuf_r+0x44>
 801b334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b338:	059a      	lsls	r2, r3, #22
 801b33a:	d4ef      	bmi.n	801b31c <__smakebuf_r+0x18>
 801b33c:	f023 0303 	bic.w	r3, r3, #3
 801b340:	f043 0302 	orr.w	r3, r3, #2
 801b344:	81a3      	strh	r3, [r4, #12]
 801b346:	e7e3      	b.n	801b310 <__smakebuf_r+0xc>
 801b348:	4b0d      	ldr	r3, [pc, #52]	; (801b380 <__smakebuf_r+0x7c>)
 801b34a:	62b3      	str	r3, [r6, #40]	; 0x28
 801b34c:	89a3      	ldrh	r3, [r4, #12]
 801b34e:	6020      	str	r0, [r4, #0]
 801b350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b354:	81a3      	strh	r3, [r4, #12]
 801b356:	9b00      	ldr	r3, [sp, #0]
 801b358:	6163      	str	r3, [r4, #20]
 801b35a:	9b01      	ldr	r3, [sp, #4]
 801b35c:	6120      	str	r0, [r4, #16]
 801b35e:	b15b      	cbz	r3, 801b378 <__smakebuf_r+0x74>
 801b360:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b364:	4630      	mov	r0, r6
 801b366:	f000 fdc7 	bl	801bef8 <_isatty_r>
 801b36a:	b128      	cbz	r0, 801b378 <__smakebuf_r+0x74>
 801b36c:	89a3      	ldrh	r3, [r4, #12]
 801b36e:	f023 0303 	bic.w	r3, r3, #3
 801b372:	f043 0301 	orr.w	r3, r3, #1
 801b376:	81a3      	strh	r3, [r4, #12]
 801b378:	89a0      	ldrh	r0, [r4, #12]
 801b37a:	4305      	orrs	r5, r0
 801b37c:	81a5      	strh	r5, [r4, #12]
 801b37e:	e7cd      	b.n	801b31c <__smakebuf_r+0x18>
 801b380:	0801b0e5 	.word	0x0801b0e5

0801b384 <__malloc_lock>:
 801b384:	4801      	ldr	r0, [pc, #4]	; (801b38c <__malloc_lock+0x8>)
 801b386:	f7ff bf96 	b.w	801b2b6 <__retarget_lock_acquire_recursive>
 801b38a:	bf00      	nop
 801b38c:	2001b0b0 	.word	0x2001b0b0

0801b390 <__malloc_unlock>:
 801b390:	4801      	ldr	r0, [pc, #4]	; (801b398 <__malloc_unlock+0x8>)
 801b392:	f7ff bf91 	b.w	801b2b8 <__retarget_lock_release_recursive>
 801b396:	bf00      	nop
 801b398:	2001b0b0 	.word	0x2001b0b0

0801b39c <_Balloc>:
 801b39c:	b570      	push	{r4, r5, r6, lr}
 801b39e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b3a0:	4604      	mov	r4, r0
 801b3a2:	460d      	mov	r5, r1
 801b3a4:	b976      	cbnz	r6, 801b3c4 <_Balloc+0x28>
 801b3a6:	2010      	movs	r0, #16
 801b3a8:	f7fe f898 	bl	80194dc <malloc>
 801b3ac:	4602      	mov	r2, r0
 801b3ae:	6260      	str	r0, [r4, #36]	; 0x24
 801b3b0:	b920      	cbnz	r0, 801b3bc <_Balloc+0x20>
 801b3b2:	4b18      	ldr	r3, [pc, #96]	; (801b414 <_Balloc+0x78>)
 801b3b4:	4818      	ldr	r0, [pc, #96]	; (801b418 <_Balloc+0x7c>)
 801b3b6:	2166      	movs	r1, #102	; 0x66
 801b3b8:	f7fe ff16 	bl	801a1e8 <__assert_func>
 801b3bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b3c0:	6006      	str	r6, [r0, #0]
 801b3c2:	60c6      	str	r6, [r0, #12]
 801b3c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801b3c6:	68f3      	ldr	r3, [r6, #12]
 801b3c8:	b183      	cbz	r3, 801b3ec <_Balloc+0x50>
 801b3ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b3cc:	68db      	ldr	r3, [r3, #12]
 801b3ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b3d2:	b9b8      	cbnz	r0, 801b404 <_Balloc+0x68>
 801b3d4:	2101      	movs	r1, #1
 801b3d6:	fa01 f605 	lsl.w	r6, r1, r5
 801b3da:	1d72      	adds	r2, r6, #5
 801b3dc:	0092      	lsls	r2, r2, #2
 801b3de:	4620      	mov	r0, r4
 801b3e0:	f000 fb5a 	bl	801ba98 <_calloc_r>
 801b3e4:	b160      	cbz	r0, 801b400 <_Balloc+0x64>
 801b3e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b3ea:	e00e      	b.n	801b40a <_Balloc+0x6e>
 801b3ec:	2221      	movs	r2, #33	; 0x21
 801b3ee:	2104      	movs	r1, #4
 801b3f0:	4620      	mov	r0, r4
 801b3f2:	f000 fb51 	bl	801ba98 <_calloc_r>
 801b3f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b3f8:	60f0      	str	r0, [r6, #12]
 801b3fa:	68db      	ldr	r3, [r3, #12]
 801b3fc:	2b00      	cmp	r3, #0
 801b3fe:	d1e4      	bne.n	801b3ca <_Balloc+0x2e>
 801b400:	2000      	movs	r0, #0
 801b402:	bd70      	pop	{r4, r5, r6, pc}
 801b404:	6802      	ldr	r2, [r0, #0]
 801b406:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b40a:	2300      	movs	r3, #0
 801b40c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b410:	e7f7      	b.n	801b402 <_Balloc+0x66>
 801b412:	bf00      	nop
 801b414:	0801f4bc 	.word	0x0801f4bc
 801b418:	0801f64c 	.word	0x0801f64c

0801b41c <_Bfree>:
 801b41c:	b570      	push	{r4, r5, r6, lr}
 801b41e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b420:	4605      	mov	r5, r0
 801b422:	460c      	mov	r4, r1
 801b424:	b976      	cbnz	r6, 801b444 <_Bfree+0x28>
 801b426:	2010      	movs	r0, #16
 801b428:	f7fe f858 	bl	80194dc <malloc>
 801b42c:	4602      	mov	r2, r0
 801b42e:	6268      	str	r0, [r5, #36]	; 0x24
 801b430:	b920      	cbnz	r0, 801b43c <_Bfree+0x20>
 801b432:	4b09      	ldr	r3, [pc, #36]	; (801b458 <_Bfree+0x3c>)
 801b434:	4809      	ldr	r0, [pc, #36]	; (801b45c <_Bfree+0x40>)
 801b436:	218a      	movs	r1, #138	; 0x8a
 801b438:	f7fe fed6 	bl	801a1e8 <__assert_func>
 801b43c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b440:	6006      	str	r6, [r0, #0]
 801b442:	60c6      	str	r6, [r0, #12]
 801b444:	b13c      	cbz	r4, 801b456 <_Bfree+0x3a>
 801b446:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b448:	6862      	ldr	r2, [r4, #4]
 801b44a:	68db      	ldr	r3, [r3, #12]
 801b44c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b450:	6021      	str	r1, [r4, #0]
 801b452:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b456:	bd70      	pop	{r4, r5, r6, pc}
 801b458:	0801f4bc 	.word	0x0801f4bc
 801b45c:	0801f64c 	.word	0x0801f64c

0801b460 <__multadd>:
 801b460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b464:	690e      	ldr	r6, [r1, #16]
 801b466:	4607      	mov	r7, r0
 801b468:	4698      	mov	r8, r3
 801b46a:	460c      	mov	r4, r1
 801b46c:	f101 0014 	add.w	r0, r1, #20
 801b470:	2300      	movs	r3, #0
 801b472:	6805      	ldr	r5, [r0, #0]
 801b474:	b2a9      	uxth	r1, r5
 801b476:	fb02 8101 	mla	r1, r2, r1, r8
 801b47a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801b47e:	0c2d      	lsrs	r5, r5, #16
 801b480:	fb02 c505 	mla	r5, r2, r5, ip
 801b484:	b289      	uxth	r1, r1
 801b486:	3301      	adds	r3, #1
 801b488:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801b48c:	429e      	cmp	r6, r3
 801b48e:	f840 1b04 	str.w	r1, [r0], #4
 801b492:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801b496:	dcec      	bgt.n	801b472 <__multadd+0x12>
 801b498:	f1b8 0f00 	cmp.w	r8, #0
 801b49c:	d022      	beq.n	801b4e4 <__multadd+0x84>
 801b49e:	68a3      	ldr	r3, [r4, #8]
 801b4a0:	42b3      	cmp	r3, r6
 801b4a2:	dc19      	bgt.n	801b4d8 <__multadd+0x78>
 801b4a4:	6861      	ldr	r1, [r4, #4]
 801b4a6:	4638      	mov	r0, r7
 801b4a8:	3101      	adds	r1, #1
 801b4aa:	f7ff ff77 	bl	801b39c <_Balloc>
 801b4ae:	4605      	mov	r5, r0
 801b4b0:	b928      	cbnz	r0, 801b4be <__multadd+0x5e>
 801b4b2:	4602      	mov	r2, r0
 801b4b4:	4b0d      	ldr	r3, [pc, #52]	; (801b4ec <__multadd+0x8c>)
 801b4b6:	480e      	ldr	r0, [pc, #56]	; (801b4f0 <__multadd+0x90>)
 801b4b8:	21b5      	movs	r1, #181	; 0xb5
 801b4ba:	f7fe fe95 	bl	801a1e8 <__assert_func>
 801b4be:	6922      	ldr	r2, [r4, #16]
 801b4c0:	3202      	adds	r2, #2
 801b4c2:	f104 010c 	add.w	r1, r4, #12
 801b4c6:	0092      	lsls	r2, r2, #2
 801b4c8:	300c      	adds	r0, #12
 801b4ca:	f7fe f825 	bl	8019518 <memcpy>
 801b4ce:	4621      	mov	r1, r4
 801b4d0:	4638      	mov	r0, r7
 801b4d2:	f7ff ffa3 	bl	801b41c <_Bfree>
 801b4d6:	462c      	mov	r4, r5
 801b4d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801b4dc:	3601      	adds	r6, #1
 801b4de:	f8c3 8014 	str.w	r8, [r3, #20]
 801b4e2:	6126      	str	r6, [r4, #16]
 801b4e4:	4620      	mov	r0, r4
 801b4e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4ea:	bf00      	nop
 801b4ec:	0801f5da 	.word	0x0801f5da
 801b4f0:	0801f64c 	.word	0x0801f64c

0801b4f4 <__hi0bits>:
 801b4f4:	0c03      	lsrs	r3, r0, #16
 801b4f6:	041b      	lsls	r3, r3, #16
 801b4f8:	b9d3      	cbnz	r3, 801b530 <__hi0bits+0x3c>
 801b4fa:	0400      	lsls	r0, r0, #16
 801b4fc:	2310      	movs	r3, #16
 801b4fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b502:	bf04      	itt	eq
 801b504:	0200      	lsleq	r0, r0, #8
 801b506:	3308      	addeq	r3, #8
 801b508:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b50c:	bf04      	itt	eq
 801b50e:	0100      	lsleq	r0, r0, #4
 801b510:	3304      	addeq	r3, #4
 801b512:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b516:	bf04      	itt	eq
 801b518:	0080      	lsleq	r0, r0, #2
 801b51a:	3302      	addeq	r3, #2
 801b51c:	2800      	cmp	r0, #0
 801b51e:	db05      	blt.n	801b52c <__hi0bits+0x38>
 801b520:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801b524:	f103 0301 	add.w	r3, r3, #1
 801b528:	bf08      	it	eq
 801b52a:	2320      	moveq	r3, #32
 801b52c:	4618      	mov	r0, r3
 801b52e:	4770      	bx	lr
 801b530:	2300      	movs	r3, #0
 801b532:	e7e4      	b.n	801b4fe <__hi0bits+0xa>

0801b534 <__lo0bits>:
 801b534:	6803      	ldr	r3, [r0, #0]
 801b536:	f013 0207 	ands.w	r2, r3, #7
 801b53a:	4601      	mov	r1, r0
 801b53c:	d00b      	beq.n	801b556 <__lo0bits+0x22>
 801b53e:	07da      	lsls	r2, r3, #31
 801b540:	d424      	bmi.n	801b58c <__lo0bits+0x58>
 801b542:	0798      	lsls	r0, r3, #30
 801b544:	bf49      	itett	mi
 801b546:	085b      	lsrmi	r3, r3, #1
 801b548:	089b      	lsrpl	r3, r3, #2
 801b54a:	2001      	movmi	r0, #1
 801b54c:	600b      	strmi	r3, [r1, #0]
 801b54e:	bf5c      	itt	pl
 801b550:	600b      	strpl	r3, [r1, #0]
 801b552:	2002      	movpl	r0, #2
 801b554:	4770      	bx	lr
 801b556:	b298      	uxth	r0, r3
 801b558:	b9b0      	cbnz	r0, 801b588 <__lo0bits+0x54>
 801b55a:	0c1b      	lsrs	r3, r3, #16
 801b55c:	2010      	movs	r0, #16
 801b55e:	f013 0fff 	tst.w	r3, #255	; 0xff
 801b562:	bf04      	itt	eq
 801b564:	0a1b      	lsreq	r3, r3, #8
 801b566:	3008      	addeq	r0, #8
 801b568:	071a      	lsls	r2, r3, #28
 801b56a:	bf04      	itt	eq
 801b56c:	091b      	lsreq	r3, r3, #4
 801b56e:	3004      	addeq	r0, #4
 801b570:	079a      	lsls	r2, r3, #30
 801b572:	bf04      	itt	eq
 801b574:	089b      	lsreq	r3, r3, #2
 801b576:	3002      	addeq	r0, #2
 801b578:	07da      	lsls	r2, r3, #31
 801b57a:	d403      	bmi.n	801b584 <__lo0bits+0x50>
 801b57c:	085b      	lsrs	r3, r3, #1
 801b57e:	f100 0001 	add.w	r0, r0, #1
 801b582:	d005      	beq.n	801b590 <__lo0bits+0x5c>
 801b584:	600b      	str	r3, [r1, #0]
 801b586:	4770      	bx	lr
 801b588:	4610      	mov	r0, r2
 801b58a:	e7e8      	b.n	801b55e <__lo0bits+0x2a>
 801b58c:	2000      	movs	r0, #0
 801b58e:	4770      	bx	lr
 801b590:	2020      	movs	r0, #32
 801b592:	4770      	bx	lr

0801b594 <__i2b>:
 801b594:	b510      	push	{r4, lr}
 801b596:	460c      	mov	r4, r1
 801b598:	2101      	movs	r1, #1
 801b59a:	f7ff feff 	bl	801b39c <_Balloc>
 801b59e:	4602      	mov	r2, r0
 801b5a0:	b928      	cbnz	r0, 801b5ae <__i2b+0x1a>
 801b5a2:	4b05      	ldr	r3, [pc, #20]	; (801b5b8 <__i2b+0x24>)
 801b5a4:	4805      	ldr	r0, [pc, #20]	; (801b5bc <__i2b+0x28>)
 801b5a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801b5aa:	f7fe fe1d 	bl	801a1e8 <__assert_func>
 801b5ae:	2301      	movs	r3, #1
 801b5b0:	6144      	str	r4, [r0, #20]
 801b5b2:	6103      	str	r3, [r0, #16]
 801b5b4:	bd10      	pop	{r4, pc}
 801b5b6:	bf00      	nop
 801b5b8:	0801f5da 	.word	0x0801f5da
 801b5bc:	0801f64c 	.word	0x0801f64c

0801b5c0 <__multiply>:
 801b5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5c4:	4614      	mov	r4, r2
 801b5c6:	690a      	ldr	r2, [r1, #16]
 801b5c8:	6923      	ldr	r3, [r4, #16]
 801b5ca:	429a      	cmp	r2, r3
 801b5cc:	bfb8      	it	lt
 801b5ce:	460b      	movlt	r3, r1
 801b5d0:	460d      	mov	r5, r1
 801b5d2:	bfbc      	itt	lt
 801b5d4:	4625      	movlt	r5, r4
 801b5d6:	461c      	movlt	r4, r3
 801b5d8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801b5dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801b5e0:	68ab      	ldr	r3, [r5, #8]
 801b5e2:	6869      	ldr	r1, [r5, #4]
 801b5e4:	eb0a 0709 	add.w	r7, sl, r9
 801b5e8:	42bb      	cmp	r3, r7
 801b5ea:	b085      	sub	sp, #20
 801b5ec:	bfb8      	it	lt
 801b5ee:	3101      	addlt	r1, #1
 801b5f0:	f7ff fed4 	bl	801b39c <_Balloc>
 801b5f4:	b930      	cbnz	r0, 801b604 <__multiply+0x44>
 801b5f6:	4602      	mov	r2, r0
 801b5f8:	4b42      	ldr	r3, [pc, #264]	; (801b704 <__multiply+0x144>)
 801b5fa:	4843      	ldr	r0, [pc, #268]	; (801b708 <__multiply+0x148>)
 801b5fc:	f240 115d 	movw	r1, #349	; 0x15d
 801b600:	f7fe fdf2 	bl	801a1e8 <__assert_func>
 801b604:	f100 0614 	add.w	r6, r0, #20
 801b608:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801b60c:	4633      	mov	r3, r6
 801b60e:	2200      	movs	r2, #0
 801b610:	4543      	cmp	r3, r8
 801b612:	d31e      	bcc.n	801b652 <__multiply+0x92>
 801b614:	f105 0c14 	add.w	ip, r5, #20
 801b618:	f104 0314 	add.w	r3, r4, #20
 801b61c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801b620:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801b624:	9202      	str	r2, [sp, #8]
 801b626:	ebac 0205 	sub.w	r2, ip, r5
 801b62a:	3a15      	subs	r2, #21
 801b62c:	f022 0203 	bic.w	r2, r2, #3
 801b630:	3204      	adds	r2, #4
 801b632:	f105 0115 	add.w	r1, r5, #21
 801b636:	458c      	cmp	ip, r1
 801b638:	bf38      	it	cc
 801b63a:	2204      	movcc	r2, #4
 801b63c:	9201      	str	r2, [sp, #4]
 801b63e:	9a02      	ldr	r2, [sp, #8]
 801b640:	9303      	str	r3, [sp, #12]
 801b642:	429a      	cmp	r2, r3
 801b644:	d808      	bhi.n	801b658 <__multiply+0x98>
 801b646:	2f00      	cmp	r7, #0
 801b648:	dc55      	bgt.n	801b6f6 <__multiply+0x136>
 801b64a:	6107      	str	r7, [r0, #16]
 801b64c:	b005      	add	sp, #20
 801b64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b652:	f843 2b04 	str.w	r2, [r3], #4
 801b656:	e7db      	b.n	801b610 <__multiply+0x50>
 801b658:	f8b3 a000 	ldrh.w	sl, [r3]
 801b65c:	f1ba 0f00 	cmp.w	sl, #0
 801b660:	d020      	beq.n	801b6a4 <__multiply+0xe4>
 801b662:	f105 0e14 	add.w	lr, r5, #20
 801b666:	46b1      	mov	r9, r6
 801b668:	2200      	movs	r2, #0
 801b66a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801b66e:	f8d9 b000 	ldr.w	fp, [r9]
 801b672:	b2a1      	uxth	r1, r4
 801b674:	fa1f fb8b 	uxth.w	fp, fp
 801b678:	fb0a b101 	mla	r1, sl, r1, fp
 801b67c:	4411      	add	r1, r2
 801b67e:	f8d9 2000 	ldr.w	r2, [r9]
 801b682:	0c24      	lsrs	r4, r4, #16
 801b684:	0c12      	lsrs	r2, r2, #16
 801b686:	fb0a 2404 	mla	r4, sl, r4, r2
 801b68a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801b68e:	b289      	uxth	r1, r1
 801b690:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801b694:	45f4      	cmp	ip, lr
 801b696:	f849 1b04 	str.w	r1, [r9], #4
 801b69a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801b69e:	d8e4      	bhi.n	801b66a <__multiply+0xaa>
 801b6a0:	9901      	ldr	r1, [sp, #4]
 801b6a2:	5072      	str	r2, [r6, r1]
 801b6a4:	9a03      	ldr	r2, [sp, #12]
 801b6a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801b6aa:	3304      	adds	r3, #4
 801b6ac:	f1b9 0f00 	cmp.w	r9, #0
 801b6b0:	d01f      	beq.n	801b6f2 <__multiply+0x132>
 801b6b2:	6834      	ldr	r4, [r6, #0]
 801b6b4:	f105 0114 	add.w	r1, r5, #20
 801b6b8:	46b6      	mov	lr, r6
 801b6ba:	f04f 0a00 	mov.w	sl, #0
 801b6be:	880a      	ldrh	r2, [r1, #0]
 801b6c0:	f8be b002 	ldrh.w	fp, [lr, #2]
 801b6c4:	fb09 b202 	mla	r2, r9, r2, fp
 801b6c8:	4492      	add	sl, r2
 801b6ca:	b2a4      	uxth	r4, r4
 801b6cc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801b6d0:	f84e 4b04 	str.w	r4, [lr], #4
 801b6d4:	f851 4b04 	ldr.w	r4, [r1], #4
 801b6d8:	f8be 2000 	ldrh.w	r2, [lr]
 801b6dc:	0c24      	lsrs	r4, r4, #16
 801b6de:	fb09 2404 	mla	r4, r9, r4, r2
 801b6e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801b6e6:	458c      	cmp	ip, r1
 801b6e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801b6ec:	d8e7      	bhi.n	801b6be <__multiply+0xfe>
 801b6ee:	9a01      	ldr	r2, [sp, #4]
 801b6f0:	50b4      	str	r4, [r6, r2]
 801b6f2:	3604      	adds	r6, #4
 801b6f4:	e7a3      	b.n	801b63e <__multiply+0x7e>
 801b6f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b6fa:	2b00      	cmp	r3, #0
 801b6fc:	d1a5      	bne.n	801b64a <__multiply+0x8a>
 801b6fe:	3f01      	subs	r7, #1
 801b700:	e7a1      	b.n	801b646 <__multiply+0x86>
 801b702:	bf00      	nop
 801b704:	0801f5da 	.word	0x0801f5da
 801b708:	0801f64c 	.word	0x0801f64c

0801b70c <__pow5mult>:
 801b70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b710:	4615      	mov	r5, r2
 801b712:	f012 0203 	ands.w	r2, r2, #3
 801b716:	4606      	mov	r6, r0
 801b718:	460f      	mov	r7, r1
 801b71a:	d007      	beq.n	801b72c <__pow5mult+0x20>
 801b71c:	4c25      	ldr	r4, [pc, #148]	; (801b7b4 <__pow5mult+0xa8>)
 801b71e:	3a01      	subs	r2, #1
 801b720:	2300      	movs	r3, #0
 801b722:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b726:	f7ff fe9b 	bl	801b460 <__multadd>
 801b72a:	4607      	mov	r7, r0
 801b72c:	10ad      	asrs	r5, r5, #2
 801b72e:	d03d      	beq.n	801b7ac <__pow5mult+0xa0>
 801b730:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801b732:	b97c      	cbnz	r4, 801b754 <__pow5mult+0x48>
 801b734:	2010      	movs	r0, #16
 801b736:	f7fd fed1 	bl	80194dc <malloc>
 801b73a:	4602      	mov	r2, r0
 801b73c:	6270      	str	r0, [r6, #36]	; 0x24
 801b73e:	b928      	cbnz	r0, 801b74c <__pow5mult+0x40>
 801b740:	4b1d      	ldr	r3, [pc, #116]	; (801b7b8 <__pow5mult+0xac>)
 801b742:	481e      	ldr	r0, [pc, #120]	; (801b7bc <__pow5mult+0xb0>)
 801b744:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801b748:	f7fe fd4e 	bl	801a1e8 <__assert_func>
 801b74c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b750:	6004      	str	r4, [r0, #0]
 801b752:	60c4      	str	r4, [r0, #12]
 801b754:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801b758:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b75c:	b94c      	cbnz	r4, 801b772 <__pow5mult+0x66>
 801b75e:	f240 2171 	movw	r1, #625	; 0x271
 801b762:	4630      	mov	r0, r6
 801b764:	f7ff ff16 	bl	801b594 <__i2b>
 801b768:	2300      	movs	r3, #0
 801b76a:	f8c8 0008 	str.w	r0, [r8, #8]
 801b76e:	4604      	mov	r4, r0
 801b770:	6003      	str	r3, [r0, #0]
 801b772:	f04f 0900 	mov.w	r9, #0
 801b776:	07eb      	lsls	r3, r5, #31
 801b778:	d50a      	bpl.n	801b790 <__pow5mult+0x84>
 801b77a:	4639      	mov	r1, r7
 801b77c:	4622      	mov	r2, r4
 801b77e:	4630      	mov	r0, r6
 801b780:	f7ff ff1e 	bl	801b5c0 <__multiply>
 801b784:	4639      	mov	r1, r7
 801b786:	4680      	mov	r8, r0
 801b788:	4630      	mov	r0, r6
 801b78a:	f7ff fe47 	bl	801b41c <_Bfree>
 801b78e:	4647      	mov	r7, r8
 801b790:	106d      	asrs	r5, r5, #1
 801b792:	d00b      	beq.n	801b7ac <__pow5mult+0xa0>
 801b794:	6820      	ldr	r0, [r4, #0]
 801b796:	b938      	cbnz	r0, 801b7a8 <__pow5mult+0x9c>
 801b798:	4622      	mov	r2, r4
 801b79a:	4621      	mov	r1, r4
 801b79c:	4630      	mov	r0, r6
 801b79e:	f7ff ff0f 	bl	801b5c0 <__multiply>
 801b7a2:	6020      	str	r0, [r4, #0]
 801b7a4:	f8c0 9000 	str.w	r9, [r0]
 801b7a8:	4604      	mov	r4, r0
 801b7aa:	e7e4      	b.n	801b776 <__pow5mult+0x6a>
 801b7ac:	4638      	mov	r0, r7
 801b7ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b7b2:	bf00      	nop
 801b7b4:	0801f7a0 	.word	0x0801f7a0
 801b7b8:	0801f4bc 	.word	0x0801f4bc
 801b7bc:	0801f64c 	.word	0x0801f64c

0801b7c0 <__lshift>:
 801b7c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b7c4:	460c      	mov	r4, r1
 801b7c6:	6849      	ldr	r1, [r1, #4]
 801b7c8:	6923      	ldr	r3, [r4, #16]
 801b7ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b7ce:	68a3      	ldr	r3, [r4, #8]
 801b7d0:	4607      	mov	r7, r0
 801b7d2:	4691      	mov	r9, r2
 801b7d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b7d8:	f108 0601 	add.w	r6, r8, #1
 801b7dc:	42b3      	cmp	r3, r6
 801b7de:	db0b      	blt.n	801b7f8 <__lshift+0x38>
 801b7e0:	4638      	mov	r0, r7
 801b7e2:	f7ff fddb 	bl	801b39c <_Balloc>
 801b7e6:	4605      	mov	r5, r0
 801b7e8:	b948      	cbnz	r0, 801b7fe <__lshift+0x3e>
 801b7ea:	4602      	mov	r2, r0
 801b7ec:	4b28      	ldr	r3, [pc, #160]	; (801b890 <__lshift+0xd0>)
 801b7ee:	4829      	ldr	r0, [pc, #164]	; (801b894 <__lshift+0xd4>)
 801b7f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 801b7f4:	f7fe fcf8 	bl	801a1e8 <__assert_func>
 801b7f8:	3101      	adds	r1, #1
 801b7fa:	005b      	lsls	r3, r3, #1
 801b7fc:	e7ee      	b.n	801b7dc <__lshift+0x1c>
 801b7fe:	2300      	movs	r3, #0
 801b800:	f100 0114 	add.w	r1, r0, #20
 801b804:	f100 0210 	add.w	r2, r0, #16
 801b808:	4618      	mov	r0, r3
 801b80a:	4553      	cmp	r3, sl
 801b80c:	db33      	blt.n	801b876 <__lshift+0xb6>
 801b80e:	6920      	ldr	r0, [r4, #16]
 801b810:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b814:	f104 0314 	add.w	r3, r4, #20
 801b818:	f019 091f 	ands.w	r9, r9, #31
 801b81c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b820:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b824:	d02b      	beq.n	801b87e <__lshift+0xbe>
 801b826:	f1c9 0e20 	rsb	lr, r9, #32
 801b82a:	468a      	mov	sl, r1
 801b82c:	2200      	movs	r2, #0
 801b82e:	6818      	ldr	r0, [r3, #0]
 801b830:	fa00 f009 	lsl.w	r0, r0, r9
 801b834:	4302      	orrs	r2, r0
 801b836:	f84a 2b04 	str.w	r2, [sl], #4
 801b83a:	f853 2b04 	ldr.w	r2, [r3], #4
 801b83e:	459c      	cmp	ip, r3
 801b840:	fa22 f20e 	lsr.w	r2, r2, lr
 801b844:	d8f3      	bhi.n	801b82e <__lshift+0x6e>
 801b846:	ebac 0304 	sub.w	r3, ip, r4
 801b84a:	3b15      	subs	r3, #21
 801b84c:	f023 0303 	bic.w	r3, r3, #3
 801b850:	3304      	adds	r3, #4
 801b852:	f104 0015 	add.w	r0, r4, #21
 801b856:	4584      	cmp	ip, r0
 801b858:	bf38      	it	cc
 801b85a:	2304      	movcc	r3, #4
 801b85c:	50ca      	str	r2, [r1, r3]
 801b85e:	b10a      	cbz	r2, 801b864 <__lshift+0xa4>
 801b860:	f108 0602 	add.w	r6, r8, #2
 801b864:	3e01      	subs	r6, #1
 801b866:	4638      	mov	r0, r7
 801b868:	612e      	str	r6, [r5, #16]
 801b86a:	4621      	mov	r1, r4
 801b86c:	f7ff fdd6 	bl	801b41c <_Bfree>
 801b870:	4628      	mov	r0, r5
 801b872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b876:	f842 0f04 	str.w	r0, [r2, #4]!
 801b87a:	3301      	adds	r3, #1
 801b87c:	e7c5      	b.n	801b80a <__lshift+0x4a>
 801b87e:	3904      	subs	r1, #4
 801b880:	f853 2b04 	ldr.w	r2, [r3], #4
 801b884:	f841 2f04 	str.w	r2, [r1, #4]!
 801b888:	459c      	cmp	ip, r3
 801b88a:	d8f9      	bhi.n	801b880 <__lshift+0xc0>
 801b88c:	e7ea      	b.n	801b864 <__lshift+0xa4>
 801b88e:	bf00      	nop
 801b890:	0801f5da 	.word	0x0801f5da
 801b894:	0801f64c 	.word	0x0801f64c

0801b898 <__mcmp>:
 801b898:	b530      	push	{r4, r5, lr}
 801b89a:	6902      	ldr	r2, [r0, #16]
 801b89c:	690c      	ldr	r4, [r1, #16]
 801b89e:	1b12      	subs	r2, r2, r4
 801b8a0:	d10e      	bne.n	801b8c0 <__mcmp+0x28>
 801b8a2:	f100 0314 	add.w	r3, r0, #20
 801b8a6:	3114      	adds	r1, #20
 801b8a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801b8ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801b8b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801b8b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801b8b8:	42a5      	cmp	r5, r4
 801b8ba:	d003      	beq.n	801b8c4 <__mcmp+0x2c>
 801b8bc:	d305      	bcc.n	801b8ca <__mcmp+0x32>
 801b8be:	2201      	movs	r2, #1
 801b8c0:	4610      	mov	r0, r2
 801b8c2:	bd30      	pop	{r4, r5, pc}
 801b8c4:	4283      	cmp	r3, r0
 801b8c6:	d3f3      	bcc.n	801b8b0 <__mcmp+0x18>
 801b8c8:	e7fa      	b.n	801b8c0 <__mcmp+0x28>
 801b8ca:	f04f 32ff 	mov.w	r2, #4294967295
 801b8ce:	e7f7      	b.n	801b8c0 <__mcmp+0x28>

0801b8d0 <__mdiff>:
 801b8d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8d4:	460c      	mov	r4, r1
 801b8d6:	4606      	mov	r6, r0
 801b8d8:	4611      	mov	r1, r2
 801b8da:	4620      	mov	r0, r4
 801b8dc:	4617      	mov	r7, r2
 801b8de:	f7ff ffdb 	bl	801b898 <__mcmp>
 801b8e2:	1e05      	subs	r5, r0, #0
 801b8e4:	d110      	bne.n	801b908 <__mdiff+0x38>
 801b8e6:	4629      	mov	r1, r5
 801b8e8:	4630      	mov	r0, r6
 801b8ea:	f7ff fd57 	bl	801b39c <_Balloc>
 801b8ee:	b930      	cbnz	r0, 801b8fe <__mdiff+0x2e>
 801b8f0:	4b39      	ldr	r3, [pc, #228]	; (801b9d8 <__mdiff+0x108>)
 801b8f2:	4602      	mov	r2, r0
 801b8f4:	f240 2132 	movw	r1, #562	; 0x232
 801b8f8:	4838      	ldr	r0, [pc, #224]	; (801b9dc <__mdiff+0x10c>)
 801b8fa:	f7fe fc75 	bl	801a1e8 <__assert_func>
 801b8fe:	2301      	movs	r3, #1
 801b900:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b904:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b908:	bfa4      	itt	ge
 801b90a:	463b      	movge	r3, r7
 801b90c:	4627      	movge	r7, r4
 801b90e:	4630      	mov	r0, r6
 801b910:	6879      	ldr	r1, [r7, #4]
 801b912:	bfa6      	itte	ge
 801b914:	461c      	movge	r4, r3
 801b916:	2500      	movge	r5, #0
 801b918:	2501      	movlt	r5, #1
 801b91a:	f7ff fd3f 	bl	801b39c <_Balloc>
 801b91e:	b920      	cbnz	r0, 801b92a <__mdiff+0x5a>
 801b920:	4b2d      	ldr	r3, [pc, #180]	; (801b9d8 <__mdiff+0x108>)
 801b922:	4602      	mov	r2, r0
 801b924:	f44f 7110 	mov.w	r1, #576	; 0x240
 801b928:	e7e6      	b.n	801b8f8 <__mdiff+0x28>
 801b92a:	693e      	ldr	r6, [r7, #16]
 801b92c:	60c5      	str	r5, [r0, #12]
 801b92e:	6925      	ldr	r5, [r4, #16]
 801b930:	f107 0114 	add.w	r1, r7, #20
 801b934:	f104 0914 	add.w	r9, r4, #20
 801b938:	f100 0e14 	add.w	lr, r0, #20
 801b93c:	f107 0210 	add.w	r2, r7, #16
 801b940:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801b944:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801b948:	46f2      	mov	sl, lr
 801b94a:	2700      	movs	r7, #0
 801b94c:	f859 3b04 	ldr.w	r3, [r9], #4
 801b950:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801b954:	fa1f f883 	uxth.w	r8, r3
 801b958:	fa17 f78b 	uxtah	r7, r7, fp
 801b95c:	0c1b      	lsrs	r3, r3, #16
 801b95e:	eba7 0808 	sub.w	r8, r7, r8
 801b962:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801b966:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801b96a:	fa1f f888 	uxth.w	r8, r8
 801b96e:	141f      	asrs	r7, r3, #16
 801b970:	454d      	cmp	r5, r9
 801b972:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801b976:	f84a 3b04 	str.w	r3, [sl], #4
 801b97a:	d8e7      	bhi.n	801b94c <__mdiff+0x7c>
 801b97c:	1b2b      	subs	r3, r5, r4
 801b97e:	3b15      	subs	r3, #21
 801b980:	f023 0303 	bic.w	r3, r3, #3
 801b984:	3304      	adds	r3, #4
 801b986:	3415      	adds	r4, #21
 801b988:	42a5      	cmp	r5, r4
 801b98a:	bf38      	it	cc
 801b98c:	2304      	movcc	r3, #4
 801b98e:	4419      	add	r1, r3
 801b990:	4473      	add	r3, lr
 801b992:	469e      	mov	lr, r3
 801b994:	460d      	mov	r5, r1
 801b996:	4565      	cmp	r5, ip
 801b998:	d30e      	bcc.n	801b9b8 <__mdiff+0xe8>
 801b99a:	f10c 0203 	add.w	r2, ip, #3
 801b99e:	1a52      	subs	r2, r2, r1
 801b9a0:	f022 0203 	bic.w	r2, r2, #3
 801b9a4:	3903      	subs	r1, #3
 801b9a6:	458c      	cmp	ip, r1
 801b9a8:	bf38      	it	cc
 801b9aa:	2200      	movcc	r2, #0
 801b9ac:	441a      	add	r2, r3
 801b9ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801b9b2:	b17b      	cbz	r3, 801b9d4 <__mdiff+0x104>
 801b9b4:	6106      	str	r6, [r0, #16]
 801b9b6:	e7a5      	b.n	801b904 <__mdiff+0x34>
 801b9b8:	f855 8b04 	ldr.w	r8, [r5], #4
 801b9bc:	fa17 f488 	uxtah	r4, r7, r8
 801b9c0:	1422      	asrs	r2, r4, #16
 801b9c2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801b9c6:	b2a4      	uxth	r4, r4
 801b9c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801b9cc:	f84e 4b04 	str.w	r4, [lr], #4
 801b9d0:	1417      	asrs	r7, r2, #16
 801b9d2:	e7e0      	b.n	801b996 <__mdiff+0xc6>
 801b9d4:	3e01      	subs	r6, #1
 801b9d6:	e7ea      	b.n	801b9ae <__mdiff+0xde>
 801b9d8:	0801f5da 	.word	0x0801f5da
 801b9dc:	0801f64c 	.word	0x0801f64c

0801b9e0 <__d2b>:
 801b9e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b9e4:	4689      	mov	r9, r1
 801b9e6:	2101      	movs	r1, #1
 801b9e8:	ec57 6b10 	vmov	r6, r7, d0
 801b9ec:	4690      	mov	r8, r2
 801b9ee:	f7ff fcd5 	bl	801b39c <_Balloc>
 801b9f2:	4604      	mov	r4, r0
 801b9f4:	b930      	cbnz	r0, 801ba04 <__d2b+0x24>
 801b9f6:	4602      	mov	r2, r0
 801b9f8:	4b25      	ldr	r3, [pc, #148]	; (801ba90 <__d2b+0xb0>)
 801b9fa:	4826      	ldr	r0, [pc, #152]	; (801ba94 <__d2b+0xb4>)
 801b9fc:	f240 310a 	movw	r1, #778	; 0x30a
 801ba00:	f7fe fbf2 	bl	801a1e8 <__assert_func>
 801ba04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801ba08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801ba0c:	bb35      	cbnz	r5, 801ba5c <__d2b+0x7c>
 801ba0e:	2e00      	cmp	r6, #0
 801ba10:	9301      	str	r3, [sp, #4]
 801ba12:	d028      	beq.n	801ba66 <__d2b+0x86>
 801ba14:	4668      	mov	r0, sp
 801ba16:	9600      	str	r6, [sp, #0]
 801ba18:	f7ff fd8c 	bl	801b534 <__lo0bits>
 801ba1c:	9900      	ldr	r1, [sp, #0]
 801ba1e:	b300      	cbz	r0, 801ba62 <__d2b+0x82>
 801ba20:	9a01      	ldr	r2, [sp, #4]
 801ba22:	f1c0 0320 	rsb	r3, r0, #32
 801ba26:	fa02 f303 	lsl.w	r3, r2, r3
 801ba2a:	430b      	orrs	r3, r1
 801ba2c:	40c2      	lsrs	r2, r0
 801ba2e:	6163      	str	r3, [r4, #20]
 801ba30:	9201      	str	r2, [sp, #4]
 801ba32:	9b01      	ldr	r3, [sp, #4]
 801ba34:	61a3      	str	r3, [r4, #24]
 801ba36:	2b00      	cmp	r3, #0
 801ba38:	bf14      	ite	ne
 801ba3a:	2202      	movne	r2, #2
 801ba3c:	2201      	moveq	r2, #1
 801ba3e:	6122      	str	r2, [r4, #16]
 801ba40:	b1d5      	cbz	r5, 801ba78 <__d2b+0x98>
 801ba42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801ba46:	4405      	add	r5, r0
 801ba48:	f8c9 5000 	str.w	r5, [r9]
 801ba4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801ba50:	f8c8 0000 	str.w	r0, [r8]
 801ba54:	4620      	mov	r0, r4
 801ba56:	b003      	add	sp, #12
 801ba58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ba5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ba60:	e7d5      	b.n	801ba0e <__d2b+0x2e>
 801ba62:	6161      	str	r1, [r4, #20]
 801ba64:	e7e5      	b.n	801ba32 <__d2b+0x52>
 801ba66:	a801      	add	r0, sp, #4
 801ba68:	f7ff fd64 	bl	801b534 <__lo0bits>
 801ba6c:	9b01      	ldr	r3, [sp, #4]
 801ba6e:	6163      	str	r3, [r4, #20]
 801ba70:	2201      	movs	r2, #1
 801ba72:	6122      	str	r2, [r4, #16]
 801ba74:	3020      	adds	r0, #32
 801ba76:	e7e3      	b.n	801ba40 <__d2b+0x60>
 801ba78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ba7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801ba80:	f8c9 0000 	str.w	r0, [r9]
 801ba84:	6918      	ldr	r0, [r3, #16]
 801ba86:	f7ff fd35 	bl	801b4f4 <__hi0bits>
 801ba8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ba8e:	e7df      	b.n	801ba50 <__d2b+0x70>
 801ba90:	0801f5da 	.word	0x0801f5da
 801ba94:	0801f64c 	.word	0x0801f64c

0801ba98 <_calloc_r>:
 801ba98:	b513      	push	{r0, r1, r4, lr}
 801ba9a:	434a      	muls	r2, r1
 801ba9c:	4611      	mov	r1, r2
 801ba9e:	9201      	str	r2, [sp, #4]
 801baa0:	f7fd fda0 	bl	80195e4 <_malloc_r>
 801baa4:	4604      	mov	r4, r0
 801baa6:	b118      	cbz	r0, 801bab0 <_calloc_r+0x18>
 801baa8:	9a01      	ldr	r2, [sp, #4]
 801baaa:	2100      	movs	r1, #0
 801baac:	f7fd fd42 	bl	8019534 <memset>
 801bab0:	4620      	mov	r0, r4
 801bab2:	b002      	add	sp, #8
 801bab4:	bd10      	pop	{r4, pc}

0801bab6 <__sfputc_r>:
 801bab6:	6893      	ldr	r3, [r2, #8]
 801bab8:	3b01      	subs	r3, #1
 801baba:	2b00      	cmp	r3, #0
 801babc:	b410      	push	{r4}
 801babe:	6093      	str	r3, [r2, #8]
 801bac0:	da08      	bge.n	801bad4 <__sfputc_r+0x1e>
 801bac2:	6994      	ldr	r4, [r2, #24]
 801bac4:	42a3      	cmp	r3, r4
 801bac6:	db01      	blt.n	801bacc <__sfputc_r+0x16>
 801bac8:	290a      	cmp	r1, #10
 801baca:	d103      	bne.n	801bad4 <__sfputc_r+0x1e>
 801bacc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bad0:	f7fe baca 	b.w	801a068 <__swbuf_r>
 801bad4:	6813      	ldr	r3, [r2, #0]
 801bad6:	1c58      	adds	r0, r3, #1
 801bad8:	6010      	str	r0, [r2, #0]
 801bada:	7019      	strb	r1, [r3, #0]
 801badc:	4608      	mov	r0, r1
 801bade:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bae2:	4770      	bx	lr

0801bae4 <__sfputs_r>:
 801bae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bae6:	4606      	mov	r6, r0
 801bae8:	460f      	mov	r7, r1
 801baea:	4614      	mov	r4, r2
 801baec:	18d5      	adds	r5, r2, r3
 801baee:	42ac      	cmp	r4, r5
 801baf0:	d101      	bne.n	801baf6 <__sfputs_r+0x12>
 801baf2:	2000      	movs	r0, #0
 801baf4:	e007      	b.n	801bb06 <__sfputs_r+0x22>
 801baf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bafa:	463a      	mov	r2, r7
 801bafc:	4630      	mov	r0, r6
 801bafe:	f7ff ffda 	bl	801bab6 <__sfputc_r>
 801bb02:	1c43      	adds	r3, r0, #1
 801bb04:	d1f3      	bne.n	801baee <__sfputs_r+0xa>
 801bb06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801bb08 <_vfiprintf_r>:
 801bb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb0c:	460d      	mov	r5, r1
 801bb0e:	b09d      	sub	sp, #116	; 0x74
 801bb10:	4614      	mov	r4, r2
 801bb12:	4698      	mov	r8, r3
 801bb14:	4606      	mov	r6, r0
 801bb16:	b118      	cbz	r0, 801bb20 <_vfiprintf_r+0x18>
 801bb18:	6983      	ldr	r3, [r0, #24]
 801bb1a:	b90b      	cbnz	r3, 801bb20 <_vfiprintf_r+0x18>
 801bb1c:	f7ff fb16 	bl	801b14c <__sinit>
 801bb20:	4b89      	ldr	r3, [pc, #548]	; (801bd48 <_vfiprintf_r+0x240>)
 801bb22:	429d      	cmp	r5, r3
 801bb24:	d11b      	bne.n	801bb5e <_vfiprintf_r+0x56>
 801bb26:	6875      	ldr	r5, [r6, #4]
 801bb28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bb2a:	07d9      	lsls	r1, r3, #31
 801bb2c:	d405      	bmi.n	801bb3a <_vfiprintf_r+0x32>
 801bb2e:	89ab      	ldrh	r3, [r5, #12]
 801bb30:	059a      	lsls	r2, r3, #22
 801bb32:	d402      	bmi.n	801bb3a <_vfiprintf_r+0x32>
 801bb34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bb36:	f7ff fbbe 	bl	801b2b6 <__retarget_lock_acquire_recursive>
 801bb3a:	89ab      	ldrh	r3, [r5, #12]
 801bb3c:	071b      	lsls	r3, r3, #28
 801bb3e:	d501      	bpl.n	801bb44 <_vfiprintf_r+0x3c>
 801bb40:	692b      	ldr	r3, [r5, #16]
 801bb42:	b9eb      	cbnz	r3, 801bb80 <_vfiprintf_r+0x78>
 801bb44:	4629      	mov	r1, r5
 801bb46:	4630      	mov	r0, r6
 801bb48:	f7fe fae0 	bl	801a10c <__swsetup_r>
 801bb4c:	b1c0      	cbz	r0, 801bb80 <_vfiprintf_r+0x78>
 801bb4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bb50:	07dc      	lsls	r4, r3, #31
 801bb52:	d50e      	bpl.n	801bb72 <_vfiprintf_r+0x6a>
 801bb54:	f04f 30ff 	mov.w	r0, #4294967295
 801bb58:	b01d      	add	sp, #116	; 0x74
 801bb5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb5e:	4b7b      	ldr	r3, [pc, #492]	; (801bd4c <_vfiprintf_r+0x244>)
 801bb60:	429d      	cmp	r5, r3
 801bb62:	d101      	bne.n	801bb68 <_vfiprintf_r+0x60>
 801bb64:	68b5      	ldr	r5, [r6, #8]
 801bb66:	e7df      	b.n	801bb28 <_vfiprintf_r+0x20>
 801bb68:	4b79      	ldr	r3, [pc, #484]	; (801bd50 <_vfiprintf_r+0x248>)
 801bb6a:	429d      	cmp	r5, r3
 801bb6c:	bf08      	it	eq
 801bb6e:	68f5      	ldreq	r5, [r6, #12]
 801bb70:	e7da      	b.n	801bb28 <_vfiprintf_r+0x20>
 801bb72:	89ab      	ldrh	r3, [r5, #12]
 801bb74:	0598      	lsls	r0, r3, #22
 801bb76:	d4ed      	bmi.n	801bb54 <_vfiprintf_r+0x4c>
 801bb78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bb7a:	f7ff fb9d 	bl	801b2b8 <__retarget_lock_release_recursive>
 801bb7e:	e7e9      	b.n	801bb54 <_vfiprintf_r+0x4c>
 801bb80:	2300      	movs	r3, #0
 801bb82:	9309      	str	r3, [sp, #36]	; 0x24
 801bb84:	2320      	movs	r3, #32
 801bb86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bb8a:	f8cd 800c 	str.w	r8, [sp, #12]
 801bb8e:	2330      	movs	r3, #48	; 0x30
 801bb90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801bd54 <_vfiprintf_r+0x24c>
 801bb94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bb98:	f04f 0901 	mov.w	r9, #1
 801bb9c:	4623      	mov	r3, r4
 801bb9e:	469a      	mov	sl, r3
 801bba0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bba4:	b10a      	cbz	r2, 801bbaa <_vfiprintf_r+0xa2>
 801bba6:	2a25      	cmp	r2, #37	; 0x25
 801bba8:	d1f9      	bne.n	801bb9e <_vfiprintf_r+0x96>
 801bbaa:	ebba 0b04 	subs.w	fp, sl, r4
 801bbae:	d00b      	beq.n	801bbc8 <_vfiprintf_r+0xc0>
 801bbb0:	465b      	mov	r3, fp
 801bbb2:	4622      	mov	r2, r4
 801bbb4:	4629      	mov	r1, r5
 801bbb6:	4630      	mov	r0, r6
 801bbb8:	f7ff ff94 	bl	801bae4 <__sfputs_r>
 801bbbc:	3001      	adds	r0, #1
 801bbbe:	f000 80aa 	beq.w	801bd16 <_vfiprintf_r+0x20e>
 801bbc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bbc4:	445a      	add	r2, fp
 801bbc6:	9209      	str	r2, [sp, #36]	; 0x24
 801bbc8:	f89a 3000 	ldrb.w	r3, [sl]
 801bbcc:	2b00      	cmp	r3, #0
 801bbce:	f000 80a2 	beq.w	801bd16 <_vfiprintf_r+0x20e>
 801bbd2:	2300      	movs	r3, #0
 801bbd4:	f04f 32ff 	mov.w	r2, #4294967295
 801bbd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bbdc:	f10a 0a01 	add.w	sl, sl, #1
 801bbe0:	9304      	str	r3, [sp, #16]
 801bbe2:	9307      	str	r3, [sp, #28]
 801bbe4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bbe8:	931a      	str	r3, [sp, #104]	; 0x68
 801bbea:	4654      	mov	r4, sl
 801bbec:	2205      	movs	r2, #5
 801bbee:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bbf2:	4858      	ldr	r0, [pc, #352]	; (801bd54 <_vfiprintf_r+0x24c>)
 801bbf4:	f7e4 faf4 	bl	80001e0 <memchr>
 801bbf8:	9a04      	ldr	r2, [sp, #16]
 801bbfa:	b9d8      	cbnz	r0, 801bc34 <_vfiprintf_r+0x12c>
 801bbfc:	06d1      	lsls	r1, r2, #27
 801bbfe:	bf44      	itt	mi
 801bc00:	2320      	movmi	r3, #32
 801bc02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bc06:	0713      	lsls	r3, r2, #28
 801bc08:	bf44      	itt	mi
 801bc0a:	232b      	movmi	r3, #43	; 0x2b
 801bc0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bc10:	f89a 3000 	ldrb.w	r3, [sl]
 801bc14:	2b2a      	cmp	r3, #42	; 0x2a
 801bc16:	d015      	beq.n	801bc44 <_vfiprintf_r+0x13c>
 801bc18:	9a07      	ldr	r2, [sp, #28]
 801bc1a:	4654      	mov	r4, sl
 801bc1c:	2000      	movs	r0, #0
 801bc1e:	f04f 0c0a 	mov.w	ip, #10
 801bc22:	4621      	mov	r1, r4
 801bc24:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bc28:	3b30      	subs	r3, #48	; 0x30
 801bc2a:	2b09      	cmp	r3, #9
 801bc2c:	d94e      	bls.n	801bccc <_vfiprintf_r+0x1c4>
 801bc2e:	b1b0      	cbz	r0, 801bc5e <_vfiprintf_r+0x156>
 801bc30:	9207      	str	r2, [sp, #28]
 801bc32:	e014      	b.n	801bc5e <_vfiprintf_r+0x156>
 801bc34:	eba0 0308 	sub.w	r3, r0, r8
 801bc38:	fa09 f303 	lsl.w	r3, r9, r3
 801bc3c:	4313      	orrs	r3, r2
 801bc3e:	9304      	str	r3, [sp, #16]
 801bc40:	46a2      	mov	sl, r4
 801bc42:	e7d2      	b.n	801bbea <_vfiprintf_r+0xe2>
 801bc44:	9b03      	ldr	r3, [sp, #12]
 801bc46:	1d19      	adds	r1, r3, #4
 801bc48:	681b      	ldr	r3, [r3, #0]
 801bc4a:	9103      	str	r1, [sp, #12]
 801bc4c:	2b00      	cmp	r3, #0
 801bc4e:	bfbb      	ittet	lt
 801bc50:	425b      	neglt	r3, r3
 801bc52:	f042 0202 	orrlt.w	r2, r2, #2
 801bc56:	9307      	strge	r3, [sp, #28]
 801bc58:	9307      	strlt	r3, [sp, #28]
 801bc5a:	bfb8      	it	lt
 801bc5c:	9204      	strlt	r2, [sp, #16]
 801bc5e:	7823      	ldrb	r3, [r4, #0]
 801bc60:	2b2e      	cmp	r3, #46	; 0x2e
 801bc62:	d10c      	bne.n	801bc7e <_vfiprintf_r+0x176>
 801bc64:	7863      	ldrb	r3, [r4, #1]
 801bc66:	2b2a      	cmp	r3, #42	; 0x2a
 801bc68:	d135      	bne.n	801bcd6 <_vfiprintf_r+0x1ce>
 801bc6a:	9b03      	ldr	r3, [sp, #12]
 801bc6c:	1d1a      	adds	r2, r3, #4
 801bc6e:	681b      	ldr	r3, [r3, #0]
 801bc70:	9203      	str	r2, [sp, #12]
 801bc72:	2b00      	cmp	r3, #0
 801bc74:	bfb8      	it	lt
 801bc76:	f04f 33ff 	movlt.w	r3, #4294967295
 801bc7a:	3402      	adds	r4, #2
 801bc7c:	9305      	str	r3, [sp, #20]
 801bc7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801bd64 <_vfiprintf_r+0x25c>
 801bc82:	7821      	ldrb	r1, [r4, #0]
 801bc84:	2203      	movs	r2, #3
 801bc86:	4650      	mov	r0, sl
 801bc88:	f7e4 faaa 	bl	80001e0 <memchr>
 801bc8c:	b140      	cbz	r0, 801bca0 <_vfiprintf_r+0x198>
 801bc8e:	2340      	movs	r3, #64	; 0x40
 801bc90:	eba0 000a 	sub.w	r0, r0, sl
 801bc94:	fa03 f000 	lsl.w	r0, r3, r0
 801bc98:	9b04      	ldr	r3, [sp, #16]
 801bc9a:	4303      	orrs	r3, r0
 801bc9c:	3401      	adds	r4, #1
 801bc9e:	9304      	str	r3, [sp, #16]
 801bca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bca4:	482c      	ldr	r0, [pc, #176]	; (801bd58 <_vfiprintf_r+0x250>)
 801bca6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bcaa:	2206      	movs	r2, #6
 801bcac:	f7e4 fa98 	bl	80001e0 <memchr>
 801bcb0:	2800      	cmp	r0, #0
 801bcb2:	d03f      	beq.n	801bd34 <_vfiprintf_r+0x22c>
 801bcb4:	4b29      	ldr	r3, [pc, #164]	; (801bd5c <_vfiprintf_r+0x254>)
 801bcb6:	bb1b      	cbnz	r3, 801bd00 <_vfiprintf_r+0x1f8>
 801bcb8:	9b03      	ldr	r3, [sp, #12]
 801bcba:	3307      	adds	r3, #7
 801bcbc:	f023 0307 	bic.w	r3, r3, #7
 801bcc0:	3308      	adds	r3, #8
 801bcc2:	9303      	str	r3, [sp, #12]
 801bcc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcc6:	443b      	add	r3, r7
 801bcc8:	9309      	str	r3, [sp, #36]	; 0x24
 801bcca:	e767      	b.n	801bb9c <_vfiprintf_r+0x94>
 801bccc:	fb0c 3202 	mla	r2, ip, r2, r3
 801bcd0:	460c      	mov	r4, r1
 801bcd2:	2001      	movs	r0, #1
 801bcd4:	e7a5      	b.n	801bc22 <_vfiprintf_r+0x11a>
 801bcd6:	2300      	movs	r3, #0
 801bcd8:	3401      	adds	r4, #1
 801bcda:	9305      	str	r3, [sp, #20]
 801bcdc:	4619      	mov	r1, r3
 801bcde:	f04f 0c0a 	mov.w	ip, #10
 801bce2:	4620      	mov	r0, r4
 801bce4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bce8:	3a30      	subs	r2, #48	; 0x30
 801bcea:	2a09      	cmp	r2, #9
 801bcec:	d903      	bls.n	801bcf6 <_vfiprintf_r+0x1ee>
 801bcee:	2b00      	cmp	r3, #0
 801bcf0:	d0c5      	beq.n	801bc7e <_vfiprintf_r+0x176>
 801bcf2:	9105      	str	r1, [sp, #20]
 801bcf4:	e7c3      	b.n	801bc7e <_vfiprintf_r+0x176>
 801bcf6:	fb0c 2101 	mla	r1, ip, r1, r2
 801bcfa:	4604      	mov	r4, r0
 801bcfc:	2301      	movs	r3, #1
 801bcfe:	e7f0      	b.n	801bce2 <_vfiprintf_r+0x1da>
 801bd00:	ab03      	add	r3, sp, #12
 801bd02:	9300      	str	r3, [sp, #0]
 801bd04:	462a      	mov	r2, r5
 801bd06:	4b16      	ldr	r3, [pc, #88]	; (801bd60 <_vfiprintf_r+0x258>)
 801bd08:	a904      	add	r1, sp, #16
 801bd0a:	4630      	mov	r0, r6
 801bd0c:	f7fd fd64 	bl	80197d8 <_printf_float>
 801bd10:	4607      	mov	r7, r0
 801bd12:	1c78      	adds	r0, r7, #1
 801bd14:	d1d6      	bne.n	801bcc4 <_vfiprintf_r+0x1bc>
 801bd16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bd18:	07d9      	lsls	r1, r3, #31
 801bd1a:	d405      	bmi.n	801bd28 <_vfiprintf_r+0x220>
 801bd1c:	89ab      	ldrh	r3, [r5, #12]
 801bd1e:	059a      	lsls	r2, r3, #22
 801bd20:	d402      	bmi.n	801bd28 <_vfiprintf_r+0x220>
 801bd22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bd24:	f7ff fac8 	bl	801b2b8 <__retarget_lock_release_recursive>
 801bd28:	89ab      	ldrh	r3, [r5, #12]
 801bd2a:	065b      	lsls	r3, r3, #25
 801bd2c:	f53f af12 	bmi.w	801bb54 <_vfiprintf_r+0x4c>
 801bd30:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bd32:	e711      	b.n	801bb58 <_vfiprintf_r+0x50>
 801bd34:	ab03      	add	r3, sp, #12
 801bd36:	9300      	str	r3, [sp, #0]
 801bd38:	462a      	mov	r2, r5
 801bd3a:	4b09      	ldr	r3, [pc, #36]	; (801bd60 <_vfiprintf_r+0x258>)
 801bd3c:	a904      	add	r1, sp, #16
 801bd3e:	4630      	mov	r0, r6
 801bd40:	f7fd ffee 	bl	8019d20 <_printf_i>
 801bd44:	e7e4      	b.n	801bd10 <_vfiprintf_r+0x208>
 801bd46:	bf00      	nop
 801bd48:	0801f60c 	.word	0x0801f60c
 801bd4c:	0801f62c 	.word	0x0801f62c
 801bd50:	0801f5ec 	.word	0x0801f5ec
 801bd54:	0801f7ac 	.word	0x0801f7ac
 801bd58:	0801f7b6 	.word	0x0801f7b6
 801bd5c:	080197d9 	.word	0x080197d9
 801bd60:	0801bae5 	.word	0x0801bae5
 801bd64:	0801f7b2 	.word	0x0801f7b2

0801bd68 <_putc_r>:
 801bd68:	b570      	push	{r4, r5, r6, lr}
 801bd6a:	460d      	mov	r5, r1
 801bd6c:	4614      	mov	r4, r2
 801bd6e:	4606      	mov	r6, r0
 801bd70:	b118      	cbz	r0, 801bd7a <_putc_r+0x12>
 801bd72:	6983      	ldr	r3, [r0, #24]
 801bd74:	b90b      	cbnz	r3, 801bd7a <_putc_r+0x12>
 801bd76:	f7ff f9e9 	bl	801b14c <__sinit>
 801bd7a:	4b1c      	ldr	r3, [pc, #112]	; (801bdec <_putc_r+0x84>)
 801bd7c:	429c      	cmp	r4, r3
 801bd7e:	d124      	bne.n	801bdca <_putc_r+0x62>
 801bd80:	6874      	ldr	r4, [r6, #4]
 801bd82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bd84:	07d8      	lsls	r0, r3, #31
 801bd86:	d405      	bmi.n	801bd94 <_putc_r+0x2c>
 801bd88:	89a3      	ldrh	r3, [r4, #12]
 801bd8a:	0599      	lsls	r1, r3, #22
 801bd8c:	d402      	bmi.n	801bd94 <_putc_r+0x2c>
 801bd8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bd90:	f7ff fa91 	bl	801b2b6 <__retarget_lock_acquire_recursive>
 801bd94:	68a3      	ldr	r3, [r4, #8]
 801bd96:	3b01      	subs	r3, #1
 801bd98:	2b00      	cmp	r3, #0
 801bd9a:	60a3      	str	r3, [r4, #8]
 801bd9c:	da05      	bge.n	801bdaa <_putc_r+0x42>
 801bd9e:	69a2      	ldr	r2, [r4, #24]
 801bda0:	4293      	cmp	r3, r2
 801bda2:	db1c      	blt.n	801bdde <_putc_r+0x76>
 801bda4:	b2eb      	uxtb	r3, r5
 801bda6:	2b0a      	cmp	r3, #10
 801bda8:	d019      	beq.n	801bdde <_putc_r+0x76>
 801bdaa:	6823      	ldr	r3, [r4, #0]
 801bdac:	1c5a      	adds	r2, r3, #1
 801bdae:	6022      	str	r2, [r4, #0]
 801bdb0:	701d      	strb	r5, [r3, #0]
 801bdb2:	b2ed      	uxtb	r5, r5
 801bdb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bdb6:	07da      	lsls	r2, r3, #31
 801bdb8:	d405      	bmi.n	801bdc6 <_putc_r+0x5e>
 801bdba:	89a3      	ldrh	r3, [r4, #12]
 801bdbc:	059b      	lsls	r3, r3, #22
 801bdbe:	d402      	bmi.n	801bdc6 <_putc_r+0x5e>
 801bdc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bdc2:	f7ff fa79 	bl	801b2b8 <__retarget_lock_release_recursive>
 801bdc6:	4628      	mov	r0, r5
 801bdc8:	bd70      	pop	{r4, r5, r6, pc}
 801bdca:	4b09      	ldr	r3, [pc, #36]	; (801bdf0 <_putc_r+0x88>)
 801bdcc:	429c      	cmp	r4, r3
 801bdce:	d101      	bne.n	801bdd4 <_putc_r+0x6c>
 801bdd0:	68b4      	ldr	r4, [r6, #8]
 801bdd2:	e7d6      	b.n	801bd82 <_putc_r+0x1a>
 801bdd4:	4b07      	ldr	r3, [pc, #28]	; (801bdf4 <_putc_r+0x8c>)
 801bdd6:	429c      	cmp	r4, r3
 801bdd8:	bf08      	it	eq
 801bdda:	68f4      	ldreq	r4, [r6, #12]
 801bddc:	e7d1      	b.n	801bd82 <_putc_r+0x1a>
 801bdde:	4629      	mov	r1, r5
 801bde0:	4622      	mov	r2, r4
 801bde2:	4630      	mov	r0, r6
 801bde4:	f7fe f940 	bl	801a068 <__swbuf_r>
 801bde8:	4605      	mov	r5, r0
 801bdea:	e7e3      	b.n	801bdb4 <_putc_r+0x4c>
 801bdec:	0801f60c 	.word	0x0801f60c
 801bdf0:	0801f62c 	.word	0x0801f62c
 801bdf4:	0801f5ec 	.word	0x0801f5ec

0801bdf8 <__sread>:
 801bdf8:	b510      	push	{r4, lr}
 801bdfa:	460c      	mov	r4, r1
 801bdfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801be00:	f000 f8ae 	bl	801bf60 <_read_r>
 801be04:	2800      	cmp	r0, #0
 801be06:	bfab      	itete	ge
 801be08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801be0a:	89a3      	ldrhlt	r3, [r4, #12]
 801be0c:	181b      	addge	r3, r3, r0
 801be0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801be12:	bfac      	ite	ge
 801be14:	6563      	strge	r3, [r4, #84]	; 0x54
 801be16:	81a3      	strhlt	r3, [r4, #12]
 801be18:	bd10      	pop	{r4, pc}

0801be1a <__swrite>:
 801be1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be1e:	461f      	mov	r7, r3
 801be20:	898b      	ldrh	r3, [r1, #12]
 801be22:	05db      	lsls	r3, r3, #23
 801be24:	4605      	mov	r5, r0
 801be26:	460c      	mov	r4, r1
 801be28:	4616      	mov	r6, r2
 801be2a:	d505      	bpl.n	801be38 <__swrite+0x1e>
 801be2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801be30:	2302      	movs	r3, #2
 801be32:	2200      	movs	r2, #0
 801be34:	f000 f870 	bl	801bf18 <_lseek_r>
 801be38:	89a3      	ldrh	r3, [r4, #12]
 801be3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801be3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801be42:	81a3      	strh	r3, [r4, #12]
 801be44:	4632      	mov	r2, r6
 801be46:	463b      	mov	r3, r7
 801be48:	4628      	mov	r0, r5
 801be4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801be4e:	f000 b817 	b.w	801be80 <_write_r>

0801be52 <__sseek>:
 801be52:	b510      	push	{r4, lr}
 801be54:	460c      	mov	r4, r1
 801be56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801be5a:	f000 f85d 	bl	801bf18 <_lseek_r>
 801be5e:	1c43      	adds	r3, r0, #1
 801be60:	89a3      	ldrh	r3, [r4, #12]
 801be62:	bf15      	itete	ne
 801be64:	6560      	strne	r0, [r4, #84]	; 0x54
 801be66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801be6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801be6e:	81a3      	strheq	r3, [r4, #12]
 801be70:	bf18      	it	ne
 801be72:	81a3      	strhne	r3, [r4, #12]
 801be74:	bd10      	pop	{r4, pc}

0801be76 <__sclose>:
 801be76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801be7a:	f000 b81b 	b.w	801beb4 <_close_r>
	...

0801be80 <_write_r>:
 801be80:	b538      	push	{r3, r4, r5, lr}
 801be82:	4d07      	ldr	r5, [pc, #28]	; (801bea0 <_write_r+0x20>)
 801be84:	4604      	mov	r4, r0
 801be86:	4608      	mov	r0, r1
 801be88:	4611      	mov	r1, r2
 801be8a:	2200      	movs	r2, #0
 801be8c:	602a      	str	r2, [r5, #0]
 801be8e:	461a      	mov	r2, r3
 801be90:	f7e6 f8c3 	bl	800201a <_write>
 801be94:	1c43      	adds	r3, r0, #1
 801be96:	d102      	bne.n	801be9e <_write_r+0x1e>
 801be98:	682b      	ldr	r3, [r5, #0]
 801be9a:	b103      	cbz	r3, 801be9e <_write_r+0x1e>
 801be9c:	6023      	str	r3, [r4, #0]
 801be9e:	bd38      	pop	{r3, r4, r5, pc}
 801bea0:	2001b0a8 	.word	0x2001b0a8

0801bea4 <abort>:
 801bea4:	b508      	push	{r3, lr}
 801bea6:	2006      	movs	r0, #6
 801bea8:	f000 f894 	bl	801bfd4 <raise>
 801beac:	2001      	movs	r0, #1
 801beae:	f7e6 f88d 	bl	8001fcc <_exit>
	...

0801beb4 <_close_r>:
 801beb4:	b538      	push	{r3, r4, r5, lr}
 801beb6:	4d06      	ldr	r5, [pc, #24]	; (801bed0 <_close_r+0x1c>)
 801beb8:	2300      	movs	r3, #0
 801beba:	4604      	mov	r4, r0
 801bebc:	4608      	mov	r0, r1
 801bebe:	602b      	str	r3, [r5, #0]
 801bec0:	f7e6 f8c7 	bl	8002052 <_close>
 801bec4:	1c43      	adds	r3, r0, #1
 801bec6:	d102      	bne.n	801bece <_close_r+0x1a>
 801bec8:	682b      	ldr	r3, [r5, #0]
 801beca:	b103      	cbz	r3, 801bece <_close_r+0x1a>
 801becc:	6023      	str	r3, [r4, #0]
 801bece:	bd38      	pop	{r3, r4, r5, pc}
 801bed0:	2001b0a8 	.word	0x2001b0a8

0801bed4 <_fstat_r>:
 801bed4:	b538      	push	{r3, r4, r5, lr}
 801bed6:	4d07      	ldr	r5, [pc, #28]	; (801bef4 <_fstat_r+0x20>)
 801bed8:	2300      	movs	r3, #0
 801beda:	4604      	mov	r4, r0
 801bedc:	4608      	mov	r0, r1
 801bede:	4611      	mov	r1, r2
 801bee0:	602b      	str	r3, [r5, #0]
 801bee2:	f7e6 f8c2 	bl	800206a <_fstat>
 801bee6:	1c43      	adds	r3, r0, #1
 801bee8:	d102      	bne.n	801bef0 <_fstat_r+0x1c>
 801beea:	682b      	ldr	r3, [r5, #0]
 801beec:	b103      	cbz	r3, 801bef0 <_fstat_r+0x1c>
 801beee:	6023      	str	r3, [r4, #0]
 801bef0:	bd38      	pop	{r3, r4, r5, pc}
 801bef2:	bf00      	nop
 801bef4:	2001b0a8 	.word	0x2001b0a8

0801bef8 <_isatty_r>:
 801bef8:	b538      	push	{r3, r4, r5, lr}
 801befa:	4d06      	ldr	r5, [pc, #24]	; (801bf14 <_isatty_r+0x1c>)
 801befc:	2300      	movs	r3, #0
 801befe:	4604      	mov	r4, r0
 801bf00:	4608      	mov	r0, r1
 801bf02:	602b      	str	r3, [r5, #0]
 801bf04:	f7e6 f8c1 	bl	800208a <_isatty>
 801bf08:	1c43      	adds	r3, r0, #1
 801bf0a:	d102      	bne.n	801bf12 <_isatty_r+0x1a>
 801bf0c:	682b      	ldr	r3, [r5, #0]
 801bf0e:	b103      	cbz	r3, 801bf12 <_isatty_r+0x1a>
 801bf10:	6023      	str	r3, [r4, #0]
 801bf12:	bd38      	pop	{r3, r4, r5, pc}
 801bf14:	2001b0a8 	.word	0x2001b0a8

0801bf18 <_lseek_r>:
 801bf18:	b538      	push	{r3, r4, r5, lr}
 801bf1a:	4d07      	ldr	r5, [pc, #28]	; (801bf38 <_lseek_r+0x20>)
 801bf1c:	4604      	mov	r4, r0
 801bf1e:	4608      	mov	r0, r1
 801bf20:	4611      	mov	r1, r2
 801bf22:	2200      	movs	r2, #0
 801bf24:	602a      	str	r2, [r5, #0]
 801bf26:	461a      	mov	r2, r3
 801bf28:	f7e6 f8ba 	bl	80020a0 <_lseek>
 801bf2c:	1c43      	adds	r3, r0, #1
 801bf2e:	d102      	bne.n	801bf36 <_lseek_r+0x1e>
 801bf30:	682b      	ldr	r3, [r5, #0]
 801bf32:	b103      	cbz	r3, 801bf36 <_lseek_r+0x1e>
 801bf34:	6023      	str	r3, [r4, #0]
 801bf36:	bd38      	pop	{r3, r4, r5, pc}
 801bf38:	2001b0a8 	.word	0x2001b0a8

0801bf3c <__ascii_mbtowc>:
 801bf3c:	b082      	sub	sp, #8
 801bf3e:	b901      	cbnz	r1, 801bf42 <__ascii_mbtowc+0x6>
 801bf40:	a901      	add	r1, sp, #4
 801bf42:	b142      	cbz	r2, 801bf56 <__ascii_mbtowc+0x1a>
 801bf44:	b14b      	cbz	r3, 801bf5a <__ascii_mbtowc+0x1e>
 801bf46:	7813      	ldrb	r3, [r2, #0]
 801bf48:	600b      	str	r3, [r1, #0]
 801bf4a:	7812      	ldrb	r2, [r2, #0]
 801bf4c:	1e10      	subs	r0, r2, #0
 801bf4e:	bf18      	it	ne
 801bf50:	2001      	movne	r0, #1
 801bf52:	b002      	add	sp, #8
 801bf54:	4770      	bx	lr
 801bf56:	4610      	mov	r0, r2
 801bf58:	e7fb      	b.n	801bf52 <__ascii_mbtowc+0x16>
 801bf5a:	f06f 0001 	mvn.w	r0, #1
 801bf5e:	e7f8      	b.n	801bf52 <__ascii_mbtowc+0x16>

0801bf60 <_read_r>:
 801bf60:	b538      	push	{r3, r4, r5, lr}
 801bf62:	4d07      	ldr	r5, [pc, #28]	; (801bf80 <_read_r+0x20>)
 801bf64:	4604      	mov	r4, r0
 801bf66:	4608      	mov	r0, r1
 801bf68:	4611      	mov	r1, r2
 801bf6a:	2200      	movs	r2, #0
 801bf6c:	602a      	str	r2, [r5, #0]
 801bf6e:	461a      	mov	r2, r3
 801bf70:	f7e6 f836 	bl	8001fe0 <_read>
 801bf74:	1c43      	adds	r3, r0, #1
 801bf76:	d102      	bne.n	801bf7e <_read_r+0x1e>
 801bf78:	682b      	ldr	r3, [r5, #0]
 801bf7a:	b103      	cbz	r3, 801bf7e <_read_r+0x1e>
 801bf7c:	6023      	str	r3, [r4, #0]
 801bf7e:	bd38      	pop	{r3, r4, r5, pc}
 801bf80:	2001b0a8 	.word	0x2001b0a8

0801bf84 <_raise_r>:
 801bf84:	291f      	cmp	r1, #31
 801bf86:	b538      	push	{r3, r4, r5, lr}
 801bf88:	4604      	mov	r4, r0
 801bf8a:	460d      	mov	r5, r1
 801bf8c:	d904      	bls.n	801bf98 <_raise_r+0x14>
 801bf8e:	2316      	movs	r3, #22
 801bf90:	6003      	str	r3, [r0, #0]
 801bf92:	f04f 30ff 	mov.w	r0, #4294967295
 801bf96:	bd38      	pop	{r3, r4, r5, pc}
 801bf98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801bf9a:	b112      	cbz	r2, 801bfa2 <_raise_r+0x1e>
 801bf9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bfa0:	b94b      	cbnz	r3, 801bfb6 <_raise_r+0x32>
 801bfa2:	4620      	mov	r0, r4
 801bfa4:	f000 f830 	bl	801c008 <_getpid_r>
 801bfa8:	462a      	mov	r2, r5
 801bfaa:	4601      	mov	r1, r0
 801bfac:	4620      	mov	r0, r4
 801bfae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bfb2:	f000 b817 	b.w	801bfe4 <_kill_r>
 801bfb6:	2b01      	cmp	r3, #1
 801bfb8:	d00a      	beq.n	801bfd0 <_raise_r+0x4c>
 801bfba:	1c59      	adds	r1, r3, #1
 801bfbc:	d103      	bne.n	801bfc6 <_raise_r+0x42>
 801bfbe:	2316      	movs	r3, #22
 801bfc0:	6003      	str	r3, [r0, #0]
 801bfc2:	2001      	movs	r0, #1
 801bfc4:	e7e7      	b.n	801bf96 <_raise_r+0x12>
 801bfc6:	2400      	movs	r4, #0
 801bfc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801bfcc:	4628      	mov	r0, r5
 801bfce:	4798      	blx	r3
 801bfd0:	2000      	movs	r0, #0
 801bfd2:	e7e0      	b.n	801bf96 <_raise_r+0x12>

0801bfd4 <raise>:
 801bfd4:	4b02      	ldr	r3, [pc, #8]	; (801bfe0 <raise+0xc>)
 801bfd6:	4601      	mov	r1, r0
 801bfd8:	6818      	ldr	r0, [r3, #0]
 801bfda:	f7ff bfd3 	b.w	801bf84 <_raise_r>
 801bfde:	bf00      	nop
 801bfe0:	20000540 	.word	0x20000540

0801bfe4 <_kill_r>:
 801bfe4:	b538      	push	{r3, r4, r5, lr}
 801bfe6:	4d07      	ldr	r5, [pc, #28]	; (801c004 <_kill_r+0x20>)
 801bfe8:	2300      	movs	r3, #0
 801bfea:	4604      	mov	r4, r0
 801bfec:	4608      	mov	r0, r1
 801bfee:	4611      	mov	r1, r2
 801bff0:	602b      	str	r3, [r5, #0]
 801bff2:	f7e5 ffd9 	bl	8001fa8 <_kill>
 801bff6:	1c43      	adds	r3, r0, #1
 801bff8:	d102      	bne.n	801c000 <_kill_r+0x1c>
 801bffa:	682b      	ldr	r3, [r5, #0]
 801bffc:	b103      	cbz	r3, 801c000 <_kill_r+0x1c>
 801bffe:	6023      	str	r3, [r4, #0]
 801c000:	bd38      	pop	{r3, r4, r5, pc}
 801c002:	bf00      	nop
 801c004:	2001b0a8 	.word	0x2001b0a8

0801c008 <_getpid_r>:
 801c008:	f7e5 bfc6 	b.w	8001f98 <_getpid>

0801c00c <__ascii_wctomb>:
 801c00c:	b149      	cbz	r1, 801c022 <__ascii_wctomb+0x16>
 801c00e:	2aff      	cmp	r2, #255	; 0xff
 801c010:	bf85      	ittet	hi
 801c012:	238a      	movhi	r3, #138	; 0x8a
 801c014:	6003      	strhi	r3, [r0, #0]
 801c016:	700a      	strbls	r2, [r1, #0]
 801c018:	f04f 30ff 	movhi.w	r0, #4294967295
 801c01c:	bf98      	it	ls
 801c01e:	2001      	movls	r0, #1
 801c020:	4770      	bx	lr
 801c022:	4608      	mov	r0, r1
 801c024:	4770      	bx	lr
	...

0801c028 <_init>:
 801c028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c02a:	bf00      	nop
 801c02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c02e:	bc08      	pop	{r3}
 801c030:	469e      	mov	lr, r3
 801c032:	4770      	bx	lr

0801c034 <_fini>:
 801c034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c036:	bf00      	nop
 801c038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c03a:	bc08      	pop	{r3}
 801c03c:	469e      	mov	lr, r3
 801c03e:	4770      	bx	lr
